
Coordinate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf08  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0800c0d0  0800c0d0  0000d0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c680  0800c680  0000e06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c680  0800c680  0000d680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c688  0800c688  0000e06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c688  0800c688  0000d688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c690  0800c690  0000d690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800c694  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c68  20000070  0800c700  0000e070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001cd8  0800c700  0000ecd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a1be  00000000  00000000  0000e09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035bf  00000000  00000000  0002825a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  0002b820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000103e  00000000  00000000  0002ccc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025876  00000000  00000000  0002dcfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e13  00000000  00000000  00053574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc7f8  00000000  00000000  0006c387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148b7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006310  00000000  00000000  00148bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0014eed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800c0b8 	.word	0x0800c0b8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	0800c0b8 	.word	0x0800c0b8

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bc8:	f000 b96a 	b.w	8000ea0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	460c      	mov	r4, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14e      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	458c      	cmp	ip, r1
 8000bf4:	4686      	mov	lr, r0
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	d962      	bls.n	8000cc2 <__udivmoddi4+0xde>
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	4091      	lsls	r1, r2
 8000c04:	fa20 f303 	lsr.w	r3, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f f68c 	uxth.w	r6, ip
 8000c1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c22:	fb07 1114 	mls	r1, r7, r4, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb04 f106 	mul.w	r1, r4, r6
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c3a:	f080 8112 	bcs.w	8000e62 <__udivmoddi4+0x27e>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 810f 	bls.w	8000e62 <__udivmoddi4+0x27e>
 8000c44:	3c02      	subs	r4, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a59      	subs	r1, r3, r1
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c52:	fb07 1110 	mls	r1, r7, r0, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb00 f606 	mul.w	r6, r0, r6
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x94>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c6a:	f080 80fc 	bcs.w	8000e66 <__udivmoddi4+0x282>
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	f240 80f9 	bls.w	8000e66 <__udivmoddi4+0x282>
 8000c74:	4463      	add	r3, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa6>
 8000c82:	40d3      	lsrs	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xba>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb4>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x150>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xcc>
 8000caa:	4290      	cmp	r0, r2
 8000cac:	f0c0 80f0 	bcc.w	8000e90 <__udivmoddi4+0x2ac>
 8000cb0:	1a86      	subs	r6, r0, r2
 8000cb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d0e6      	beq.n	8000c8a <__udivmoddi4+0xa6>
 8000cbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc0:	e7e3      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x204>
 8000cc8:	eba1 040c 	sub.w	r4, r1, ip
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa1f f78c 	uxth.w	r7, ip
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cde:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb07 f006 	mul.w	r0, r7, r6
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x11c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x11a>
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cfe:	4626      	mov	r6, r4
 8000d00:	1a1c      	subs	r4, r3, r0
 8000d02:	fa1f f38e 	uxth.w	r3, lr
 8000d06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	429f      	cmp	r7, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x148>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x146>
 8000d24:	429f      	cmp	r7, r3
 8000d26:	f200 80b0 	bhi.w	8000e8a <__udivmoddi4+0x2a6>
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	1bdb      	subs	r3, r3, r7
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x9c>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d44:	fa04 f301 	lsl.w	r3, r4, r1
 8000d48:	ea43 030c 	orr.w	r3, r3, ip
 8000d4c:	40f4      	lsrs	r4, r6
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	0c38      	lsrs	r0, r7, #16
 8000d54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d58:	fbb4 fef0 	udiv	lr, r4, r0
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fb00 441e 	mls	r4, r0, lr, r4
 8000d64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d68:	fb0e f90c 	mul.w	r9, lr, ip
 8000d6c:	45a1      	cmp	r9, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x1a6>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d7a:	f080 8084 	bcs.w	8000e86 <__udivmoddi4+0x2a2>
 8000d7e:	45a1      	cmp	r9, r4
 8000d80:	f240 8081 	bls.w	8000e86 <__udivmoddi4+0x2a2>
 8000d84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	eba4 0409 	sub.w	r4, r4, r9
 8000d8e:	fa1f f983 	uxth.w	r9, r3
 8000d92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d96:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1d2>
 8000da6:	193c      	adds	r4, r7, r4
 8000da8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dac:	d267      	bcs.n	8000e7e <__udivmoddi4+0x29a>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d965      	bls.n	8000e7e <__udivmoddi4+0x29a>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dba:	fba0 9302 	umull	r9, r3, r0, r2
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	d351      	bcc.n	8000e6e <__udivmoddi4+0x28a>
 8000dca:	d04e      	beq.n	8000e6a <__udivmoddi4+0x286>
 8000dcc:	b155      	cbz	r5, 8000de4 <__udivmoddi4+0x200>
 8000dce:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	40cb      	lsrs	r3, r1
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c5 6400 	strd	r6, r4, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e750      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f103 	lsr.w	r1, r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa24 f303 	lsr.w	r3, r4, r3
 8000df8:	4094      	lsls	r4, r2
 8000dfa:	430c      	orrs	r4, r1
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e16:	fb00 f107 	mul.w	r1, r0, r7
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x24c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e26:	d22c      	bcs.n	8000e82 <__udivmoddi4+0x29e>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d92a      	bls.n	8000e82 <__udivmoddi4+0x29e>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb01 f307 	mul.w	r3, r1, r7
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x276>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e50:	d213      	bcs.n	8000e7a <__udivmoddi4+0x296>
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	d911      	bls.n	8000e7a <__udivmoddi4+0x296>
 8000e56:	3902      	subs	r1, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	1ae4      	subs	r4, r4, r3
 8000e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e60:	e739      	b.n	8000cd6 <__udivmoddi4+0xf2>
 8000e62:	4604      	mov	r4, r0
 8000e64:	e6f0      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e706      	b.n	8000c78 <__udivmoddi4+0x94>
 8000e6a:	45c8      	cmp	r8, r9
 8000e6c:	d2ae      	bcs.n	8000dcc <__udivmoddi4+0x1e8>
 8000e6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7a8      	b.n	8000dcc <__udivmoddi4+0x1e8>
 8000e7a:	4631      	mov	r1, r6
 8000e7c:	e7ed      	b.n	8000e5a <__udivmoddi4+0x276>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e799      	b.n	8000db6 <__udivmoddi4+0x1d2>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e7d4      	b.n	8000e30 <__udivmoddi4+0x24c>
 8000e86:	46d6      	mov	lr, sl
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1a6>
 8000e8a:	4463      	add	r3, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e74d      	b.n	8000d2c <__udivmoddi4+0x148>
 8000e90:	4606      	mov	r6, r0
 8000e92:	4623      	mov	r3, r4
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70f      	b.n	8000cb8 <__udivmoddi4+0xd4>
 8000e98:	3e02      	subs	r6, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	e730      	b.n	8000d00 <__udivmoddi4+0x11c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <DEV_Set_I2CAddress>:
UWORD IIC_Addr_t = IIC_Addr;
extern I2C_HandleTypeDef hi2c1;


void DEV_Set_I2CAddress(UBYTE add_)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	IIC_Addr_t = add_;
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <DEV_Set_I2CAddress+0x20>)
 8000eb4:	801a      	strh	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000000 	.word	0x20000000

08000ec8 <DEV_I2C_WriteByte>:
/******************************************************************************
function:
	I2C Write and Read
******************************************************************************/
void DEV_I2C_WriteByte(UBYTE add_, UBYTE data_)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af04      	add	r7, sp, #16
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
	UBYTE Buf[1] = {0};
 8000ed8:	2300      	movs	r3, #0
 8000eda:	733b      	strb	r3, [r7, #12]
	Buf[0] = data_;
 8000edc:	79bb      	ldrb	r3, [r7, #6]
 8000ede:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x10);
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <DEV_I2C_WriteByte+0x40>)
 8000ee2:	8819      	ldrh	r1, [r3, #0]
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	2310      	movs	r3, #16
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	2301      	movs	r3, #1
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	4804      	ldr	r0, [pc, #16]	@ (8000f0c <DEV_I2C_WriteByte+0x44>)
 8000efa:	f005 fd0f 	bl	800691c <HAL_I2C_Mem_Write>
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000090 	.word	0x20000090

08000f10 <DEV_I2C_ReadByte>:
	Buf[1] = data_;
	HAL_I2C_Mem_Write(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 2, 0x10);
}

UBYTE DEV_I2C_ReadByte(UBYTE add_)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af04      	add	r7, sp, #16
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	UBYTE Buf[1]={add_};
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	733b      	strb	r3, [r7, #12]
	HAL_StatusTypeDef ret = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Mem_Read(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x10);
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <DEV_I2C_ReadByte+0x40>)
 8000f24:	8819      	ldrh	r1, [r3, #0]
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	4806      	ldr	r0, [pc, #24]	@ (8000f54 <DEV_I2C_ReadByte+0x44>)
 8000f3c:	f005 fde8 	bl	8006b10 <HAL_I2C_Mem_Read>
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]
	return Buf[0];
 8000f44:	7b3b      	ldrb	r3, [r7, #12]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000090 	.word	0x20000090

08000f58 <DEV_I2C_ReadWord>:

UWORD DEV_I2C_ReadWord(UBYTE add_)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af04      	add	r7, sp, #16
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
    UBYTE Buf[2]={0, 0};
 8000f62:	2300      	movs	r3, #0
 8000f64:	81bb      	strh	r3, [r7, #12]
		HAL_I2C_Mem_Read(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 2, 0x10);
 8000f66:	4b0d      	ldr	r3, [pc, #52]	@ (8000f9c <DEV_I2C_ReadWord+0x44>)
 8000f68:	8819      	ldrh	r1, [r3, #0]
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	2310      	movs	r3, #16
 8000f70:	9302      	str	r3, [sp, #8]
 8000f72:	2302      	movs	r3, #2
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	4808      	ldr	r0, [pc, #32]	@ (8000fa0 <DEV_I2C_ReadWord+0x48>)
 8000f80:	f005 fdc6 	bl	8006b10 <HAL_I2C_Mem_Read>
    return ((Buf[1] << 8) | (Buf[0] & 0xff));
 8000f84:	7b7b      	ldrb	r3, [r7, #13]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	7b3b      	ldrb	r3, [r7, #12]
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	b29b      	uxth	r3, r3
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000090 	.word	0x20000090

08000fa4 <TCS34725_WriteByte>:
parameter	:
        add : Register address
        data: Written data
******************************************************************************/
static void TCS34725_WriteByte(UBYTE add, UBYTE data)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	460a      	mov	r2, r1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	71bb      	strb	r3, [r7, #6]
    //Note: remember to add this when users write their own
    //Responsible for not finding the register,
    //refer to the data sheet Command Register CMD(Bit 7)
    add = add | TCS34725_CMD_BIT;
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fba:	71fb      	strb	r3, [r7, #7]
    DEV_I2C_WriteByte(add, data);
 8000fbc:	79ba      	ldrb	r2, [r7, #6]
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff80 	bl	8000ec8 <DEV_I2C_WriteByte>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <TCS34725_ReadByte>:
function:   Read a byte to TCS34725
parameter	:
        add : Register address
******************************************************************************/
static UBYTE TCS34725_ReadByte(UBYTE add)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
    add = add | TCS34725_CMD_BIT;
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fe0:	71fb      	strb	r3, [r7, #7]
    return DEV_I2C_ReadByte(add);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff93 	bl	8000f10 <DEV_I2C_ReadByte>
 8000fea:	4603      	mov	r3, r0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <TCS34725_ReadWord>:
parameter	:
        add : Register address
        data: Written data
******************************************************************************/
static UWORD TCS34725_ReadWord(UBYTE add)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]

    add = add | TCS34725_CMD_BIT;
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001004:	71fb      	strb	r3, [r7, #7]
    return DEV_I2C_ReadWord(add);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ffa5 	bl	8000f58 <DEV_I2C_ReadWord>
 800100e:	4603      	mov	r3, r0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <TCS34725_Enable>:
/******************************************************************************
function:
        TCS34725 wake up
******************************************************************************/
static void TCS34725_Enable(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
    TCS34725_WriteByte(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 800101c:	2101      	movs	r1, #1
 800101e:	2000      	movs	r0, #0
 8001020:	f7ff ffc0 	bl	8000fa4 <TCS34725_WriteByte>
    DEV_Delay_ms(3);
 8001024:	2003      	movs	r0, #3
 8001026:	f004 fc4f 	bl	80058c8 <HAL_Delay>
    TCS34725_WriteByte(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 800102a:	2103      	movs	r1, #3
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff ffb9 	bl	8000fa4 <TCS34725_WriteByte>
    DEV_Delay_ms(3);
 8001032:	2003      	movs	r0, #3
 8001034:	f004 fc48 	bl	80058c8 <HAL_Delay>
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <TCS34725_Set_Integration_Time>:
function:   TCS34725 Set Integration Time
parameter	:
        time: Integration Time Reference "TCS34725.h" Enumeration Type
******************************************************************************/
void TCS34725_Set_Integration_Time(TCS34725IntegrationTime_t time)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
    /* Update the timing register */
    TCS34725_WriteByte(TCS34725_ATIME, time);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4619      	mov	r1, r3
 800104a:	2001      	movs	r0, #1
 800104c:	f7ff ffaa 	bl	8000fa4 <TCS34725_WriteByte>
    IntegrationTime_t = time;
 8001050:	4a03      	ldr	r2, [pc, #12]	@ (8001060 <TCS34725_Set_Integration_Time+0x24>)
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	7013      	strb	r3, [r2, #0]
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000008c 	.word	0x2000008c

08001064 <TCS34725_Set_Gain>:
function:   TCS34725 Set gain
parameter	:
        gain: gain Reference "TCS34725.h" Enumeration Type
******************************************************************************/
void TCS34725_Set_Gain(TCS34725Gain_t gain)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	TCS34725_WriteByte(TCS34725_CONTROL, gain);
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	4619      	mov	r1, r3
 8001072:	200f      	movs	r0, #15
 8001074:	f7ff ff96 	bl	8000fa4 <TCS34725_WriteByte>
    Gain_t = gain;
 8001078:	4a03      	ldr	r2, [pc, #12]	@ (8001088 <TCS34725_Set_Gain+0x24>)
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	7013      	strb	r3, [r2, #0]
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000002 	.word	0x20000002

0800108c <TCS34725_Interrupt_Enable>:

/******************************************************************************
function:   Interrupt Enable
******************************************************************************/
static void TCS34725_Interrupt_Enable()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
    UBYTE data = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	71fb      	strb	r3, [r7, #7]
    data = TCS34725_ReadByte(TCS34725_ENABLE);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ff9a 	bl	8000fd0 <TCS34725_ReadByte>
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
    TCS34725_WriteByte(TCS34725_ENABLE, data | TCS34725_ENABLE_AIEN);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f043 0310 	orr.w	r3, r3, #16
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4619      	mov	r1, r3
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff ff7a 	bl	8000fa4 <TCS34725_WriteByte>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <TCS34725_Set_Interrupt_Persistence_Reg>:
            for several cycles
parameter	:
    TCS34725_PER : reference "TCS34725.h"
******************************************************************************/
static void TCS34725_Set_Interrupt_Persistence_Reg(UBYTE TCS34725_PER)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
    if(TCS34725_PER < 0x10)
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d805      	bhi.n	80010d4 <TCS34725_Set_Interrupt_Persistence_Reg+0x1c>
        TCS34725_WriteByte(TCS34725_PERS, TCS34725_PER);
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	4619      	mov	r1, r3
 80010cc:	200c      	movs	r0, #12
 80010ce:	f7ff ff69 	bl	8000fa4 <TCS34725_WriteByte>
    else
        TCS34725_WriteByte(TCS34725_PERS, TCS34725_PERS_60_CYCLE);
}
 80010d2:	e003      	b.n	80010dc <TCS34725_Set_Interrupt_Persistence_Reg+0x24>
        TCS34725_WriteByte(TCS34725_PERS, TCS34725_PERS_60_CYCLE);
 80010d4:	210f      	movs	r1, #15
 80010d6:	200c      	movs	r0, #12
 80010d8:	f7ff ff64 	bl	8000fa4 <TCS34725_WriteByte>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <TCS34725_Set_Interrupt_Threshold>:
    when the Clear data (CDATA) is less than the Clear interrupt low
    threshold (AILTx) or is greater than the Clear interrupt high
    threshold (AIHTx)(Clear is the Clear ADC Channel Data Registers)
******************************************************************************/
static void TCS34725_Set_Interrupt_Threshold(UWORD Threshold_H, UWORD Threshold_L)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	460a      	mov	r2, r1
 80010ee:	80fb      	strh	r3, [r7, #6]
 80010f0:	4613      	mov	r3, r2
 80010f2:	80bb      	strh	r3, [r7, #4]
    TCS34725_WriteByte(TCS34725_AILTL, Threshold_L & 0xff);
 80010f4:	88bb      	ldrh	r3, [r7, #4]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4619      	mov	r1, r3
 80010fa:	2004      	movs	r0, #4
 80010fc:	f7ff ff52 	bl	8000fa4 <TCS34725_WriteByte>
    TCS34725_WriteByte(TCS34725_AILTH, Threshold_L >> 8);
 8001100:	88bb      	ldrh	r3, [r7, #4]
 8001102:	0a1b      	lsrs	r3, r3, #8
 8001104:	b29b      	uxth	r3, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4619      	mov	r1, r3
 800110a:	2005      	movs	r0, #5
 800110c:	f7ff ff4a 	bl	8000fa4 <TCS34725_WriteByte>
    TCS34725_WriteByte(TCS34725_AIHTL, Threshold_H & 0xff);
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4619      	mov	r1, r3
 8001116:	2006      	movs	r0, #6
 8001118:	f7ff ff44 	bl	8000fa4 <TCS34725_WriteByte>
    TCS34725_WriteByte(TCS34725_AIHTH, Threshold_H >> 8);
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	0a1b      	lsrs	r3, r3, #8
 8001120:	b29b      	uxth	r3, r3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4619      	mov	r1, r3
 8001126:	2007      	movs	r0, #7
 8001128:	f7ff ff3c 	bl	8000fa4 <TCS34725_WriteByte>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <TCS34725_Init>:
parameter	:
        gain: gain Reference "TCS34725.h" Enumeration Type
        it  : Integration Time Reference "TCS34725.h" Enumeration Type
******************************************************************************/
UBYTE  TCS34725_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
	UBYTE ID = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	71fb      	strb	r3, [r7, #7]
	DEV_Set_I2CAddress(TCS34725_ADDRESS);
 800113e:	2052      	movs	r0, #82	@ 0x52
 8001140:	f7ff feb0 	bl	8000ea4 <DEV_Set_I2CAddress>
	ID = TCS34725_ReadByte(TCS34725_ID);
 8001144:	2012      	movs	r0, #18
 8001146:	f7ff ff43 	bl	8000fd0 <TCS34725_ReadByte>
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	if(ID != 0x44 && ID != 0x4D){
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b44      	cmp	r3, #68	@ 0x44
 8001152:	d004      	beq.n	800115e <TCS34725_Init+0x2a>
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b4d      	cmp	r3, #77	@ 0x4d
 8001158:	d001      	beq.n	800115e <TCS34725_Init+0x2a>
			return 1;
 800115a:	2301      	movs	r3, #1
 800115c:	e01b      	b.n	8001196 <TCS34725_Init+0x62>
	}
	//Set the integration time and gain
	TCS34725_Set_Integration_Time(TCS34725_INTEGRATIONTIME_154MS);
 800115e:	20c0      	movs	r0, #192	@ 0xc0
 8001160:	f7ff ff6c 	bl	800103c <TCS34725_Set_Integration_Time>
	TCS34725_Set_Gain(TCS34725_GAIN_60X);
 8001164:	2003      	movs	r0, #3
 8001166:	f7ff ff7d 	bl	8001064 <TCS34725_Set_Gain>

	IntegrationTime_t = TCS34725_INTEGRATIONTIME_154MS;
 800116a:	4b0d      	ldr	r3, [pc, #52]	@ (80011a0 <TCS34725_Init+0x6c>)
 800116c:	22c0      	movs	r2, #192	@ 0xc0
 800116e:	701a      	strb	r2, [r3, #0]
	Gain_t = TCS34725_GAIN_60X;
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <TCS34725_Init+0x70>)
 8001172:	2203      	movs	r2, #3
 8001174:	701a      	strb	r2, [r3, #0]
	//Set Interrupt
	TCS34725_Set_Interrupt_Threshold(0xff00, 0x00ff);//Interrupt upper and lower threshold
 8001176:	21ff      	movs	r1, #255	@ 0xff
 8001178:	f44f 407f 	mov.w	r0, #65280	@ 0xff00
 800117c:	f7ff ffb2 	bl	80010e4 <TCS34725_Set_Interrupt_Threshold>
	TCS34725_Set_Interrupt_Persistence_Reg(TCS34725_PERS_2_CYCLE);
 8001180:	2002      	movs	r0, #2
 8001182:	f7ff ff99 	bl	80010b8 <TCS34725_Set_Interrupt_Persistence_Reg>
	TCS34725_Enable();
 8001186:	f7ff ff47 	bl	8001018 <TCS34725_Enable>
	TCS34725_Interrupt_Enable();
 800118a:	f7ff ff7f 	bl	800108c <TCS34725_Interrupt_Enable>
	//Set the LCD brightness
	TCS34725_SetLight(40);
 800118e:	2028      	movs	r0, #40	@ 0x28
 8001190:	f000 f93e 	bl	8001410 <TCS34725_SetLight>

	return 0;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000008c 	.word	0x2000008c
 80011a4:	20000002 	.word	0x20000002

080011a8 <TCS34725_Get_RGBData>:
function:   TCS34725 Read RGBC data
parameter	:
     R,G,B,C: RGBC Numerical value,Is a pointer
******************************************************************************/
RGB TCS34725_Get_RGBData()
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    RGB temp;
    temp.C = TCS34725_ReadWord(TCS34725_CDATAL | TCS34725_CMD_Read_Word);
 80011b0:	2034      	movs	r0, #52	@ 0x34
 80011b2:	f7ff ff1f 	bl	8000ff4 <TCS34725_ReadWord>
 80011b6:	4603      	mov	r3, r0
 80011b8:	81fb      	strh	r3, [r7, #14]
    temp.R = TCS34725_ReadWord(TCS34725_RDATAL | TCS34725_CMD_Read_Word);
 80011ba:	2036      	movs	r0, #54	@ 0x36
 80011bc:	f7ff ff1a 	bl	8000ff4 <TCS34725_ReadWord>
 80011c0:	4603      	mov	r3, r0
 80011c2:	813b      	strh	r3, [r7, #8]
    temp.G = TCS34725_ReadWord(TCS34725_GDATAL | TCS34725_CMD_Read_Word);
 80011c4:	2038      	movs	r0, #56	@ 0x38
 80011c6:	f7ff ff15 	bl	8000ff4 <TCS34725_ReadWord>
 80011ca:	4603      	mov	r3, r0
 80011cc:	817b      	strh	r3, [r7, #10]
    temp.B = TCS34725_ReadWord(TCS34725_BDATAL | TCS34725_CMD_Read_Word);
 80011ce:	203a      	movs	r0, #58	@ 0x3a
 80011d0:	f7ff ff10 	bl	8000ff4 <TCS34725_ReadWord>
 80011d4:	4603      	mov	r3, r0
 80011d6:	81bb      	strh	r3, [r7, #12]

    switch (IntegrationTime_t){
 80011d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <TCS34725_Get_RGBData+0xa8>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2bff      	cmp	r3, #255	@ 0xff
 80011de:	d012      	beq.n	8001206 <TCS34725_Get_RGBData+0x5e>
 80011e0:	2bff      	cmp	r3, #255	@ 0xff
 80011e2:	dc29      	bgt.n	8001238 <TCS34725_Get_RGBData+0x90>
 80011e4:	2bf6      	cmp	r3, #246	@ 0xf6
 80011e6:	d012      	beq.n	800120e <TCS34725_Get_RGBData+0x66>
 80011e8:	2bf6      	cmp	r3, #246	@ 0xf6
 80011ea:	dc25      	bgt.n	8001238 <TCS34725_Get_RGBData+0x90>
 80011ec:	2beb      	cmp	r3, #235	@ 0xeb
 80011ee:	d012      	beq.n	8001216 <TCS34725_Get_RGBData+0x6e>
 80011f0:	2beb      	cmp	r3, #235	@ 0xeb
 80011f2:	dc21      	bgt.n	8001238 <TCS34725_Get_RGBData+0x90>
 80011f4:	2bd5      	cmp	r3, #213	@ 0xd5
 80011f6:	d012      	beq.n	800121e <TCS34725_Get_RGBData+0x76>
 80011f8:	2bd5      	cmp	r3, #213	@ 0xd5
 80011fa:	dc1d      	bgt.n	8001238 <TCS34725_Get_RGBData+0x90>
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d016      	beq.n	800122e <TCS34725_Get_RGBData+0x86>
 8001200:	2bc0      	cmp	r3, #192	@ 0xc0
 8001202:	d010      	beq.n	8001226 <TCS34725_Get_RGBData+0x7e>
 8001204:	e018      	b.n	8001238 <TCS34725_Get_RGBData+0x90>
        case TCS34725_INTEGRATIONTIME_2_4MS:
              DEV_Delay_ms(3);
 8001206:	2003      	movs	r0, #3
 8001208:	f004 fb5e 	bl	80058c8 <HAL_Delay>
              break;
 800120c:	e014      	b.n	8001238 <TCS34725_Get_RGBData+0x90>
        case TCS34725_INTEGRATIONTIME_24MS:
              DEV_Delay_ms(24);
 800120e:	2018      	movs	r0, #24
 8001210:	f004 fb5a 	bl	80058c8 <HAL_Delay>
              break;
 8001214:	e010      	b.n	8001238 <TCS34725_Get_RGBData+0x90>
        case TCS34725_INTEGRATIONTIME_50MS:
              DEV_Delay_ms(50);
 8001216:	2032      	movs	r0, #50	@ 0x32
 8001218:	f004 fb56 	bl	80058c8 <HAL_Delay>
              break;
 800121c:	e00c      	b.n	8001238 <TCS34725_Get_RGBData+0x90>
        case TCS34725_INTEGRATIONTIME_101MS:
              DEV_Delay_ms(101);
 800121e:	2065      	movs	r0, #101	@ 0x65
 8001220:	f004 fb52 	bl	80058c8 <HAL_Delay>
              break;
 8001224:	e008      	b.n	8001238 <TCS34725_Get_RGBData+0x90>
        case TCS34725_INTEGRATIONTIME_154MS:
              DEV_Delay_ms(154);
 8001226:	209a      	movs	r0, #154	@ 0x9a
 8001228:	f004 fb4e 	bl	80058c8 <HAL_Delay>
              break;
 800122c:	e004      	b.n	8001238 <TCS34725_Get_RGBData+0x90>
        case TCS34725_INTEGRATIONTIME_700MS:
              DEV_Delay_ms(700);
 800122e:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001232:	f004 fb49 	bl	80058c8 <HAL_Delay>
              break;
 8001236:	bf00      	nop
    }
    return temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	461a      	mov	r2, r3
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	cb03      	ldmia	r3!, {r0, r1}
 8001242:	6010      	str	r0, [r2, #0]
 8001244:	6051      	str	r1, [r2, #4]
}
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000008c 	.word	0x2000008c

08001254 <TCS34725_GetRGB888>:
function:   Convert raw RGB values to RGB888 format
parameter	:
     rgb    : RGBC Numerical value
******************************************************************************/
UDOUBLE TCS34725_GetRGB888(RGB rgb)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	463b      	mov	r3, r7
 800125c:	e883 0003 	stmia.w	r3, {r0, r1}
    float i=1;
 8001260:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001264:	60fb      	str	r3, [r7, #12]
    //Limit data range
    if(rgb.R >= rgb.G && rgb.R >= rgb.B){
 8001266:	883a      	ldrh	r2, [r7, #0]
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	429a      	cmp	r2, r3
 800126c:	d311      	bcc.n	8001292 <TCS34725_GetRGB888+0x3e>
 800126e:	883a      	ldrh	r2, [r7, #0]
 8001270:	88bb      	ldrh	r3, [r7, #4]
 8001272:	429a      	cmp	r2, r3
 8001274:	d30d      	bcc.n	8001292 <TCS34725_GetRGB888+0x3e>
        i = rgb.R / 255 + 1;
 8001276:	883b      	ldrh	r3, [r7, #0]
 8001278:	4a63      	ldr	r2, [pc, #396]	@ (8001408 <TCS34725_GetRGB888+0x1b4>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	09db      	lsrs	r3, r3, #7
 8001280:	b29b      	uxth	r3, r3
 8001282:	3301      	adds	r3, #1
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128c:	edc7 7a03 	vstr	s15, [r7, #12]
 8001290:	e02a      	b.n	80012e8 <TCS34725_GetRGB888+0x94>
    }
    else if(rgb.G >= rgb.R && rgb.G >= rgb.B){
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	883b      	ldrh	r3, [r7, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d311      	bcc.n	80012be <TCS34725_GetRGB888+0x6a>
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	88bb      	ldrh	r3, [r7, #4]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d30d      	bcc.n	80012be <TCS34725_GetRGB888+0x6a>
        i = rgb.G / 255 + 1;
 80012a2:	887b      	ldrh	r3, [r7, #2]
 80012a4:	4a58      	ldr	r2, [pc, #352]	@ (8001408 <TCS34725_GetRGB888+0x1b4>)
 80012a6:	fba2 2303 	umull	r2, r3, r2, r3
 80012aa:	09db      	lsrs	r3, r3, #7
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	3301      	adds	r3, #1
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	edc7 7a03 	vstr	s15, [r7, #12]
 80012bc:	e014      	b.n	80012e8 <TCS34725_GetRGB888+0x94>
    }
    else if(rgb.B >=  rgb.G && rgb.B >= rgb.R){
 80012be:	88ba      	ldrh	r2, [r7, #4]
 80012c0:	887b      	ldrh	r3, [r7, #2]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d310      	bcc.n	80012e8 <TCS34725_GetRGB888+0x94>
 80012c6:	88ba      	ldrh	r2, [r7, #4]
 80012c8:	883b      	ldrh	r3, [r7, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d30c      	bcc.n	80012e8 <TCS34725_GetRGB888+0x94>
        i = rgb.B / 255 + 1;
 80012ce:	88bb      	ldrh	r3, [r7, #4]
 80012d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001408 <TCS34725_GetRGB888+0x1b4>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	09db      	lsrs	r3, r3, #7
 80012d8:	b29b      	uxth	r3, r3
 80012da:	3301      	adds	r3, #1
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e4:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    if(i!=0)
 80012e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f4:	d02c      	beq.n	8001350 <TCS34725_GetRGB888+0xfc>
    {
        rgb.R = (rgb.R) / i;
 80012f6:	883b      	ldrh	r3, [r7, #0]
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001300:	ed97 7a03 	vldr	s14, [r7, #12]
 8001304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800130c:	ee17 3a90 	vmov	r3, s15
 8001310:	b29b      	uxth	r3, r3
 8001312:	803b      	strh	r3, [r7, #0]
        rgb.G = (rgb.G) / i;
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	ee07 3a90 	vmov	s15, r3
 800131a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800131e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800132a:	ee17 3a90 	vmov	r3, s15
 800132e:	b29b      	uxth	r3, r3
 8001330:	807b      	strh	r3, [r7, #2]
        rgb.B = (rgb.B) / i;
 8001332:	88bb      	ldrh	r3, [r7, #4]
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800133c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001348:	ee17 3a90 	vmov	r3, s15
 800134c:	b29b      	uxth	r3, r3
 800134e:	80bb      	strh	r3, [r7, #4]
    }
    //Amplify data differences
    /*Please don't try to make the data negative,
        unless you don't change the data type*/
    if(rgb.R > 30)
 8001350:	883b      	ldrh	r3, [r7, #0]
 8001352:	2b1e      	cmp	r3, #30
 8001354:	d903      	bls.n	800135e <TCS34725_GetRGB888+0x10a>
        rgb.R = rgb.R - 30;
 8001356:	883b      	ldrh	r3, [r7, #0]
 8001358:	3b1e      	subs	r3, #30
 800135a:	b29b      	uxth	r3, r3
 800135c:	803b      	strh	r3, [r7, #0]
    if(rgb.G > 30)
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	2b1e      	cmp	r3, #30
 8001362:	d903      	bls.n	800136c <TCS34725_GetRGB888+0x118>
        rgb.G = rgb.G - 30;
 8001364:	887b      	ldrh	r3, [r7, #2]
 8001366:	3b1e      	subs	r3, #30
 8001368:	b29b      	uxth	r3, r3
 800136a:	807b      	strh	r3, [r7, #2]
    if(rgb.B > 30)
 800136c:	88bb      	ldrh	r3, [r7, #4]
 800136e:	2b1e      	cmp	r3, #30
 8001370:	d903      	bls.n	800137a <TCS34725_GetRGB888+0x126>
        rgb.B = rgb.B - 30;
 8001372:	88bb      	ldrh	r3, [r7, #4]
 8001374:	3b1e      	subs	r3, #30
 8001376:	b29b      	uxth	r3, r3
 8001378:	80bb      	strh	r3, [r7, #4]
    rgb.R = rgb.R * 255 / 225;
 800137a:	883b      	ldrh	r3, [r7, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4613      	mov	r3, r2
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	4a21      	ldr	r2, [pc, #132]	@ (800140c <TCS34725_GetRGB888+0x1b8>)
 8001386:	fb82 1203 	smull	r1, r2, r2, r3
 800138a:	441a      	add	r2, r3
 800138c:	11d2      	asrs	r2, r2, #7
 800138e:	17db      	asrs	r3, r3, #31
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	b29b      	uxth	r3, r3
 8001394:	803b      	strh	r3, [r7, #0]
    rgb.G = rgb.G * 255 / 225;
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	461a      	mov	r2, r3
 800139a:	4613      	mov	r3, r2
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	1a9b      	subs	r3, r3, r2
 80013a0:	4a1a      	ldr	r2, [pc, #104]	@ (800140c <TCS34725_GetRGB888+0x1b8>)
 80013a2:	fb82 1203 	smull	r1, r2, r2, r3
 80013a6:	441a      	add	r2, r3
 80013a8:	11d2      	asrs	r2, r2, #7
 80013aa:	17db      	asrs	r3, r3, #31
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	807b      	strh	r3, [r7, #2]
    rgb.B = rgb.B * 255 / 225;
 80013b2:	88bb      	ldrh	r3, [r7, #4]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4613      	mov	r3, r2
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	1a9b      	subs	r3, r3, r2
 80013bc:	4a13      	ldr	r2, [pc, #76]	@ (800140c <TCS34725_GetRGB888+0x1b8>)
 80013be:	fb82 1203 	smull	r1, r2, r2, r3
 80013c2:	441a      	add	r2, r3
 80013c4:	11d2      	asrs	r2, r2, #7
 80013c6:	17db      	asrs	r3, r3, #31
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	80bb      	strh	r3, [r7, #4]

    if(rgb.R>255)
 80013ce:	883b      	ldrh	r3, [r7, #0]
 80013d0:	2bff      	cmp	r3, #255	@ 0xff
 80013d2:	d901      	bls.n	80013d8 <TCS34725_GetRGB888+0x184>
           rgb.R = 255;
 80013d4:	23ff      	movs	r3, #255	@ 0xff
 80013d6:	803b      	strh	r3, [r7, #0]
    if(rgb.G>255)
 80013d8:	887b      	ldrh	r3, [r7, #2]
 80013da:	2bff      	cmp	r3, #255	@ 0xff
 80013dc:	d901      	bls.n	80013e2 <TCS34725_GetRGB888+0x18e>
           rgb.G = 255;
 80013de:	23ff      	movs	r3, #255	@ 0xff
 80013e0:	807b      	strh	r3, [r7, #2]
    if(rgb.B>255)
 80013e2:	88bb      	ldrh	r3, [r7, #4]
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d901      	bls.n	80013ec <TCS34725_GetRGB888+0x198>
           rgb.B = 255;
 80013e8:	23ff      	movs	r3, #255	@ 0xff
 80013ea:	80bb      	strh	r3, [r7, #4]
    return (rgb.R << 16) | (rgb.G << 8) | (rgb.B);
 80013ec:	883b      	ldrh	r3, [r7, #0]
 80013ee:	041a      	lsls	r2, r3, #16
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	4313      	orrs	r3, r2
 80013f6:	88ba      	ldrh	r2, [r7, #4]
 80013f8:	4313      	orrs	r3, r2
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	80808081 	.word	0x80808081
 800140c:	91a2b3c5 	.word	0x91a2b3c5

08001410 <TCS34725_SetLight>:
function:   Set the onboard LED brightness
parameter	:
     value : 0 - 100
******************************************************************************/
void TCS34725_SetLight(UWORD value)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
    if(value <= 100){
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	2b64      	cmp	r3, #100	@ 0x64
 800141e:	d809      	bhi.n	8001434 <TCS34725_SetLight+0x24>
        value = value * DEV_PWM_value / 100;
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	461a      	mov	r2, r3
 8001424:	0092      	lsls	r2, r2, #2
 8001426:	4413      	add	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	80fb      	strh	r3, [r7, #6]
        DEV_Set_PWM(value);
 800142c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	63d3      	str	r3, [r2, #60]	@ 0x3c
    }
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_TIM_PeriodElapsedCallback>:
//		flag++;
//	}
//
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
//	if(htim==&htim12)
//	{
////		can_transmit(&hcan1, 0x201, buffer[0], buffer[1], buffer[2],buffer[3],buffer[4]);
//		loop();
//	}
	if(htim==&htim5)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a69      	ldr	r2, [pc, #420]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800144c:	4293      	cmp	r3, r2
 800144e:	f040 80c2 	bne.w	80015d6 <HAL_TIM_PeriodElapsedCallback+0x196>
	{
		uint16_t new_countA = TIM3->CNT;
 8001452:	4b68      	ldr	r3, [pc, #416]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001456:	823b      	strh	r3, [r7, #16]
		uint16_t new_countB = TIM4->CNT;
 8001458:	4b67      	ldr	r3, [pc, #412]	@ (80015f8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800145a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145c:	81fb      	strh	r3, [r7, #14]
		uint16_t new_countC = TIM8->CNT;
 800145e:	4b67      	ldr	r3, [pc, #412]	@ (80015fc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	81bb      	strh	r3, [r7, #12]
		int16_t diffA = new_countA - valueA;
 8001464:	4b66      	ldr	r3, [pc, #408]	@ (8001600 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	b29b      	uxth	r3, r3
 800146a:	8a3a      	ldrh	r2, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	b29b      	uxth	r3, r3
 8001470:	82fb      	strh	r3, [r7, #22]
		int16_t diffB = new_countB - valueB;
 8001472:	4b64      	ldr	r3, [pc, #400]	@ (8001604 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	89fa      	ldrh	r2, [r7, #14]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	b29b      	uxth	r3, r3
 800147e:	82bb      	strh	r3, [r7, #20]
		int16_t diffC = new_countC - valueC;
 8001480:	4b61      	ldr	r3, [pc, #388]	@ (8001608 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	b29b      	uxth	r3, r3
 8001486:	89ba      	ldrh	r2, [r7, #12]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	b29b      	uxth	r3, r3
 800148c:	827b      	strh	r3, [r7, #18]

		if (diffA > 32767) {
			diffA -= 65536; // Handle overflow
		} else if (diffA < -32767) {
 800148e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001492:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
			diffA += 65536; // Handle underflow
		}

		if (diffB > 32767) {
			diffB -= 65536; // Handle overflow
		} else if (diffB < -32767) {
 8001496:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800149a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
			diffB += 65536; // Handle underflow
		}

		if (diffC > 32767) {
			diffC -= 65536; // Handle overflow
		} else if (diffC < -32767) {
 800149e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014a2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
			diffC += 65536; // Handle underflow
		}

		// Update total distances traveled
		Speed_EncoderA=diffA*per_step;
 80014a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f806 	bl	80004bc <__aeabi_i2d>
 80014b0:	a34b      	add	r3, pc, #300	@ (adr r3, 80015e0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff f86b 	bl	8000590 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	a349      	add	r3, pc, #292	@ (adr r3, 80015e8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff f862 	bl	8000590 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4b4c      	ldr	r3, [pc, #304]	@ (800160c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80014da:	f7ff f983 	bl	80007e4 <__aeabi_ddiv>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	494b      	ldr	r1, [pc, #300]	@ (8001610 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80014e4:	e9c1 2300 	strd	r2, r3, [r1]
		Speed_EncoderB=diffB*per_step;
 80014e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe ffe5 	bl	80004bc <__aeabi_i2d>
 80014f2:	a33b      	add	r3, pc, #236	@ (adr r3, 80015e0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f84a 	bl	8000590 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	a338      	add	r3, pc, #224	@ (adr r3, 80015e8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7ff f841 	bl	8000590 <__aeabi_dmul>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	4b3c      	ldr	r3, [pc, #240]	@ (800160c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800151c:	f7ff f962 	bl	80007e4 <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	493b      	ldr	r1, [pc, #236]	@ (8001614 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001526:	e9c1 2300 	strd	r2, r3, [r1]
		Speed_EncoderC=diffC*per_step;
 800152a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe ffc4 	bl	80004bc <__aeabi_i2d>
 8001534:	a32a      	add	r3, pc, #168	@ (adr r3, 80015e0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f7ff f829 	bl	8000590 <__aeabi_dmul>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	a328      	add	r3, pc, #160	@ (adr r3, 80015e8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7ff f820 	bl	8000590 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	4b2b      	ldr	r3, [pc, #172]	@ (800160c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800155e:	f7ff f941 	bl	80007e4 <__aeabi_ddiv>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	492c      	ldr	r1, [pc, #176]	@ (8001618 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001568:	e9c1 2300 	strd	r2, r3, [r1]
		distanceA += Speed_EncoderA;
 800156c:	4b2b      	ldr	r3, [pc, #172]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800156e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001572:	4b27      	ldr	r3, [pc, #156]	@ (8001610 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	f7fe fe54 	bl	8000224 <__adddf3>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4926      	ldr	r1, [pc, #152]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001582:	e9c1 2300 	strd	r2, r3, [r1]
		distanceB += Speed_EncoderB;
 8001586:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001588:	e9d3 0100 	ldrd	r0, r1, [r3]
 800158c:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7fe fe47 	bl	8000224 <__adddf3>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4921      	ldr	r1, [pc, #132]	@ (8001620 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800159c:	e9c1 2300 	strd	r2, r3, [r1]
		distanceC += Speed_EncoderC;
 80015a0:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80015a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7fe fe3a 	bl	8000224 <__adddf3>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	491b      	ldr	r1, [pc, #108]	@ (8001624 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80015b6:	e9c1 2300 	strd	r2, r3, [r1]
		// Update current counts
		valueA = new_countA;
 80015ba:	8a3b      	ldrh	r3, [r7, #16]
 80015bc:	4a10      	ldr	r2, [pc, #64]	@ (8001600 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80015be:	6013      	str	r3, [r2, #0]
		valueB = new_countB;
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	4a10      	ldr	r2, [pc, #64]	@ (8001604 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80015c4:	6013      	str	r3, [r2, #0]
		valueC = new_countC;
 80015c6:	89bb      	ldrh	r3, [r7, #12]
 80015c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001608 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80015ca:	6013      	str	r3, [r2, #0]
		interrupt_counter++;
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	4a15      	ldr	r2, [pc, #84]	@ (8001628 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80015d4:	6013      	str	r3, [r2, #0]
	}
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	33333333 	.word	0x33333333
 80015e4:	40153333 	.word	0x40153333
 80015e8:	54442d18 	.word	0x54442d18
 80015ec:	400921fb 	.word	0x400921fb
 80015f0:	20000210 	.word	0x20000210
 80015f4:	40000400 	.word	0x40000400
 80015f8:	40000800 	.word	0x40000800
 80015fc:	40010400 	.word	0x40010400
 8001600:	200003f0 	.word	0x200003f0
 8001604:	200003f4 	.word	0x200003f4
 8001608:	200003f8 	.word	0x200003f8
 800160c:	409f4000 	.word	0x409f4000
 8001610:	20000408 	.word	0x20000408
 8001614:	20000410 	.word	0x20000410
 8001618:	20000418 	.word	0x20000418
 800161c:	200004c0 	.word	0x200004c0
 8001620:	200004c8 	.word	0x200004c8
 8001624:	200004d0 	.word	0x200004d0
 8001628:	20000400 	.word	0x20000400

0800162c <MPU6050_Init>:
void MPU6050_Init (void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af04      	add	r7, sp, #16
	uint8_t check, Data;
	HAL_I2C_Mem_Read (&hi2c3, MPU6050_ADDR, WHO_AM_I_REG,1,&check,1,1000);
 8001632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001636:	9302      	str	r3, [sp, #8]
 8001638:	2301      	movs	r3, #1
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	1dfb      	adds	r3, r7, #7
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2301      	movs	r3, #1
 8001642:	2275      	movs	r2, #117	@ 0x75
 8001644:	21d0      	movs	r1, #208	@ 0xd0
 8001646:	4823      	ldr	r0, [pc, #140]	@ (80016d4 <MPU6050_Init+0xa8>)
 8001648:	f005 fa62 	bl	8006b10 <HAL_I2C_Mem_Read>

	if( check == 104)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	2b68      	cmp	r3, #104	@ 0x68
 8001650:	d13b      	bne.n	80016ca <MPU6050_Init+0x9e>
	{
		Data=0;
 8001652:	2300      	movs	r3, #0
 8001654:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8001656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800165a:	9302      	str	r3, [sp, #8]
 800165c:	2301      	movs	r3, #1
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	1dbb      	adds	r3, r7, #6
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2301      	movs	r3, #1
 8001666:	226b      	movs	r2, #107	@ 0x6b
 8001668:	21d0      	movs	r1, #208	@ 0xd0
 800166a:	481a      	ldr	r0, [pc, #104]	@ (80016d4 <MPU6050_Init+0xa8>)
 800166c:	f005 f956 	bl	800691c <HAL_I2C_Mem_Write>

		Data=0x07;
 8001670:	2307      	movs	r3, #7
 8001672:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001674:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	2301      	movs	r3, #1
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	1dbb      	adds	r3, r7, #6
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2301      	movs	r3, #1
 8001684:	2219      	movs	r2, #25
 8001686:	21d0      	movs	r1, #208	@ 0xd0
 8001688:	4812      	ldr	r0, [pc, #72]	@ (80016d4 <MPU6050_Init+0xa8>)
 800168a:	f005 f947 	bl	800691c <HAL_I2C_Mem_Write>

		Data=0x00;
 800168e:	2300      	movs	r3, #0
 8001690:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001692:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001696:	9302      	str	r3, [sp, #8]
 8001698:	2301      	movs	r3, #1
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	1dbb      	adds	r3, r7, #6
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2301      	movs	r3, #1
 80016a2:	221c      	movs	r2, #28
 80016a4:	21d0      	movs	r1, #208	@ 0xd0
 80016a6:	480b      	ldr	r0, [pc, #44]	@ (80016d4 <MPU6050_Init+0xa8>)
 80016a8:	f005 f938 	bl	800691c <HAL_I2C_Mem_Write>

		Data=0x00;
 80016ac:	2300      	movs	r3, #0
 80016ae:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80016b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b4:	9302      	str	r3, [sp, #8]
 80016b6:	2301      	movs	r3, #1
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	1dbb      	adds	r3, r7, #6
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2301      	movs	r3, #1
 80016c0:	221b      	movs	r2, #27
 80016c2:	21d0      	movs	r1, #208	@ 0xd0
 80016c4:	4803      	ldr	r0, [pc, #12]	@ (80016d4 <MPU6050_Init+0xa8>)
 80016c6:	f005 f929 	bl	800691c <HAL_I2C_Mem_Write>
	}
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200000e4 	.word	0x200000e4

080016d8 <MPU6050_Read_Accel>:
void MPU6050_Read_Accel(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	HAL_I2C_Mem_Read(&hi2c3, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80016de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e2:	9302      	str	r3, [sp, #8]
 80016e4:	2306      	movs	r3, #6
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	463b      	mov	r3, r7
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2301      	movs	r3, #1
 80016ee:	223b      	movs	r2, #59	@ 0x3b
 80016f0:	21d0      	movs	r1, #208	@ 0xd0
 80016f2:	482f      	ldr	r0, [pc, #188]	@ (80017b0 <MPU6050_Read_Accel+0xd8>)
 80016f4:	f005 fa0c 	bl	8006b10 <HAL_I2C_Mem_Read>

	Accel_X_Raw=(int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80016f8:	783b      	ldrb	r3, [r7, #0]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	787b      	ldrb	r3, [r7, #1]
 8001700:	b21b      	sxth	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	b21b      	sxth	r3, r3
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b2a      	ldr	r3, [pc, #168]	@ (80017b4 <MPU6050_Read_Accel+0xdc>)
 800170a:	801a      	strh	r2, [r3, #0]
	Accel_Y_Raw=(int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800170c:	78bb      	ldrb	r3, [r7, #2]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	b21a      	sxth	r2, r3
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	b21b      	sxth	r3, r3
 8001716:	4313      	orrs	r3, r2
 8001718:	b21b      	sxth	r3, r3
 800171a:	b29a      	uxth	r2, r3
 800171c:	4b26      	ldr	r3, [pc, #152]	@ (80017b8 <MPU6050_Read_Accel+0xe0>)
 800171e:	801a      	strh	r2, [r3, #0]
	Accel_Z_Raw=(int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001720:	793b      	ldrb	r3, [r7, #4]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	b21a      	sxth	r2, r3
 8001726:	797b      	ldrb	r3, [r7, #5]
 8001728:	b21b      	sxth	r3, r3
 800172a:	4313      	orrs	r3, r2
 800172c:	b21b      	sxth	r3, r3
 800172e:	b29a      	uxth	r2, r3
 8001730:	4b22      	ldr	r3, [pc, #136]	@ (80017bc <MPU6050_Read_Accel+0xe4>)
 8001732:	801a      	strh	r2, [r3, #0]
	//		can_transmit(&hcan1, 0x191, Rec_Data[0], Rec_Data[1]);
	Ax=Accel_X_Raw/4096.0;
 8001734:	4b1f      	ldr	r3, [pc, #124]	@ (80017b4 <MPU6050_Read_Accel+0xdc>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe febf 	bl	80004bc <__aeabi_i2d>
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	4b1f      	ldr	r3, [pc, #124]	@ (80017c0 <MPU6050_Read_Accel+0xe8>)
 8001744:	f7ff f84e 	bl	80007e4 <__aeabi_ddiv>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f7ff f9e0 	bl	8000b14 <__aeabi_d2f>
 8001754:	4603      	mov	r3, r0
 8001756:	4a1b      	ldr	r2, [pc, #108]	@ (80017c4 <MPU6050_Read_Accel+0xec>)
 8001758:	6013      	str	r3, [r2, #0]
	Ay=Accel_Y_Raw/4096.0;
 800175a:	4b17      	ldr	r3, [pc, #92]	@ (80017b8 <MPU6050_Read_Accel+0xe0>)
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe feac 	bl	80004bc <__aeabi_i2d>
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <MPU6050_Read_Accel+0xe8>)
 800176a:	f7ff f83b 	bl	80007e4 <__aeabi_ddiv>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff f9cd 	bl	8000b14 <__aeabi_d2f>
 800177a:	4603      	mov	r3, r0
 800177c:	4a12      	ldr	r2, [pc, #72]	@ (80017c8 <MPU6050_Read_Accel+0xf0>)
 800177e:	6013      	str	r3, [r2, #0]
	Az=Accel_Z_Raw/4096.0;
 8001780:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <MPU6050_Read_Accel+0xe4>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fe99 	bl	80004bc <__aeabi_i2d>
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <MPU6050_Read_Accel+0xe8>)
 8001790:	f7ff f828 	bl	80007e4 <__aeabi_ddiv>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff f9ba 	bl	8000b14 <__aeabi_d2f>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <MPU6050_Read_Accel+0xf4>)
 80017a4:	6013      	str	r3, [r2, #0]
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200000e4 	.word	0x200000e4
 80017b4:	200004e0 	.word	0x200004e0
 80017b8:	200004e2 	.word	0x200004e2
 80017bc:	200004e4 	.word	0x200004e4
 80017c0:	40b00000 	.word	0x40b00000
 80017c4:	200004e8 	.word	0x200004e8
 80017c8:	200004ec 	.word	0x200004ec
 80017cc:	200004f0 	.word	0x200004f0

080017d0 <Accel_X_Angle>:
float Accel_X_Angle(float Ax, float Ay, float Az) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	ed87 0a03 	vstr	s0, [r7, #12]
 80017da:	edc7 0a02 	vstr	s1, [r7, #8]
 80017de:	ed87 1a01 	vstr	s2, [r7, #4]
	float angle_deg = (180/3.141592)*(atan(Az/Ax));
 80017e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80017e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017ee:	ee16 0a90 	vmov	r0, s13
 80017f2:	f7fe fe75 	bl	80004e0 <__aeabi_f2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	ec43 2b10 	vmov	d0, r2, r3
 80017fe:	f008 fd47 	bl	800a290 <atan>
 8001802:	ec51 0b10 	vmov	r0, r1, d0
 8001806:	a30a      	add	r3, pc, #40	@ (adr r3, 8001830 <Accel_X_Angle+0x60>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe fec0 	bl	8000590 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f97c 	bl	8000b14 <__aeabi_d2f>
 800181c:	4603      	mov	r3, r0
 800181e:	617b      	str	r3, [r7, #20]
	return angle_deg;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	ee07 3a90 	vmov	s15, r3
}
 8001826:	eeb0 0a67 	vmov.f32	s0, s15
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	7e61df46 	.word	0x7e61df46
 8001834:	404ca5dc 	.word	0x404ca5dc

08001838 <Accel_Y_Angle>:
float Accel_Y_Angle(float Ax, float Ay, float Az) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001842:	edc7 0a02 	vstr	s1, [r7, #8]
 8001846:	ed87 1a01 	vstr	s2, [r7, #4]
	float angle_deg = (180/3.141592)*(atan(Ay/Az));
 800184a:	ed97 7a02 	vldr	s14, [r7, #8]
 800184e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001852:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001856:	ee16 0a90 	vmov	r0, s13
 800185a:	f7fe fe41 	bl	80004e0 <__aeabi_f2d>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	ec43 2b10 	vmov	d0, r2, r3
 8001866:	f008 fd13 	bl	800a290 <atan>
 800186a:	ec51 0b10 	vmov	r0, r1, d0
 800186e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001898 <Accel_Y_Angle+0x60>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe fe8c 	bl	8000590 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff f948 	bl	8000b14 <__aeabi_d2f>
 8001884:	4603      	mov	r3, r0
 8001886:	617b      	str	r3, [r7, #20]
	return angle_deg;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	ee07 3a90 	vmov	s15, r3
}
 800188e:	eeb0 0a67 	vmov.f32	s0, s15
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	7e61df46 	.word	0x7e61df46
 800189c:	404ca5dc 	.word	0x404ca5dc

080018a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018a4:	b098      	sub	sp, #96	@ 0x60
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018a8:	f003 ff9c 	bl	80057e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ac:	f000 fe22 	bl	80024f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b0:	f001 f91a 	bl	8002ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 80018b4:	f001 f8f0 	bl	8002a98 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018b8:	f001 f8c4 	bl	8002a44 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80018bc:	f000 ff3c 	bl	8002738 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018c0:	f000 ff8e 	bl	80027e0 <MX_TIM4_Init>
  MX_TIM5_Init();
 80018c4:	f000 ffe0 	bl	8002888 <MX_TIM5_Init>
  MX_TIM8_Init();
 80018c8:	f001 f82c 	bl	8002924 <MX_TIM8_Init>
  MX_I2C3_Init();
 80018cc:	f000 feb2 	bl	8002634 <MX_I2C3_Init>
  MX_TIM12_Init();
 80018d0:	f001 f880 	bl	80029d4 <MX_TIM12_Init>
  MX_TIM2_Init();
 80018d4:	f000 fedc 	bl	8002690 <MX_TIM2_Init>
  MX_I2C1_Init();
 80018d8:	f000 fe7e 	bl	80025d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim5);
 80018dc:	48b4      	ldr	r0, [pc, #720]	@ (8001bb0 <main+0x310>)
 80018de:	f006 fd85 	bl	80083ec <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80018e2:	2100      	movs	r1, #0
 80018e4:	48b3      	ldr	r0, [pc, #716]	@ (8001bb4 <main+0x314>)
 80018e6:	f006 fe97 	bl	8008618 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80018ea:	2100      	movs	r1, #0
 80018ec:	48b2      	ldr	r0, [pc, #712]	@ (8001bb8 <main+0x318>)
 80018ee:	f006 fe93 	bl	8008618 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 80018f2:	2100      	movs	r1, #0
 80018f4:	48b1      	ldr	r0, [pc, #708]	@ (8001bbc <main+0x31c>)
 80018f6:	f006 fe8f 	bl	8008618 <HAL_TIM_Encoder_Start>

	/*initial buyu neg robot geometry cm */
	radian_Alpha=(M_PI/180)*alpha;		//alpha untsugiig degree to radian bolgoj hurwuulj  baigaa uildel
 80018fa:	49b1      	ldr	r1, [pc, #708]	@ (8001bc0 <main+0x320>)
 80018fc:	a3a4      	add	r3, pc, #656	@ (adr r3, 8001b90 <main+0x2f0>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	e9c1 2300 	strd	r2, r3, [r1]
	radian_Beta=(M_PI/180)*beta;		//beta untsugiig degree to radian bolgoj hurwuulj  baigaa uildel
 8001906:	49af      	ldr	r1, [pc, #700]	@ (8001bc4 <main+0x324>)
 8001908:	a3a3      	add	r3, pc, #652	@ (adr r3, 8001b98 <main+0x2f8>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	e9c1 2300 	strd	r2, r3, [r1]
	radian_Gamma=(M_PI/180)*gamma;		//gamma untsugiig degree to radian bolgoj hurwuulj  baigaa uildel;
 8001912:	49ad      	ldr	r1, [pc, #692]	@ (8001bc8 <main+0x328>)
 8001914:	a3a2      	add	r3, pc, #648	@ (adr r3, 8001ba0 <main+0x300>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	e9c1 2300 	strd	r2, r3, [r1]
	radian_Delta=(M_PI/180)*delta;		//delta untsugiig degree to radian bolgoj hurwuulj  baigaa uildel;
 800191e:	49ab      	ldr	r1, [pc, #684]	@ (8001bcc <main+0x32c>)
 8001920:	a3a1      	add	r3, pc, #644	@ (adr r3, 8001ba8 <main+0x308>)
 8001922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001926:	e9c1 2300 	strd	r2, r3, [r1]
	// AB vector
	AB[0][0]=L*cos(radian_Delta);
 800192a:	4ba8      	ldr	r3, [pc, #672]	@ (8001bcc <main+0x32c>)
 800192c:	ed93 7b00 	vldr	d7, [r3]
 8001930:	eeb0 0a47 	vmov.f32	s0, s14
 8001934:	eef0 0a67 	vmov.f32	s1, s15
 8001938:	f008 fe42 	bl	800a5c0 <cos>
 800193c:	ec51 0b10 	vmov	r0, r1, d0
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	4ba2      	ldr	r3, [pc, #648]	@ (8001bd0 <main+0x330>)
 8001946:	f7fe fe23 	bl	8000590 <__aeabi_dmul>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	49a1      	ldr	r1, [pc, #644]	@ (8001bd4 <main+0x334>)
 8001950:	e9c1 2300 	strd	r2, r3, [r1]
	AB[1][0]=L*sin(radian_Delta);
 8001954:	4b9d      	ldr	r3, [pc, #628]	@ (8001bcc <main+0x32c>)
 8001956:	ed93 7b00 	vldr	d7, [r3]
 800195a:	eeb0 0a47 	vmov.f32	s0, s14
 800195e:	eef0 0a67 	vmov.f32	s1, s15
 8001962:	f008 fe89 	bl	800a678 <sin>
 8001966:	ec51 0b10 	vmov	r0, r1, d0
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	4b98      	ldr	r3, [pc, #608]	@ (8001bd0 <main+0x330>)
 8001970:	f7fe fe0e 	bl	8000590 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4996      	ldr	r1, [pc, #600]	@ (8001bd4 <main+0x334>)
 800197a:	e9c1 2302 	strd	r2, r3, [r1, #8]

	// AC vector
	AC[0][0]=M*1;
 800197e:	4996      	ldr	r1, [pc, #600]	@ (8001bd8 <main+0x338>)
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	4b95      	ldr	r3, [pc, #596]	@ (8001bdc <main+0x33c>)
 8001986:	e9c1 2300 	strd	r2, r3, [r1]
	AC[1][0]=M*0;
 800198a:	4993      	ldr	r1, [pc, #588]	@ (8001bd8 <main+0x338>)
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	e9c1 2302 	strd	r2, r3, [r1, #8]

	//a_encoder Vector
	a_encoder[0][0]=cos(radian_Delta + radian_Alpha),
 8001998:	4b8c      	ldr	r3, [pc, #560]	@ (8001bcc <main+0x32c>)
 800199a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800199e:	4b88      	ldr	r3, [pc, #544]	@ (8001bc0 <main+0x320>)
 80019a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a4:	f7fe fc3e 	bl	8000224 <__adddf3>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	ec43 2b17 	vmov	d7, r2, r3
 80019b0:	eeb0 0a47 	vmov.f32	s0, s14
 80019b4:	eef0 0a67 	vmov.f32	s1, s15
 80019b8:	f008 fe02 	bl	800a5c0 <cos>
 80019bc:	eeb0 7a40 	vmov.f32	s14, s0
 80019c0:	eef0 7a60 	vmov.f32	s15, s1
 80019c4:	4b86      	ldr	r3, [pc, #536]	@ (8001be0 <main+0x340>)
 80019c6:	ed83 7b00 	vstr	d7, [r3]
	a_encoder[1][0]=sin(radian_Delta + radian_Alpha);
 80019ca:	4b80      	ldr	r3, [pc, #512]	@ (8001bcc <main+0x32c>)
 80019cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019d0:	4b7b      	ldr	r3, [pc, #492]	@ (8001bc0 <main+0x320>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f7fe fc25 	bl	8000224 <__adddf3>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	ec43 2b17 	vmov	d7, r2, r3
 80019e2:	eeb0 0a47 	vmov.f32	s0, s14
 80019e6:	eef0 0a67 	vmov.f32	s1, s15
 80019ea:	f008 fe45 	bl	800a678 <sin>
 80019ee:	eeb0 7a40 	vmov.f32	s14, s0
 80019f2:	eef0 7a60 	vmov.f32	s15, s1
 80019f6:	4b7a      	ldr	r3, [pc, #488]	@ (8001be0 <main+0x340>)
 80019f8:	ed83 7b02 	vstr	d7, [r3, #8]
	//a_perp Vector
	a_perp[0][0]=-1*a_encoder[1][0];
 80019fc:	4b78      	ldr	r3, [pc, #480]	@ (8001be0 <main+0x340>)
 80019fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a02:	4614      	mov	r4, r2
 8001a04:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001a08:	4b76      	ldr	r3, [pc, #472]	@ (8001be4 <main+0x344>)
 8001a0a:	e9c3 4500 	strd	r4, r5, [r3]
	a_perp[1][0]=1*a_encoder[0][0];
 8001a0e:	4b74      	ldr	r3, [pc, #464]	@ (8001be0 <main+0x340>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	4973      	ldr	r1, [pc, #460]	@ (8001be4 <main+0x344>)
 8001a16:	e9c1 2302 	strd	r2, r3, [r1, #8]
	//b vector
	b_encoder[0][0]=cos(radian_Delta+radian_Beta);
 8001a1a:	4b6c      	ldr	r3, [pc, #432]	@ (8001bcc <main+0x32c>)
 8001a1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a20:	4b68      	ldr	r3, [pc, #416]	@ (8001bc4 <main+0x324>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe fbfd 	bl	8000224 <__adddf3>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	ec43 2b17 	vmov	d7, r2, r3
 8001a32:	eeb0 0a47 	vmov.f32	s0, s14
 8001a36:	eef0 0a67 	vmov.f32	s1, s15
 8001a3a:	f008 fdc1 	bl	800a5c0 <cos>
 8001a3e:	eeb0 7a40 	vmov.f32	s14, s0
 8001a42:	eef0 7a60 	vmov.f32	s15, s1
 8001a46:	4b68      	ldr	r3, [pc, #416]	@ (8001be8 <main+0x348>)
 8001a48:	ed83 7b00 	vstr	d7, [r3]
	b_encoder[1][0]=sin(radian_Delta+radian_Beta);
 8001a4c:	4b5f      	ldr	r3, [pc, #380]	@ (8001bcc <main+0x32c>)
 8001a4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a52:	4b5c      	ldr	r3, [pc, #368]	@ (8001bc4 <main+0x324>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fbe4 	bl	8000224 <__adddf3>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	ec43 2b17 	vmov	d7, r2, r3
 8001a64:	eeb0 0a47 	vmov.f32	s0, s14
 8001a68:	eef0 0a67 	vmov.f32	s1, s15
 8001a6c:	f008 fe04 	bl	800a678 <sin>
 8001a70:	eeb0 7a40 	vmov.f32	s14, s0
 8001a74:	eef0 7a60 	vmov.f32	s15, s1
 8001a78:	4b5b      	ldr	r3, [pc, #364]	@ (8001be8 <main+0x348>)
 8001a7a:	ed83 7b02 	vstr	d7, [r3, #8]

	//c_vector
	c_encoder[0][0]=cos(radian_Gamma);
 8001a7e:	4b52      	ldr	r3, [pc, #328]	@ (8001bc8 <main+0x328>)
 8001a80:	ed93 7b00 	vldr	d7, [r3]
 8001a84:	eeb0 0a47 	vmov.f32	s0, s14
 8001a88:	eef0 0a67 	vmov.f32	s1, s15
 8001a8c:	f008 fd98 	bl	800a5c0 <cos>
 8001a90:	eeb0 7a40 	vmov.f32	s14, s0
 8001a94:	eef0 7a60 	vmov.f32	s15, s1
 8001a98:	4b54      	ldr	r3, [pc, #336]	@ (8001bec <main+0x34c>)
 8001a9a:	ed83 7b00 	vstr	d7, [r3]
	c_encoder[1][0]=sin(radian_Gamma);
 8001a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8001bc8 <main+0x328>)
 8001aa0:	ed93 7b00 	vldr	d7, [r3]
 8001aa4:	eeb0 0a47 	vmov.f32	s0, s14
 8001aa8:	eef0 0a67 	vmov.f32	s1, s15
 8001aac:	f008 fde4 	bl	800a678 <sin>
 8001ab0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ab4:	eef0 7a60 	vmov.f32	s15, s1
 8001ab8:	4b4c      	ldr	r3, [pc, #304]	@ (8001bec <main+0x34c>)
 8001aba:	ed83 7b02 	vstr	d7, [r3, #8]
	 * g=inv([b,c])*a;
	 * [b,c]=[b_encoder,c_encoder]  [4][4]
	 * inv([b,c])
	 * a=[2][1]
	 */
	b_c_encoder[0][0]=b_encoder[0][0];
 8001abe:	4b4a      	ldr	r3, [pc, #296]	@ (8001be8 <main+0x348>)
 8001ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac4:	494a      	ldr	r1, [pc, #296]	@ (8001bf0 <main+0x350>)
 8001ac6:	e9c1 2300 	strd	r2, r3, [r1]
	b_c_encoder[1][0]=b_encoder[1][0];
 8001aca:	4b47      	ldr	r3, [pc, #284]	@ (8001be8 <main+0x348>)
 8001acc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ad0:	4947      	ldr	r1, [pc, #284]	@ (8001bf0 <main+0x350>)
 8001ad2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	b_c_encoder[0][1]=c_encoder[0][0];
 8001ad6:	4b45      	ldr	r3, [pc, #276]	@ (8001bec <main+0x34c>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	4944      	ldr	r1, [pc, #272]	@ (8001bf0 <main+0x350>)
 8001ade:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_c_encoder[1][1]=c_encoder[1][0];
 8001ae2:	4b42      	ldr	r3, [pc, #264]	@ (8001bec <main+0x34c>)
 8001ae4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ae8:	4941      	ldr	r1, [pc, #260]	@ (8001bf0 <main+0x350>)
 8001aea:	e9c1 2306 	strd	r2, r3, [r1, #24]
	/*
	 * Determinant
	 */
	double determinant;
	determinant=b_c_encoder[0][0] * b_c_encoder[1][1] - b_c_encoder[0][1] * b_c_encoder[1][0];
 8001aee:	4b40      	ldr	r3, [pc, #256]	@ (8001bf0 <main+0x350>)
 8001af0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001af4:	4b3e      	ldr	r3, [pc, #248]	@ (8001bf0 <main+0x350>)
 8001af6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001afa:	f7fe fd49 	bl	8000590 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4614      	mov	r4, r2
 8001b04:	461d      	mov	r5, r3
 8001b06:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf0 <main+0x350>)
 8001b08:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b0c:	4b38      	ldr	r3, [pc, #224]	@ (8001bf0 <main+0x350>)
 8001b0e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b12:	f7fe fd3d 	bl	8000590 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fb7f 	bl	8000220 <__aeabi_dsub>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	/*
	 * Matrix inverse
	 */
	double inv_det;
	inv_det=1/determinant;
 8001b2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001b2e:	f04f 0000 	mov.w	r0, #0
 8001b32:	4930      	ldr	r1, [pc, #192]	@ (8001bf4 <main+0x354>)
 8001b34:	f7fe fe56 	bl	80007e4 <__aeabi_ddiv>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double temp[2][2];
	temp[0][0] =  b_c_encoder[1][1] * inv_det;
 8001b40:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf0 <main+0x350>)
 8001b42:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b46:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001b4a:	f7fe fd21 	bl	8000590 <__aeabi_dmul>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	e9c7 2306 	strd	r2, r3, [r7, #24]
	temp[0][1] = -b_c_encoder[0][1] * inv_det;
 8001b56:	4b26      	ldr	r3, [pc, #152]	@ (8001bf0 <main+0x350>)
 8001b58:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b5c:	60ba      	str	r2, [r7, #8]
 8001b5e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001b68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b6c:	f7fe fd10 	bl	8000590 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	e9c7 2308 	strd	r2, r3, [r7, #32]
	temp[1][0] = -b_c_encoder[1][0] * inv_det;
 8001b78:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf0 <main+0x350>)
 8001b7a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b7e:	4690      	mov	r8, r2
 8001b80:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001b84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001b88:	4640      	mov	r0, r8
 8001b8a:	e035      	b.n	8001bf8 <main+0x358>
 8001b8c:	f3af 8000 	nop.w
 8001b90:	87c952c4 	.word	0x87c952c4
 8001b94:	3ff197c9 	.word	0x3ff197c9
 8001b98:	e1257683 	.word	0xe1257683
 8001b9c:	40173f6e 	.word	0x40173f6e
 8001ba0:	54442d18 	.word	0x54442d18
 8001ba4:	3ff921fb 	.word	0x3ff921fb
 8001ba8:	31eb6950 	.word	0x31eb6950
 8001bac:	3fde28c7 	.word	0x3fde28c7
 8001bb0:	20000210 	.word	0x20000210
 8001bb4:	20000180 	.word	0x20000180
 8001bb8:	200001c8 	.word	0x200001c8
 8001bbc:	20000258 	.word	0x20000258
 8001bc0:	20000500 	.word	0x20000500
 8001bc4:	20000508 	.word	0x20000508
 8001bc8:	20000510 	.word	0x20000510
 8001bcc:	20000518 	.word	0x20000518
 8001bd0:	40468000 	.word	0x40468000
 8001bd4:	20000520 	.word	0x20000520
 8001bd8:	20000530 	.word	0x20000530
 8001bdc:	40408000 	.word	0x40408000
 8001be0:	20000540 	.word	0x20000540
 8001be4:	20000550 	.word	0x20000550
 8001be8:	20000560 	.word	0x20000560
 8001bec:	20000570 	.word	0x20000570
 8001bf0:	200005a0 	.word	0x200005a0
 8001bf4:	3ff00000 	.word	0x3ff00000
 8001bf8:	4649      	mov	r1, r9
 8001bfa:	f7fe fcc9 	bl	8000590 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	temp[1][1] =  b_c_encoder[0][0] * inv_det;
 8001c06:	4bb2      	ldr	r3, [pc, #712]	@ (8001ed0 <main+0x630>)
 8001c08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c10:	f7fe fcbe 	bl	8000590 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	/*
	 *
	 */
	g[0][0]=temp[0][0]*a_encoder[0][0]+temp[0][1]*a_encoder[1][0];
 8001c1c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c20:	4bac      	ldr	r3, [pc, #688]	@ (8001ed4 <main+0x634>)
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	f7fe fcb3 	bl	8000590 <__aeabi_dmul>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4614      	mov	r4, r2
 8001c30:	461d      	mov	r5, r3
 8001c32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c36:	4ba7      	ldr	r3, [pc, #668]	@ (8001ed4 <main+0x634>)
 8001c38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c3c:	f7fe fca8 	bl	8000590 <__aeabi_dmul>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4620      	mov	r0, r4
 8001c46:	4629      	mov	r1, r5
 8001c48:	f7fe faec 	bl	8000224 <__adddf3>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	49a1      	ldr	r1, [pc, #644]	@ (8001ed8 <main+0x638>)
 8001c52:	e9c1 2300 	strd	r2, r3, [r1]
	g[1][0]=temp[1][0]*a_encoder[0][0]+temp[1][1]*a_encoder[1][0];
 8001c56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c5a:	4b9e      	ldr	r3, [pc, #632]	@ (8001ed4 <main+0x634>)
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	f7fe fc96 	bl	8000590 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4614      	mov	r4, r2
 8001c6a:	461d      	mov	r5, r3
 8001c6c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001c70:	4b98      	ldr	r3, [pc, #608]	@ (8001ed4 <main+0x634>)
 8001c72:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c76:	f7fe fc8b 	bl	8000590 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4620      	mov	r0, r4
 8001c80:	4629      	mov	r1, r5
 8001c82:	f7fe facf 	bl	8000224 <__adddf3>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4993      	ldr	r1, [pc, #588]	@ (8001ed8 <main+0x638>)
 8001c8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	/*
	 * g_perp
	 */
	g_perp[0][0]=temp[0][0]*a_perp[0][0]+temp[0][1]*a_perp[1][0];
 8001c90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c94:	4b91      	ldr	r3, [pc, #580]	@ (8001edc <main+0x63c>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	f7fe fc79 	bl	8000590 <__aeabi_dmul>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4614      	mov	r4, r2
 8001ca4:	461d      	mov	r5, r3
 8001ca6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001caa:	4b8c      	ldr	r3, [pc, #560]	@ (8001edc <main+0x63c>)
 8001cac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cb0:	f7fe fc6e 	bl	8000590 <__aeabi_dmul>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4620      	mov	r0, r4
 8001cba:	4629      	mov	r1, r5
 8001cbc:	f7fe fab2 	bl	8000224 <__adddf3>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4986      	ldr	r1, [pc, #536]	@ (8001ee0 <main+0x640>)
 8001cc6:	e9c1 2300 	strd	r2, r3, [r1]
	g_perp[1][0]=temp[1][0]*a_perp[0][0]+temp[1][1]*a_perp[1][0];
 8001cca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001cce:	4b83      	ldr	r3, [pc, #524]	@ (8001edc <main+0x63c>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	f7fe fc5c 	bl	8000590 <__aeabi_dmul>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4614      	mov	r4, r2
 8001cde:	461d      	mov	r5, r3
 8001ce0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001ce4:	4b7d      	ldr	r3, [pc, #500]	@ (8001edc <main+0x63c>)
 8001ce6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cea:	f7fe fc51 	bl	8000590 <__aeabi_dmul>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	f7fe fa95 	bl	8000224 <__adddf3>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4978      	ldr	r1, [pc, #480]	@ (8001ee0 <main+0x640>)
 8001d00:	e9c1 2302 	strd	r2, r3, [r1, #8]
	double Bb=AB[0][0]*b_encoder[1][0]-AB[1][0]*b_encoder[0][0];
 8001d04:	4b77      	ldr	r3, [pc, #476]	@ (8001ee4 <main+0x644>)
 8001d06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d0a:	4b77      	ldr	r3, [pc, #476]	@ (8001ee8 <main+0x648>)
 8001d0c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d10:	f7fe fc3e 	bl	8000590 <__aeabi_dmul>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4614      	mov	r4, r2
 8001d1a:	461d      	mov	r5, r3
 8001d1c:	4b71      	ldr	r3, [pc, #452]	@ (8001ee4 <main+0x644>)
 8001d1e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d22:	4b71      	ldr	r3, [pc, #452]	@ (8001ee8 <main+0x648>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	f7fe fc32 	bl	8000590 <__aeabi_dmul>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4620      	mov	r0, r4
 8001d32:	4629      	mov	r1, r5
 8001d34:	f7fe fa74 	bl	8000220 <__aeabi_dsub>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double Cc=AC[0][0]*c_encoder[1][0]-AC[1][0]*c_encoder[0][0];
 8001d40:	4b6a      	ldr	r3, [pc, #424]	@ (8001eec <main+0x64c>)
 8001d42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d46:	4b6a      	ldr	r3, [pc, #424]	@ (8001ef0 <main+0x650>)
 8001d48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d4c:	f7fe fc20 	bl	8000590 <__aeabi_dmul>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4614      	mov	r4, r2
 8001d56:	461d      	mov	r5, r3
 8001d58:	4b64      	ldr	r3, [pc, #400]	@ (8001eec <main+0x64c>)
 8001d5a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d5e:	4b64      	ldr	r3, [pc, #400]	@ (8001ef0 <main+0x650>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f7fe fc14 	bl	8000590 <__aeabi_dmul>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	4629      	mov	r1, r5
 8001d70:	f7fe fa56 	bl	8000220 <__aeabi_dsub>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	ha_perp=(g_perp[0][0]*Bb+g_perp[1][0]*Cc)/(g[0][0]*Bb+g[1][0]*Cc);
 8001d7c:	4b58      	ldr	r3, [pc, #352]	@ (8001ee0 <main+0x640>)
 8001d7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d82:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d86:	f7fe fc03 	bl	8000590 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4614      	mov	r4, r2
 8001d90:	461d      	mov	r5, r3
 8001d92:	4b53      	ldr	r3, [pc, #332]	@ (8001ee0 <main+0x640>)
 8001d94:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d9c:	f7fe fbf8 	bl	8000590 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4620      	mov	r0, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7fe fa3c 	bl	8000224 <__adddf3>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4614      	mov	r4, r2
 8001db2:	461d      	mov	r5, r3
 8001db4:	4b48      	ldr	r3, [pc, #288]	@ (8001ed8 <main+0x638>)
 8001db6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001dbe:	f7fe fbe7 	bl	8000590 <__aeabi_dmul>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4690      	mov	r8, r2
 8001dc8:	4699      	mov	r9, r3
 8001dca:	4b43      	ldr	r3, [pc, #268]	@ (8001ed8 <main+0x638>)
 8001dcc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001dd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001dd4:	f7fe fbdc 	bl	8000590 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4640      	mov	r0, r8
 8001dde:	4649      	mov	r1, r9
 8001de0:	f7fe fa20 	bl	8000224 <__adddf3>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4620      	mov	r0, r4
 8001dea:	4629      	mov	r1, r5
 8001dec:	f7fe fcfa 	bl	80007e4 <__aeabi_ddiv>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	493f      	ldr	r1, [pc, #252]	@ (8001ef4 <main+0x654>)
 8001df6:	e9c1 2300 	strd	r2, r3, [r1]
	hb_perp=(g_perp[0][0]*g[1][0]-g_perp[1][0]*g[1][1])*Cc/(g[0][0]*Bb+g[1][0]*Cc);
 8001dfa:	4b39      	ldr	r3, [pc, #228]	@ (8001ee0 <main+0x640>)
 8001dfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e00:	4b35      	ldr	r3, [pc, #212]	@ (8001ed8 <main+0x638>)
 8001e02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e06:	f7fe fbc3 	bl	8000590 <__aeabi_dmul>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4614      	mov	r4, r2
 8001e10:	461d      	mov	r5, r3
 8001e12:	4b33      	ldr	r3, [pc, #204]	@ (8001ee0 <main+0x640>)
 8001e14:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e18:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed8 <main+0x638>)
 8001e1a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e1e:	f7fe fbb7 	bl	8000590 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4620      	mov	r0, r4
 8001e28:	4629      	mov	r1, r5
 8001e2a:	f7fe f9f9 	bl	8000220 <__aeabi_dsub>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e3a:	f7fe fba9 	bl	8000590 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4614      	mov	r4, r2
 8001e44:	461d      	mov	r5, r3
 8001e46:	4b24      	ldr	r3, [pc, #144]	@ (8001ed8 <main+0x638>)
 8001e48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e50:	f7fe fb9e 	bl	8000590 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4690      	mov	r8, r2
 8001e5a:	4699      	mov	r9, r3
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed8 <main+0x638>)
 8001e5e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e66:	f7fe fb93 	bl	8000590 <__aeabi_dmul>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4640      	mov	r0, r8
 8001e70:	4649      	mov	r1, r9
 8001e72:	f7fe f9d7 	bl	8000224 <__adddf3>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	4629      	mov	r1, r5
 8001e7e:	f7fe fcb1 	bl	80007e4 <__aeabi_ddiv>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	491c      	ldr	r1, [pc, #112]	@ (8001ef8 <main+0x658>)
 8001e88:	e9c1 2300 	strd	r2, r3, [r1]
	hc_perp=-(g_perp[0][0]*g[1][0]-g_perp[1][0]*g[0][0])*Bb/(g[0][0]*Bb+g[1][0]*Cc);
 8001e8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <main+0x640>)
 8001e8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e92:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <main+0x638>)
 8001e94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e98:	f7fe fb7a 	bl	8000590 <__aeabi_dmul>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4614      	mov	r4, r2
 8001ea2:	461d      	mov	r5, r3
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <main+0x640>)
 8001ea6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <main+0x638>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f7fe fb6e 	bl	8000590 <__aeabi_dmul>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4620      	mov	r0, r4
 8001eba:	4629      	mov	r1, r5
 8001ebc:	f7fe f9b0 	bl	8000220 <__aeabi_dsub>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	603a      	str	r2, [r7, #0]
 8001ec6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	e016      	b.n	8001efc <main+0x65c>
 8001ece:	bf00      	nop
 8001ed0:	200005a0 	.word	0x200005a0
 8001ed4:	20000540 	.word	0x20000540
 8001ed8:	20000580 	.word	0x20000580
 8001edc:	20000550 	.word	0x20000550
 8001ee0:	20000590 	.word	0x20000590
 8001ee4:	20000520 	.word	0x20000520
 8001ee8:	20000560 	.word	0x20000560
 8001eec:	20000530 	.word	0x20000530
 8001ef0:	20000570 	.word	0x20000570
 8001ef4:	20000420 	.word	0x20000420
 8001ef8:	20000428 	.word	0x20000428
 8001efc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f04:	f7fe fb44 	bl	8000590 <__aeabi_dmul>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4614      	mov	r4, r2
 8001f0e:	461d      	mov	r5, r3
 8001f10:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <main+0x6c8>)
 8001f12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f1a:	f7fe fb39 	bl	8000590 <__aeabi_dmul>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4690      	mov	r8, r2
 8001f24:	4699      	mov	r9, r3
 8001f26:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <main+0x6c8>)
 8001f28:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f30:	f7fe fb2e 	bl	8000590 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4640      	mov	r0, r8
 8001f3a:	4649      	mov	r1, r9
 8001f3c:	f7fe f972 	bl	8000224 <__adddf3>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4620      	mov	r0, r4
 8001f46:	4629      	mov	r1, r5
 8001f48:	f7fe fc4c 	bl	80007e4 <__aeabi_ddiv>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4906      	ldr	r1, [pc, #24]	@ (8001f6c <main+0x6cc>)
 8001f52:	e9c1 2300 	strd	r2, r3, [r1]
	if(TCS34725_Init() != 0){
 8001f56:	f7ff f8ed 	bl	8001134 <TCS34725_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d009      	beq.n	8001f74 <main+0x6d4>
      printf("TCS34725 initialization error!!\n");
 8001f60:	4803      	ldr	r0, [pc, #12]	@ (8001f70 <main+0x6d0>)
 8001f62:	f009 fcff 	bl	800b964 <puts>
 8001f66:	e008      	b.n	8001f7a <main+0x6da>
 8001f68:	20000580 	.word	0x20000580
 8001f6c:	20000430 	.word	0x20000430
 8001f70:	0800c0d0 	.word	0x0800c0d0
  }
	else{
  printf("TCS34725 initialization success!!\n");
 8001f74:	48b4      	ldr	r0, [pc, #720]	@ (8002248 <main+0x9a8>)
 8001f76:	f009 fcf5 	bl	800b964 <puts>
	}
	HAL_TIM_Base_Start_IT(&htim12);
 8001f7a:	48b4      	ldr	r0, [pc, #720]	@ (800224c <main+0x9ac>)
 8001f7c:	f006 fa36 	bl	80083ec <HAL_TIM_Base_Start_IT>
	MPU6050_Init();
 8001f80:	f7ff fb54 	bl	800162c <MPU6050_Init>
	setup();
 8001f84:	f002 fad8 	bl	8004538 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		rgb=TCS34725_Get_RGBData();
 8001f88:	4cb1      	ldr	r4, [pc, #708]	@ (8002250 <main+0x9b0>)
 8001f8a:	f107 0310 	add.w	r3, r7, #16
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff f90a 	bl	80011a8 <TCS34725_Get_RGBData>
 8001f94:	4623      	mov	r3, r4
 8001f96:	f107 0210 	add.w	r2, r7, #16
 8001f9a:	6810      	ldr	r0, [r2, #0]
 8001f9c:	6851      	ldr	r1, [r2, #4]
 8001f9e:	c303      	stmia	r3!, {r0, r1}
		RGB888=TCS34725_GetRGB888(rgb);
 8001fa0:	4bab      	ldr	r3, [pc, #684]	@ (8002250 <main+0x9b0>)
 8001fa2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fa6:	f7ff f955 	bl	8001254 <TCS34725_GetRGB888>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4aa9      	ldr	r2, [pc, #676]	@ (8002254 <main+0x9b4>)
 8001fae:	6013      	str	r3, [r2, #0]
				color[0]=RGB888>>16 ;
 8001fb0:	4ba8      	ldr	r3, [pc, #672]	@ (8002254 <main+0x9b4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0c1b      	lsrs	r3, r3, #16
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	4ba7      	ldr	r3, [pc, #668]	@ (8002258 <main+0x9b8>)
 8001fba:	701a      	strb	r2, [r3, #0]
				color[1]=(RGB888>>8) & 0xff;
 8001fbc:	4ba5      	ldr	r3, [pc, #660]	@ (8002254 <main+0x9b4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	4ba4      	ldr	r3, [pc, #656]	@ (8002258 <main+0x9b8>)
 8001fc6:	705a      	strb	r2, [r3, #1]
				color[2]=(RGB888) & 0xff;
 8001fc8:	4ba2      	ldr	r3, [pc, #648]	@ (8002254 <main+0x9b4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4ba2      	ldr	r3, [pc, #648]	@ (8002258 <main+0x9b8>)
 8001fd0:	709a      	strb	r2, [r3, #2]
		if(interrupt_counter>old_couter)
 8001fd2:	4ba2      	ldr	r3, [pc, #648]	@ (800225c <main+0x9bc>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	4ba2      	ldr	r3, [pc, #648]	@ (8002260 <main+0x9c0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d9d4      	bls.n	8001f88 <main+0x6e8>
		{
			//omega=(g[0][0]*Speed_EncoderB+g[1][0]*Speed_EncoderC-Speed_EncoderA)/(g[1][1]*Bb+g[1][0]*Cc);
			theta=theta_0+((g[0][0]*distanceB+g[1][0]*distanceC)-distanceA)/(g[0][0]*Bb+g[1][0]*Cc);
 8001fde:	4ba1      	ldr	r3, [pc, #644]	@ (8002264 <main+0x9c4>)
 8001fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fe4:	4ba0      	ldr	r3, [pc, #640]	@ (8002268 <main+0x9c8>)
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	f7fe fad1 	bl	8000590 <__aeabi_dmul>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4614      	mov	r4, r2
 8001ff4:	461d      	mov	r5, r3
 8001ff6:	4b9b      	ldr	r3, [pc, #620]	@ (8002264 <main+0x9c4>)
 8001ff8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ffc:	4b9b      	ldr	r3, [pc, #620]	@ (800226c <main+0x9cc>)
 8001ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002002:	f7fe fac5 	bl	8000590 <__aeabi_dmul>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4620      	mov	r0, r4
 800200c:	4629      	mov	r1, r5
 800200e:	f7fe f909 	bl	8000224 <__adddf3>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
 800201a:	4b95      	ldr	r3, [pc, #596]	@ (8002270 <main+0x9d0>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f7fe f8fe 	bl	8000220 <__aeabi_dsub>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4614      	mov	r4, r2
 800202a:	461d      	mov	r5, r3
 800202c:	4b8d      	ldr	r3, [pc, #564]	@ (8002264 <main+0x9c4>)
 800202e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002032:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002036:	f7fe faab 	bl	8000590 <__aeabi_dmul>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4690      	mov	r8, r2
 8002040:	4699      	mov	r9, r3
 8002042:	4b88      	ldr	r3, [pc, #544]	@ (8002264 <main+0x9c4>)
 8002044:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002048:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800204c:	f7fe faa0 	bl	8000590 <__aeabi_dmul>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4640      	mov	r0, r8
 8002056:	4649      	mov	r1, r9
 8002058:	f7fe f8e4 	bl	8000224 <__adddf3>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4620      	mov	r0, r4
 8002062:	4629      	mov	r1, r5
 8002064:	f7fe fbbe 	bl	80007e4 <__aeabi_ddiv>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	4b80      	ldr	r3, [pc, #512]	@ (8002274 <main+0x9d4>)
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	f7fe f8d5 	bl	8000224 <__adddf3>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	497e      	ldr	r1, [pc, #504]	@ (8002278 <main+0x9d8>)
 8002080:	e9c1 2300 	strd	r2, r3, [r1]
			vA_perp=Speed_EncoderA*ha_perp+Speed_EncoderB*hb_perp+Speed_EncoderC*hc_perp;
 8002084:	4b7d      	ldr	r3, [pc, #500]	@ (800227c <main+0x9dc>)
 8002086:	e9d3 0100 	ldrd	r0, r1, [r3]
 800208a:	4b7d      	ldr	r3, [pc, #500]	@ (8002280 <main+0x9e0>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	f7fe fa7e 	bl	8000590 <__aeabi_dmul>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4614      	mov	r4, r2
 800209a:	461d      	mov	r5, r3
 800209c:	4b79      	ldr	r3, [pc, #484]	@ (8002284 <main+0x9e4>)
 800209e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020a2:	4b79      	ldr	r3, [pc, #484]	@ (8002288 <main+0x9e8>)
 80020a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a8:	f7fe fa72 	bl	8000590 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4620      	mov	r0, r4
 80020b2:	4629      	mov	r1, r5
 80020b4:	f7fe f8b6 	bl	8000224 <__adddf3>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4614      	mov	r4, r2
 80020be:	461d      	mov	r5, r3
 80020c0:	4b72      	ldr	r3, [pc, #456]	@ (800228c <main+0x9ec>)
 80020c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020c6:	4b72      	ldr	r3, [pc, #456]	@ (8002290 <main+0x9f0>)
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	f7fe fa60 	bl	8000590 <__aeabi_dmul>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4620      	mov	r0, r4
 80020d6:	4629      	mov	r1, r5
 80020d8:	f7fe f8a4 	bl	8000224 <__adddf3>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	496c      	ldr	r1, [pc, #432]	@ (8002294 <main+0x9f4>)
 80020e2:	e9c1 2300 	strd	r2, r3, [r1]
			/*
			 * Rotation matrix
			 */
			RX[0][0]=cos(theta);
 80020e6:	4b64      	ldr	r3, [pc, #400]	@ (8002278 <main+0x9d8>)
 80020e8:	ed93 7b00 	vldr	d7, [r3]
 80020ec:	eeb0 0a47 	vmov.f32	s0, s14
 80020f0:	eef0 0a67 	vmov.f32	s1, s15
 80020f4:	f008 fa64 	bl	800a5c0 <cos>
 80020f8:	eeb0 7a40 	vmov.f32	s14, s0
 80020fc:	eef0 7a60 	vmov.f32	s15, s1
 8002100:	4b65      	ldr	r3, [pc, #404]	@ (8002298 <main+0x9f8>)
 8002102:	ed83 7b00 	vstr	d7, [r3]
			RX[1][0]=sin(theta);
 8002106:	4b5c      	ldr	r3, [pc, #368]	@ (8002278 <main+0x9d8>)
 8002108:	ed93 7b00 	vldr	d7, [r3]
 800210c:	eeb0 0a47 	vmov.f32	s0, s14
 8002110:	eef0 0a67 	vmov.f32	s1, s15
 8002114:	f008 fab0 	bl	800a678 <sin>
 8002118:	eeb0 7a40 	vmov.f32	s14, s0
 800211c:	eef0 7a60 	vmov.f32	s15, s1
 8002120:	4b5d      	ldr	r3, [pc, #372]	@ (8002298 <main+0x9f8>)
 8002122:	ed83 7b02 	vstr	d7, [r3, #8]
			RY[0][0]=-sin(theta);
 8002126:	4b54      	ldr	r3, [pc, #336]	@ (8002278 <main+0x9d8>)
 8002128:	ed93 7b00 	vldr	d7, [r3]
 800212c:	eeb0 0a47 	vmov.f32	s0, s14
 8002130:	eef0 0a67 	vmov.f32	s1, s15
 8002134:	f008 faa0 	bl	800a678 <sin>
 8002138:	ec53 2b10 	vmov	r2, r3, d0
 800213c:	4692      	mov	sl, r2
 800213e:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8002142:	4b56      	ldr	r3, [pc, #344]	@ (800229c <main+0x9fc>)
 8002144:	e9c3 ab00 	strd	sl, fp, [r3]
			RY[1][0]=cos(theta);
 8002148:	4b4b      	ldr	r3, [pc, #300]	@ (8002278 <main+0x9d8>)
 800214a:	ed93 7b00 	vldr	d7, [r3]
 800214e:	eeb0 0a47 	vmov.f32	s0, s14
 8002152:	eef0 0a67 	vmov.f32	s1, s15
 8002156:	f008 fa33 	bl	800a5c0 <cos>
 800215a:	eeb0 7a40 	vmov.f32	s14, s0
 800215e:	eef0 7a60 	vmov.f32	s15, s1
 8002162:	4b4e      	ldr	r3, [pc, #312]	@ (800229c <main+0x9fc>)
 8002164:	ed83 7b02 	vstr	d7, [r3, #8]

			at[0][0]=a_encoder[0][0]*RX[0][0]+a_encoder[1][0]*RY[0][0];
 8002168:	4b4d      	ldr	r3, [pc, #308]	@ (80022a0 <main+0xa00>)
 800216a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800216e:	4b4a      	ldr	r3, [pc, #296]	@ (8002298 <main+0x9f8>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	f7fe fa0c 	bl	8000590 <__aeabi_dmul>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4614      	mov	r4, r2
 800217e:	461d      	mov	r5, r3
 8002180:	4b47      	ldr	r3, [pc, #284]	@ (80022a0 <main+0xa00>)
 8002182:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002186:	4b45      	ldr	r3, [pc, #276]	@ (800229c <main+0x9fc>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	f7fe fa00 	bl	8000590 <__aeabi_dmul>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe f844 	bl	8000224 <__adddf3>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4940      	ldr	r1, [pc, #256]	@ (80022a4 <main+0xa04>)
 80021a2:	e9c1 2300 	strd	r2, r3, [r1]
			at[1][0]=a_encoder[0][0]*RX[1][0]+a_encoder[1][0]*RY[1][0];
 80021a6:	4b3e      	ldr	r3, [pc, #248]	@ (80022a0 <main+0xa00>)
 80021a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002298 <main+0x9f8>)
 80021ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021b2:	f7fe f9ed 	bl	8000590 <__aeabi_dmul>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4614      	mov	r4, r2
 80021bc:	461d      	mov	r5, r3
 80021be:	4b38      	ldr	r3, [pc, #224]	@ (80022a0 <main+0xa00>)
 80021c0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80021c4:	4b35      	ldr	r3, [pc, #212]	@ (800229c <main+0x9fc>)
 80021c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021ca:	f7fe f9e1 	bl	8000590 <__aeabi_dmul>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4620      	mov	r0, r4
 80021d4:	4629      	mov	r1, r5
 80021d6:	f7fe f825 	bl	8000224 <__adddf3>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4931      	ldr	r1, [pc, #196]	@ (80022a4 <main+0xa04>)
 80021e0:	e9c1 2302 	strd	r2, r3, [r1, #8]

			//			at_perp[0][0]=a_perp[0][0]*RX[0][0]+a_perp[1][0]*RX[0][1];
			//			at_perp[1][0]=a_perp[0][0]*RY[0][0]+a_perp[1][0]*RY[0][1];

			at_perp[0][0]=a_perp[0][0]*RX[0][0]+a_perp[1][0]*RY[0][1];
 80021e4:	4b30      	ldr	r3, [pc, #192]	@ (80022a8 <main+0xa08>)
 80021e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002298 <main+0x9f8>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	f7fe f9ce 	bl	8000590 <__aeabi_dmul>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4614      	mov	r4, r2
 80021fa:	461d      	mov	r5, r3
 80021fc:	4b2a      	ldr	r3, [pc, #168]	@ (80022a8 <main+0xa08>)
 80021fe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002202:	4b26      	ldr	r3, [pc, #152]	@ (800229c <main+0x9fc>)
 8002204:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002208:	f7fe f9c2 	bl	8000590 <__aeabi_dmul>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4620      	mov	r0, r4
 8002212:	4629      	mov	r1, r5
 8002214:	f7fe f806 	bl	8000224 <__adddf3>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4923      	ldr	r1, [pc, #140]	@ (80022ac <main+0xa0c>)
 800221e:	e9c1 2300 	strd	r2, r3, [r1]
			at_perp[1][0]=a_perp[0][0]*RX[1][0]+a_perp[1][0]*RY[1][0];
 8002222:	4b21      	ldr	r3, [pc, #132]	@ (80022a8 <main+0xa08>)
 8002224:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002228:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <main+0x9f8>)
 800222a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800222e:	f7fe f9af 	bl	8000590 <__aeabi_dmul>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4614      	mov	r4, r2
 8002238:	461d      	mov	r5, r3
 800223a:	4b1b      	ldr	r3, [pc, #108]	@ (80022a8 <main+0xa08>)
 800223c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002240:	4b16      	ldr	r3, [pc, #88]	@ (800229c <main+0x9fc>)
 8002242:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002246:	e033      	b.n	80022b0 <main+0xa10>
 8002248:	0800c0f0 	.word	0x0800c0f0
 800224c:	200002a0 	.word	0x200002a0
 8002250:	200005dc 	.word	0x200005dc
 8002254:	200005e4 	.word	0x200005e4
 8002258:	200005cc 	.word	0x200005cc
 800225c:	20000400 	.word	0x20000400
 8002260:	200005c8 	.word	0x200005c8
 8002264:	20000580 	.word	0x20000580
 8002268:	200004c8 	.word	0x200004c8
 800226c:	200004d0 	.word	0x200004d0
 8002270:	200004c0 	.word	0x200004c0
 8002274:	200005c0 	.word	0x200005c0
 8002278:	200004d8 	.word	0x200004d8
 800227c:	20000408 	.word	0x20000408
 8002280:	20000420 	.word	0x20000420
 8002284:	20000410 	.word	0x20000410
 8002288:	20000428 	.word	0x20000428
 800228c:	20000418 	.word	0x20000418
 8002290:	20000430 	.word	0x20000430
 8002294:	20000438 	.word	0x20000438
 8002298:	20000440 	.word	0x20000440
 800229c:	20000450 	.word	0x20000450
 80022a0:	20000540 	.word	0x20000540
 80022a4:	20000460 	.word	0x20000460
 80022a8:	20000550 	.word	0x20000550
 80022ac:	20000470 	.word	0x20000470
 80022b0:	f7fe f96e 	bl	8000590 <__aeabi_dmul>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4620      	mov	r0, r4
 80022ba:	4629      	mov	r1, r5
 80022bc:	f7fd ffb2 	bl	8000224 <__adddf3>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4978      	ldr	r1, [pc, #480]	@ (80024a8 <main+0xc08>)
 80022c6:	e9c1 2302 	strd	r2, r3, [r1, #8]

			velocity_A[0][0]=Speed_EncoderA*at[0][0];
 80022ca:	4b78      	ldr	r3, [pc, #480]	@ (80024ac <main+0xc0c>)
 80022cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022d0:	4b77      	ldr	r3, [pc, #476]	@ (80024b0 <main+0xc10>)
 80022d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d6:	f7fe f95b 	bl	8000590 <__aeabi_dmul>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4975      	ldr	r1, [pc, #468]	@ (80024b4 <main+0xc14>)
 80022e0:	e9c1 2300 	strd	r2, r3, [r1]
			velocity_A[1][0]=Speed_EncoderA*at[1][0];
 80022e4:	4b71      	ldr	r3, [pc, #452]	@ (80024ac <main+0xc0c>)
 80022e6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80022ea:	4b71      	ldr	r3, [pc, #452]	@ (80024b0 <main+0xc10>)
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	f7fe f94e 	bl	8000590 <__aeabi_dmul>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	496e      	ldr	r1, [pc, #440]	@ (80024b4 <main+0xc14>)
 80022fa:	e9c1 2302 	strd	r2, r3, [r1, #8]

			velocity_A_perp[0][0]=vA_perp*at_perp[0][0];
 80022fe:	4b6a      	ldr	r3, [pc, #424]	@ (80024a8 <main+0xc08>)
 8002300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002304:	4b6c      	ldr	r3, [pc, #432]	@ (80024b8 <main+0xc18>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe f941 	bl	8000590 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	496a      	ldr	r1, [pc, #424]	@ (80024bc <main+0xc1c>)
 8002314:	e9c1 2300 	strd	r2, r3, [r1]
			velocity_A_perp[0][1]=vA_perp*at_perp[1][0];
 8002318:	4b63      	ldr	r3, [pc, #396]	@ (80024a8 <main+0xc08>)
 800231a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800231e:	4b66      	ldr	r3, [pc, #408]	@ (80024b8 <main+0xc18>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	f7fe f934 	bl	8000590 <__aeabi_dmul>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4963      	ldr	r1, [pc, #396]	@ (80024bc <main+0xc1c>)
 800232e:	e9c1 2302 	strd	r2, r3, [r1, #8]

			A_velocity[0][0]=velocity_A[0][0]+velocity_A_perp[0][0];
 8002332:	4b60      	ldr	r3, [pc, #384]	@ (80024b4 <main+0xc14>)
 8002334:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002338:	4b60      	ldr	r3, [pc, #384]	@ (80024bc <main+0xc1c>)
 800233a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233e:	f7fd ff71 	bl	8000224 <__adddf3>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	495e      	ldr	r1, [pc, #376]	@ (80024c0 <main+0xc20>)
 8002348:	e9c1 2300 	strd	r2, r3, [r1]
			A_velocity[1][0]=velocity_A[1][0]+velocity_A_perp[1][0];
 800234c:	4b59      	ldr	r3, [pc, #356]	@ (80024b4 <main+0xc14>)
 800234e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002352:	4b5a      	ldr	r3, [pc, #360]	@ (80024bc <main+0xc1c>)
 8002354:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002358:	f7fd ff64 	bl	8000224 <__adddf3>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4957      	ldr	r1, [pc, #348]	@ (80024c0 <main+0xc20>)
 8002362:	e9c1 2302 	strd	r2, r3, [r1, #8]
			rA[0][0]=rA[0][0]+(A_velocity[0][0]);
 8002366:	4b57      	ldr	r3, [pc, #348]	@ (80024c4 <main+0xc24>)
 8002368:	e9d3 0100 	ldrd	r0, r1, [r3]
 800236c:	4b54      	ldr	r3, [pc, #336]	@ (80024c0 <main+0xc20>)
 800236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002372:	f7fd ff57 	bl	8000224 <__adddf3>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4952      	ldr	r1, [pc, #328]	@ (80024c4 <main+0xc24>)
 800237c:	e9c1 2300 	strd	r2, r3, [r1]
			rA[1][0]=rA[1][0]+(A_velocity[1][0]);
 8002380:	4b50      	ldr	r3, [pc, #320]	@ (80024c4 <main+0xc24>)
 8002382:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002386:	4b4e      	ldr	r3, [pc, #312]	@ (80024c0 <main+0xc20>)
 8002388:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800238c:	f7fd ff4a 	bl	8000224 <__adddf3>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	494b      	ldr	r1, [pc, #300]	@ (80024c4 <main+0xc24>)
 8002396:	e9c1 2302 	strd	r2, r3, [r1, #8]
			old_couter=interrupt_counter;
 800239a:	4b4b      	ldr	r3, [pc, #300]	@ (80024c8 <main+0xc28>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a4b      	ldr	r2, [pc, #300]	@ (80024cc <main+0xc2c>)
 80023a0:	6013      	str	r3, [r2, #0]

			MPU6050_Read_Accel();
 80023a2:	f7ff f999 	bl	80016d8 <MPU6050_Read_Accel>
			angle_X = Accel_X_Angle(Ax, Ay, Az);
 80023a6:	4b4a      	ldr	r3, [pc, #296]	@ (80024d0 <main+0xc30>)
 80023a8:	edd3 7a00 	vldr	s15, [r3]
 80023ac:	4b49      	ldr	r3, [pc, #292]	@ (80024d4 <main+0xc34>)
 80023ae:	ed93 7a00 	vldr	s14, [r3]
 80023b2:	4b49      	ldr	r3, [pc, #292]	@ (80024d8 <main+0xc38>)
 80023b4:	edd3 6a00 	vldr	s13, [r3]
 80023b8:	eeb0 1a66 	vmov.f32	s2, s13
 80023bc:	eef0 0a47 	vmov.f32	s1, s14
 80023c0:	eeb0 0a67 	vmov.f32	s0, s15
 80023c4:	f7ff fa04 	bl	80017d0 <Accel_X_Angle>
 80023c8:	eef0 7a40 	vmov.f32	s15, s0
 80023cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d0:	edc7 7a02 	vstr	s15, [r7, #8]
 80023d4:	7a3b      	ldrb	r3, [r7, #8]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b40      	ldr	r3, [pc, #256]	@ (80024dc <main+0xc3c>)
 80023da:	701a      	strb	r2, [r3, #0]
			angle_Y = Accel_Y_Angle(Ax, Ay, Az);
 80023dc:	4b3c      	ldr	r3, [pc, #240]	@ (80024d0 <main+0xc30>)
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	4b3c      	ldr	r3, [pc, #240]	@ (80024d4 <main+0xc34>)
 80023e4:	ed93 7a00 	vldr	s14, [r3]
 80023e8:	4b3b      	ldr	r3, [pc, #236]	@ (80024d8 <main+0xc38>)
 80023ea:	edd3 6a00 	vldr	s13, [r3]
 80023ee:	eeb0 1a66 	vmov.f32	s2, s13
 80023f2:	eef0 0a47 	vmov.f32	s1, s14
 80023f6:	eeb0 0a67 	vmov.f32	s0, s15
 80023fa:	f7ff fa1d 	bl	8001838 <Accel_Y_Angle>
 80023fe:	eef0 7a40 	vmov.f32	s15, s0
 8002402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002406:	edc7 7a02 	vstr	s15, [r7, #8]
 800240a:	7a3b      	ldrb	r3, [r7, #8]
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4b34      	ldr	r3, [pc, #208]	@ (80024e0 <main+0xc40>)
 8002410:	701a      	strb	r2, [r3, #0]
			theta_angle=theta*180/M_PI;
 8002412:	4b34      	ldr	r3, [pc, #208]	@ (80024e4 <main+0xc44>)
 8002414:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	4b32      	ldr	r3, [pc, #200]	@ (80024e8 <main+0xc48>)
 800241e:	f7fe f8b7 	bl	8000590 <__aeabi_dmul>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	a31d      	add	r3, pc, #116	@ (adr r3, 80024a0 <main+0xc00>)
 800242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002430:	f7fe f9d8 	bl	80007e4 <__aeabi_ddiv>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	f7fe fb42 	bl	8000ac4 <__aeabi_d2iz>
 8002440:	4603      	mov	r3, r0
 8002442:	b21a      	sxth	r2, r3
 8002444:	4b29      	ldr	r3, [pc, #164]	@ (80024ec <main+0xc4c>)
 8002446:	801a      	strh	r2, [r3, #0]
			int16_t rA_x_int16_t = (int16_t)rA[0][0];
 8002448:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <main+0xc24>)
 800244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f7fe fb37 	bl	8000ac4 <__aeabi_d2iz>
 8002456:	4603      	mov	r3, r0
 8002458:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			int16_t rA_y_int16_t = (int16_t)rA[1][0];
 800245a:	4b1a      	ldr	r3, [pc, #104]	@ (80024c4 <main+0xc24>)
 800245c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f7fe fb2e 	bl	8000ac4 <__aeabi_d2iz>
 8002468:	4603      	mov	r3, r0
 800246a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			buffer[2]= theta_angle;
 800246c:	4b1f      	ldr	r3, [pc, #124]	@ (80024ec <main+0xc4c>)
 800246e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002472:	4b1f      	ldr	r3, [pc, #124]	@ (80024f0 <main+0xc50>)
 8002474:	809a      	strh	r2, [r3, #4]
			buffer[3]= rA_x_int16_t;
 8002476:	4a1e      	ldr	r2, [pc, #120]	@ (80024f0 <main+0xc50>)
 8002478:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800247a:	80d3      	strh	r3, [r2, #6]
			buffer[4]= rA_y_int16_t;
 800247c:	4a1c      	ldr	r2, [pc, #112]	@ (80024f0 <main+0xc50>)
 800247e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002480:	8113      	strh	r3, [r2, #8]
			buffer[0]= angle_X;
 8002482:	4b16      	ldr	r3, [pc, #88]	@ (80024dc <main+0xc3c>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	b21a      	sxth	r2, r3
 8002488:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <main+0xc50>)
 800248a:	801a      	strh	r2, [r3, #0]
			buffer[1]= angle_Y;
 800248c:	4b14      	ldr	r3, [pc, #80]	@ (80024e0 <main+0xc40>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	b21a      	sxth	r2, r3
 8002492:	4b17      	ldr	r3, [pc, #92]	@ (80024f0 <main+0xc50>)
 8002494:	805a      	strh	r2, [r3, #2]
			loop();
 8002496:	f002 f865 	bl	8004564 <loop>
		rgb=TCS34725_Get_RGBData();
 800249a:	e575      	b.n	8001f88 <main+0x6e8>
 800249c:	f3af 8000 	nop.w
 80024a0:	54442d18 	.word	0x54442d18
 80024a4:	400921fb 	.word	0x400921fb
 80024a8:	20000470 	.word	0x20000470
 80024ac:	20000460 	.word	0x20000460
 80024b0:	20000408 	.word	0x20000408
 80024b4:	20000490 	.word	0x20000490
 80024b8:	20000438 	.word	0x20000438
 80024bc:	200004a0 	.word	0x200004a0
 80024c0:	200004b0 	.word	0x200004b0
 80024c4:	20000480 	.word	0x20000480
 80024c8:	20000400 	.word	0x20000400
 80024cc:	200005c8 	.word	0x200005c8
 80024d0:	200004e8 	.word	0x200004e8
 80024d4:	200004ec 	.word	0x200004ec
 80024d8:	200004f0 	.word	0x200004f0
 80024dc:	200004fe 	.word	0x200004fe
 80024e0:	200004ff 	.word	0x200004ff
 80024e4:	200004d8 	.word	0x200004d8
 80024e8:	40668000 	.word	0x40668000
 80024ec:	200003fc 	.word	0x200003fc
 80024f0:	200004f4 	.word	0x200004f4

080024f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b094      	sub	sp, #80	@ 0x50
 80024f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024fa:	f107 031c 	add.w	r3, r7, #28
 80024fe:	2234      	movs	r2, #52	@ 0x34
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f009 fb0e 	bl	800bb24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002508:	f107 0308 	add.w	r3, r7, #8
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002518:	2300      	movs	r3, #0
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	4b2c      	ldr	r3, [pc, #176]	@ (80025d0 <SystemClock_Config+0xdc>)
 800251e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002520:	4a2b      	ldr	r2, [pc, #172]	@ (80025d0 <SystemClock_Config+0xdc>)
 8002522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002526:	6413      	str	r3, [r2, #64]	@ 0x40
 8002528:	4b29      	ldr	r3, [pc, #164]	@ (80025d0 <SystemClock_Config+0xdc>)
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002534:	2300      	movs	r3, #0
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	4b26      	ldr	r3, [pc, #152]	@ (80025d4 <SystemClock_Config+0xe0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a25      	ldr	r2, [pc, #148]	@ (80025d4 <SystemClock_Config+0xe0>)
 800253e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b23      	ldr	r3, [pc, #140]	@ (80025d4 <SystemClock_Config+0xe0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002550:	2302      	movs	r3, #2
 8002552:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002554:	2301      	movs	r3, #1
 8002556:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002558:	2310      	movs	r3, #16
 800255a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800255c:	2302      	movs	r3, #2
 800255e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002560:	2300      	movs	r3, #0
 8002562:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002564:	2308      	movs	r3, #8
 8002566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002568:	23b4      	movs	r3, #180	@ 0xb4
 800256a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800256c:	2302      	movs	r3, #2
 800256e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002570:	2302      	movs	r3, #2
 8002572:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002574:	2302      	movs	r3, #2
 8002576:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002578:	f107 031c 	add.w	r3, r7, #28
 800257c:	4618      	mov	r0, r3
 800257e:	f005 fc47 	bl	8007e10 <HAL_RCC_OscConfig>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002588:	f000 fb1c 	bl	8002bc4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800258c:	f005 f8a6 	bl	80076dc <HAL_PWREx_EnableOverDrive>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002596:	f000 fb15 	bl	8002bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800259a:	230f      	movs	r3, #15
 800259c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800259e:	2302      	movs	r3, #2
 80025a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80025aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025b2:	f107 0308 	add.w	r3, r7, #8
 80025b6:	2105      	movs	r1, #5
 80025b8:	4618      	mov	r0, r3
 80025ba:	f005 f8df 	bl	800777c <HAL_RCC_ClockConfig>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80025c4:	f000 fafe 	bl	8002bc4 <Error_Handler>
  }
}
 80025c8:	bf00      	nop
 80025ca:	3750      	adds	r7, #80	@ 0x50
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40007000 	.word	0x40007000

080025d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025dc:	4b12      	ldr	r3, [pc, #72]	@ (8002628 <MX_I2C1_Init+0x50>)
 80025de:	4a13      	ldr	r2, [pc, #76]	@ (800262c <MX_I2C1_Init+0x54>)
 80025e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025e2:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <MX_I2C1_Init+0x50>)
 80025e4:	4a12      	ldr	r2, [pc, #72]	@ (8002630 <MX_I2C1_Init+0x58>)
 80025e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002628 <MX_I2C1_Init+0x50>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002628 <MX_I2C1_Init+0x50>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002628 <MX_I2C1_Init+0x50>)
 80025f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002628 <MX_I2C1_Init+0x50>)
 80025fe:	2200      	movs	r2, #0
 8002600:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002602:	4b09      	ldr	r3, [pc, #36]	@ (8002628 <MX_I2C1_Init+0x50>)
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002608:	4b07      	ldr	r3, [pc, #28]	@ (8002628 <MX_I2C1_Init+0x50>)
 800260a:	2200      	movs	r2, #0
 800260c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800260e:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <MX_I2C1_Init+0x50>)
 8002610:	2200      	movs	r2, #0
 8002612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002614:	4804      	ldr	r0, [pc, #16]	@ (8002628 <MX_I2C1_Init+0x50>)
 8002616:	f004 f83d 	bl	8006694 <HAL_I2C_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002620:	f000 fad0 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000090 	.word	0x20000090
 800262c:	40005400 	.word	0x40005400
 8002630:	000186a0 	.word	0x000186a0

08002634 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002638:	4b12      	ldr	r3, [pc, #72]	@ (8002684 <MX_I2C3_Init+0x50>)
 800263a:	4a13      	ldr	r2, [pc, #76]	@ (8002688 <MX_I2C3_Init+0x54>)
 800263c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800263e:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <MX_I2C3_Init+0x50>)
 8002640:	4a12      	ldr	r2, [pc, #72]	@ (800268c <MX_I2C3_Init+0x58>)
 8002642:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002644:	4b0f      	ldr	r3, [pc, #60]	@ (8002684 <MX_I2C3_Init+0x50>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800264a:	4b0e      	ldr	r3, [pc, #56]	@ (8002684 <MX_I2C3_Init+0x50>)
 800264c:	2200      	movs	r2, #0
 800264e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002650:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <MX_I2C3_Init+0x50>)
 8002652:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002656:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002658:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <MX_I2C3_Init+0x50>)
 800265a:	2200      	movs	r2, #0
 800265c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800265e:	4b09      	ldr	r3, [pc, #36]	@ (8002684 <MX_I2C3_Init+0x50>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002664:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <MX_I2C3_Init+0x50>)
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800266a:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <MX_I2C3_Init+0x50>)
 800266c:	2200      	movs	r2, #0
 800266e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002670:	4804      	ldr	r0, [pc, #16]	@ (8002684 <MX_I2C3_Init+0x50>)
 8002672:	f004 f80f 	bl	8006694 <HAL_I2C_Init>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800267c:	f000 faa2 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}
 8002684:	200000e4 	.word	0x200000e4
 8002688:	40005c00 	.word	0x40005c00
 800268c:	000186a0 	.word	0x000186a0

08002690 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08c      	sub	sp, #48	@ 0x30
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002696:	f107 030c 	add.w	r3, r7, #12
 800269a:	2224      	movs	r2, #36	@ 0x24
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f009 fa40 	bl	800bb24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026ac:	4b21      	ldr	r3, [pc, #132]	@ (8002734 <MX_TIM2_Init+0xa4>)
 80026ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80026b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002734 <MX_TIM2_Init+0xa4>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002734 <MX_TIM2_Init+0xa4>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80026c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002734 <MX_TIM2_Init+0xa4>)
 80026c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002734 <MX_TIM2_Init+0xa4>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ce:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <MX_TIM2_Init+0xa4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80026d4:	2301      	movs	r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026dc:	2301      	movs	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026e8:	2300      	movs	r3, #0
 80026ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026ec:	2301      	movs	r3, #1
 80026ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80026f8:	f107 030c 	add.w	r3, r7, #12
 80026fc:	4619      	mov	r1, r3
 80026fe:	480d      	ldr	r0, [pc, #52]	@ (8002734 <MX_TIM2_Init+0xa4>)
 8002700:	f005 fee4 	bl	80084cc <HAL_TIM_Encoder_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800270a:	f000 fa5b 	bl	8002bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	4619      	mov	r1, r3
 800271a:	4806      	ldr	r0, [pc, #24]	@ (8002734 <MX_TIM2_Init+0xa4>)
 800271c:	f006 fb56 	bl	8008dcc <HAL_TIMEx_MasterConfigSynchronization>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002726:	f000 fa4d 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800272a:	bf00      	nop
 800272c:	3730      	adds	r7, #48	@ 0x30
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000138 	.word	0x20000138

08002738 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08c      	sub	sp, #48	@ 0x30
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800273e:	f107 030c 	add.w	r3, r7, #12
 8002742:	2224      	movs	r2, #36	@ 0x24
 8002744:	2100      	movs	r1, #0
 8002746:	4618      	mov	r0, r3
 8002748:	f009 f9ec 	bl	800bb24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002754:	4b20      	ldr	r3, [pc, #128]	@ (80027d8 <MX_TIM3_Init+0xa0>)
 8002756:	4a21      	ldr	r2, [pc, #132]	@ (80027dc <MX_TIM3_Init+0xa4>)
 8002758:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800275a:	4b1f      	ldr	r3, [pc, #124]	@ (80027d8 <MX_TIM3_Init+0xa0>)
 800275c:	2200      	movs	r2, #0
 800275e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002760:	4b1d      	ldr	r3, [pc, #116]	@ (80027d8 <MX_TIM3_Init+0xa0>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002766:	4b1c      	ldr	r3, [pc, #112]	@ (80027d8 <MX_TIM3_Init+0xa0>)
 8002768:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800276c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276e:	4b1a      	ldr	r3, [pc, #104]	@ (80027d8 <MX_TIM3_Init+0xa0>)
 8002770:	2200      	movs	r2, #0
 8002772:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002774:	4b18      	ldr	r3, [pc, #96]	@ (80027d8 <MX_TIM3_Init+0xa0>)
 8002776:	2280      	movs	r2, #128	@ 0x80
 8002778:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800277a:	2301      	movs	r3, #1
 800277c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002782:	2301      	movs	r3, #1
 8002784:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8002786:	2308      	movs	r3, #8
 8002788:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800278e:	2300      	movs	r3, #0
 8002790:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002792:	2301      	movs	r3, #1
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8002796:	2308      	movs	r3, #8
 8002798:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800279e:	f107 030c 	add.w	r3, r7, #12
 80027a2:	4619      	mov	r1, r3
 80027a4:	480c      	ldr	r0, [pc, #48]	@ (80027d8 <MX_TIM3_Init+0xa0>)
 80027a6:	f005 fe91 	bl	80084cc <HAL_TIM_Encoder_Init>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80027b0:	f000 fa08 	bl	8002bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b4:	2300      	movs	r3, #0
 80027b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027bc:	1d3b      	adds	r3, r7, #4
 80027be:	4619      	mov	r1, r3
 80027c0:	4805      	ldr	r0, [pc, #20]	@ (80027d8 <MX_TIM3_Init+0xa0>)
 80027c2:	f006 fb03 	bl	8008dcc <HAL_TIMEx_MasterConfigSynchronization>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80027cc:	f000 f9fa 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80027d0:	bf00      	nop
 80027d2:	3730      	adds	r7, #48	@ 0x30
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000180 	.word	0x20000180
 80027dc:	40000400 	.word	0x40000400

080027e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	@ 0x30
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027e6:	f107 030c 	add.w	r3, r7, #12
 80027ea:	2224      	movs	r2, #36	@ 0x24
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f009 f998 	bl	800bb24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f4:	1d3b      	adds	r3, r7, #4
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027fc:	4b20      	ldr	r3, [pc, #128]	@ (8002880 <MX_TIM4_Init+0xa0>)
 80027fe:	4a21      	ldr	r2, [pc, #132]	@ (8002884 <MX_TIM4_Init+0xa4>)
 8002800:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002802:	4b1f      	ldr	r3, [pc, #124]	@ (8002880 <MX_TIM4_Init+0xa0>)
 8002804:	2200      	movs	r2, #0
 8002806:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002808:	4b1d      	ldr	r3, [pc, #116]	@ (8002880 <MX_TIM4_Init+0xa0>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800280e:	4b1c      	ldr	r3, [pc, #112]	@ (8002880 <MX_TIM4_Init+0xa0>)
 8002810:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002814:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002816:	4b1a      	ldr	r3, [pc, #104]	@ (8002880 <MX_TIM4_Init+0xa0>)
 8002818:	2200      	movs	r2, #0
 800281a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800281c:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <MX_TIM4_Init+0xa0>)
 800281e:	2280      	movs	r2, #128	@ 0x80
 8002820:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002822:	2301      	movs	r3, #1
 8002824:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800282a:	2301      	movs	r3, #1
 800282c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 800282e:	2308      	movs	r3, #8
 8002830:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002836:	2300      	movs	r3, #0
 8002838:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800283a:	2301      	movs	r3, #1
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 800283e:	2308      	movs	r3, #8
 8002840:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002846:	f107 030c 	add.w	r3, r7, #12
 800284a:	4619      	mov	r1, r3
 800284c:	480c      	ldr	r0, [pc, #48]	@ (8002880 <MX_TIM4_Init+0xa0>)
 800284e:	f005 fe3d 	bl	80084cc <HAL_TIM_Encoder_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002858:	f000 f9b4 	bl	8002bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800285c:	2300      	movs	r3, #0
 800285e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	4619      	mov	r1, r3
 8002868:	4805      	ldr	r0, [pc, #20]	@ (8002880 <MX_TIM4_Init+0xa0>)
 800286a:	f006 faaf 	bl	8008dcc <HAL_TIMEx_MasterConfigSynchronization>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002874:	f000 f9a6 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002878:	bf00      	nop
 800287a:	3730      	adds	r7, #48	@ 0x30
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	200001c8 	.word	0x200001c8
 8002884:	40000800 	.word	0x40000800

08002888 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800288e:	f107 0308 	add.w	r3, r7, #8
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800289c:	463b      	mov	r3, r7
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80028a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002918 <MX_TIM5_Init+0x90>)
 80028a6:	4a1d      	ldr	r2, [pc, #116]	@ (800291c <MX_TIM5_Init+0x94>)
 80028a8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 5;
 80028aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002918 <MX_TIM5_Init+0x90>)
 80028ac:	2205      	movs	r2, #5
 80028ae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b0:	4b19      	ldr	r3, [pc, #100]	@ (8002918 <MX_TIM5_Init+0x90>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 899999;
 80028b6:	4b18      	ldr	r3, [pc, #96]	@ (8002918 <MX_TIM5_Init+0x90>)
 80028b8:	4a19      	ldr	r2, [pc, #100]	@ (8002920 <MX_TIM5_Init+0x98>)
 80028ba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028bc:	4b16      	ldr	r3, [pc, #88]	@ (8002918 <MX_TIM5_Init+0x90>)
 80028be:	2200      	movs	r2, #0
 80028c0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028c2:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <MX_TIM5_Init+0x90>)
 80028c4:	2280      	movs	r2, #128	@ 0x80
 80028c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80028c8:	4813      	ldr	r0, [pc, #76]	@ (8002918 <MX_TIM5_Init+0x90>)
 80028ca:	f005 fd3f 	bl	800834c <HAL_TIM_Base_Init>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 80028d4:	f000 f976 	bl	8002bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80028de:	f107 0308 	add.w	r3, r7, #8
 80028e2:	4619      	mov	r1, r3
 80028e4:	480c      	ldr	r0, [pc, #48]	@ (8002918 <MX_TIM5_Init+0x90>)
 80028e6:	f006 f815 	bl	8008914 <HAL_TIM_ConfigClockSource>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 80028f0:	f000 f968 	bl	8002bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f4:	2300      	movs	r3, #0
 80028f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80028fc:	463b      	mov	r3, r7
 80028fe:	4619      	mov	r1, r3
 8002900:	4805      	ldr	r0, [pc, #20]	@ (8002918 <MX_TIM5_Init+0x90>)
 8002902:	f006 fa63 	bl	8008dcc <HAL_TIMEx_MasterConfigSynchronization>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 800290c:	f000 f95a 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002910:	bf00      	nop
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000210 	.word	0x20000210
 800291c:	40000c00 	.word	0x40000c00
 8002920:	000dbb9f 	.word	0x000dbb9f

08002924 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08c      	sub	sp, #48	@ 0x30
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800292a:	f107 030c 	add.w	r3, r7, #12
 800292e:	2224      	movs	r2, #36	@ 0x24
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f009 f8f6 	bl	800bb24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002938:	1d3b      	adds	r3, r7, #4
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002940:	4b22      	ldr	r3, [pc, #136]	@ (80029cc <MX_TIM8_Init+0xa8>)
 8002942:	4a23      	ldr	r2, [pc, #140]	@ (80029d0 <MX_TIM8_Init+0xac>)
 8002944:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002946:	4b21      	ldr	r3, [pc, #132]	@ (80029cc <MX_TIM8_Init+0xa8>)
 8002948:	2200      	movs	r2, #0
 800294a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800294c:	4b1f      	ldr	r3, [pc, #124]	@ (80029cc <MX_TIM8_Init+0xa8>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002952:	4b1e      	ldr	r3, [pc, #120]	@ (80029cc <MX_TIM8_Init+0xa8>)
 8002954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002958:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800295a:	4b1c      	ldr	r3, [pc, #112]	@ (80029cc <MX_TIM8_Init+0xa8>)
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002960:	4b1a      	ldr	r3, [pc, #104]	@ (80029cc <MX_TIM8_Init+0xa8>)
 8002962:	2200      	movs	r2, #0
 8002964:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002966:	4b19      	ldr	r3, [pc, #100]	@ (80029cc <MX_TIM8_Init+0xa8>)
 8002968:	2280      	movs	r2, #128	@ 0x80
 800296a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800296c:	2301      	movs	r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002970:	2300      	movs	r3, #0
 8002972:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002974:	2301      	movs	r3, #1
 8002976:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8002978:	2308      	movs	r3, #8
 800297a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002980:	2300      	movs	r3, #0
 8002982:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002984:	2301      	movs	r3, #1
 8002986:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8002988:	2308      	movs	r3, #8
 800298a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002990:	f107 030c 	add.w	r3, r7, #12
 8002994:	4619      	mov	r1, r3
 8002996:	480d      	ldr	r0, [pc, #52]	@ (80029cc <MX_TIM8_Init+0xa8>)
 8002998:	f005 fd98 	bl	80084cc <HAL_TIM_Encoder_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80029a2:	f000 f90f 	bl	8002bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	4619      	mov	r1, r3
 80029b2:	4806      	ldr	r0, [pc, #24]	@ (80029cc <MX_TIM8_Init+0xa8>)
 80029b4:	f006 fa0a 	bl	8008dcc <HAL_TIMEx_MasterConfigSynchronization>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80029be:	f000 f901 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80029c2:	bf00      	nop
 80029c4:	3730      	adds	r7, #48	@ 0x30
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000258 	.word	0x20000258
 80029d0:	40010400 	.word	0x40010400

080029d4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029da:	463b      	mov	r3, r7
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80029e6:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <MX_TIM12_Init+0x68>)
 80029e8:	4a15      	ldr	r2, [pc, #84]	@ (8002a40 <MX_TIM12_Init+0x6c>)
 80029ea:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 90-1;
 80029ec:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <MX_TIM12_Init+0x68>)
 80029ee:	2259      	movs	r2, #89	@ 0x59
 80029f0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f2:	4b12      	ldr	r3, [pc, #72]	@ (8002a3c <MX_TIM12_Init+0x68>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 200-1;
 80029f8:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <MX_TIM12_Init+0x68>)
 80029fa:	22c7      	movs	r2, #199	@ 0xc7
 80029fc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029fe:	4b0f      	ldr	r3, [pc, #60]	@ (8002a3c <MX_TIM12_Init+0x68>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a04:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <MX_TIM12_Init+0x68>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002a0a:	480c      	ldr	r0, [pc, #48]	@ (8002a3c <MX_TIM12_Init+0x68>)
 8002a0c:	f005 fc9e 	bl	800834c <HAL_TIM_Base_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_TIM12_Init+0x46>
  {
    Error_Handler();
 8002a16:	f000 f8d5 	bl	8002bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a1e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002a20:	463b      	mov	r3, r7
 8002a22:	4619      	mov	r1, r3
 8002a24:	4805      	ldr	r0, [pc, #20]	@ (8002a3c <MX_TIM12_Init+0x68>)
 8002a26:	f005 ff75 	bl	8008914 <HAL_TIM_ConfigClockSource>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM12_Init+0x60>
  {
    Error_Handler();
 8002a30:	f000 f8c8 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	200002a0 	.word	0x200002a0
 8002a40:	40001800 	.word	0x40001800

08002a44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a48:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <MX_USART2_UART_Init+0x4c>)
 8002a4a:	4a12      	ldr	r2, [pc, #72]	@ (8002a94 <MX_USART2_UART_Init+0x50>)
 8002a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a4e:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <MX_USART2_UART_Init+0x4c>)
 8002a50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a56:	4b0e      	ldr	r3, [pc, #56]	@ (8002a90 <MX_USART2_UART_Init+0x4c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a90 <MX_USART2_UART_Init+0x4c>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a62:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <MX_USART2_UART_Init+0x4c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a68:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <MX_USART2_UART_Init+0x4c>)
 8002a6a:	220c      	movs	r2, #12
 8002a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a6e:	4b08      	ldr	r3, [pc, #32]	@ (8002a90 <MX_USART2_UART_Init+0x4c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a74:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <MX_USART2_UART_Init+0x4c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a7a:	4805      	ldr	r0, [pc, #20]	@ (8002a90 <MX_USART2_UART_Init+0x4c>)
 8002a7c:	f006 fa36 	bl	8008eec <HAL_UART_Init>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a86:	f000 f89d 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200002e8 	.word	0x200002e8
 8002a94:	40004400 	.word	0x40004400

08002a98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	607b      	str	r3, [r7, #4]
 8002aa2:	4b10      	ldr	r3, [pc, #64]	@ (8002ae4 <MX_DMA_Init+0x4c>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8002ae4 <MX_DMA_Init+0x4c>)
 8002aa8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae4 <MX_DMA_Init+0x4c>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ab6:	607b      	str	r3, [r7, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002aba:	2200      	movs	r2, #0
 8002abc:	2100      	movs	r1, #0
 8002abe:	2010      	movs	r0, #16
 8002ac0:	f003 f801 	bl	8005ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002ac4:	2010      	movs	r0, #16
 8002ac6:	f003 f81a 	bl	8005afe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2100      	movs	r1, #0
 8002ace:	2011      	movs	r0, #17
 8002ad0:	f002 fff9 	bl	8005ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002ad4:	2011      	movs	r0, #17
 8002ad6:	f003 f812 	bl	8005afe <HAL_NVIC_EnableIRQ>

}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08a      	sub	sp, #40	@ 0x28
 8002aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aee:	f107 0314 	add.w	r3, r7, #20
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
 8002af8:	609a      	str	r2, [r3, #8]
 8002afa:	60da      	str	r2, [r3, #12]
 8002afc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb8 <MX_GPIO_Init+0xd0>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	4a2c      	ldr	r2, [pc, #176]	@ (8002bb8 <MX_GPIO_Init+0xd0>)
 8002b08:	f043 0304 	orr.w	r3, r3, #4
 8002b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb8 <MX_GPIO_Init+0xd0>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4b26      	ldr	r3, [pc, #152]	@ (8002bb8 <MX_GPIO_Init+0xd0>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	4a25      	ldr	r2, [pc, #148]	@ (8002bb8 <MX_GPIO_Init+0xd0>)
 8002b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b2a:	4b23      	ldr	r3, [pc, #140]	@ (8002bb8 <MX_GPIO_Init+0xd0>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb8 <MX_GPIO_Init+0xd0>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb8 <MX_GPIO_Init+0xd0>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b46:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb8 <MX_GPIO_Init+0xd0>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	4b18      	ldr	r3, [pc, #96]	@ (8002bb8 <MX_GPIO_Init+0xd0>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	4a17      	ldr	r2, [pc, #92]	@ (8002bb8 <MX_GPIO_Init+0xd0>)
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b62:	4b15      	ldr	r3, [pc, #84]	@ (8002bb8 <MX_GPIO_Init+0xd0>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2120      	movs	r1, #32
 8002b72:	4812      	ldr	r0, [pc, #72]	@ (8002bbc <MX_GPIO_Init+0xd4>)
 8002b74:	f003 fd74 	bl	8006660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b7e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	480c      	ldr	r0, [pc, #48]	@ (8002bc0 <MX_GPIO_Init+0xd8>)
 8002b90:	f003 fbd2 	bl	8006338 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002b94:	2320      	movs	r3, #32
 8002b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4804      	ldr	r0, [pc, #16]	@ (8002bbc <MX_GPIO_Init+0xd4>)
 8002bac:	f003 fbc4 	bl	8006338 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002bb0:	bf00      	nop
 8002bb2:	3728      	adds	r7, #40	@ 0x28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40020000 	.word	0x40020000
 8002bc0:	40020800 	.word	0x40020800

08002bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc8:	b672      	cpsid	i
}
 8002bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <Error_Handler+0x8>

08002bd0 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	4a04      	ldr	r2, [pc, #16]	@ (8002c10 <_ZN3ros3MsgC1Ev+0x1c>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	0800c438 	.word	0x0800c438

08002c14 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
      data()
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff ffe8 	bl	8002bf4 <_ZN3ros3MsgC1Ev>
 8002c24:	4a06      	ldr	r2, [pc, #24]	@ (8002c40 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff ffce 	bl	8002bd0 <_ZN3ros4TimeC1Ev>
    {
    }
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	0800c420 	.word	0x0800c420

08002c44 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6859      	ldr	r1, [r3, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	b2ca      	uxtb	r2, r1
 8002c5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	0a19      	lsrs	r1, r3, #8
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	b2ca      	uxtb	r2, r1
 8002c70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	0c19      	lsrs	r1, r3, #16
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	4413      	add	r3, r2
 8002c80:	b2ca      	uxtb	r2, r1
 8002c82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	0e19      	lsrs	r1, r3, #24
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3303      	adds	r3, #3
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	4413      	add	r3, r2
 8002c92:	b2ca      	uxtb	r2, r1
 8002c94:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6899      	ldr	r1, [r3, #8]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	b2ca      	uxtb	r2, r1
 8002ca8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	0a19      	lsrs	r1, r3, #8
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b2ca      	uxtb	r2, r1
 8002cba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	0c19      	lsrs	r1, r3, #16
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	4413      	add	r3, r2
 8002cca:	b2ca      	uxtb	r2, r1
 8002ccc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	0e19      	lsrs	r1, r3, #24
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3303      	adds	r3, #3
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	4413      	add	r3, r2
 8002cdc:	b2ca      	uxtb	r2, r1
 8002cde:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	60fb      	str	r3, [r7, #12]
      return offset;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
    }
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	4413      	add	r3, r2
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3301      	adds	r3, #1
 8002d18:	6839      	ldr	r1, [r7, #0]
 8002d1a:	440b      	add	r3, r1
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	6839      	ldr	r1, [r7, #0]
 8002d30:	440b      	add	r3, r1
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	041b      	lsls	r3, r3, #16
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3303      	adds	r3, #3
 8002d44:	6839      	ldr	r1, [r7, #0]
 8002d46:	440b      	add	r3, r1
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	061b      	lsls	r3, r3, #24
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3304      	adds	r3, #4
 8002d56:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	6839      	ldr	r1, [r7, #0]
 8002d70:	440b      	add	r3, r1
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3302      	adds	r3, #2
 8002d84:	6839      	ldr	r1, [r7, #0]
 8002d86:	440b      	add	r3, r1
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	3303      	adds	r3, #3
 8002d9a:	6839      	ldr	r1, [r7, #0]
 8002d9c:	440b      	add	r3, r1
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3304      	adds	r3, #4
 8002dac:	60fb      	str	r3, [r7, #12]
     return offset;
 8002dae:	68fb      	ldr	r3, [r7, #12]
    }
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	4b03      	ldr	r3, [pc, #12]	@ (8002dd4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	0800c114 	.word	0x0800c114

08002dd8 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	4b03      	ldr	r3, [pc, #12]	@ (8002df0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	0800c124 	.word	0x0800c124

08002df4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fef8 	bl	8002bf4 <_ZN3ros3MsgC1Ev>
 8002e04:	4a0b      	ldr	r2, [pc, #44]	@ (8002e34 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a09      	ldr	r2, [pc, #36]	@ (8002e38 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002e14:	609a      	str	r2, [r3, #8]
      message_type(""),
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a07      	ldr	r2, [pc, #28]	@ (8002e38 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002e1a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a06      	ldr	r2, [pc, #24]	@ (8002e38 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002e20:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	615a      	str	r2, [r3, #20]
    {
    }
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	0800c408 	.word	0x0800c408
 8002e38:	0800c148 	.word	0x0800c148

08002e3c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	8899      	ldrh	r1, [r3, #4]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	b2ca      	uxtb	r2, r1
 8002e56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	889b      	ldrh	r3, [r3, #4]
 8002e5c:	0a1b      	lsrs	r3, r3, #8
 8002e5e:	b299      	uxth	r1, r3
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	3301      	adds	r3, #1
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	4413      	add	r3, r2
 8002e68:	b2ca      	uxtb	r2, r1
 8002e6a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	3302      	adds	r3, #2
 8002e70:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fd f9c6 	bl	8000208 <strlen>
 8002e7c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	4413      	add	r3, r2
 8002e84:	69b9      	ldr	r1, [r7, #24]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f001 fb8e 	bl	80045a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	18d0      	adds	r0, r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f008 febb 	bl	800bc1a <memcpy>
      offset += length_topic_name;
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd f9a9 	bl	8000208 <strlen>
 8002eb6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	6979      	ldr	r1, [r7, #20]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f001 fb71 	bl	80045a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	18d0      	adds	r0, r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f008 fe9e 	bl	800bc1a <memcpy>
      offset += length_message_type;
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd f98c 	bl	8000208 <strlen>
 8002ef0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	6939      	ldr	r1, [r7, #16]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f001 fb54 	bl	80045a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	3304      	adds	r3, #4
 8002f04:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	18d0      	adds	r0, r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4619      	mov	r1, r3
 8002f14:	f008 fe81 	bl	800bc1a <memcpy>
      offset += length_md5sum;
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002f26:	68f9      	ldr	r1, [r7, #12]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	b2ca      	uxtb	r2, r1
 8002f30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	0a19      	lsrs	r1, r3, #8
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	b2ca      	uxtb	r2, r1
 8002f40:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	0c19      	lsrs	r1, r3, #16
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3302      	adds	r3, #2
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	b2ca      	uxtb	r2, r1
 8002f50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	0e19      	lsrs	r1, r3, #24
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3303      	adds	r3, #3
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	b2ca      	uxtb	r2, r1
 8002f60:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3304      	adds	r3, #4
 8002f66:	61fb      	str	r3, [r7, #28]
      return offset;
 8002f68:	69fb      	ldr	r3, [r7, #28]
    }
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b08a      	sub	sp, #40	@ 0x28
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	4413      	add	r3, r2
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	889b      	ldrh	r3, [r3, #4]
 8002f92:	b21a      	sxth	r2, r3
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	3301      	adds	r3, #1
 8002f98:	6839      	ldr	r1, [r7, #0]
 8002f9a:	440b      	add	r3, r1
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	b21b      	sxth	r3, r3
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	b21b      	sxth	r3, r3
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	3302      	adds	r3, #2
 8002fb0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	441a      	add	r2, r3
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f001 fb11 	bl	80045e6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fce:	e00b      	b.n	8002fe8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	441a      	add	r2, r3
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	6839      	ldr	r1, [r7, #0]
 8002fdc:	440b      	add	r3, r1
 8002fde:	7812      	ldrb	r2, [r2, #0]
 8002fe0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	4413      	add	r3, r2
 8002fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d3ed      	bcc.n	8002fd0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	4413      	add	r3, r2
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	3b01      	subs	r3, #1
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	441a      	add	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	4413      	add	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	441a      	add	r2, r3
 800301e:	f107 0310 	add.w	r3, r7, #16
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f001 fade 	bl	80045e6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	3304      	adds	r3, #4
 800302e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	623b      	str	r3, [r7, #32]
 8003034:	e00b      	b.n	800304e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	441a      	add	r2, r3
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	3b01      	subs	r3, #1
 8003040:	6839      	ldr	r1, [r7, #0]
 8003042:	440b      	add	r3, r1
 8003044:	7812      	ldrb	r2, [r2, #0]
 8003046:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	3301      	adds	r3, #1
 800304c:	623b      	str	r3, [r7, #32]
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4413      	add	r3, r2
 8003054:	6a3a      	ldr	r2, [r7, #32]
 8003056:	429a      	cmp	r2, r3
 8003058:	d3ed      	bcc.n	8003036 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4413      	add	r3, r2
 8003060:	3b01      	subs	r3, #1
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	4413      	add	r3, r2
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	3b01      	subs	r3, #1
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	441a      	add	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	441a      	add	r2, r3
 8003084:	f107 030c 	add.w	r3, r7, #12
 8003088:	4611      	mov	r1, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f001 faab 	bl	80045e6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	3304      	adds	r3, #4
 8003094:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	e00b      	b.n	80030b4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	441a      	add	r2, r3
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	6839      	ldr	r1, [r7, #0]
 80030a8:	440b      	add	r3, r1
 80030aa:	7812      	ldrb	r2, [r2, #0]
 80030ac:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3301      	adds	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4413      	add	r3, r2
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d3ed      	bcc.n	800309c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4413      	add	r3, r2
 80030c6:	3b01      	subs	r3, #1
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	441a      	add	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4413      	add	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	6839      	ldr	r1, [r7, #0]
 80030ee:	440a      	add	r2, r1
 80030f0:	7812      	ldrb	r2, [r2, #0]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	3301      	adds	r3, #1
 80030fc:	6839      	ldr	r1, [r7, #0]
 80030fe:	440b      	add	r3, r1
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	021b      	lsls	r3, r3, #8
 8003104:	4313      	orrs	r3, r2
 8003106:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	3302      	adds	r3, #2
 800310e:	6839      	ldr	r1, [r7, #0]
 8003110:	440b      	add	r3, r1
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	4313      	orrs	r3, r2
 8003118:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	3303      	adds	r3, #3
 8003120:	6839      	ldr	r1, [r7, #0]
 8003122:	440b      	add	r3, r1
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	061b      	lsls	r3, r3, #24
 8003128:	4313      	orrs	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	3304      	adds	r3, #4
 8003136:	61bb      	str	r3, [r7, #24]
     return offset;
 8003138:	69bb      	ldr	r3, [r7, #24]
    }
 800313a:	4618      	mov	r0, r3
 800313c:	3728      	adds	r7, #40	@ 0x28
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	4b03      	ldr	r3, [pc, #12]	@ (800315c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	0800c14c 	.word	0x0800c14c

08003160 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	4b03      	ldr	r3, [pc, #12]	@ (8003178 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	0800c168 	.word	0x0800c168

0800317c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fd34 	bl	8002bf4 <_ZN3ros3MsgC1Ev>
 800318c:	4a06      	ldr	r2, [pc, #24]	@ (80031a8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
      level(0),
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	711a      	strb	r2, [r3, #4]
      msg("")
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a04      	ldr	r2, [pc, #16]	@ (80031ac <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800319c:	609a      	str	r2, [r3, #8]
    {
    }
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	0800c3f0 	.word	0x0800c3f0
 80031ac:	0800c148 	.word	0x0800c148

080031b0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	4413      	add	r3, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	7912      	ldrb	r2, [r2, #4]
 80031c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	3301      	adds	r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd f817 	bl	8000208 <strlen>
 80031da:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	4413      	add	r3, r2
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f001 f9df 	bl	80045a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3304      	adds	r3, #4
 80031ee:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	18d0      	adds	r0, r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	4619      	mov	r1, r3
 80031fe:	f008 fd0c 	bl	800bc1a <memcpy>
      offset += length_msg;
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4413      	add	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
      return offset;
 800320a:	68fb      	ldr	r3, [r7, #12]
    }
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	4413      	add	r3, r2
 8003228:	781a      	ldrb	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	3301      	adds	r3, #1
 8003232:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	441a      	add	r2, r3
 800323a:	f107 030c 	add.w	r3, r7, #12
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f001 f9d0 	bl	80045e6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	3304      	adds	r3, #4
 800324a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	e00b      	b.n	800326a <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	441a      	add	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	3b01      	subs	r3, #1
 800325c:	6839      	ldr	r1, [r7, #0]
 800325e:	440b      	add	r3, r1
 8003260:	7812      	ldrb	r2, [r2, #0]
 8003262:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	3301      	adds	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	429a      	cmp	r2, r3
 8003274:	d3ed      	bcc.n	8003252 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4413      	add	r3, r2
 800327c:	3b01      	subs	r3, #1
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	4413      	add	r3, r2
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	3b01      	subs	r3, #1
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	441a      	add	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
     return offset;
 800329a:	693b      	ldr	r3, [r7, #16]
    }
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	4b03      	ldr	r3, [pc, #12]	@ (80032bc <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	0800c18c 	.word	0x0800c18c

080032c0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	4b03      	ldr	r3, [pc, #12]	@ (80032d8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	0800c1a0 	.word	0x0800c1a0

080032dc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fc84 	bl	8002bf4 <_ZN3ros3MsgC1Ev>
 80032ec:	4a11      	ldr	r2, [pc, #68]	@ (8003334 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	609a      	str	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	611a      	str	r2, [r3, #16]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	615a      	str	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	61da      	str	r2, [r3, #28]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	621a      	str	r2, [r3, #32]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	0800c3d8 	.word	0x0800c3d8

08003338 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	@ 0x28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6859      	ldr	r1, [r3, #4]
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	4413      	add	r3, r2
 8003350:	b2ca      	uxtb	r2, r1
 8003352:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	0a19      	lsrs	r1, r3, #8
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335c:	3301      	adds	r3, #1
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	4413      	add	r3, r2
 8003362:	b2ca      	uxtb	r2, r1
 8003364:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	0c19      	lsrs	r1, r3, #16
 800336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336e:	3302      	adds	r3, #2
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	4413      	add	r3, r2
 8003374:	b2ca      	uxtb	r2, r1
 8003376:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	0e19      	lsrs	r1, r3, #24
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	3303      	adds	r3, #3
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	4413      	add	r3, r2
 8003386:	b2ca      	uxtb	r2, r1
 8003388:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	3304      	adds	r3, #4
 800338e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003390:	2300      	movs	r3, #0
 8003392:	623b      	str	r3, [r7, #32]
 8003394:	e02a      	b.n	80033ec <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80033a4:	6939      	ldr	r1, [r7, #16]
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	4413      	add	r3, r2
 80033ac:	b2ca      	uxtb	r2, r1
 80033ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	0a19      	lsrs	r1, r3, #8
 80033b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b6:	3301      	adds	r3, #1
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	4413      	add	r3, r2
 80033bc:	b2ca      	uxtb	r2, r1
 80033be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	0c19      	lsrs	r1, r3, #16
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	3302      	adds	r3, #2
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	4413      	add	r3, r2
 80033cc:	b2ca      	uxtb	r2, r1
 80033ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	0e19      	lsrs	r1, r3, #24
 80033d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d6:	3303      	adds	r3, #3
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	4413      	add	r3, r2
 80033dc:	b2ca      	uxtb	r2, r1
 80033de:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	3304      	adds	r3, #4
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	3301      	adds	r3, #1
 80033ea:	623b      	str	r3, [r7, #32]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	6a3a      	ldr	r2, [r7, #32]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d3cf      	bcc.n	8003396 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6919      	ldr	r1, [r3, #16]
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	4413      	add	r3, r2
 8003400:	b2ca      	uxtb	r2, r1
 8003402:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	0a19      	lsrs	r1, r3, #8
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	3301      	adds	r3, #1
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	4413      	add	r3, r2
 8003412:	b2ca      	uxtb	r2, r1
 8003414:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	0c19      	lsrs	r1, r3, #16
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	3302      	adds	r3, #2
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	4413      	add	r3, r2
 8003424:	b2ca      	uxtb	r2, r1
 8003426:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	0e19      	lsrs	r1, r3, #24
 800342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003430:	3303      	adds	r3, #3
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	4413      	add	r3, r2
 8003436:	b2ca      	uxtb	r2, r1
 8003438:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	3304      	adds	r3, #4
 800343e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003440:	2300      	movs	r3, #0
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	e02a      	b.n	800349c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003454:	68f9      	ldr	r1, [r7, #12]
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	4413      	add	r3, r2
 800345c:	b2ca      	uxtb	r2, r1
 800345e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	0a19      	lsrs	r1, r3, #8
 8003464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003466:	3301      	adds	r3, #1
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	4413      	add	r3, r2
 800346c:	b2ca      	uxtb	r2, r1
 800346e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	0c19      	lsrs	r1, r3, #16
 8003474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003476:	3302      	adds	r3, #2
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	4413      	add	r3, r2
 800347c:	b2ca      	uxtb	r2, r1
 800347e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	0e19      	lsrs	r1, r3, #24
 8003484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003486:	3303      	adds	r3, #3
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	4413      	add	r3, r2
 800348c:	b2ca      	uxtb	r2, r1
 800348e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8003490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003492:	3304      	adds	r3, #4
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3301      	adds	r3, #1
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d3cf      	bcc.n	8003446 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69d9      	ldr	r1, [r3, #28]
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	4413      	add	r3, r2
 80034b0:	b2ca      	uxtb	r2, r1
 80034b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	0a19      	lsrs	r1, r3, #8
 80034ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034bc:	3301      	adds	r3, #1
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	4413      	add	r3, r2
 80034c2:	b2ca      	uxtb	r2, r1
 80034c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	0c19      	lsrs	r1, r3, #16
 80034cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ce:	3302      	adds	r3, #2
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	4413      	add	r3, r2
 80034d4:	b2ca      	uxtb	r2, r1
 80034d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	0e19      	lsrs	r1, r3, #24
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	3303      	adds	r3, #3
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	4413      	add	r3, r2
 80034e6:	b2ca      	uxtb	r2, r1
 80034e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	3304      	adds	r3, #4
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80034f0:	2300      	movs	r3, #0
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	e027      	b.n	8003546 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fc fe80 	bl	8000208 <strlen>
 8003508:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	4413      	add	r3, r2
 8003510:	6979      	ldr	r1, [r7, #20]
 8003512:	4618      	mov	r0, r3
 8003514:	f001 f848 	bl	80045a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	3304      	adds	r3, #4
 800351c:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800351e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	18d0      	adds	r0, r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4619      	mov	r1, r3
 8003534:	f008 fb71 	bl	800bc1a <memcpy>
      offset += length_stringsi;
 8003538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	4413      	add	r3, r2
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	3301      	adds	r3, #1
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	429a      	cmp	r2, r3
 800354e:	d3d2      	bcc.n	80034f6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003552:	4618      	mov	r0, r3
 8003554:	3728      	adds	r7, #40	@ 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800355a:	b580      	push	{r7, lr}
 800355c:	b08e      	sub	sp, #56	@ 0x38
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	4413      	add	r3, r2
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003574:	3301      	adds	r3, #1
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	4413      	add	r3, r2
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	6a3a      	ldr	r2, [r7, #32]
 8003580:	4313      	orrs	r3, r2
 8003582:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003586:	3302      	adds	r3, #2
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	4413      	add	r3, r2
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	041b      	lsls	r3, r3, #16
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	4313      	orrs	r3, r2
 8003594:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003598:	3303      	adds	r3, #3
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	4413      	add	r3, r2
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	061b      	lsls	r3, r3, #24
 80035a2:	6a3a      	ldr	r2, [r7, #32]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80035a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035aa:	3304      	adds	r3, #4
 80035ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	6a3a      	ldr	r2, [r7, #32]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d90a      	bls.n	80035ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4619      	mov	r1, r3
 80035c2:	4610      	mov	r0, r2
 80035c4:	f008 f880 	bl	800b6c8 <realloc>
 80035c8:	4602      	mov	r2, r0
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a3a      	ldr	r2, [r7, #32]
 80035d2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80035d4:	2300      	movs	r3, #0
 80035d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80035d8:	e035      	b.n	8003646 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035e2:	6839      	ldr	r1, [r7, #0]
 80035e4:	440a      	add	r2, r1
 80035e6:	7812      	ldrb	r2, [r2, #0]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f0:	3301      	adds	r3, #1
 80035f2:	6839      	ldr	r1, [r7, #0]
 80035f4:	440b      	add	r3, r1
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	021b      	lsls	r3, r3, #8
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003602:	3302      	adds	r3, #2
 8003604:	6839      	ldr	r1, [r7, #0]
 8003606:	440b      	add	r3, r1
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003614:	3303      	adds	r3, #3
 8003616:	6839      	ldr	r1, [r7, #0]
 8003618:	440b      	add	r3, r1
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	061b      	lsls	r3, r3, #24
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800362a:	3304      	adds	r3, #4
 800362c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	3208      	adds	r2, #8
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003642:	3301      	adds	r3, #1
 8003644:	633b      	str	r3, [r7, #48]	@ 0x30
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800364c:	429a      	cmp	r2, r3
 800364e:	d3c4      	bcc.n	80035da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	4413      	add	r3, r2
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800365a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800365c:	3301      	adds	r3, #1
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	4413      	add	r3, r2
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	4313      	orrs	r3, r2
 800366a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800366c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366e:	3302      	adds	r3, #2
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	4413      	add	r3, r2
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	041b      	lsls	r3, r3, #16
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	4313      	orrs	r3, r2
 800367c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800367e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003680:	3303      	adds	r3, #3
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	4413      	add	r3, r2
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	061b      	lsls	r3, r3, #24
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	4313      	orrs	r3, r2
 800368e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003692:	3304      	adds	r3, #4
 8003694:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	429a      	cmp	r2, r3
 800369e:	d90a      	bls.n	80036b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699a      	ldr	r2, [r3, #24]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f008 f80c 	bl	800b6c8 <realloc>
 80036b0:	4602      	mov	r2, r0
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80036bc:	2300      	movs	r3, #0
 80036be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036c0:	e035      	b.n	800372e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036ca:	6839      	ldr	r1, [r7, #0]
 80036cc:	440a      	add	r2, r1
 80036ce:	7812      	ldrb	r2, [r2, #0]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d8:	3301      	adds	r3, #1
 80036da:	6839      	ldr	r1, [r7, #0]
 80036dc:	440b      	add	r3, r1
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ea:	3302      	adds	r3, #2
 80036ec:	6839      	ldr	r1, [r7, #0]
 80036ee:	440b      	add	r3, r1
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	041b      	lsls	r3, r3, #16
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036fc:	3303      	adds	r3, #3
 80036fe:	6839      	ldr	r1, [r7, #0]
 8003700:	440b      	add	r3, r1
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	061b      	lsls	r3, r3, #24
 8003706:	4313      	orrs	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003712:	3304      	adds	r3, #4
 8003714:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	3214      	adds	r2, #20
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8003728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372a:	3301      	adds	r3, #1
 800372c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003734:	429a      	cmp	r2, r3
 8003736:	d3c4      	bcc.n	80036c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	4413      	add	r3, r2
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003744:	3301      	adds	r3, #1
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	4413      	add	r3, r2
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003756:	3302      	adds	r3, #2
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	4413      	add	r3, r2
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	041b      	lsls	r3, r3, #16
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003768:	3303      	adds	r3, #3
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	4413      	add	r3, r2
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4313      	orrs	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800377a:	3304      	adds	r3, #4
 800377c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	429a      	cmp	r2, r3
 8003786:	d90a      	bls.n	800379e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f007 ff98 	bl	800b6c8 <realloc>
 8003798:	4602      	mov	r2, r0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80037a4:	2300      	movs	r3, #0
 80037a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037a8:	e03e      	b.n	8003828 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80037aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	441a      	add	r2, r3
 80037b0:	f107 030c 	add.w	r3, r7, #12
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 ff15 	bl	80045e6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80037bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037be:	3304      	adds	r3, #4
 80037c0:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80037c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c6:	e00b      	b.n	80037e0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	441a      	add	r2, r3
 80037ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d0:	3b01      	subs	r3, #1
 80037d2:	6839      	ldr	r1, [r7, #0]
 80037d4:	440b      	add	r3, r1
 80037d6:	7812      	ldrb	r2, [r2, #0]
 80037d8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	3301      	adds	r3, #1
 80037de:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4413      	add	r3, r2
 80037e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d3ed      	bcc.n	80037c8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80037ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4413      	add	r3, r2
 80037f2:	3b01      	subs	r3, #1
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	4413      	add	r3, r2
 80037f8:	2200      	movs	r2, #0
 80037fa:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80037fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fe:	3b01      	subs	r3, #1
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	441a      	add	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003808:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4413      	add	r3, r2
 800380e:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	3220      	adds	r2, #32
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8003822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003824:	3301      	adds	r3, #1
 8003826:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800382e:	429a      	cmp	r2, r3
 8003830:	d3bb      	bcc.n	80037aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8003832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8003834:	4618      	mov	r0, r3
 8003836:	3738      	adds	r7, #56	@ 0x38
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	4b03      	ldr	r3, [pc, #12]	@ (8003854 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	0800c32c 	.word	0x0800c32c

08003858 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	4b03      	ldr	r3, [pc, #12]	@ (8003870 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8003862:	4618      	mov	r0, r3
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	0800c1c4 	.word	0x0800c1c4

08003874 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	611a      	str	r2, [r3, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68d8      	ldr	r0, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6891      	ldr	r1, [r2, #8]
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	4798      	blx	r3
 80038c0:	4603      	mov	r3, r0
  };
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
  }
 80038d6:	4618      	mov	r0, r3
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>:
	uint16_t tx_head = 0;
	uint16_t tx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038f2:	2201      	movs	r2, #1
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038fc:	2200      	movs	r2, #0
 80038fe:	805a      	strh	r2, [r3, #2]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003906:	2200      	movs	r2, #0
 8003908:	809a      	strh	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003910:	2200      	movs	r2, #0
 8003912:	80da      	strh	r2, [r3, #6]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800391a:	461a      	mov	r2, r3
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	6093      	str	r3, [r2, #8]
	{
		//this->huart = huart;
	}
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4618      	mov	r0, r3
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <_ZN11SerialClass10get_handleEv>:

	inline UART_HandleTypeDef * const get_handle(void)
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
	{
		return &huart;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800393c:	689b      	ldr	r3, [r3, #8]
	}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <_ZN11SerialClass9start_dmaEv>:

	inline void start_dma(void)
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
		rx_tail = 0;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003962:	2200      	movs	r2, #0
 8003964:	805a      	strh	r2, [r3, #2]
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800396c:	6898      	ldr	r0, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003974:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003978:	4619      	mov	r1, r3
 800397a:	f005 fb77 	bl	800906c <HAL_UART_Receive_DMA>
	}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <_ZN11SerialClass4readEv>:



	inline int read(void)
 8003986:	b480      	push	{r7}
 8003988:	b085      	sub	sp, #20
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
	{
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->NDTR)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	b29b      	uxth	r3, r3
 800399e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80039a2:	b29b      	uxth	r3, r3
				& buf_mask;
 80039a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039a8:	81fb      	strh	r3, [r7, #14]
		if (rx_tail == rx_head)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039b0:	885b      	ldrh	r3, [r3, #2]
 80039b2:	89fa      	ldrh	r2, [r7, #14]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d102      	bne.n	80039be <_ZN11SerialClass4readEv+0x38>
		{
			return -1;
 80039b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039bc:	e01b      	b.n	80039f6 <_ZN11SerialClass4readEv+0x70>
		}

		int c = (int) rx_buf[rx_tail++];
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039c4:	885b      	ldrh	r3, [r3, #2]
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	b291      	uxth	r1, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039d0:	8051      	strh	r1, [r2, #2]
 80039d2:	461a      	mov	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4413      	add	r3, r2
 80039d8:	f893 3800 	ldrb.w	r3, [r3, #2048]	@ 0x800
 80039dc:	60bb      	str	r3, [r7, #8]
		rx_tail &= buf_mask;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039e4:	885b      	ldrh	r3, [r3, #2]
 80039e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039f2:	805a      	strh	r2, [r3, #2]
		return c;
 80039f4:	68bb      	ldr	r3, [r7, #8]
	}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <_ZN11SerialClass5writeEPKhi>:

	inline void write(const uint8_t * const c, const int length)
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b086      	sub	sp, #24
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
	{
		if (length > BUF_SIZE || length < 1)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a14:	dc35      	bgt.n	8003a82 <_ZN11SerialClass5writeEPKhi+0x80>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	dd32      	ble.n	8003a82 <_ZN11SerialClass5writeEPKhi+0x80>
		{
			return;
		}

		while(!tx_cplt)
 8003a1c:	bf00      	nop
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	f083 0301 	eor.w	r3, r3, #1
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1f6      	bne.n	8003a1e <_ZN11SerialClass5writeEPKhi+0x1c>
		{

		}

		for (int i = 0; i < length; i++)
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	e00b      	b.n	8003a4e <_ZN11SerialClass5writeEPKhi+0x4c>
		{
			tx_buf[i] = c[i];
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	7819      	ldrb	r1, [r3, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	4413      	add	r3, r2
 8003a44:	460a      	mov	r2, r1
 8003a46:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < length; i++)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	dbef      	blt.n	8003a36 <_ZN11SerialClass5writeEPKhi+0x34>
		}

		if(tx_cplt)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d010      	beq.n	8003a84 <_ZN11SerialClass5writeEPKhi+0x82>
		{
			tx_cplt = false;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	68f9      	ldr	r1, [r7, #12]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	b292      	uxth	r2, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f005 fa86 	bl	8008f8c <HAL_UART_Transmit_DMA>
 8003a80:	e000      	b.n	8003a84 <_ZN11SerialClass5writeEPKhi+0x82>
			return;
 8003a82:	bf00      	nop
		}
	}
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <_ZN11SerialClass16tx_cplt_callbackEv>:

	inline void tx_cplt_callback(void)
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a98:	2201      	movs	r2, #1
 8003a9a:	701a      	strb	r2, [r3, #0]
	}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <_ZN11SerialClass10reset_rbufEv>:

    inline void reset_rbuf(void){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ab6:	6898      	ldr	r0, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003abe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f005 fad2 	bl	800906c <HAL_UART_Receive_DMA>
    }
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_UART_TxCpltCallback>:
SerialClass serial(huart2);
//SerialClass serial(huart2);
//SerialClass serial(huart3);

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ad0:	b590      	push	{r4, r7, lr}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681c      	ldr	r4, [r3, #0]
 8003adc:	4809      	ldr	r0, [pc, #36]	@ (8003b04 <HAL_UART_TxCpltCallback+0x34>)
 8003ade:	f7ff ff26 	bl	800392e <_ZN11SerialClass10get_handleEv>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	429c      	cmp	r4, r3
 8003ae8:	bf0c      	ite	eq
 8003aea:	2301      	moveq	r3, #1
 8003aec:	2300      	movne	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <HAL_UART_TxCpltCallback+0x2a>
	{
		serial.tx_cplt_callback();
 8003af4:	4803      	ldr	r0, [pc, #12]	@ (8003b04 <HAL_UART_TxCpltCallback+0x34>)
 8003af6:	f7ff ffc8 	bl	8003a8a <_ZN11SerialClass16tx_cplt_callbackEv>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd90      	pop	{r4, r7, pc}
 8003b02:	bf00      	nop
 8003b04:	200005e8 	.word	0x200005e8

08003b08 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	serial.reset_rbuf();
 8003b10:	4803      	ldr	r0, [pc, #12]	@ (8003b20 <HAL_UART_RxCpltCallback+0x18>)
 8003b12:	f7ff ffc9 	bl	8003aa8 <_ZN11SerialClass10reset_rbufEv>
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	200005e8 	.word	0x200005e8

08003b24 <_ZN13STM32HardwareC1Ev>:
#include "SerialClass.h"

class STM32Hardware
{
public:
	STM32Hardware() :
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
			com(&serial)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a04      	ldr	r2, [pc, #16]	@ (8003b40 <_ZN13STM32HardwareC1Ev+0x1c>)
 8003b30:	601a      	str	r2, [r3, #0]
	{

	}
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	200005e8 	.word	0x200005e8

08003b44 <_ZN13STM32Hardware4initEv>:

	void init()
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	{
		com->start_dma();
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff fefa 	bl	800394a <_ZN11SerialClass9start_dmaEv>
	}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <_ZN13STM32Hardware4readEv>:

	int read()
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
	{
		return com->read();
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff ff0b 	bl	8003986 <_ZN11SerialClass4readEv>
 8003b70:	4603      	mov	r3, r0
	}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t* data, int length)
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
	{
		com->write(data, length);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff ff37 	bl	8003a02 <_ZN11SerialClass5writeEPKhi>
	}
 8003b94:	bf00      	nop
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <_ZN13STM32Hardware4timeEv>:

	unsigned long time()
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 8003ba4:	f001 fe84 	bl	80058b0 <HAL_GetTick>
 8003ba8:	4603      	mov	r3, r0
	}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
      data("")
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff f818 	bl	8002bf4 <_ZN3ros3MsgC1Ev>
 8003bc4:	4a05      	ldr	r2, [pc, #20]	@ (8003bdc <_ZN8std_msgs6StringC1Ev+0x28>)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a04      	ldr	r2, [pc, #16]	@ (8003be0 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8003bce:	605a      	str	r2, [r3, #4]
    {
    }
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	0800c3ac 	.word	0x0800c3ac
 8003be0:	0800c148 	.word	0x0800c148

08003be4 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fc fb06 	bl	8000208 <strlen>
 8003bfc:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	4413      	add	r3, r2
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fcce 	bl	80045a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	18d0      	adds	r0, r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	4619      	mov	r1, r3
 8003c20:	f007 fffb 	bl	800bc1a <memcpy>
      offset += length_data;
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4413      	add	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
      return offset;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
    }
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b086      	sub	sp, #24
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	441a      	add	r2, r3
 8003c4a:	f107 030c 	add.w	r3, r7, #12
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 fcc8 	bl	80045e6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	e00b      	b.n	8003c7a <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	441a      	add	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	6839      	ldr	r1, [r7, #0]
 8003c6e:	440b      	add	r3, r1
 8003c70:	7812      	ldrb	r2, [r2, #0]
 8003c72:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	3301      	adds	r3, #1
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4413      	add	r3, r2
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d3ed      	bcc.n	8003c62 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	4413      	add	r3, r2
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	441a      	add	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
     return offset;
 8003caa:	693b      	ldr	r3, [r7, #16]
    }
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	4b03      	ldr	r3, [pc, #12]	@ (8003ccc <_ZN8std_msgs6String7getTypeEv+0x18>)
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	0800c1e8 	.word	0x0800c1e8

08003cd0 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	4b03      	ldr	r3, [pc, #12]	@ (8003ce8 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	0800c1f8 	.word	0x0800c1f8

08003cec <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe ff7c 	bl	8002bf4 <_ZN3ros3MsgC1Ev>
 8003cfc:	4a08      	ldr	r2, [pc, #32]	@ (8003d20 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	601a      	str	r2, [r3, #0]
      label(""),
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a07      	ldr	r2, [pc, #28]	@ (8003d24 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8003d06:	605a      	str	r2, [r3, #4]
      size(0),
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	609a      	str	r2, [r3, #8]
      stride(0)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	60da      	str	r2, [r3, #12]
    {
    }
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	0800c394 	.word	0x0800c394
 8003d24:	0800c148 	.word	0x0800c148

08003d28 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fc fa64 	bl	8000208 <strlen>
 8003d40:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	4413      	add	r3, r2
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fc2c 	bl	80045a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3304      	adds	r3, #4
 8003d54:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	18d0      	adds	r0, r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	4619      	mov	r1, r3
 8003d64:	f007 ff59 	bl	800bc1a <memcpy>
      offset += length_label;
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6899      	ldr	r1, [r3, #8]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	4413      	add	r3, r2
 8003d7a:	b2ca      	uxtb	r2, r1
 8003d7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	0a19      	lsrs	r1, r3, #8
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3301      	adds	r3, #1
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	b2ca      	uxtb	r2, r1
 8003d8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	0c19      	lsrs	r1, r3, #16
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3302      	adds	r3, #2
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	b2ca      	uxtb	r2, r1
 8003da0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	0e19      	lsrs	r1, r3, #24
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3303      	adds	r3, #3
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	4413      	add	r3, r2
 8003db0:	b2ca      	uxtb	r2, r1
 8003db2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3304      	adds	r3, #4
 8003db8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68d9      	ldr	r1, [r3, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	b2ca      	uxtb	r2, r1
 8003dc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	0a19      	lsrs	r1, r3, #8
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	b2ca      	uxtb	r2, r1
 8003dd8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	0c19      	lsrs	r1, r3, #16
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3302      	adds	r3, #2
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	4413      	add	r3, r2
 8003de8:	b2ca      	uxtb	r2, r1
 8003dea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	0e19      	lsrs	r1, r3, #24
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3303      	adds	r3, #3
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	4413      	add	r3, r2
 8003dfa:	b2ca      	uxtb	r2, r1
 8003dfc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3304      	adds	r3, #4
 8003e02:	60fb      	str	r3, [r7, #12]
      return offset;
 8003e04:	68fb      	ldr	r3, [r7, #12]
    }
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b086      	sub	sp, #24
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	441a      	add	r2, r3
 8003e22:	f107 030c 	add.w	r3, r7, #12
 8003e26:	4611      	mov	r1, r2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fbdc 	bl	80045e6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	3304      	adds	r3, #4
 8003e32:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e00b      	b.n	8003e52 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	441a      	add	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	6839      	ldr	r1, [r7, #0]
 8003e46:	440b      	add	r3, r1
 8003e48:	7812      	ldrb	r2, [r2, #0]
 8003e4a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d3ed      	bcc.n	8003e3a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4413      	add	r3, r2
 8003e64:	3b01      	subs	r3, #1
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	4413      	add	r3, r2
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	441a      	add	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	4413      	add	r3, r2
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	3301      	adds	r3, #1
 8003e98:	6839      	ldr	r1, [r7, #0]
 8003e9a:	440b      	add	r3, r1
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	3302      	adds	r3, #2
 8003eae:	6839      	ldr	r1, [r7, #0]
 8003eb0:	440b      	add	r3, r1
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	041b      	lsls	r3, r3, #16
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	3303      	adds	r3, #3
 8003ec4:	6839      	ldr	r1, [r7, #0]
 8003ec6:	440b      	add	r3, r1
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	061b      	lsls	r3, r3, #24
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	4413      	add	r3, r2
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	3301      	adds	r3, #1
 8003eee:	6839      	ldr	r1, [r7, #0]
 8003ef0:	440b      	add	r3, r1
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	3302      	adds	r3, #2
 8003f04:	6839      	ldr	r1, [r7, #0]
 8003f06:	440b      	add	r3, r1
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	3303      	adds	r3, #3
 8003f1a:	6839      	ldr	r1, [r7, #0]
 8003f1c:	440b      	add	r3, r1
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	061b      	lsls	r3, r3, #24
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	613b      	str	r3, [r7, #16]
     return offset;
 8003f2e:	693b      	ldr	r3, [r7, #16]
    }
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	4b03      	ldr	r3, [pc, #12]	@ (8003f50 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	0800c21c 	.word	0x0800c21c

08003f54 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	4b03      	ldr	r3, [pc, #12]	@ (8003f6c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	0800c23c 	.word	0x0800c23c

08003f70 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe fe3a 	bl	8002bf4 <_ZN3ros3MsgC1Ev>
 8003f80:	4a0a      	ldr	r2, [pc, #40]	@ (8003fac <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	605a      	str	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3308      	adds	r3, #8
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff feab 	bl	8003cec <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	619a      	str	r2, [r3, #24]
      data_offset(0)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	61da      	str	r2, [r3, #28]
    {
    }
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	0800c37c 	.word	0x0800c37c

08003fb0 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6859      	ldr	r1, [r3, #4]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	b2ca      	uxtb	r2, r1
 8003fca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	0a19      	lsrs	r1, r3, #8
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	4413      	add	r3, r2
 8003fda:	b2ca      	uxtb	r2, r1
 8003fdc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	0c19      	lsrs	r1, r3, #16
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3302      	adds	r3, #2
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	4413      	add	r3, r2
 8003fec:	b2ca      	uxtb	r2, r1
 8003fee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	0e19      	lsrs	r1, r3, #24
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3303      	adds	r3, #3
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	b2ca      	uxtb	r2, r1
 8004000:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3304      	adds	r3, #4
 8004006:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8004008:	2300      	movs	r3, #0
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	e017      	b.n	800403e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	18d0      	adds	r0, r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699a      	ldr	r2, [r3, #24]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	4413      	add	r3, r2
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	6839      	ldr	r1, [r7, #0]
 800402a:	440a      	add	r2, r1
 800402c:	4611      	mov	r1, r2
 800402e:	4798      	blx	r3
 8004030:	4602      	mov	r2, r0
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4413      	add	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	3301      	adds	r3, #1
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	429a      	cmp	r2, r3
 8004046:	d3e2      	bcc.n	800400e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69d9      	ldr	r1, [r3, #28]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	4413      	add	r3, r2
 8004052:	b2ca      	uxtb	r2, r1
 8004054:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	0a19      	lsrs	r1, r3, #8
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3301      	adds	r3, #1
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	4413      	add	r3, r2
 8004064:	b2ca      	uxtb	r2, r1
 8004066:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	0c19      	lsrs	r1, r3, #16
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3302      	adds	r3, #2
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	4413      	add	r3, r2
 8004076:	b2ca      	uxtb	r2, r1
 8004078:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	0e19      	lsrs	r1, r3, #24
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3303      	adds	r3, #3
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	4413      	add	r3, r2
 8004088:	b2ca      	uxtb	r2, r1
 800408a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3304      	adds	r3, #4
 8004090:	60fb      	str	r3, [r7, #12]
      return offset;
 8004092:	68fb      	ldr	r3, [r7, #12]
    }
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	4413      	add	r3, r2
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	3301      	adds	r3, #1
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	4413      	add	r3, r2
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	3302      	adds	r3, #2
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	4413      	add	r3, r2
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	041b      	lsls	r3, r3, #16
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3303      	adds	r3, #3
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	4413      	add	r3, r2
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	061b      	lsls	r3, r3, #24
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	3304      	adds	r3, #4
 80040ee:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d90a      	bls.n	8004110 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699a      	ldr	r2, [r3, #24]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f007 fadf 	bl	800b6c8 <realloc>
 800410a:	4602      	mov	r2, r0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	e01a      	b.n	8004152 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f103 0008 	add.w	r0, r3, #8
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	4413      	add	r3, r2
 8004128:	4619      	mov	r1, r3
 800412a:	f7ff fe70 	bl	8003e0e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 800412e:	4602      	mov	r2, r0
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	4413      	add	r3, r2
 8004134:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	18d0      	adds	r0, r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3308      	adds	r3, #8
 8004144:	2210      	movs	r2, #16
 8004146:	4619      	mov	r1, r3
 8004148:	f007 fd67 	bl	800bc1a <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	3301      	adds	r3, #1
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	429a      	cmp	r2, r3
 800415a:	d3df      	bcc.n	800411c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	4413      	add	r3, r2
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	3301      	adds	r3, #1
 8004172:	6839      	ldr	r1, [r7, #0]
 8004174:	440b      	add	r3, r1
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	021b      	lsls	r3, r3, #8
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	3302      	adds	r3, #2
 8004188:	6839      	ldr	r1, [r7, #0]
 800418a:	440b      	add	r3, r1
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	041b      	lsls	r3, r3, #16
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69da      	ldr	r2, [r3, #28]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	3303      	adds	r3, #3
 800419e:	6839      	ldr	r1, [r7, #0]
 80041a0:	440b      	add	r3, r1
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	061b      	lsls	r3, r3, #24
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	3304      	adds	r3, #4
 80041b0:	617b      	str	r3, [r7, #20]
     return offset;
 80041b2:	697b      	ldr	r3, [r7, #20]
    }
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	4b03      	ldr	r3, [pc, #12]	@ (80041d4 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 80041c6:	4618      	mov	r0, r3
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	0800c260 	.word	0x0800c260

080041d8 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	4b03      	ldr	r3, [pc, #12]	@ (80041f0 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	0800c27c 	.word	0x0800c27c

080041f4 <_ZN8std_msgs15Int16MultiArrayC1Ev>:
      uint32_t data_length;
      typedef int16_t _data_type;
      _data_type st_data;
      _data_type * data;

    Int16MultiArray():
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe fcf8 	bl	8002bf4 <_ZN3ros3MsgC1Ev>
 8004204:	4a0a      	ldr	r2, [pc, #40]	@ (8004230 <_ZN8std_msgs15Int16MultiArrayC1Ev+0x3c>)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	601a      	str	r2, [r3, #0]
      layout(),
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3304      	adds	r3, #4
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff feae 	bl	8003f70 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	625a      	str	r2, [r3, #36]	@ 0x24
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
    }
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	0800c364 	.word	0x0800c364

08004234 <_ZNK8std_msgs15Int16MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	1d18      	adds	r0, r3, #4
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	4413      	add	r3, r2
 800424c:	4619      	mov	r1, r3
 800424e:	f7ff feaf 	bl	8003fb0 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8004252:	4602      	mov	r2, r0
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	4413      	add	r3, r2
 8004258:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	4413      	add	r3, r2
 8004264:	b2ca      	uxtb	r2, r1
 8004266:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	0a19      	lsrs	r1, r3, #8
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	3301      	adds	r3, #1
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	4413      	add	r3, r2
 8004276:	b2ca      	uxtb	r2, r1
 8004278:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	0c19      	lsrs	r1, r3, #16
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	3302      	adds	r3, #2
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	4413      	add	r3, r2
 8004288:	b2ca      	uxtb	r2, r1
 800428a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	0e19      	lsrs	r1, r3, #24
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	3303      	adds	r3, #3
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	4413      	add	r3, r2
 800429a:	b2ca      	uxtb	r2, r1
 800429c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	3304      	adds	r3, #4
 80042a2:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 80042a4:	2300      	movs	r3, #0
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	e01c      	b.n	80042e4 <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0xb0>
      union {
        int16_t real;
        uint16_t base;
      } u_datai;
      u_datai.real = this->data[i];
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	4413      	add	r3, r2
 80042b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042b8:	81bb      	strh	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 80042ba:	89b9      	ldrh	r1, [r7, #12]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	4413      	add	r3, r2
 80042c2:	b2ca      	uxtb	r2, r1
 80042c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 80042c6:	89bb      	ldrh	r3, [r7, #12]
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	b299      	uxth	r1, r3
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	3301      	adds	r3, #1
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	4413      	add	r3, r2
 80042d4:	b2ca      	uxtb	r2, r1
 80042d6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	3302      	adds	r3, #2
 80042dc:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	3301      	adds	r3, #1
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d3dd      	bcc.n	80042aa <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0x76>
      }
      return offset;
 80042ee:	697b      	ldr	r3, [r7, #20]
    }
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <_ZN8std_msgs15Int16MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	1d18      	adds	r0, r3, #4
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	4413      	add	r3, r2
 8004310:	4619      	mov	r1, r3
 8004312:	f7ff fec3 	bl	800409c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8004316:	4602      	mov	r2, r0
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	4413      	add	r3, r2
 800431c:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	4413      	add	r3, r2
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	3301      	adds	r3, #1
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	4413      	add	r3, r2
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	3302      	adds	r3, #2
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	4413      	add	r3, r2
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	3303      	adds	r3, #3
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	4413      	add	r3, r2
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	061b      	lsls	r3, r3, #24
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	3304      	adds	r3, #4
 8004362:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	429a      	cmp	r2, r3
 800436c:	d90a      	bls.n	8004384 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x8c>
        this->data = (int16_t*)realloc(this->data, data_lengthT * sizeof(int16_t));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f007 f9a5 	bl	800b6c8 <realloc>
 800437e:	4602      	mov	r2, r0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	62da      	str	r2, [r3, #44]	@ 0x2c
      data_length = data_lengthT;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	625a      	str	r2, [r3, #36]	@ 0x24
      for( uint32_t i = 0; i < data_length; i++){
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	e02a      	b.n	80043e6 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0xee>
      union {
        int16_t real;
        uint16_t base;
      } u_st_data;
      u_st_data.base = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004394:	893b      	ldrh	r3, [r7, #8]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	6839      	ldr	r1, [r7, #0]
 800439a:	440a      	add	r2, r1
 800439c:	7812      	ldrb	r2, [r2, #0]
 800439e:	4313      	orrs	r3, r2
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80043a4:	893b      	ldrh	r3, [r7, #8]
 80043a6:	b21a      	sxth	r2, r3
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	3301      	adds	r3, #1
 80043ac:	6839      	ldr	r1, [r7, #0]
 80043ae:	440b      	add	r3, r1
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	021b      	lsls	r3, r3, #8
 80043b4:	b21b      	sxth	r3, r3
 80043b6:	4313      	orrs	r3, r2
 80043b8:	b21b      	sxth	r3, r3
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	813b      	strh	r3, [r7, #8]
      this->st_data = u_st_data.real;
 80043be:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      offset += sizeof(this->st_data);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	3302      	adds	r3, #2
 80043ca:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int16_t));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	4413      	add	r3, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	3228      	adds	r2, #40	@ 0x28
 80043da:	8812      	ldrh	r2, [r2, #0]
 80043dc:	b292      	uxth	r2, r2
 80043de:	801a      	strh	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	3301      	adds	r3, #1
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d3cf      	bcc.n	8004390 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x98>
      }
     return offset;
 80043f0:	697b      	ldr	r3, [r7, #20]
    }
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <_ZN8std_msgs15Int16MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int16MultiArray"; };
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	4b03      	ldr	r3, [pc, #12]	@ (8004414 <_ZN8std_msgs15Int16MultiArray7getTypeEv+0x18>)
 8004406:	4618      	mov	r0, r3
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	0800c2a0 	.word	0x0800c2a0

08004418 <_ZN8std_msgs15Int16MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "d9338d7f523fcb692fae9d0a0e9f067c"; };
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	4b03      	ldr	r3, [pc, #12]	@ (8004430 <_ZN8std_msgs15Int16MultiArray6getMD5Ev+0x18>)
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	0800c2bc 	.word	0x0800c2bc

08004434 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	4a04      	ldr	r2, [pc, #16]	@ (8004450 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4618      	mov	r0, r3
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	0800c3c4 	.word	0x0800c3c4

08004454 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff ffe8 	bl	8004434 <_ZN3ros15NodeHandleBase_C1Ev>
 8004464:	4a33      	ldr	r2, [pc, #204]	@ (8004534 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3304      	adds	r3, #4
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fb58 	bl	8003b24 <_ZN13STM32HardwareC1Ev>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	609a      	str	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	60da      	str	r2, [r3, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	611a      	str	r2, [r3, #16]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	615a      	str	r2, [r3, #20]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3318      	adds	r3, #24
 8004490:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004494:	2100      	movs	r1, #0
 8004496:	4618      	mov	r0, r3
 8004498:	f007 fb44 	bl	800bb24 <memset>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80044a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f007 fb3b 	bl	800bb24 <memset>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 80044b4:	2264      	movs	r2, #100	@ 0x64
 80044b6:	2100      	movs	r1, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f007 fb33 	bl	800bb24 <memset>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 80044c4:	2264      	movs	r2, #100	@ 0x64
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f007 fb2b 	bl	800bb24 <memset>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8004524:	4618      	mov	r0, r3
 8004526:	f7fe fed9 	bl	80032dc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	0800c350 	.word	0x0800c350

08004538 <setup>:
//extern char color_buffer[]='';
extern int16_t buffer[5];

ros::Publisher encoder("encoder", &Encoder_data);
ros::Publisher color_sensor("color", &color_data);
void setup(void){
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
	nh.initNode();
 800453c:	4806      	ldr	r0, [pc, #24]	@ (8004558 <setup+0x20>)
 800453e:	f000 f878 	bl	8004632 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(encoder);
 8004542:	4906      	ldr	r1, [pc, #24]	@ (800455c <setup+0x24>)
 8004544:	4804      	ldr	r0, [pc, #16]	@ (8004558 <setup+0x20>)
 8004546:	f000 f891 	bl	800466c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(color_sensor);
 800454a:	4905      	ldr	r1, [pc, #20]	@ (8004560 <setup+0x28>)
 800454c:	4802      	ldr	r0, [pc, #8]	@ (8004558 <setup+0x20>)
 800454e:	f000 f88d 	bl	800466c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8004552:	bf00      	nop
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	200015f4 	.word	0x200015f4
 800455c:	20001b5c 	.word	0x20001b5c
 8004560:	20001b70 	.word	0x20001b70

08004564 <loop>:

void loop(void){
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
//		color_data.data= color_buffer;
	    Encoder_data.data_length =5;
 8004568:	4b09      	ldr	r3, [pc, #36]	@ (8004590 <loop+0x2c>)
 800456a:	2205      	movs	r2, #5
 800456c:	625a      	str	r2, [r3, #36]	@ 0x24
		Encoder_data.data= buffer;
 800456e:	4b08      	ldr	r3, [pc, #32]	@ (8004590 <loop+0x2c>)
 8004570:	4a08      	ldr	r2, [pc, #32]	@ (8004594 <loop+0x30>)
 8004572:	62da      	str	r2, [r3, #44]	@ 0x2c
		encoder.publish(&Encoder_data);
 8004574:	4906      	ldr	r1, [pc, #24]	@ (8004590 <loop+0x2c>)
 8004576:	4808      	ldr	r0, [pc, #32]	@ (8004598 <loop+0x34>)
 8004578:	f7ff f993 	bl	80038a2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		color_sensor.publish(&color_data);
 800457c:	4907      	ldr	r1, [pc, #28]	@ (800459c <loop+0x38>)
 800457e:	4808      	ldr	r0, [pc, #32]	@ (80045a0 <loop+0x3c>)
 8004580:	f7ff f98f 	bl	80038a2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 8004584:	4807      	ldr	r0, [pc, #28]	@ (80045a4 <loop+0x40>)
 8004586:	f000 f89f 	bl	80046c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 800458a:	bf00      	nop
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20001b24 	.word	0x20001b24
 8004594:	200004f4 	.word	0x200004f4
 8004598:	20001b5c 	.word	0x20001b5c
 800459c:	20001b54 	.word	0x20001b54
 80045a0:	20001b70 	.word	0x20001b70
 80045a4:	200015f4 	.word	0x200015f4

080045a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	e00c      	b.n	80045d2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	fa22 f103 	lsr.w	r1, r2, r3
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	b2ca      	uxtb	r2, r1
 80045ca:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3301      	adds	r3, #1
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d9ef      	bls.n	80045b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80045d8:	bf00      	nop
 80045da:	bf00      	nop
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	e010      	b.n	800461e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6839      	ldr	r1, [r7, #0]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	440a      	add	r2, r1
 8004606:	7812      	ldrb	r2, [r2, #0]
 8004608:	4611      	mov	r1, r2
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	00d2      	lsls	r2, r2, #3
 800460e:	fa01 f202 	lsl.w	r2, r1, r2
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3301      	adds	r3, #1
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b03      	cmp	r3, #3
 8004622:	d9eb      	bls.n	80045fc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8004624:	bf00      	nop
 8004626:	bf00      	nop
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3304      	adds	r3, #4
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff fa80 	bl	8003b44 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    bytes_ = 0;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
    index_ = 0;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
    topic_ = 0;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
  };
 8004664:	bf00      	nop
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	e01b      	b.n	80046b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d110      	bne.n	80046ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004694:	6839      	ldr	r1, [r7, #0]
 8004696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	60da      	str	r2, [r3, #12]
        return true;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e006      	b.n	80046bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3301      	adds	r3, #1
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b18      	cmp	r3, #24
 80046b8:	dde0      	ble.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 80046ba:	2300      	movs	r3, #0
  }
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3304      	adds	r3, #4
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fa61 	bl	8003b9c <_ZN13STM32Hardware4timeEv>
 80046da:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d903      	bls.n	80046f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
    if (mode_ != MODE_FIRST_FF)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d009      	beq.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	429a      	cmp	r2, r3
 800470a:	d903      	bls.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
      if (spin_timeout_ > 0)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d013      	beq.n	8004744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff fa3b 	bl	8003b9c <_ZN13STM32Hardware4timeEv>
 8004726:	4602      	mov	r2, r0
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1ad2      	subs	r2, r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	429a      	cmp	r2, r3
 8004732:	bf8c      	ite	hi
 8004734:	2301      	movhi	r3, #1
 8004736:	2300      	movls	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 800473e:	f06f 0301 	mvn.w	r3, #1
 8004742:	e190      	b.n	8004a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fa08 	bl	8003b5e <_ZN13STM32Hardware4readEv>
 800474e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	f2c0 8170 	blt.w	8004a38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	@ 0x4f0
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	441a      	add	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800476e:	2b07      	cmp	r3, #7
 8004770:	d11d      	bne.n	80047ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004778:	1c59      	adds	r1, r3, #1
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	f8c2 14ec 	str.w	r1, [r2, #1260]	@ 0x4ec
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	b2d1      	uxtb	r1, r2
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	4413      	add	r3, r2
 8004788:	460a      	mov	r2, r1
 800478a:	761a      	strb	r2, [r3, #24]
        bytes_--;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8004792:	1e5a      	subs	r2, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1b7      	bne.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2208      	movs	r2, #8
 80047a8:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 80047ac:	e7b2      	b.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d128      	bne.n	800480a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2bff      	cmp	r3, #255	@ 0xff
 80047bc:	d10d      	bne.n	80047da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f103 0214 	add.w	r2, r3, #20
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
 80047d8:	e79c      	b.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3304      	adds	r3, #4
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff f9dc 	bl	8003b9c <_ZN13STM32Hardware4timeEv>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ee:	4293      	cmp	r3, r2
 80047f0:	bf8c      	ite	hi
 80047f2:	2301      	movhi	r3, #1
 80047f4:	2300      	movls	r3, #0
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d08b      	beq.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
          return SPIN_TIMEOUT;
 8004804:	f06f 0301 	mvn.w	r3, #1
 8004808:	e12d      	b.n	8004a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004810:	2b01      	cmp	r3, #1
 8004812:	d118      	bne.n	8004846 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2bfe      	cmp	r3, #254	@ 0xfe
 8004818:	d107      	bne.n	800482a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8004828:	e774      	b.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
          if (configured_ == false)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004838:	2b00      	cmp	r3, #0
 800483a:	f47f af6b 	bne.w	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f915 	bl	8004a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004844:	e766      	b.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800484c:	2b02      	cmp	r3, #2
 800484e:	d113      	bne.n	8004878 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        index_ = 0;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
        mode_++;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 8004876:	e74d      	b.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800487e:	2b03      	cmp	r3, #3
 8004880:	d110      	bne.n	80048a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	@ 0x4e4
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	441a      	add	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        mode_++;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 80048a2:	e737      	b.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d116      	bne.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80048b4:	425a      	negs	r2, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	bf58      	it	pl
 80048bc:	4253      	negpl	r3, r2
 80048be:	2bff      	cmp	r3, #255	@ 0xff
 80048c0:	d107      	bne.n	80048d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 80048d0:	e720      	b.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 80048da:	e71b      	b.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80048e2:	2b05      	cmp	r3, #5
 80048e4:	d10f      	bne.n	8004906 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
        mode_++;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 8004904:	e706      	b.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800490c:	2b06      	cmp	r3, #6
 800490e:	d117      	bne.n	8004940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	441a      	add	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
        mode_ = MODE_MESSAGE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2207      	movs	r2, #7
 8004926:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        if (bytes_ == 0)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8004930:	2b00      	cmp	r3, #0
 8004932:	f47f aeef 	bne.w	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2208      	movs	r2, #8
 800493a:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 800493e:	e6e9      	b.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004946:	2b08      	cmp	r3, #8
 8004948:	f47f aee4 	bne.w	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        if ((checksum_ % 256) == 255)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 800495a:	425a      	negs	r2, r3
 800495c:	b2db      	uxtb	r3, r3
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	bf58      	it	pl
 8004962:	4253      	negpl	r3, r2
 8004964:	2bff      	cmp	r3, #255	@ 0xff
 8004966:	f47f aed5 	bne.w	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d110      	bne.n	8004996 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f87a 	bl	8004a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f894 	bl	8004aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
            last_sync_receive_time = c_time;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
            return SPIN_ERR;
 8004990:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004994:	e067      	b.n	8004a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800499c:	2b0a      	cmp	r3, #10
 800499e:	d106      	bne.n	80049ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3318      	adds	r3, #24
 80049a4:	4619      	mov	r1, r3
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f95e 	bl	8004c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80049ac:	e6b2      	b.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80049b4:	2b06      	cmp	r3, #6
 80049b6:	d10d      	bne.n	80049d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f503 62a1 	add.w	r2, r3, #1288	@ 0x508
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3318      	adds	r3, #24
 80049c2:	4619      	mov	r1, r3
 80049c4:	4610      	mov	r0, r2
 80049c6:	f7fe fdc8 	bl	800355a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
 80049d2:	e69f      	b.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80049da:	2b0b      	cmp	r3, #11
 80049dc:	d104      	bne.n	80049e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
 80049e6:	e695      	b.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80049ee:	3b64      	subs	r3, #100	@ 0x64
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f43f ae89 	beq.w	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8004a08:	3b64      	subs	r3, #100	@ 0x64
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	6858      	ldr	r0, [r3, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8004a1c:	3b64      	subs	r3, #100	@ 0x64
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	3218      	adds	r2, #24
 8004a32:	4611      	mov	r1, r2
 8004a34:	4798      	blx	r3
    while (true)
 8004a36:	e66d      	b.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004a38:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00f      	beq.n	8004a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d906      	bls.n	8004a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f809 	bl	8004a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
    return SPIN_OK;
 8004a64:	2300      	movs	r3, #0
  }
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b086      	sub	sp, #24
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004a76:	f107 030c 	add.w	r3, r7, #12
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe f8ca 	bl	8002c14 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f107 020c 	add.w	r2, r7, #12
 8004a8a:	210a      	movs	r1, #10
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4798      	blx	r3
    rt_time = hardware_.time();
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3304      	adds	r3, #4
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff f881 	bl	8003b9c <_ZN13STM32Hardware4timeEv>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	609a      	str	r2, [r3, #8]
  }
 8004aa0:	bf00      	nop
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8004aa8:	b590      	push	{r4, r7, lr}
 8004aaa:	b08b      	sub	sp, #44	@ 0x2c
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004ab0:	f107 030c 	add.w	r3, r7, #12
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fe f99d 	bl	8002df4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004aba:	2300      	movs	r3, #0
 8004abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004abe:	e05a      	b.n	8004b76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac4:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d04f      	beq.n	8004b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad4:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae6:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af6:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004afe:	6859      	ldr	r1, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b04:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3308      	adds	r3, #8
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4608      	mov	r0, r1
 8004b16:	4798      	blx	r3
 8004b18:	4603      	mov	r3, r0
 8004b1a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b20:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b28:	6859      	ldr	r1, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b2e:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	330c      	adds	r3, #12
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4608      	mov	r0, r1
 8004b40:	4798      	blx	r3
 8004b42:	4603      	mov	r3, r0
 8004b44:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004b46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b4a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681c      	ldr	r4, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b56:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe feb3 	bl	80038ca <_ZN3ros9Publisher15getEndpointTypeEv>
 8004b64:	4601      	mov	r1, r0
 8004b66:	f107 030c 	add.w	r3, r7, #12
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b72:	3301      	adds	r3, #1
 8004b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	2b18      	cmp	r3, #24
 8004b7a:	dda1      	ble.n	8004ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b80:	e067      	b.n	8004c52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d05b      	beq.n	8004c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	6859      	ldr	r1, [r3, #4]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3308      	adds	r3, #8
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4608      	mov	r0, r1
 8004bde:	4798      	blx	r3
 8004be0:	4603      	mov	r3, r0
 8004be2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be8:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	6859      	ldr	r1, [r3, #4]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf6:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	330c      	adds	r3, #12
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4608      	mov	r0, r1
 8004c08:	4798      	blx	r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004c0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c12:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681c      	ldr	r4, [r3, #0]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1e:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	6859      	ldr	r1, [r3, #4]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4608      	mov	r0, r1
 8004c3e:	4798      	blx	r3
 8004c40:	4601      	mov	r1, r0
 8004c42:	f107 030c 	add.w	r3, r7, #12
 8004c46:	461a      	mov	r2, r3
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	3301      	adds	r3, #1
 8004c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	2b18      	cmp	r3, #24
 8004c56:	dd94      	ble.n	8004b82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  }
 8004c60:	bf00      	nop
 8004c62:	372c      	adds	r7, #44	@ 0x2c
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd90      	pop	{r4, r7, pc}

08004c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004c72:	f107 0308 	add.w	r3, r7, #8
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fd ffcc 	bl	8002c14 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fe ff8b 	bl	8003b9c <_ZN13STM32Hardware4timeEv>
 8004c86:	4602      	mov	r2, r0
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004c90:	f107 0308 	add.w	r3, r7, #8
 8004c94:	6839      	ldr	r1, [r7, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe f82c 	bl	8002cf4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	4914      	ldr	r1, [pc, #80]	@ (8004cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8004ca2:	fba1 1303 	umull	r1, r3, r1, r3
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	4413      	add	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004cac:	6939      	ldr	r1, [r7, #16]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	4b10      	ldr	r3, [pc, #64]	@ (8004cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8004cb2:	fba3 0302 	umull	r0, r3, r3, r2
 8004cb6:	099b      	lsrs	r3, r3, #6
 8004cb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004cbc:	fb00 f303 	mul.w	r3, r0, r3
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	4a0d      	ldr	r2, [pc, #52]	@ (8004cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004cc4:	fb02 f303 	mul.w	r3, r2, r3
 8004cc8:	440b      	add	r3, r1
 8004cca:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004ccc:	f107 0308 	add.w	r3, r7, #8
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f8a5 	bl	8004e24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe ff5c 	bl	8003b9c <_ZN13STM32Hardware4timeEv>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
  }
 8004cec:	bf00      	nop
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	10624dd3 	.word	0x10624dd3
 8004cf8:	000f4240 	.word	0x000f4240

08004cfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b63      	cmp	r3, #99	@ 0x63
 8004d0c:	dd09      	ble.n	8004d22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004d14:	f083 0301 	eor.w	r3, r3, #1
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e079      	b.n	8004e16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	f502 7206 	add.w	r2, r2, #536	@ 0x218
 8004d2e:	3207      	adds	r2, #7
 8004d30:	4611      	mov	r1, r2
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	4798      	blx	r3
 8004d36:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	22ff      	movs	r2, #255	@ 0xff
 8004d3c:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
    message_out[1] = PROTOCOL_VER;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	22fe      	movs	r2, #254	@ 0xfe
 8004d44:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	0a1b      	lsrs	r3, r3, #8
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f893 221a 	ldrb.w	r2, [r3, #538]	@ 0x21a
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 8004d6e:	4413      	add	r3, r2
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	43db      	mvns	r3, r3
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	b21b      	sxth	r3, r3
 8004d8a:	121b      	asrs	r3, r3, #8
 8004d8c:	b21b      	sxth	r3, r3
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e

    /* calculate checksum */
    int chk = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004d9a:	2305      	movs	r3, #5
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	e00c      	b.n	8004dba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	4413      	add	r3, r2
 8004db2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	3301      	adds	r3, #1
 8004db8:	61bb      	str	r3, [r7, #24]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	3306      	adds	r3, #6
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	dded      	ble.n	8004da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	3307      	adds	r3, #7
 8004dc8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	425a      	negs	r2, r3
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	bf58      	it	pl
 8004dd4:	4253      	negpl	r3, r2
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	1c59      	adds	r1, r3, #1
 8004ddc:	6179      	str	r1, [r7, #20]
 8004dde:	43d2      	mvns	r2, r2
 8004de0:	b2d1      	uxtb	r1, r2
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4413      	add	r3, r2
 8004de6:	460a      	mov	r2, r1
 8004de8:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

    if (l <= OUTPUT_SIZE)
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004df2:	dc0a      	bgt.n	8004e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	1d18      	adds	r0, r3, #4
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4619      	mov	r1, r3
 8004e02:	f7fe feba 	bl	8003b7a <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	e005      	b.n	8004e16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004e0a:	4905      	ldr	r1, [pc, #20]	@ (8004e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 f847 	bl	8004ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004e12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 8004e16:	4618      	mov	r0, r3
 8004e18:	3720      	adds	r7, #32
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	0800c2e0 	.word	0x0800c2e0

08004e24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3304      	adds	r3, #4
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fe feb2 	bl	8003b9c <_ZN13STM32Hardware4timeEv>
 8004e38:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4914      	ldr	r1, [pc, #80]	@ (8004e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8004e42:	fba1 1303 	umull	r1, r3, r1, r3
 8004e46:	099b      	lsrs	r3, r3, #6
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	1e5a      	subs	r2, r3, #1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	6859      	ldr	r1, [r3, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4b0f      	ldr	r3, [pc, #60]	@ (8004e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8004e58:	fba3 0302 	umull	r0, r3, r3, r2
 8004e5c:	099b      	lsrs	r3, r3, #6
 8004e5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004e62:	fb00 f303 	mul.w	r3, r0, r3
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	4a0b      	ldr	r2, [pc, #44]	@ (8004e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004e6a:	fb02 f303 	mul.w	r3, r2, r3
 8004e6e:	1aca      	subs	r2, r1, r3
 8004e70:	4b0a      	ldr	r3, [pc, #40]	@ (8004e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8004e72:	4413      	add	r3, r2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f103 020c 	add.w	r2, r3, #12
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3310      	adds	r3, #16
 8004e82:	4619      	mov	r1, r3
 8004e84:	4610      	mov	r0, r2
 8004e86:	f000 fc57 	bl	8005738 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004e8a:	bf00      	nop
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	10624dd3 	.word	0x10624dd3
 8004e98:	000f4240 	.word	0x000f4240
 8004e9c:	3b9aca00 	.word	0x3b9aca00

08004ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	2103      	movs	r1, #3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f804 	bl	8004ebc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004eb4:	bf00      	nop
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004eca:	f107 0314 	add.w	r3, r7, #20
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fe f954 	bl	800317c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004ed4:	7afb      	ldrb	r3, [r7, #11]
 8004ed6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f107 0214 	add.w	r2, r7, #20
 8004ee6:	2107      	movs	r1, #7
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	4798      	blx	r3
  }
 8004eec:	bf00      	nop
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <_Z41__static_initialization_and_destruction_0ii>:
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d11d      	bne.n	8004f40 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d118      	bne.n	8004f40 <_Z41__static_initialization_and_destruction_0ii+0x4c>
SerialClass serial(huart2);
 8004f0e:	490e      	ldr	r1, [pc, #56]	@ (8004f48 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004f10:	480e      	ldr	r0, [pc, #56]	@ (8004f4c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004f12:	f7fe fce6 	bl	80038e2 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>
ros::NodeHandle nh;
 8004f16:	480e      	ldr	r0, [pc, #56]	@ (8004f50 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004f18:	f7ff fa9c 	bl	8004454 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int16MultiArray Encoder_data;
 8004f1c:	480d      	ldr	r0, [pc, #52]	@ (8004f54 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004f1e:	f7ff f969 	bl	80041f4 <_ZN8std_msgs15Int16MultiArrayC1Ev>
std_msgs::String color_data;
 8004f22:	480d      	ldr	r0, [pc, #52]	@ (8004f58 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004f24:	f7fe fe46 	bl	8003bb4 <_ZN8std_msgs6StringC1Ev>
ros::Publisher encoder("encoder", &Encoder_data);
 8004f28:	2300      	movs	r3, #0
 8004f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f54 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004f2c:	490b      	ldr	r1, [pc, #44]	@ (8004f5c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004f2e:	480c      	ldr	r0, [pc, #48]	@ (8004f60 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004f30:	f7fe fca0 	bl	8003874 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher color_sensor("color", &color_data);
 8004f34:	2300      	movs	r3, #0
 8004f36:	4a08      	ldr	r2, [pc, #32]	@ (8004f58 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004f38:	490a      	ldr	r1, [pc, #40]	@ (8004f64 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004f3a:	480b      	ldr	r0, [pc, #44]	@ (8004f68 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004f3c:	f7fe fc9a 	bl	8003874 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004f40:	bf00      	nop
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	200002e8 	.word	0x200002e8
 8004f4c:	200005e8 	.word	0x200005e8
 8004f50:	200015f4 	.word	0x200015f4
 8004f54:	20001b24 	.word	0x20001b24
 8004f58:	20001b54 	.word	0x20001b54
 8004f5c:	0800c31c 	.word	0x0800c31c
 8004f60:	20001b5c 	.word	0x20001b5c
 8004f64:	0800c324 	.word	0x0800c324
 8004f68:	20001b70 	.word	0x20001b70

08004f6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
    return configured_;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
  };
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <_GLOBAL__sub_I_serial>:
 8004f86:	b580      	push	{r7, lr}
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004f8e:	2001      	movs	r0, #1
 8004f90:	f7ff ffb0 	bl	8004ef4 <_Z41__static_initialization_and_destruction_0ii>
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	607b      	str	r3, [r7, #4]
 8004fa2:	4b10      	ldr	r3, [pc, #64]	@ (8004fe4 <HAL_MspInit+0x4c>)
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8004fe4 <HAL_MspInit+0x4c>)
 8004fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fae:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe4 <HAL_MspInit+0x4c>)
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fb6:	607b      	str	r3, [r7, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fba:	2300      	movs	r3, #0
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	4b09      	ldr	r3, [pc, #36]	@ (8004fe4 <HAL_MspInit+0x4c>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc2:	4a08      	ldr	r2, [pc, #32]	@ (8004fe4 <HAL_MspInit+0x4c>)
 8004fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fca:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <HAL_MspInit+0x4c>)
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004fd6:	2007      	movs	r0, #7
 8004fd8:	f000 fd6a 	bl	8005ab0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fdc:	bf00      	nop
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40023800 	.word	0x40023800

08004fe8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08c      	sub	sp, #48	@ 0x30
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff0:	f107 031c 	add.w	r3, r7, #28
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	605a      	str	r2, [r3, #4]
 8004ffa:	609a      	str	r2, [r3, #8]
 8004ffc:	60da      	str	r2, [r3, #12]
 8004ffe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a42      	ldr	r2, [pc, #264]	@ (8005110 <HAL_I2C_MspInit+0x128>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d12d      	bne.n	8005066 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800500a:	2300      	movs	r3, #0
 800500c:	61bb      	str	r3, [r7, #24]
 800500e:	4b41      	ldr	r3, [pc, #260]	@ (8005114 <HAL_I2C_MspInit+0x12c>)
 8005010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005012:	4a40      	ldr	r2, [pc, #256]	@ (8005114 <HAL_I2C_MspInit+0x12c>)
 8005014:	f043 0302 	orr.w	r3, r3, #2
 8005018:	6313      	str	r3, [r2, #48]	@ 0x30
 800501a:	4b3e      	ldr	r3, [pc, #248]	@ (8005114 <HAL_I2C_MspInit+0x12c>)
 800501c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	61bb      	str	r3, [r7, #24]
 8005024:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005026:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800502a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800502c:	2312      	movs	r3, #18
 800502e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005030:	2300      	movs	r3, #0
 8005032:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005034:	2303      	movs	r3, #3
 8005036:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005038:	2304      	movs	r3, #4
 800503a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800503c:	f107 031c 	add.w	r3, r7, #28
 8005040:	4619      	mov	r1, r3
 8005042:	4835      	ldr	r0, [pc, #212]	@ (8005118 <HAL_I2C_MspInit+0x130>)
 8005044:	f001 f978 	bl	8006338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	4b31      	ldr	r3, [pc, #196]	@ (8005114 <HAL_I2C_MspInit+0x12c>)
 800504e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005050:	4a30      	ldr	r2, [pc, #192]	@ (8005114 <HAL_I2C_MspInit+0x12c>)
 8005052:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005056:	6413      	str	r3, [r2, #64]	@ 0x40
 8005058:	4b2e      	ldr	r3, [pc, #184]	@ (8005114 <HAL_I2C_MspInit+0x12c>)
 800505a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005064:	e050      	b.n	8005108 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a2c      	ldr	r2, [pc, #176]	@ (800511c <HAL_I2C_MspInit+0x134>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d14b      	bne.n	8005108 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005070:	2300      	movs	r3, #0
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	4b27      	ldr	r3, [pc, #156]	@ (8005114 <HAL_I2C_MspInit+0x12c>)
 8005076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005078:	4a26      	ldr	r2, [pc, #152]	@ (8005114 <HAL_I2C_MspInit+0x12c>)
 800507a:	f043 0304 	orr.w	r3, r3, #4
 800507e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005080:	4b24      	ldr	r3, [pc, #144]	@ (8005114 <HAL_I2C_MspInit+0x12c>)
 8005082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	4b20      	ldr	r3, [pc, #128]	@ (8005114 <HAL_I2C_MspInit+0x12c>)
 8005092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005094:	4a1f      	ldr	r2, [pc, #124]	@ (8005114 <HAL_I2C_MspInit+0x12c>)
 8005096:	f043 0301 	orr.w	r3, r3, #1
 800509a:	6313      	str	r3, [r2, #48]	@ 0x30
 800509c:	4b1d      	ldr	r3, [pc, #116]	@ (8005114 <HAL_I2C_MspInit+0x12c>)
 800509e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80050a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050ae:	2312      	movs	r3, #18
 80050b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b6:	2303      	movs	r3, #3
 80050b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80050ba:	2304      	movs	r3, #4
 80050bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050be:	f107 031c 	add.w	r3, r7, #28
 80050c2:	4619      	mov	r1, r3
 80050c4:	4816      	ldr	r0, [pc, #88]	@ (8005120 <HAL_I2C_MspInit+0x138>)
 80050c6:	f001 f937 	bl	8006338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80050ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050d0:	2312      	movs	r3, #18
 80050d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d8:	2303      	movs	r3, #3
 80050da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80050dc:	2304      	movs	r3, #4
 80050de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050e0:	f107 031c 	add.w	r3, r7, #28
 80050e4:	4619      	mov	r1, r3
 80050e6:	480f      	ldr	r0, [pc, #60]	@ (8005124 <HAL_I2C_MspInit+0x13c>)
 80050e8:	f001 f926 	bl	8006338 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80050ec:	2300      	movs	r3, #0
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	4b08      	ldr	r3, [pc, #32]	@ (8005114 <HAL_I2C_MspInit+0x12c>)
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	4a07      	ldr	r2, [pc, #28]	@ (8005114 <HAL_I2C_MspInit+0x12c>)
 80050f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80050fc:	4b05      	ldr	r3, [pc, #20]	@ (8005114 <HAL_I2C_MspInit+0x12c>)
 80050fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005100:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	68bb      	ldr	r3, [r7, #8]
}
 8005108:	bf00      	nop
 800510a:	3730      	adds	r7, #48	@ 0x30
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40005400 	.word	0x40005400
 8005114:	40023800 	.word	0x40023800
 8005118:	40020400 	.word	0x40020400
 800511c:	40005c00 	.word	0x40005c00
 8005120:	40020800 	.word	0x40020800
 8005124:	40020000 	.word	0x40020000

08005128 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b090      	sub	sp, #64	@ 0x40
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005130:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	609a      	str	r2, [r3, #8]
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005148:	d12c      	bne.n	80051a4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800514a:	2300      	movs	r3, #0
 800514c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800514e:	4b66      	ldr	r3, [pc, #408]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	4a65      	ldr	r2, [pc, #404]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005154:	f043 0301 	orr.w	r3, r3, #1
 8005158:	6413      	str	r3, [r2, #64]	@ 0x40
 800515a:	4b63      	ldr	r3, [pc, #396]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005164:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005166:	2300      	movs	r3, #0
 8005168:	627b      	str	r3, [r7, #36]	@ 0x24
 800516a:	4b5f      	ldr	r3, [pc, #380]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516e:	4a5e      	ldr	r2, [pc, #376]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	6313      	str	r3, [r2, #48]	@ 0x30
 8005176:	4b5c      	ldr	r3, [pc, #368]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005182:	2303      	movs	r3, #3
 8005184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005186:	2302      	movs	r3, #2
 8005188:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518a:	2300      	movs	r3, #0
 800518c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800518e:	2300      	movs	r3, #0
 8005190:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005192:	2301      	movs	r3, #1
 8005194:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005196:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800519a:	4619      	mov	r1, r3
 800519c:	4853      	ldr	r0, [pc, #332]	@ (80052ec <HAL_TIM_Encoder_MspInit+0x1c4>)
 800519e:	f001 f8cb 	bl	8006338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80051a2:	e09c      	b.n	80052de <HAL_TIM_Encoder_MspInit+0x1b6>
  else if(htim_encoder->Instance==TIM3)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a51      	ldr	r2, [pc, #324]	@ (80052f0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d12c      	bne.n	8005208 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051ae:	2300      	movs	r3, #0
 80051b0:	623b      	str	r3, [r7, #32]
 80051b2:	4b4d      	ldr	r3, [pc, #308]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	4a4c      	ldr	r2, [pc, #304]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80051b8:	f043 0302 	orr.w	r3, r3, #2
 80051bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80051be:	4b4a      	ldr	r3, [pc, #296]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	623b      	str	r3, [r7, #32]
 80051c8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	4b46      	ldr	r3, [pc, #280]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80051d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d2:	4a45      	ldr	r2, [pc, #276]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80051d4:	f043 0301 	orr.w	r3, r3, #1
 80051d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80051da:	4b43      	ldr	r3, [pc, #268]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80051dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	61fb      	str	r3, [r7, #28]
 80051e4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80051e6:	23c0      	movs	r3, #192	@ 0xc0
 80051e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ea:	2302      	movs	r3, #2
 80051ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051f2:	2300      	movs	r3, #0
 80051f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80051f6:	2302      	movs	r3, #2
 80051f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80051fe:	4619      	mov	r1, r3
 8005200:	483a      	ldr	r0, [pc, #232]	@ (80052ec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005202:	f001 f899 	bl	8006338 <HAL_GPIO_Init>
}
 8005206:	e06a      	b.n	80052de <HAL_TIM_Encoder_MspInit+0x1b6>
  else if(htim_encoder->Instance==TIM4)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a39      	ldr	r2, [pc, #228]	@ (80052f4 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d12c      	bne.n	800526c <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
 8005216:	4b34      	ldr	r3, [pc, #208]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521a:	4a33      	ldr	r2, [pc, #204]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 800521c:	f043 0304 	orr.w	r3, r3, #4
 8005220:	6413      	str	r3, [r2, #64]	@ 0x40
 8005222:	4b31      	ldr	r3, [pc, #196]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	61bb      	str	r3, [r7, #24]
 800522c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	4b2d      	ldr	r3, [pc, #180]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005236:	4a2c      	ldr	r2, [pc, #176]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005238:	f043 0302 	orr.w	r3, r3, #2
 800523c:	6313      	str	r3, [r2, #48]	@ 0x30
 800523e:	4b2a      	ldr	r3, [pc, #168]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800524a:	23c0      	movs	r3, #192	@ 0xc0
 800524c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800524e:	2302      	movs	r3, #2
 8005250:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005252:	2300      	movs	r3, #0
 8005254:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005256:	2300      	movs	r3, #0
 8005258:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800525a:	2302      	movs	r3, #2
 800525c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800525e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005262:	4619      	mov	r1, r3
 8005264:	4824      	ldr	r0, [pc, #144]	@ (80052f8 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005266:	f001 f867 	bl	8006338 <HAL_GPIO_Init>
}
 800526a:	e038      	b.n	80052de <HAL_TIM_Encoder_MspInit+0x1b6>
  else if(htim_encoder->Instance==TIM8)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a22      	ldr	r2, [pc, #136]	@ (80052fc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d133      	bne.n	80052de <HAL_TIM_Encoder_MspInit+0x1b6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005276:	2300      	movs	r3, #0
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	4b1b      	ldr	r3, [pc, #108]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 800527c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527e:	4a1a      	ldr	r2, [pc, #104]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005280:	f043 0302 	orr.w	r3, r3, #2
 8005284:	6453      	str	r3, [r2, #68]	@ 0x44
 8005286:	4b18      	ldr	r3, [pc, #96]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	4b14      	ldr	r3, [pc, #80]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529a:	4a13      	ldr	r2, [pc, #76]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 800529c:	f043 0304 	orr.w	r3, r3, #4
 80052a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80052a2:	4b11      	ldr	r3, [pc, #68]	@ (80052e8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80052ae:	23c0      	movs	r3, #192	@ 0xc0
 80052b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b2:	2302      	movs	r3, #2
 80052b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ba:	2300      	movs	r3, #0
 80052bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80052be:	2303      	movs	r3, #3
 80052c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80052c6:	4619      	mov	r1, r3
 80052c8:	480d      	ldr	r0, [pc, #52]	@ (8005300 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80052ca:	f001 f835 	bl	8006338 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80052ce:	2200      	movs	r2, #0
 80052d0:	2100      	movs	r1, #0
 80052d2:	202b      	movs	r0, #43	@ 0x2b
 80052d4:	f000 fbf7 	bl	8005ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80052d8:	202b      	movs	r0, #43	@ 0x2b
 80052da:	f000 fc10 	bl	8005afe <HAL_NVIC_EnableIRQ>
}
 80052de:	bf00      	nop
 80052e0:	3740      	adds	r7, #64	@ 0x40
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	40023800 	.word	0x40023800
 80052ec:	40020000 	.word	0x40020000
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800
 80052f8:	40020400 	.word	0x40020400
 80052fc:	40010400 	.word	0x40010400
 8005300:	40020800 	.word	0x40020800

08005304 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a1c      	ldr	r2, [pc, #112]	@ (8005384 <HAL_TIM_Base_MspInit+0x80>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d116      	bne.n	8005344 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	4b1b      	ldr	r3, [pc, #108]	@ (8005388 <HAL_TIM_Base_MspInit+0x84>)
 800531c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531e:	4a1a      	ldr	r2, [pc, #104]	@ (8005388 <HAL_TIM_Base_MspInit+0x84>)
 8005320:	f043 0308 	orr.w	r3, r3, #8
 8005324:	6413      	str	r3, [r2, #64]	@ 0x40
 8005326:	4b18      	ldr	r3, [pc, #96]	@ (8005388 <HAL_TIM_Base_MspInit+0x84>)
 8005328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005332:	2200      	movs	r2, #0
 8005334:	2100      	movs	r1, #0
 8005336:	2032      	movs	r0, #50	@ 0x32
 8005338:	f000 fbc5 	bl	8005ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800533c:	2032      	movs	r0, #50	@ 0x32
 800533e:	f000 fbde 	bl	8005afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8005342:	e01a      	b.n	800537a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM12)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a10      	ldr	r2, [pc, #64]	@ (800538c <HAL_TIM_Base_MspInit+0x88>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d115      	bne.n	800537a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800534e:	2300      	movs	r3, #0
 8005350:	60bb      	str	r3, [r7, #8]
 8005352:	4b0d      	ldr	r3, [pc, #52]	@ (8005388 <HAL_TIM_Base_MspInit+0x84>)
 8005354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005356:	4a0c      	ldr	r2, [pc, #48]	@ (8005388 <HAL_TIM_Base_MspInit+0x84>)
 8005358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800535c:	6413      	str	r3, [r2, #64]	@ 0x40
 800535e:	4b0a      	ldr	r3, [pc, #40]	@ (8005388 <HAL_TIM_Base_MspInit+0x84>)
 8005360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005366:	60bb      	str	r3, [r7, #8]
 8005368:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800536a:	2200      	movs	r2, #0
 800536c:	2100      	movs	r1, #0
 800536e:	202b      	movs	r0, #43	@ 0x2b
 8005370:	f000 fba9 	bl	8005ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005374:	202b      	movs	r0, #43	@ 0x2b
 8005376:	f000 fbc2 	bl	8005afe <HAL_NVIC_EnableIRQ>
}
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40000c00 	.word	0x40000c00
 8005388:	40023800 	.word	0x40023800
 800538c:	40001800 	.word	0x40001800

08005390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b08a      	sub	sp, #40	@ 0x28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005398:	f107 0314 	add.w	r3, r7, #20
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	605a      	str	r2, [r3, #4]
 80053a2:	609a      	str	r2, [r3, #8]
 80053a4:	60da      	str	r2, [r3, #12]
 80053a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a4d      	ldr	r2, [pc, #308]	@ (80054e4 <HAL_UART_MspInit+0x154>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	f040 8093 	bne.w	80054da <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80053b4:	2300      	movs	r3, #0
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	4b4b      	ldr	r3, [pc, #300]	@ (80054e8 <HAL_UART_MspInit+0x158>)
 80053ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053bc:	4a4a      	ldr	r2, [pc, #296]	@ (80054e8 <HAL_UART_MspInit+0x158>)
 80053be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80053c4:	4b48      	ldr	r3, [pc, #288]	@ (80054e8 <HAL_UART_MspInit+0x158>)
 80053c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	4b44      	ldr	r3, [pc, #272]	@ (80054e8 <HAL_UART_MspInit+0x158>)
 80053d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d8:	4a43      	ldr	r2, [pc, #268]	@ (80054e8 <HAL_UART_MspInit+0x158>)
 80053da:	f043 0301 	orr.w	r3, r3, #1
 80053de:	6313      	str	r3, [r2, #48]	@ 0x30
 80053e0:	4b41      	ldr	r3, [pc, #260]	@ (80054e8 <HAL_UART_MspInit+0x158>)
 80053e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80053ec:	230c      	movs	r3, #12
 80053ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f0:	2302      	movs	r3, #2
 80053f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f4:	2300      	movs	r3, #0
 80053f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053f8:	2303      	movs	r3, #3
 80053fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80053fc:	2307      	movs	r3, #7
 80053fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005400:	f107 0314 	add.w	r3, r7, #20
 8005404:	4619      	mov	r1, r3
 8005406:	4839      	ldr	r0, [pc, #228]	@ (80054ec <HAL_UART_MspInit+0x15c>)
 8005408:	f000 ff96 	bl	8006338 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800540c:	4b38      	ldr	r3, [pc, #224]	@ (80054f0 <HAL_UART_MspInit+0x160>)
 800540e:	4a39      	ldr	r2, [pc, #228]	@ (80054f4 <HAL_UART_MspInit+0x164>)
 8005410:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005412:	4b37      	ldr	r3, [pc, #220]	@ (80054f0 <HAL_UART_MspInit+0x160>)
 8005414:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005418:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800541a:	4b35      	ldr	r3, [pc, #212]	@ (80054f0 <HAL_UART_MspInit+0x160>)
 800541c:	2200      	movs	r2, #0
 800541e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005420:	4b33      	ldr	r3, [pc, #204]	@ (80054f0 <HAL_UART_MspInit+0x160>)
 8005422:	2200      	movs	r2, #0
 8005424:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005426:	4b32      	ldr	r3, [pc, #200]	@ (80054f0 <HAL_UART_MspInit+0x160>)
 8005428:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800542c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800542e:	4b30      	ldr	r3, [pc, #192]	@ (80054f0 <HAL_UART_MspInit+0x160>)
 8005430:	2200      	movs	r2, #0
 8005432:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005434:	4b2e      	ldr	r3, [pc, #184]	@ (80054f0 <HAL_UART_MspInit+0x160>)
 8005436:	2200      	movs	r2, #0
 8005438:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800543a:	4b2d      	ldr	r3, [pc, #180]	@ (80054f0 <HAL_UART_MspInit+0x160>)
 800543c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005440:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005442:	4b2b      	ldr	r3, [pc, #172]	@ (80054f0 <HAL_UART_MspInit+0x160>)
 8005444:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005448:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800544a:	4b29      	ldr	r3, [pc, #164]	@ (80054f0 <HAL_UART_MspInit+0x160>)
 800544c:	2200      	movs	r2, #0
 800544e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005450:	4827      	ldr	r0, [pc, #156]	@ (80054f0 <HAL_UART_MspInit+0x160>)
 8005452:	f000 fb6f 	bl	8005b34 <HAL_DMA_Init>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800545c:	f7fd fbb2 	bl	8002bc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a23      	ldr	r2, [pc, #140]	@ (80054f0 <HAL_UART_MspInit+0x160>)
 8005464:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005466:	4a22      	ldr	r2, [pc, #136]	@ (80054f0 <HAL_UART_MspInit+0x160>)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800546c:	4b22      	ldr	r3, [pc, #136]	@ (80054f8 <HAL_UART_MspInit+0x168>)
 800546e:	4a23      	ldr	r2, [pc, #140]	@ (80054fc <HAL_UART_MspInit+0x16c>)
 8005470:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005472:	4b21      	ldr	r3, [pc, #132]	@ (80054f8 <HAL_UART_MspInit+0x168>)
 8005474:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005478:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800547a:	4b1f      	ldr	r3, [pc, #124]	@ (80054f8 <HAL_UART_MspInit+0x168>)
 800547c:	2240      	movs	r2, #64	@ 0x40
 800547e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005480:	4b1d      	ldr	r3, [pc, #116]	@ (80054f8 <HAL_UART_MspInit+0x168>)
 8005482:	2200      	movs	r2, #0
 8005484:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005486:	4b1c      	ldr	r3, [pc, #112]	@ (80054f8 <HAL_UART_MspInit+0x168>)
 8005488:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800548c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800548e:	4b1a      	ldr	r3, [pc, #104]	@ (80054f8 <HAL_UART_MspInit+0x168>)
 8005490:	2200      	movs	r2, #0
 8005492:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005494:	4b18      	ldr	r3, [pc, #96]	@ (80054f8 <HAL_UART_MspInit+0x168>)
 8005496:	2200      	movs	r2, #0
 8005498:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800549a:	4b17      	ldr	r3, [pc, #92]	@ (80054f8 <HAL_UART_MspInit+0x168>)
 800549c:	2200      	movs	r2, #0
 800549e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80054a0:	4b15      	ldr	r3, [pc, #84]	@ (80054f8 <HAL_UART_MspInit+0x168>)
 80054a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80054a6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054a8:	4b13      	ldr	r3, [pc, #76]	@ (80054f8 <HAL_UART_MspInit+0x168>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80054ae:	4812      	ldr	r0, [pc, #72]	@ (80054f8 <HAL_UART_MspInit+0x168>)
 80054b0:	f000 fb40 	bl	8005b34 <HAL_DMA_Init>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80054ba:	f7fd fb83 	bl	8002bc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a0d      	ldr	r2, [pc, #52]	@ (80054f8 <HAL_UART_MspInit+0x168>)
 80054c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80054c4:	4a0c      	ldr	r2, [pc, #48]	@ (80054f8 <HAL_UART_MspInit+0x168>)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80054ca:	2200      	movs	r2, #0
 80054cc:	2100      	movs	r1, #0
 80054ce:	2026      	movs	r0, #38	@ 0x26
 80054d0:	f000 faf9 	bl	8005ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80054d4:	2026      	movs	r0, #38	@ 0x26
 80054d6:	f000 fb12 	bl	8005afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80054da:	bf00      	nop
 80054dc:	3728      	adds	r7, #40	@ 0x28
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40004400 	.word	0x40004400
 80054e8:	40023800 	.word	0x40023800
 80054ec:	40020000 	.word	0x40020000
 80054f0:	20000330 	.word	0x20000330
 80054f4:	40026088 	.word	0x40026088
 80054f8:	20000390 	.word	0x20000390
 80054fc:	400260a0 	.word	0x400260a0

08005500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005504:	bf00      	nop
 8005506:	e7fd      	b.n	8005504 <NMI_Handler+0x4>

08005508 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800550c:	bf00      	nop
 800550e:	e7fd      	b.n	800550c <HardFault_Handler+0x4>

08005510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005514:	bf00      	nop
 8005516:	e7fd      	b.n	8005514 <MemManage_Handler+0x4>

08005518 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800551c:	bf00      	nop
 800551e:	e7fd      	b.n	800551c <BusFault_Handler+0x4>

08005520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005524:	bf00      	nop
 8005526:	e7fd      	b.n	8005524 <UsageFault_Handler+0x4>

08005528 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800552c:	bf00      	nop
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005536:	b480      	push	{r7}
 8005538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800553a:	bf00      	nop
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005548:	bf00      	nop
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005556:	f000 f997 	bl	8005888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800555a:	bf00      	nop
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005564:	4802      	ldr	r0, [pc, #8]	@ (8005570 <DMA1_Stream5_IRQHandler+0x10>)
 8005566:	f000 fc7d 	bl	8005e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800556a:	bf00      	nop
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000330 	.word	0x20000330

08005574 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005578:	4802      	ldr	r0, [pc, #8]	@ (8005584 <DMA1_Stream6_IRQHandler+0x10>)
 800557a:	f000 fc73 	bl	8005e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800557e:	bf00      	nop
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20000390 	.word	0x20000390

08005588 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800558c:	4802      	ldr	r0, [pc, #8]	@ (8005598 <USART2_IRQHandler+0x10>)
 800558e:	f003 fd93 	bl	80090b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005592:	bf00      	nop
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	200002e8 	.word	0x200002e8

0800559c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80055a0:	4803      	ldr	r0, [pc, #12]	@ (80055b0 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80055a2:	f003 f8c7 	bl	8008734 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80055a6:	4803      	ldr	r0, [pc, #12]	@ (80055b4 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80055a8:	f003 f8c4 	bl	8008734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80055ac:	bf00      	nop
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000258 	.word	0x20000258
 80055b4:	200002a0 	.word	0x200002a0

080055b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80055bc:	4802      	ldr	r0, [pc, #8]	@ (80055c8 <TIM5_IRQHandler+0x10>)
 80055be:	f003 f8b9 	bl	8008734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80055c2:	bf00      	nop
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20000210 	.word	0x20000210

080055cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055d8:	2300      	movs	r3, #0
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	e00a      	b.n	80055f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80055de:	f3af 8000 	nop.w
 80055e2:	4601      	mov	r1, r0
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	60ba      	str	r2, [r7, #8]
 80055ea:	b2ca      	uxtb	r2, r1
 80055ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	3301      	adds	r3, #1
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	dbf0      	blt.n	80055de <_read+0x12>
  }

  return len;
 80055fc:	687b      	ldr	r3, [r7, #4]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b086      	sub	sp, #24
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	e009      	b.n	800562c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	60ba      	str	r2, [r7, #8]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	3301      	adds	r3, #1
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	429a      	cmp	r2, r3
 8005632:	dbf1      	blt.n	8005618 <_write+0x12>
  }
  return len;
 8005634:	687b      	ldr	r3, [r7, #4]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <_close>:

int _close(int file)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005646:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005666:	605a      	str	r2, [r3, #4]
  return 0;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <_isatty>:

int _isatty(int file)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800567e:	2301      	movs	r3, #1
}
 8005680:	4618      	mov	r0, r3
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056b0:	4a14      	ldr	r2, [pc, #80]	@ (8005704 <_sbrk+0x5c>)
 80056b2:	4b15      	ldr	r3, [pc, #84]	@ (8005708 <_sbrk+0x60>)
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056bc:	4b13      	ldr	r3, [pc, #76]	@ (800570c <_sbrk+0x64>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d102      	bne.n	80056ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056c4:	4b11      	ldr	r3, [pc, #68]	@ (800570c <_sbrk+0x64>)
 80056c6:	4a12      	ldr	r2, [pc, #72]	@ (8005710 <_sbrk+0x68>)
 80056c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056ca:	4b10      	ldr	r3, [pc, #64]	@ (800570c <_sbrk+0x64>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4413      	add	r3, r2
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d207      	bcs.n	80056e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056d8:	f006 fa72 	bl	800bbc0 <__errno>
 80056dc:	4603      	mov	r3, r0
 80056de:	220c      	movs	r2, #12
 80056e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056e6:	e009      	b.n	80056fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056e8:	4b08      	ldr	r3, [pc, #32]	@ (800570c <_sbrk+0x64>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056ee:	4b07      	ldr	r3, [pc, #28]	@ (800570c <_sbrk+0x64>)
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4413      	add	r3, r2
 80056f6:	4a05      	ldr	r2, [pc, #20]	@ (800570c <_sbrk+0x64>)
 80056f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056fa:	68fb      	ldr	r3, [r7, #12]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	20020000 	.word	0x20020000
 8005708:	00000400 	.word	0x00000400
 800570c:	20001b84 	.word	0x20001b84
 8005710:	20001cd8 	.word	0x20001cd8

08005714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005718:	4b06      	ldr	r3, [pc, #24]	@ (8005734 <SystemInit+0x20>)
 800571a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571e:	4a05      	ldr	r2, [pc, #20]	@ (8005734 <SystemInit+0x20>)
 8005720:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005724:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005728:	bf00      	nop
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	e000ed00 	.word	0xe000ed00

08005738 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	0a5a      	lsrs	r2, r3, #9
 8005748:	490f      	ldr	r1, [pc, #60]	@ (8005788 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800574a:	fba1 1202 	umull	r1, r2, r1, r2
 800574e:	09d2      	lsrs	r2, r2, #7
 8005750:	490e      	ldr	r1, [pc, #56]	@ (800578c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8005752:	fb01 f202 	mul.w	r2, r1, r2
 8005756:	1a9b      	subs	r3, r3, r2
 8005758:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	0a5b      	lsrs	r3, r3, #9
 8005760:	4a09      	ldr	r2, [pc, #36]	@ (8005788 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	09db      	lsrs	r3, r3, #7
 8005768:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	441a      	add	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	601a      	str	r2, [r3, #0]
}
 800577c:	bf00      	nop
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	00044b83 	.word	0x00044b83
 800578c:	3b9aca00 	.word	0x3b9aca00

08005790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005790:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80057c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005794:	f7ff ffbe 	bl	8005714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005798:	480c      	ldr	r0, [pc, #48]	@ (80057cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800579a:	490d      	ldr	r1, [pc, #52]	@ (80057d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800579c:	4a0d      	ldr	r2, [pc, #52]	@ (80057d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800579e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057a0:	e002      	b.n	80057a8 <LoopCopyDataInit>

080057a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057a6:	3304      	adds	r3, #4

080057a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057ac:	d3f9      	bcc.n	80057a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057ae:	4a0a      	ldr	r2, [pc, #40]	@ (80057d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80057b0:	4c0a      	ldr	r4, [pc, #40]	@ (80057dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80057b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057b4:	e001      	b.n	80057ba <LoopFillZerobss>

080057b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057b8:	3204      	adds	r2, #4

080057ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057bc:	d3fb      	bcc.n	80057b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80057be:	f006 fa05 	bl	800bbcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057c2:	f7fc f86d 	bl	80018a0 <main>
  bx  lr    
 80057c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80057c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80057cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057d0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80057d4:	0800c694 	.word	0x0800c694
  ldr r2, =_sbss
 80057d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80057dc:	20001cd8 	.word	0x20001cd8

080057e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057e0:	e7fe      	b.n	80057e0 <ADC_IRQHandler>
	...

080057e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005824 <HAL_Init+0x40>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005824 <HAL_Init+0x40>)
 80057ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005824 <HAL_Init+0x40>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005824 <HAL_Init+0x40>)
 80057fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005800:	4b08      	ldr	r3, [pc, #32]	@ (8005824 <HAL_Init+0x40>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a07      	ldr	r2, [pc, #28]	@ (8005824 <HAL_Init+0x40>)
 8005806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800580a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800580c:	2003      	movs	r0, #3
 800580e:	f000 f94f 	bl	8005ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005812:	2000      	movs	r0, #0
 8005814:	f000 f808 	bl	8005828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005818:	f7ff fbbe 	bl	8004f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40023c00 	.word	0x40023c00

08005828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005830:	4b12      	ldr	r3, [pc, #72]	@ (800587c <HAL_InitTick+0x54>)
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	4b12      	ldr	r3, [pc, #72]	@ (8005880 <HAL_InitTick+0x58>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	4619      	mov	r1, r3
 800583a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800583e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005842:	fbb2 f3f3 	udiv	r3, r2, r3
 8005846:	4618      	mov	r0, r3
 8005848:	f000 f967 	bl	8005b1a <HAL_SYSTICK_Config>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e00e      	b.n	8005874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b0f      	cmp	r3, #15
 800585a:	d80a      	bhi.n	8005872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800585c:	2200      	movs	r2, #0
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005864:	f000 f92f 	bl	8005ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005868:	4a06      	ldr	r2, [pc, #24]	@ (8005884 <HAL_InitTick+0x5c>)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	e000      	b.n	8005874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
}
 8005874:	4618      	mov	r0, r3
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	20000004 	.word	0x20000004
 8005880:	2000000c 	.word	0x2000000c
 8005884:	20000008 	.word	0x20000008

08005888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800588c:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <HAL_IncTick+0x20>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
 8005892:	4b06      	ldr	r3, [pc, #24]	@ (80058ac <HAL_IncTick+0x24>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4413      	add	r3, r2
 8005898:	4a04      	ldr	r2, [pc, #16]	@ (80058ac <HAL_IncTick+0x24>)
 800589a:	6013      	str	r3, [r2, #0]
}
 800589c:	bf00      	nop
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	2000000c 	.word	0x2000000c
 80058ac:	20001b88 	.word	0x20001b88

080058b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  return uwTick;
 80058b4:	4b03      	ldr	r3, [pc, #12]	@ (80058c4 <HAL_GetTick+0x14>)
 80058b6:	681b      	ldr	r3, [r3, #0]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20001b88 	.word	0x20001b88

080058c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058d0:	f7ff ffee 	bl	80058b0 <HAL_GetTick>
 80058d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058e0:	d005      	beq.n	80058ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058e2:	4b0a      	ldr	r3, [pc, #40]	@ (800590c <HAL_Delay+0x44>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80058ee:	bf00      	nop
 80058f0:	f7ff ffde 	bl	80058b0 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d8f7      	bhi.n	80058f0 <HAL_Delay+0x28>
  {
  }
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	2000000c 	.word	0x2000000c

08005910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005920:	4b0c      	ldr	r3, [pc, #48]	@ (8005954 <__NVIC_SetPriorityGrouping+0x44>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800592c:	4013      	ands	r3, r2
 800592e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800593c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005942:	4a04      	ldr	r2, [pc, #16]	@ (8005954 <__NVIC_SetPriorityGrouping+0x44>)
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	60d3      	str	r3, [r2, #12]
}
 8005948:	bf00      	nop
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	e000ed00 	.word	0xe000ed00

08005958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800595c:	4b04      	ldr	r3, [pc, #16]	@ (8005970 <__NVIC_GetPriorityGrouping+0x18>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	0a1b      	lsrs	r3, r3, #8
 8005962:	f003 0307 	and.w	r3, r3, #7
}
 8005966:	4618      	mov	r0, r3
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	e000ed00 	.word	0xe000ed00

08005974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800597e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005982:	2b00      	cmp	r3, #0
 8005984:	db0b      	blt.n	800599e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	f003 021f 	and.w	r2, r3, #31
 800598c:	4907      	ldr	r1, [pc, #28]	@ (80059ac <__NVIC_EnableIRQ+0x38>)
 800598e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	2001      	movs	r0, #1
 8005996:	fa00 f202 	lsl.w	r2, r0, r2
 800599a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	e000e100 	.word	0xe000e100

080059b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	6039      	str	r1, [r7, #0]
 80059ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	db0a      	blt.n	80059da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	490c      	ldr	r1, [pc, #48]	@ (80059fc <__NVIC_SetPriority+0x4c>)
 80059ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ce:	0112      	lsls	r2, r2, #4
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	440b      	add	r3, r1
 80059d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059d8:	e00a      	b.n	80059f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	4908      	ldr	r1, [pc, #32]	@ (8005a00 <__NVIC_SetPriority+0x50>)
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	3b04      	subs	r3, #4
 80059e8:	0112      	lsls	r2, r2, #4
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	440b      	add	r3, r1
 80059ee:	761a      	strb	r2, [r3, #24]
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	e000e100 	.word	0xe000e100
 8005a00:	e000ed00 	.word	0xe000ed00

08005a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b089      	sub	sp, #36	@ 0x24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	f1c3 0307 	rsb	r3, r3, #7
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	bf28      	it	cs
 8005a22:	2304      	movcs	r3, #4
 8005a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	2b06      	cmp	r3, #6
 8005a2c:	d902      	bls.n	8005a34 <NVIC_EncodePriority+0x30>
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	3b03      	subs	r3, #3
 8005a32:	e000      	b.n	8005a36 <NVIC_EncodePriority+0x32>
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a42:	43da      	mvns	r2, r3
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	401a      	ands	r2, r3
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	fa01 f303 	lsl.w	r3, r1, r3
 8005a56:	43d9      	mvns	r1, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a5c:	4313      	orrs	r3, r2
         );
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3724      	adds	r7, #36	@ 0x24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
	...

08005a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a7c:	d301      	bcc.n	8005a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e00f      	b.n	8005aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a82:	4a0a      	ldr	r2, [pc, #40]	@ (8005aac <SysTick_Config+0x40>)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a8a:	210f      	movs	r1, #15
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a90:	f7ff ff8e 	bl	80059b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a94:	4b05      	ldr	r3, [pc, #20]	@ (8005aac <SysTick_Config+0x40>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a9a:	4b04      	ldr	r3, [pc, #16]	@ (8005aac <SysTick_Config+0x40>)
 8005a9c:	2207      	movs	r2, #7
 8005a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	e000e010 	.word	0xe000e010

08005ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff ff29 	bl	8005910 <__NVIC_SetPriorityGrouping>
}
 8005abe:	bf00      	nop
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b086      	sub	sp, #24
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	4603      	mov	r3, r0
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
 8005ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ad8:	f7ff ff3e 	bl	8005958 <__NVIC_GetPriorityGrouping>
 8005adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	6978      	ldr	r0, [r7, #20]
 8005ae4:	f7ff ff8e 	bl	8005a04 <NVIC_EncodePriority>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aee:	4611      	mov	r1, r2
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff ff5d 	bl	80059b0 <__NVIC_SetPriority>
}
 8005af6:	bf00      	nop
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	4603      	mov	r3, r0
 8005b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff ff31 	bl	8005974 <__NVIC_EnableIRQ>
}
 8005b12:	bf00      	nop
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b082      	sub	sp, #8
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7ff ffa2 	bl	8005a6c <SysTick_Config>
 8005b28:	4603      	mov	r3, r0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b40:	f7ff feb6 	bl	80058b0 <HAL_GetTick>
 8005b44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e099      	b.n	8005c84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0201 	bic.w	r2, r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b70:	e00f      	b.n	8005b92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b72:	f7ff fe9d 	bl	80058b0 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b05      	cmp	r3, #5
 8005b7e:	d908      	bls.n	8005b92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2203      	movs	r2, #3
 8005b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e078      	b.n	8005c84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e8      	bne.n	8005b72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4b38      	ldr	r3, [pc, #224]	@ (8005c8c <HAL_DMA_Init+0x158>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d107      	bne.n	8005bfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f023 0307 	bic.w	r3, r3, #7
 8005c12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d117      	bne.n	8005c56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00e      	beq.n	8005c56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fb01 	bl	8006240 <DMA_CheckFifoParam>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d008      	beq.n	8005c56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2240      	movs	r2, #64	@ 0x40
 8005c48:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005c52:	2301      	movs	r3, #1
 8005c54:	e016      	b.n	8005c84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fab8 	bl	80061d4 <DMA_CalcBaseAndBitshift>
 8005c64:	4603      	mov	r3, r0
 8005c66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c6c:	223f      	movs	r2, #63	@ 0x3f
 8005c6e:	409a      	lsls	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	f010803f 	.word	0xf010803f

08005c90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d101      	bne.n	8005cb6 <HAL_DMA_Start_IT+0x26>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	e040      	b.n	8005d38 <HAL_DMA_Start_IT+0xa8>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d12f      	bne.n	8005d2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 fa4a 	bl	8006178 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce8:	223f      	movs	r2, #63	@ 0x3f
 8005cea:	409a      	lsls	r2, r3
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0216 	orr.w	r2, r2, #22
 8005cfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d007      	beq.n	8005d18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0208 	orr.w	r2, r2, #8
 8005d16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0201 	orr.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	e005      	b.n	8005d36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d32:	2302      	movs	r3, #2
 8005d34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d4e:	f7ff fdaf 	bl	80058b0 <HAL_GetTick>
 8005d52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d008      	beq.n	8005d72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2280      	movs	r2, #128	@ 0x80
 8005d64:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e052      	b.n	8005e18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0216 	bic.w	r2, r2, #22
 8005d80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	695a      	ldr	r2, [r3, #20]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d103      	bne.n	8005da2 <HAL_DMA_Abort+0x62>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d007      	beq.n	8005db2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0208 	bic.w	r2, r2, #8
 8005db0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0201 	bic.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dc2:	e013      	b.n	8005dec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dc4:	f7ff fd74 	bl	80058b0 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b05      	cmp	r3, #5
 8005dd0:	d90c      	bls.n	8005dec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2203      	movs	r2, #3
 8005ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e015      	b.n	8005e18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e4      	bne.n	8005dc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dfe:	223f      	movs	r2, #63	@ 0x3f
 8005e00:	409a      	lsls	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d004      	beq.n	8005e3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2280      	movs	r2, #128	@ 0x80
 8005e38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e00c      	b.n	8005e58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2205      	movs	r2, #5
 8005e42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0201 	bic.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e70:	4b8e      	ldr	r3, [pc, #568]	@ (80060ac <HAL_DMA_IRQHandler+0x248>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a8e      	ldr	r2, [pc, #568]	@ (80060b0 <HAL_DMA_IRQHandler+0x24c>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	0a9b      	lsrs	r3, r3, #10
 8005e7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e8e:	2208      	movs	r2, #8
 8005e90:	409a      	lsls	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4013      	ands	r3, r2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d01a      	beq.n	8005ed0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0304 	and.w	r3, r3, #4
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d013      	beq.n	8005ed0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0204 	bic.w	r2, r2, #4
 8005eb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ebc:	2208      	movs	r2, #8
 8005ebe:	409a      	lsls	r2, r3
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec8:	f043 0201 	orr.w	r2, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d012      	beq.n	8005f06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00b      	beq.n	8005f06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	409a      	lsls	r2, r3
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efe:	f043 0202 	orr.w	r2, r3, #2
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f0a:	2204      	movs	r2, #4
 8005f0c:	409a      	lsls	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4013      	ands	r3, r2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d012      	beq.n	8005f3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f28:	2204      	movs	r2, #4
 8005f2a:	409a      	lsls	r2, r3
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f34:	f043 0204 	orr.w	r2, r3, #4
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f40:	2210      	movs	r2, #16
 8005f42:	409a      	lsls	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4013      	ands	r3, r2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d043      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d03c      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5e:	2210      	movs	r2, #16
 8005f60:	409a      	lsls	r2, r3
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d018      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d108      	bne.n	8005f94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d024      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	4798      	blx	r3
 8005f92:	e01f      	b.n	8005fd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d01b      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	4798      	blx	r3
 8005fa4:	e016      	b.n	8005fd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d107      	bne.n	8005fc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0208 	bic.w	r2, r2, #8
 8005fc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd8:	2220      	movs	r2, #32
 8005fda:	409a      	lsls	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 808f 	beq.w	8006104 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 8087 	beq.w	8006104 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	409a      	lsls	r2, r3
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b05      	cmp	r3, #5
 800600c:	d136      	bne.n	800607c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0216 	bic.w	r2, r2, #22
 800601c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	695a      	ldr	r2, [r3, #20]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800602c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d103      	bne.n	800603e <HAL_DMA_IRQHandler+0x1da>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800603a:	2b00      	cmp	r3, #0
 800603c:	d007      	beq.n	800604e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0208 	bic.w	r2, r2, #8
 800604c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006052:	223f      	movs	r2, #63	@ 0x3f
 8006054:	409a      	lsls	r2, r3
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800606e:	2b00      	cmp	r3, #0
 8006070:	d07e      	beq.n	8006170 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	4798      	blx	r3
        }
        return;
 800607a:	e079      	b.n	8006170 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d01d      	beq.n	80060c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10d      	bne.n	80060b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609c:	2b00      	cmp	r3, #0
 800609e:	d031      	beq.n	8006104 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	4798      	blx	r3
 80060a8:	e02c      	b.n	8006104 <HAL_DMA_IRQHandler+0x2a0>
 80060aa:	bf00      	nop
 80060ac:	20000004 	.word	0x20000004
 80060b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d023      	beq.n	8006104 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	4798      	blx	r3
 80060c4:	e01e      	b.n	8006104 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10f      	bne.n	80060f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0210 	bic.w	r2, r2, #16
 80060e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006108:	2b00      	cmp	r3, #0
 800610a:	d032      	beq.n	8006172 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d022      	beq.n	800615e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2205      	movs	r2, #5
 800611c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0201 	bic.w	r2, r2, #1
 800612e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	3301      	adds	r3, #1
 8006134:	60bb      	str	r3, [r7, #8]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	429a      	cmp	r2, r3
 800613a:	d307      	bcc.n	800614c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1f2      	bne.n	8006130 <HAL_DMA_IRQHandler+0x2cc>
 800614a:	e000      	b.n	800614e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800614c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d005      	beq.n	8006172 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	4798      	blx	r3
 800616e:	e000      	b.n	8006172 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006170:	bf00      	nop
    }
  }
}
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006194:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	2b40      	cmp	r3, #64	@ 0x40
 80061a4:	d108      	bne.n	80061b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80061b6:	e007      	b.n	80061c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	60da      	str	r2, [r3, #12]
}
 80061c8:	bf00      	nop
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	3b10      	subs	r3, #16
 80061e4:	4a14      	ldr	r2, [pc, #80]	@ (8006238 <DMA_CalcBaseAndBitshift+0x64>)
 80061e6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ea:	091b      	lsrs	r3, r3, #4
 80061ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80061ee:	4a13      	ldr	r2, [pc, #76]	@ (800623c <DMA_CalcBaseAndBitshift+0x68>)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d909      	bls.n	8006216 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800620a:	f023 0303 	bic.w	r3, r3, #3
 800620e:	1d1a      	adds	r2, r3, #4
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	659a      	str	r2, [r3, #88]	@ 0x58
 8006214:	e007      	b.n	8006226 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800621e:	f023 0303 	bic.w	r3, r3, #3
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800622a:	4618      	mov	r0, r3
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	aaaaaaab 	.word	0xaaaaaaab
 800623c:	0800c460 	.word	0x0800c460

08006240 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006250:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d11f      	bne.n	800629a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b03      	cmp	r3, #3
 800625e:	d856      	bhi.n	800630e <DMA_CheckFifoParam+0xce>
 8006260:	a201      	add	r2, pc, #4	@ (adr r2, 8006268 <DMA_CheckFifoParam+0x28>)
 8006262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006266:	bf00      	nop
 8006268:	08006279 	.word	0x08006279
 800626c:	0800628b 	.word	0x0800628b
 8006270:	08006279 	.word	0x08006279
 8006274:	0800630f 	.word	0x0800630f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d046      	beq.n	8006312 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006288:	e043      	b.n	8006312 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006292:	d140      	bne.n	8006316 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006298:	e03d      	b.n	8006316 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062a2:	d121      	bne.n	80062e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d837      	bhi.n	800631a <DMA_CheckFifoParam+0xda>
 80062aa:	a201      	add	r2, pc, #4	@ (adr r2, 80062b0 <DMA_CheckFifoParam+0x70>)
 80062ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b0:	080062c1 	.word	0x080062c1
 80062b4:	080062c7 	.word	0x080062c7
 80062b8:	080062c1 	.word	0x080062c1
 80062bc:	080062d9 	.word	0x080062d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	73fb      	strb	r3, [r7, #15]
      break;
 80062c4:	e030      	b.n	8006328 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d025      	beq.n	800631e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062d6:	e022      	b.n	800631e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062e0:	d11f      	bne.n	8006322 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80062e6:	e01c      	b.n	8006322 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d903      	bls.n	80062f6 <DMA_CheckFifoParam+0xb6>
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d003      	beq.n	80062fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80062f4:	e018      	b.n	8006328 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	73fb      	strb	r3, [r7, #15]
      break;
 80062fa:	e015      	b.n	8006328 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006300:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00e      	beq.n	8006326 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	73fb      	strb	r3, [r7, #15]
      break;
 800630c:	e00b      	b.n	8006326 <DMA_CheckFifoParam+0xe6>
      break;
 800630e:	bf00      	nop
 8006310:	e00a      	b.n	8006328 <DMA_CheckFifoParam+0xe8>
      break;
 8006312:	bf00      	nop
 8006314:	e008      	b.n	8006328 <DMA_CheckFifoParam+0xe8>
      break;
 8006316:	bf00      	nop
 8006318:	e006      	b.n	8006328 <DMA_CheckFifoParam+0xe8>
      break;
 800631a:	bf00      	nop
 800631c:	e004      	b.n	8006328 <DMA_CheckFifoParam+0xe8>
      break;
 800631e:	bf00      	nop
 8006320:	e002      	b.n	8006328 <DMA_CheckFifoParam+0xe8>
      break;   
 8006322:	bf00      	nop
 8006324:	e000      	b.n	8006328 <DMA_CheckFifoParam+0xe8>
      break;
 8006326:	bf00      	nop
    }
  } 
  
  return status; 
 8006328:	7bfb      	ldrb	r3, [r7, #15]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop

08006338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006338:	b480      	push	{r7}
 800633a:	b089      	sub	sp, #36	@ 0x24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006342:	2300      	movs	r3, #0
 8006344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006346:	2300      	movs	r3, #0
 8006348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800634a:	2300      	movs	r3, #0
 800634c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800634e:	2300      	movs	r3, #0
 8006350:	61fb      	str	r3, [r7, #28]
 8006352:	e165      	b.n	8006620 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006354:	2201      	movs	r2, #1
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	4013      	ands	r3, r2
 8006366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	429a      	cmp	r2, r3
 800636e:	f040 8154 	bne.w	800661a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	2b01      	cmp	r3, #1
 800637c:	d005      	beq.n	800638a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006386:	2b02      	cmp	r3, #2
 8006388:	d130      	bne.n	80063ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	2203      	movs	r2, #3
 8006396:	fa02 f303 	lsl.w	r3, r2, r3
 800639a:	43db      	mvns	r3, r3
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	4013      	ands	r3, r2
 80063a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	fa02 f303 	lsl.w	r3, r2, r3
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063c0:	2201      	movs	r2, #1
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	fa02 f303 	lsl.w	r3, r2, r3
 80063c8:	43db      	mvns	r3, r3
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	4013      	ands	r3, r2
 80063ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	091b      	lsrs	r3, r3, #4
 80063d6:	f003 0201 	and.w	r2, r3, #1
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	fa02 f303 	lsl.w	r3, r2, r3
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f003 0303 	and.w	r3, r3, #3
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d017      	beq.n	8006428 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	2203      	movs	r2, #3
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	43db      	mvns	r3, r3
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	4013      	ands	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	fa02 f303 	lsl.w	r3, r2, r3
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	4313      	orrs	r3, r2
 8006420:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f003 0303 	and.w	r3, r3, #3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d123      	bne.n	800647c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	08da      	lsrs	r2, r3, #3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3208      	adds	r2, #8
 800643c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	220f      	movs	r2, #15
 800644c:	fa02 f303 	lsl.w	r3, r2, r3
 8006450:	43db      	mvns	r3, r3
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	4013      	ands	r3, r2
 8006456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	691a      	ldr	r2, [r3, #16]
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	4313      	orrs	r3, r2
 800646c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	08da      	lsrs	r2, r3, #3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3208      	adds	r2, #8
 8006476:	69b9      	ldr	r1, [r7, #24]
 8006478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	2203      	movs	r2, #3
 8006488:	fa02 f303 	lsl.w	r3, r2, r3
 800648c:	43db      	mvns	r3, r3
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	4013      	ands	r3, r2
 8006492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f003 0203 	and.w	r2, r3, #3
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 80ae 	beq.w	800661a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	4b5d      	ldr	r3, [pc, #372]	@ (8006638 <HAL_GPIO_Init+0x300>)
 80064c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c6:	4a5c      	ldr	r2, [pc, #368]	@ (8006638 <HAL_GPIO_Init+0x300>)
 80064c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80064ce:	4b5a      	ldr	r3, [pc, #360]	@ (8006638 <HAL_GPIO_Init+0x300>)
 80064d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064da:	4a58      	ldr	r2, [pc, #352]	@ (800663c <HAL_GPIO_Init+0x304>)
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	089b      	lsrs	r3, r3, #2
 80064e0:	3302      	adds	r3, #2
 80064e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	220f      	movs	r2, #15
 80064f2:	fa02 f303 	lsl.w	r3, r2, r3
 80064f6:	43db      	mvns	r3, r3
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	4013      	ands	r3, r2
 80064fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a4f      	ldr	r2, [pc, #316]	@ (8006640 <HAL_GPIO_Init+0x308>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d025      	beq.n	8006552 <HAL_GPIO_Init+0x21a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a4e      	ldr	r2, [pc, #312]	@ (8006644 <HAL_GPIO_Init+0x30c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01f      	beq.n	800654e <HAL_GPIO_Init+0x216>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a4d      	ldr	r2, [pc, #308]	@ (8006648 <HAL_GPIO_Init+0x310>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d019      	beq.n	800654a <HAL_GPIO_Init+0x212>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a4c      	ldr	r2, [pc, #304]	@ (800664c <HAL_GPIO_Init+0x314>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <HAL_GPIO_Init+0x20e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a4b      	ldr	r2, [pc, #300]	@ (8006650 <HAL_GPIO_Init+0x318>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00d      	beq.n	8006542 <HAL_GPIO_Init+0x20a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a4a      	ldr	r2, [pc, #296]	@ (8006654 <HAL_GPIO_Init+0x31c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d007      	beq.n	800653e <HAL_GPIO_Init+0x206>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a49      	ldr	r2, [pc, #292]	@ (8006658 <HAL_GPIO_Init+0x320>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d101      	bne.n	800653a <HAL_GPIO_Init+0x202>
 8006536:	2306      	movs	r3, #6
 8006538:	e00c      	b.n	8006554 <HAL_GPIO_Init+0x21c>
 800653a:	2307      	movs	r3, #7
 800653c:	e00a      	b.n	8006554 <HAL_GPIO_Init+0x21c>
 800653e:	2305      	movs	r3, #5
 8006540:	e008      	b.n	8006554 <HAL_GPIO_Init+0x21c>
 8006542:	2304      	movs	r3, #4
 8006544:	e006      	b.n	8006554 <HAL_GPIO_Init+0x21c>
 8006546:	2303      	movs	r3, #3
 8006548:	e004      	b.n	8006554 <HAL_GPIO_Init+0x21c>
 800654a:	2302      	movs	r3, #2
 800654c:	e002      	b.n	8006554 <HAL_GPIO_Init+0x21c>
 800654e:	2301      	movs	r3, #1
 8006550:	e000      	b.n	8006554 <HAL_GPIO_Init+0x21c>
 8006552:	2300      	movs	r3, #0
 8006554:	69fa      	ldr	r2, [r7, #28]
 8006556:	f002 0203 	and.w	r2, r2, #3
 800655a:	0092      	lsls	r2, r2, #2
 800655c:	4093      	lsls	r3, r2
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	4313      	orrs	r3, r2
 8006562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006564:	4935      	ldr	r1, [pc, #212]	@ (800663c <HAL_GPIO_Init+0x304>)
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	089b      	lsrs	r3, r3, #2
 800656a:	3302      	adds	r3, #2
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006572:	4b3a      	ldr	r3, [pc, #232]	@ (800665c <HAL_GPIO_Init+0x324>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	43db      	mvns	r3, r3
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	4013      	ands	r3, r2
 8006580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006596:	4a31      	ldr	r2, [pc, #196]	@ (800665c <HAL_GPIO_Init+0x324>)
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800659c:	4b2f      	ldr	r3, [pc, #188]	@ (800665c <HAL_GPIO_Init+0x324>)
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	43db      	mvns	r3, r3
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	4013      	ands	r3, r2
 80065aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	4313      	orrs	r3, r2
 80065be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065c0:	4a26      	ldr	r2, [pc, #152]	@ (800665c <HAL_GPIO_Init+0x324>)
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065c6:	4b25      	ldr	r3, [pc, #148]	@ (800665c <HAL_GPIO_Init+0x324>)
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	43db      	mvns	r3, r3
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	4013      	ands	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065ea:	4a1c      	ldr	r2, [pc, #112]	@ (800665c <HAL_GPIO_Init+0x324>)
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065f0:	4b1a      	ldr	r3, [pc, #104]	@ (800665c <HAL_GPIO_Init+0x324>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	43db      	mvns	r3, r3
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	4013      	ands	r3, r2
 80065fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d003      	beq.n	8006614 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006614:	4a11      	ldr	r2, [pc, #68]	@ (800665c <HAL_GPIO_Init+0x324>)
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	3301      	adds	r3, #1
 800661e:	61fb      	str	r3, [r7, #28]
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	2b0f      	cmp	r3, #15
 8006624:	f67f ae96 	bls.w	8006354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006628:	bf00      	nop
 800662a:	bf00      	nop
 800662c:	3724      	adds	r7, #36	@ 0x24
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40023800 	.word	0x40023800
 800663c:	40013800 	.word	0x40013800
 8006640:	40020000 	.word	0x40020000
 8006644:	40020400 	.word	0x40020400
 8006648:	40020800 	.word	0x40020800
 800664c:	40020c00 	.word	0x40020c00
 8006650:	40021000 	.word	0x40021000
 8006654:	40021400 	.word	0x40021400
 8006658:	40021800 	.word	0x40021800
 800665c:	40013c00 	.word	0x40013c00

08006660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	807b      	strh	r3, [r7, #2]
 800666c:	4613      	mov	r3, r2
 800666e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006670:	787b      	ldrb	r3, [r7, #1]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006676:	887a      	ldrh	r2, [r7, #2]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800667c:	e003      	b.n	8006686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800667e:	887b      	ldrh	r3, [r7, #2]
 8006680:	041a      	lsls	r2, r3, #16
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	619a      	str	r2, [r3, #24]
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
	...

08006694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e12b      	b.n	80068fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d106      	bne.n	80066c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fe fc94 	bl	8004fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2224      	movs	r2, #36	@ 0x24
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 0201 	bic.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80066f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80066f8:	f001 f932 	bl	8007960 <HAL_RCC_GetPCLK1Freq>
 80066fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	4a81      	ldr	r2, [pc, #516]	@ (8006908 <HAL_I2C_Init+0x274>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d807      	bhi.n	8006718 <HAL_I2C_Init+0x84>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4a80      	ldr	r2, [pc, #512]	@ (800690c <HAL_I2C_Init+0x278>)
 800670c:	4293      	cmp	r3, r2
 800670e:	bf94      	ite	ls
 8006710:	2301      	movls	r3, #1
 8006712:	2300      	movhi	r3, #0
 8006714:	b2db      	uxtb	r3, r3
 8006716:	e006      	b.n	8006726 <HAL_I2C_Init+0x92>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a7d      	ldr	r2, [pc, #500]	@ (8006910 <HAL_I2C_Init+0x27c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	bf94      	ite	ls
 8006720:	2301      	movls	r3, #1
 8006722:	2300      	movhi	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e0e7      	b.n	80068fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4a78      	ldr	r2, [pc, #480]	@ (8006914 <HAL_I2C_Init+0x280>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	0c9b      	lsrs	r3, r3, #18
 8006738:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	4a6a      	ldr	r2, [pc, #424]	@ (8006908 <HAL_I2C_Init+0x274>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d802      	bhi.n	8006768 <HAL_I2C_Init+0xd4>
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	3301      	adds	r3, #1
 8006766:	e009      	b.n	800677c <HAL_I2C_Init+0xe8>
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800676e:	fb02 f303 	mul.w	r3, r2, r3
 8006772:	4a69      	ldr	r2, [pc, #420]	@ (8006918 <HAL_I2C_Init+0x284>)
 8006774:	fba2 2303 	umull	r2, r3, r2, r3
 8006778:	099b      	lsrs	r3, r3, #6
 800677a:	3301      	adds	r3, #1
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6812      	ldr	r2, [r2, #0]
 8006780:	430b      	orrs	r3, r1
 8006782:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800678e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	495c      	ldr	r1, [pc, #368]	@ (8006908 <HAL_I2C_Init+0x274>)
 8006798:	428b      	cmp	r3, r1
 800679a:	d819      	bhi.n	80067d0 <HAL_I2C_Init+0x13c>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	1e59      	subs	r1, r3, #1
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80067aa:	1c59      	adds	r1, r3, #1
 80067ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80067b0:	400b      	ands	r3, r1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <HAL_I2C_Init+0x138>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	1e59      	subs	r1, r3, #1
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80067c4:	3301      	adds	r3, #1
 80067c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ca:	e051      	b.n	8006870 <HAL_I2C_Init+0x1dc>
 80067cc:	2304      	movs	r3, #4
 80067ce:	e04f      	b.n	8006870 <HAL_I2C_Init+0x1dc>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d111      	bne.n	80067fc <HAL_I2C_Init+0x168>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	1e58      	subs	r0, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6859      	ldr	r1, [r3, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	440b      	add	r3, r1
 80067e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80067ea:	3301      	adds	r3, #1
 80067ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bf0c      	ite	eq
 80067f4:	2301      	moveq	r3, #1
 80067f6:	2300      	movne	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	e012      	b.n	8006822 <HAL_I2C_Init+0x18e>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	1e58      	subs	r0, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6859      	ldr	r1, [r3, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	0099      	lsls	r1, r3, #2
 800680c:	440b      	add	r3, r1
 800680e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006812:	3301      	adds	r3, #1
 8006814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006818:	2b00      	cmp	r3, #0
 800681a:	bf0c      	ite	eq
 800681c:	2301      	moveq	r3, #1
 800681e:	2300      	movne	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_I2C_Init+0x196>
 8006826:	2301      	movs	r3, #1
 8006828:	e022      	b.n	8006870 <HAL_I2C_Init+0x1dc>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10e      	bne.n	8006850 <HAL_I2C_Init+0x1bc>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	1e58      	subs	r0, r3, #1
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6859      	ldr	r1, [r3, #4]
 800683a:	460b      	mov	r3, r1
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	440b      	add	r3, r1
 8006840:	fbb0 f3f3 	udiv	r3, r0, r3
 8006844:	3301      	adds	r3, #1
 8006846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800684a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800684e:	e00f      	b.n	8006870 <HAL_I2C_Init+0x1dc>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	1e58      	subs	r0, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6859      	ldr	r1, [r3, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	0099      	lsls	r1, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	fbb0 f3f3 	udiv	r3, r0, r3
 8006866:	3301      	adds	r3, #1
 8006868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800686c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	6809      	ldr	r1, [r1, #0]
 8006874:	4313      	orrs	r3, r2
 8006876:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69da      	ldr	r2, [r3, #28]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800689e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	6911      	ldr	r1, [r2, #16]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	68d2      	ldr	r2, [r2, #12]
 80068aa:	4311      	orrs	r1, r2
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	430b      	orrs	r3, r1
 80068b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	695a      	ldr	r2, [r3, #20]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	000186a0 	.word	0x000186a0
 800690c:	001e847f 	.word	0x001e847f
 8006910:	003d08ff 	.word	0x003d08ff
 8006914:	431bde83 	.word	0x431bde83
 8006918:	10624dd3 	.word	0x10624dd3

0800691c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b088      	sub	sp, #32
 8006920:	af02      	add	r7, sp, #8
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	4608      	mov	r0, r1
 8006926:	4611      	mov	r1, r2
 8006928:	461a      	mov	r2, r3
 800692a:	4603      	mov	r3, r0
 800692c:	817b      	strh	r3, [r7, #10]
 800692e:	460b      	mov	r3, r1
 8006930:	813b      	strh	r3, [r7, #8]
 8006932:	4613      	mov	r3, r2
 8006934:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006936:	f7fe ffbb 	bl	80058b0 <HAL_GetTick>
 800693a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b20      	cmp	r3, #32
 8006946:	f040 80d9 	bne.w	8006afc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	2319      	movs	r3, #25
 8006950:	2201      	movs	r2, #1
 8006952:	496d      	ldr	r1, [pc, #436]	@ (8006b08 <HAL_I2C_Mem_Write+0x1ec>)
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 fc8b 	bl	8007270 <I2C_WaitOnFlagUntilTimeout>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006960:	2302      	movs	r3, #2
 8006962:	e0cc      	b.n	8006afe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <HAL_I2C_Mem_Write+0x56>
 800696e:	2302      	movs	r3, #2
 8006970:	e0c5      	b.n	8006afe <HAL_I2C_Mem_Write+0x1e2>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b01      	cmp	r3, #1
 8006986:	d007      	beq.n	8006998 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2221      	movs	r2, #33	@ 0x21
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2240      	movs	r2, #64	@ 0x40
 80069b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a3a      	ldr	r2, [r7, #32]
 80069c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80069c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4a4d      	ldr	r2, [pc, #308]	@ (8006b0c <HAL_I2C_Mem_Write+0x1f0>)
 80069d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069da:	88f8      	ldrh	r0, [r7, #6]
 80069dc:	893a      	ldrh	r2, [r7, #8]
 80069de:	8979      	ldrh	r1, [r7, #10]
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	9301      	str	r3, [sp, #4]
 80069e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	4603      	mov	r3, r0
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 fac2 	bl	8006f74 <I2C_RequestMemoryWrite>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d052      	beq.n	8006a9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e081      	b.n	8006afe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 fd50 	bl	80074a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00d      	beq.n	8006a26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d107      	bne.n	8006a22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e06b      	b.n	8006afe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2a:	781a      	ldrb	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d11b      	bne.n	8006a9c <HAL_I2C_Mem_Write+0x180>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d017      	beq.n	8006a9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a70:	781a      	ldrb	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1aa      	bne.n	80069fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fd43 	bl	8007534 <I2C_WaitOnBTFFlagUntilTimeout>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00d      	beq.n	8006ad0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	d107      	bne.n	8006acc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006aca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e016      	b.n	8006afe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e000      	b.n	8006afe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006afc:	2302      	movs	r3, #2
  }
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	00100002 	.word	0x00100002
 8006b0c:	ffff0000 	.word	0xffff0000

08006b10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08c      	sub	sp, #48	@ 0x30
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	4608      	mov	r0, r1
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	4603      	mov	r3, r0
 8006b20:	817b      	strh	r3, [r7, #10]
 8006b22:	460b      	mov	r3, r1
 8006b24:	813b      	strh	r3, [r7, #8]
 8006b26:	4613      	mov	r3, r2
 8006b28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b2a:	f7fe fec1 	bl	80058b0 <HAL_GetTick>
 8006b2e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b20      	cmp	r3, #32
 8006b3a:	f040 8214 	bne.w	8006f66 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	2319      	movs	r3, #25
 8006b44:	2201      	movs	r2, #1
 8006b46:	497b      	ldr	r1, [pc, #492]	@ (8006d34 <HAL_I2C_Mem_Read+0x224>)
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 fb91 	bl	8007270 <I2C_WaitOnFlagUntilTimeout>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006b54:	2302      	movs	r3, #2
 8006b56:	e207      	b.n	8006f68 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d101      	bne.n	8006b66 <HAL_I2C_Mem_Read+0x56>
 8006b62:	2302      	movs	r3, #2
 8006b64:	e200      	b.n	8006f68 <HAL_I2C_Mem_Read+0x458>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d007      	beq.n	8006b8c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f042 0201 	orr.w	r2, r2, #1
 8006b8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2222      	movs	r2, #34	@ 0x22
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2240      	movs	r2, #64	@ 0x40
 8006ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4a5b      	ldr	r2, [pc, #364]	@ (8006d38 <HAL_I2C_Mem_Read+0x228>)
 8006bcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bce:	88f8      	ldrh	r0, [r7, #6]
 8006bd0:	893a      	ldrh	r2, [r7, #8]
 8006bd2:	8979      	ldrh	r1, [r7, #10]
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd6:	9301      	str	r3, [sp, #4]
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	4603      	mov	r3, r0
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 fa5e 	bl	80070a0 <I2C_RequestMemoryRead>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e1bc      	b.n	8006f68 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d113      	bne.n	8006c1e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	623b      	str	r3, [r7, #32]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	623b      	str	r3, [r7, #32]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	623b      	str	r3, [r7, #32]
 8006c0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	e190      	b.n	8006f40 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d11b      	bne.n	8006c5e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c36:	2300      	movs	r3, #0
 8006c38:	61fb      	str	r3, [r7, #28]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	61fb      	str	r3, [r7, #28]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	61fb      	str	r3, [r7, #28]
 8006c4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	e170      	b.n	8006f40 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d11b      	bne.n	8006c9e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c86:	2300      	movs	r3, #0
 8006c88:	61bb      	str	r3, [r7, #24]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	61bb      	str	r3, [r7, #24]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	e150      	b.n	8006f40 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	617b      	str	r3, [r7, #20]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	617b      	str	r3, [r7, #20]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006cb4:	e144      	b.n	8006f40 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	f200 80f1 	bhi.w	8006ea2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d123      	bne.n	8006d10 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 fc79 	bl	80075c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e145      	b.n	8006f68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	691a      	ldr	r2, [r3, #16]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	3b01      	subs	r3, #1
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d0e:	e117      	b.n	8006f40 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d14e      	bne.n	8006db6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1e:	2200      	movs	r2, #0
 8006d20:	4906      	ldr	r1, [pc, #24]	@ (8006d3c <HAL_I2C_Mem_Read+0x22c>)
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 faa4 	bl	8007270 <I2C_WaitOnFlagUntilTimeout>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d008      	beq.n	8006d40 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e11a      	b.n	8006f68 <HAL_I2C_Mem_Read+0x458>
 8006d32:	bf00      	nop
 8006d34:	00100002 	.word	0x00100002
 8006d38:	ffff0000 	.word	0xffff0000
 8006d3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691a      	ldr	r2, [r3, #16]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8c:	b2d2      	uxtb	r2, r2
 8006d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	3b01      	subs	r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006db4:	e0c4      	b.n	8006f40 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	496c      	ldr	r1, [pc, #432]	@ (8006f70 <HAL_I2C_Mem_Read+0x460>)
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 fa55 	bl	8007270 <I2C_WaitOnFlagUntilTimeout>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e0cb      	b.n	8006f68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	691a      	ldr	r2, [r3, #16]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e18:	2200      	movs	r2, #0
 8006e1a:	4955      	ldr	r1, [pc, #340]	@ (8006f70 <HAL_I2C_Mem_Read+0x460>)
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 fa27 	bl	8007270 <I2C_WaitOnFlagUntilTimeout>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e09d      	b.n	8006f68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691a      	ldr	r2, [r3, #16]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e46:	b2d2      	uxtb	r2, r2
 8006e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	3b01      	subs	r3, #1
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	691a      	ldr	r2, [r3, #16]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e78:	b2d2      	uxtb	r2, r2
 8006e7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006ea0:	e04e      	b.n	8006f40 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ea4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 fb8c 	bl	80075c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e058      	b.n	8006f68 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	691a      	ldr	r2, [r3, #16]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	f003 0304 	and.w	r3, r3, #4
 8006ef2:	2b04      	cmp	r3, #4
 8006ef4:	d124      	bne.n	8006f40 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d107      	bne.n	8006f0e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f0c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	691a      	ldr	r2, [r3, #16]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f18:	b2d2      	uxtb	r2, r2
 8006f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f47f aeb6 	bne.w	8006cb6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	e000      	b.n	8006f68 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006f66:	2302      	movs	r3, #2
  }
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3728      	adds	r7, #40	@ 0x28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	00010004 	.word	0x00010004

08006f74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af02      	add	r7, sp, #8
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	4608      	mov	r0, r1
 8006f7e:	4611      	mov	r1, r2
 8006f80:	461a      	mov	r2, r3
 8006f82:	4603      	mov	r3, r0
 8006f84:	817b      	strh	r3, [r7, #10]
 8006f86:	460b      	mov	r3, r1
 8006f88:	813b      	strh	r3, [r7, #8]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 f960 	bl	8007270 <I2C_WaitOnFlagUntilTimeout>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00d      	beq.n	8006fd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fc4:	d103      	bne.n	8006fce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e05f      	b.n	8007092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fd2:	897b      	ldrh	r3, [r7, #10]
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006fe0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe4:	6a3a      	ldr	r2, [r7, #32]
 8006fe6:	492d      	ldr	r1, [pc, #180]	@ (800709c <I2C_RequestMemoryWrite+0x128>)
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 f9bb 	bl	8007364 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e04c      	b.n	8007092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800700e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007010:	6a39      	ldr	r1, [r7, #32]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 fa46 	bl	80074a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00d      	beq.n	800703a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007022:	2b04      	cmp	r3, #4
 8007024:	d107      	bne.n	8007036 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007034:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e02b      	b.n	8007092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d105      	bne.n	800704c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007040:	893b      	ldrh	r3, [r7, #8]
 8007042:	b2da      	uxtb	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	611a      	str	r2, [r3, #16]
 800704a:	e021      	b.n	8007090 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800704c:	893b      	ldrh	r3, [r7, #8]
 800704e:	0a1b      	lsrs	r3, r3, #8
 8007050:	b29b      	uxth	r3, r3
 8007052:	b2da      	uxtb	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800705a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800705c:	6a39      	ldr	r1, [r7, #32]
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 fa20 	bl	80074a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00d      	beq.n	8007086 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706e:	2b04      	cmp	r3, #4
 8007070:	d107      	bne.n	8007082 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007080:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e005      	b.n	8007092 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007086:	893b      	ldrh	r3, [r7, #8]
 8007088:	b2da      	uxtb	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	00010002 	.word	0x00010002

080070a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b088      	sub	sp, #32
 80070a4:	af02      	add	r7, sp, #8
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	4608      	mov	r0, r1
 80070aa:	4611      	mov	r1, r2
 80070ac:	461a      	mov	r2, r3
 80070ae:	4603      	mov	r3, r0
 80070b0:	817b      	strh	r3, [r7, #10]
 80070b2:	460b      	mov	r3, r1
 80070b4:	813b      	strh	r3, [r7, #8]
 80070b6:	4613      	mov	r3, r2
 80070b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80070c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f000 f8c2 	bl	8007270 <I2C_WaitOnFlagUntilTimeout>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00d      	beq.n	800710e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007100:	d103      	bne.n	800710a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007108:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e0aa      	b.n	8007264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800710e:	897b      	ldrh	r3, [r7, #10]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	461a      	mov	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800711c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800711e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007120:	6a3a      	ldr	r2, [r7, #32]
 8007122:	4952      	ldr	r1, [pc, #328]	@ (800726c <I2C_RequestMemoryRead+0x1cc>)
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f91d 	bl	8007364 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e097      	b.n	8007264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007134:	2300      	movs	r3, #0
 8007136:	617b      	str	r3, [r7, #20]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	617b      	str	r3, [r7, #20]
 8007148:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800714a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800714c:	6a39      	ldr	r1, [r7, #32]
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f9a8 	bl	80074a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00d      	beq.n	8007176 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715e:	2b04      	cmp	r3, #4
 8007160:	d107      	bne.n	8007172 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007170:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e076      	b.n	8007264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007176:	88fb      	ldrh	r3, [r7, #6]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d105      	bne.n	8007188 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800717c:	893b      	ldrh	r3, [r7, #8]
 800717e:	b2da      	uxtb	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	611a      	str	r2, [r3, #16]
 8007186:	e021      	b.n	80071cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007188:	893b      	ldrh	r3, [r7, #8]
 800718a:	0a1b      	lsrs	r3, r3, #8
 800718c:	b29b      	uxth	r3, r3
 800718e:	b2da      	uxtb	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007198:	6a39      	ldr	r1, [r7, #32]
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 f982 	bl	80074a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00d      	beq.n	80071c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d107      	bne.n	80071be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e050      	b.n	8007264 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071c2:	893b      	ldrh	r3, [r7, #8]
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ce:	6a39      	ldr	r1, [r7, #32]
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f967 	bl	80074a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00d      	beq.n	80071f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	d107      	bne.n	80071f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e035      	b.n	8007264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007206:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	2200      	movs	r2, #0
 8007210:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 f82b 	bl	8007270 <I2C_WaitOnFlagUntilTimeout>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00d      	beq.n	800723c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800722a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800722e:	d103      	bne.n	8007238 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007236:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e013      	b.n	8007264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800723c:	897b      	ldrh	r3, [r7, #10]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	b2da      	uxtb	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800724c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724e:	6a3a      	ldr	r2, [r7, #32]
 8007250:	4906      	ldr	r1, [pc, #24]	@ (800726c <I2C_RequestMemoryRead+0x1cc>)
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f886 	bl	8007364 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e000      	b.n	8007264 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	00010002 	.word	0x00010002

08007270 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	4613      	mov	r3, r2
 800727e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007280:	e048      	b.n	8007314 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007288:	d044      	beq.n	8007314 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800728a:	f7fe fb11 	bl	80058b0 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d302      	bcc.n	80072a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d139      	bne.n	8007314 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	0c1b      	lsrs	r3, r3, #16
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d10d      	bne.n	80072c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	43da      	mvns	r2, r3
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	4013      	ands	r3, r2
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	bf0c      	ite	eq
 80072bc:	2301      	moveq	r3, #1
 80072be:	2300      	movne	r3, #0
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	461a      	mov	r2, r3
 80072c4:	e00c      	b.n	80072e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	43da      	mvns	r2, r3
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	4013      	ands	r3, r2
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	bf0c      	ite	eq
 80072d8:	2301      	moveq	r3, #1
 80072da:	2300      	movne	r3, #0
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	461a      	mov	r2, r3
 80072e0:	79fb      	ldrb	r3, [r7, #7]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d116      	bne.n	8007314 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2220      	movs	r2, #32
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007300:	f043 0220 	orr.w	r2, r3, #32
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e023      	b.n	800735c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	0c1b      	lsrs	r3, r3, #16
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b01      	cmp	r3, #1
 800731c:	d10d      	bne.n	800733a <I2C_WaitOnFlagUntilTimeout+0xca>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	43da      	mvns	r2, r3
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	4013      	ands	r3, r2
 800732a:	b29b      	uxth	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	bf0c      	ite	eq
 8007330:	2301      	moveq	r3, #1
 8007332:	2300      	movne	r3, #0
 8007334:	b2db      	uxtb	r3, r3
 8007336:	461a      	mov	r2, r3
 8007338:	e00c      	b.n	8007354 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	43da      	mvns	r2, r3
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	4013      	ands	r3, r2
 8007346:	b29b      	uxth	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	bf0c      	ite	eq
 800734c:	2301      	moveq	r3, #1
 800734e:	2300      	movne	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	461a      	mov	r2, r3
 8007354:	79fb      	ldrb	r3, [r7, #7]
 8007356:	429a      	cmp	r2, r3
 8007358:	d093      	beq.n	8007282 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007372:	e071      	b.n	8007458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800737e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007382:	d123      	bne.n	80073cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007392:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800739c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2220      	movs	r2, #32
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b8:	f043 0204 	orr.w	r2, r3, #4
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e067      	b.n	800749c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073d2:	d041      	beq.n	8007458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073d4:	f7fe fa6c 	bl	80058b0 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d302      	bcc.n	80073ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d136      	bne.n	8007458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	0c1b      	lsrs	r3, r3, #16
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d10c      	bne.n	800740e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	43da      	mvns	r2, r3
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	4013      	ands	r3, r2
 8007400:	b29b      	uxth	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	bf14      	ite	ne
 8007406:	2301      	movne	r3, #1
 8007408:	2300      	moveq	r3, #0
 800740a:	b2db      	uxtb	r3, r3
 800740c:	e00b      	b.n	8007426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	43da      	mvns	r2, r3
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	4013      	ands	r3, r2
 800741a:	b29b      	uxth	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	bf14      	ite	ne
 8007420:	2301      	movne	r3, #1
 8007422:	2300      	moveq	r3, #0
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d016      	beq.n	8007458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2220      	movs	r2, #32
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007444:	f043 0220 	orr.w	r2, r3, #32
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e021      	b.n	800749c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	0c1b      	lsrs	r3, r3, #16
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b01      	cmp	r3, #1
 8007460:	d10c      	bne.n	800747c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	43da      	mvns	r2, r3
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	4013      	ands	r3, r2
 800746e:	b29b      	uxth	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	bf14      	ite	ne
 8007474:	2301      	movne	r3, #1
 8007476:	2300      	moveq	r3, #0
 8007478:	b2db      	uxtb	r3, r3
 800747a:	e00b      	b.n	8007494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	43da      	mvns	r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	4013      	ands	r3, r2
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	bf14      	ite	ne
 800748e:	2301      	movne	r3, #1
 8007490:	2300      	moveq	r3, #0
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b00      	cmp	r3, #0
 8007496:	f47f af6d 	bne.w	8007374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074b0:	e034      	b.n	800751c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 f8e3 	bl	800767e <I2C_IsAcknowledgeFailed>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e034      	b.n	800752c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074c8:	d028      	beq.n	800751c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ca:	f7fe f9f1 	bl	80058b0 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d302      	bcc.n	80074e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d11d      	bne.n	800751c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ea:	2b80      	cmp	r3, #128	@ 0x80
 80074ec:	d016      	beq.n	800751c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007508:	f043 0220 	orr.w	r2, r3, #32
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e007      	b.n	800752c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007526:	2b80      	cmp	r3, #128	@ 0x80
 8007528:	d1c3      	bne.n	80074b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007540:	e034      	b.n	80075ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 f89b 	bl	800767e <I2C_IsAcknowledgeFailed>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d001      	beq.n	8007552 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e034      	b.n	80075bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007558:	d028      	beq.n	80075ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800755a:	f7fe f9a9 	bl	80058b0 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	429a      	cmp	r2, r3
 8007568:	d302      	bcc.n	8007570 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d11d      	bne.n	80075ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	f003 0304 	and.w	r3, r3, #4
 800757a:	2b04      	cmp	r3, #4
 800757c:	d016      	beq.n	80075ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2220      	movs	r2, #32
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007598:	f043 0220 	orr.w	r2, r3, #32
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e007      	b.n	80075bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	f003 0304 	and.w	r3, r3, #4
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	d1c3      	bne.n	8007542 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075d0:	e049      	b.n	8007666 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b10      	cmp	r3, #16
 80075de:	d119      	bne.n	8007614 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f06f 0210 	mvn.w	r2, #16
 80075e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2220      	movs	r2, #32
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e030      	b.n	8007676 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007614:	f7fe f94c 	bl	80058b0 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	429a      	cmp	r2, r3
 8007622:	d302      	bcc.n	800762a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d11d      	bne.n	8007666 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007634:	2b40      	cmp	r3, #64	@ 0x40
 8007636:	d016      	beq.n	8007666 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2220      	movs	r2, #32
 8007642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007652:	f043 0220 	orr.w	r2, r3, #32
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e007      	b.n	8007676 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007670:	2b40      	cmp	r3, #64	@ 0x40
 8007672:	d1ae      	bne.n	80075d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007690:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007694:	d11b      	bne.n	80076ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800769e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2220      	movs	r2, #32
 80076aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ba:	f043 0204 	orr.w	r2, r3, #4
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e000      	b.n	80076d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80076e6:	2300      	movs	r3, #0
 80076e8:	603b      	str	r3, [r7, #0]
 80076ea:	4b20      	ldr	r3, [pc, #128]	@ (800776c <HAL_PWREx_EnableOverDrive+0x90>)
 80076ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ee:	4a1f      	ldr	r2, [pc, #124]	@ (800776c <HAL_PWREx_EnableOverDrive+0x90>)
 80076f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80076f6:	4b1d      	ldr	r3, [pc, #116]	@ (800776c <HAL_PWREx_EnableOverDrive+0x90>)
 80076f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076fe:	603b      	str	r3, [r7, #0]
 8007700:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007702:	4b1b      	ldr	r3, [pc, #108]	@ (8007770 <HAL_PWREx_EnableOverDrive+0x94>)
 8007704:	2201      	movs	r2, #1
 8007706:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007708:	f7fe f8d2 	bl	80058b0 <HAL_GetTick>
 800770c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800770e:	e009      	b.n	8007724 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007710:	f7fe f8ce 	bl	80058b0 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800771e:	d901      	bls.n	8007724 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e01f      	b.n	8007764 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007724:	4b13      	ldr	r3, [pc, #76]	@ (8007774 <HAL_PWREx_EnableOverDrive+0x98>)
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800772c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007730:	d1ee      	bne.n	8007710 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007732:	4b11      	ldr	r3, [pc, #68]	@ (8007778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007734:	2201      	movs	r2, #1
 8007736:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007738:	f7fe f8ba 	bl	80058b0 <HAL_GetTick>
 800773c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800773e:	e009      	b.n	8007754 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007740:	f7fe f8b6 	bl	80058b0 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800774e:	d901      	bls.n	8007754 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e007      	b.n	8007764 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007754:	4b07      	ldr	r3, [pc, #28]	@ (8007774 <HAL_PWREx_EnableOverDrive+0x98>)
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800775c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007760:	d1ee      	bne.n	8007740 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	40023800 	.word	0x40023800
 8007770:	420e0040 	.word	0x420e0040
 8007774:	40007000 	.word	0x40007000
 8007778:	420e0044 	.word	0x420e0044

0800777c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e0cc      	b.n	800792a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007790:	4b68      	ldr	r3, [pc, #416]	@ (8007934 <HAL_RCC_ClockConfig+0x1b8>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 030f 	and.w	r3, r3, #15
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	429a      	cmp	r2, r3
 800779c:	d90c      	bls.n	80077b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800779e:	4b65      	ldr	r3, [pc, #404]	@ (8007934 <HAL_RCC_ClockConfig+0x1b8>)
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	b2d2      	uxtb	r2, r2
 80077a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077a6:	4b63      	ldr	r3, [pc, #396]	@ (8007934 <HAL_RCC_ClockConfig+0x1b8>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 030f 	and.w	r3, r3, #15
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d001      	beq.n	80077b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e0b8      	b.n	800792a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d020      	beq.n	8007806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d005      	beq.n	80077dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077d0:	4b59      	ldr	r3, [pc, #356]	@ (8007938 <HAL_RCC_ClockConfig+0x1bc>)
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	4a58      	ldr	r2, [pc, #352]	@ (8007938 <HAL_RCC_ClockConfig+0x1bc>)
 80077d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80077da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0308 	and.w	r3, r3, #8
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d005      	beq.n	80077f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077e8:	4b53      	ldr	r3, [pc, #332]	@ (8007938 <HAL_RCC_ClockConfig+0x1bc>)
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	4a52      	ldr	r2, [pc, #328]	@ (8007938 <HAL_RCC_ClockConfig+0x1bc>)
 80077ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80077f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077f4:	4b50      	ldr	r3, [pc, #320]	@ (8007938 <HAL_RCC_ClockConfig+0x1bc>)
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	494d      	ldr	r1, [pc, #308]	@ (8007938 <HAL_RCC_ClockConfig+0x1bc>)
 8007802:	4313      	orrs	r3, r2
 8007804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b00      	cmp	r3, #0
 8007810:	d044      	beq.n	800789c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d107      	bne.n	800782a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800781a:	4b47      	ldr	r3, [pc, #284]	@ (8007938 <HAL_RCC_ClockConfig+0x1bc>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d119      	bne.n	800785a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e07f      	b.n	800792a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	2b02      	cmp	r3, #2
 8007830:	d003      	beq.n	800783a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007836:	2b03      	cmp	r3, #3
 8007838:	d107      	bne.n	800784a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800783a:	4b3f      	ldr	r3, [pc, #252]	@ (8007938 <HAL_RCC_ClockConfig+0x1bc>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d109      	bne.n	800785a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e06f      	b.n	800792a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800784a:	4b3b      	ldr	r3, [pc, #236]	@ (8007938 <HAL_RCC_ClockConfig+0x1bc>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0302 	and.w	r3, r3, #2
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e067      	b.n	800792a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800785a:	4b37      	ldr	r3, [pc, #220]	@ (8007938 <HAL_RCC_ClockConfig+0x1bc>)
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f023 0203 	bic.w	r2, r3, #3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	4934      	ldr	r1, [pc, #208]	@ (8007938 <HAL_RCC_ClockConfig+0x1bc>)
 8007868:	4313      	orrs	r3, r2
 800786a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800786c:	f7fe f820 	bl	80058b0 <HAL_GetTick>
 8007870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007872:	e00a      	b.n	800788a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007874:	f7fe f81c 	bl	80058b0 <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007882:	4293      	cmp	r3, r2
 8007884:	d901      	bls.n	800788a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e04f      	b.n	800792a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800788a:	4b2b      	ldr	r3, [pc, #172]	@ (8007938 <HAL_RCC_ClockConfig+0x1bc>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f003 020c 	and.w	r2, r3, #12
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	429a      	cmp	r2, r3
 800789a:	d1eb      	bne.n	8007874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800789c:	4b25      	ldr	r3, [pc, #148]	@ (8007934 <HAL_RCC_ClockConfig+0x1b8>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 030f 	and.w	r3, r3, #15
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d20c      	bcs.n	80078c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078aa:	4b22      	ldr	r3, [pc, #136]	@ (8007934 <HAL_RCC_ClockConfig+0x1b8>)
 80078ac:	683a      	ldr	r2, [r7, #0]
 80078ae:	b2d2      	uxtb	r2, r2
 80078b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078b2:	4b20      	ldr	r3, [pc, #128]	@ (8007934 <HAL_RCC_ClockConfig+0x1b8>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d001      	beq.n	80078c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e032      	b.n	800792a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0304 	and.w	r3, r3, #4
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d008      	beq.n	80078e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078d0:	4b19      	ldr	r3, [pc, #100]	@ (8007938 <HAL_RCC_ClockConfig+0x1bc>)
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	4916      	ldr	r1, [pc, #88]	@ (8007938 <HAL_RCC_ClockConfig+0x1bc>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0308 	and.w	r3, r3, #8
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d009      	beq.n	8007902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078ee:	4b12      	ldr	r3, [pc, #72]	@ (8007938 <HAL_RCC_ClockConfig+0x1bc>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	490e      	ldr	r1, [pc, #56]	@ (8007938 <HAL_RCC_ClockConfig+0x1bc>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007902:	f000 f855 	bl	80079b0 <HAL_RCC_GetSysClockFreq>
 8007906:	4602      	mov	r2, r0
 8007908:	4b0b      	ldr	r3, [pc, #44]	@ (8007938 <HAL_RCC_ClockConfig+0x1bc>)
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	091b      	lsrs	r3, r3, #4
 800790e:	f003 030f 	and.w	r3, r3, #15
 8007912:	490a      	ldr	r1, [pc, #40]	@ (800793c <HAL_RCC_ClockConfig+0x1c0>)
 8007914:	5ccb      	ldrb	r3, [r1, r3]
 8007916:	fa22 f303 	lsr.w	r3, r2, r3
 800791a:	4a09      	ldr	r2, [pc, #36]	@ (8007940 <HAL_RCC_ClockConfig+0x1c4>)
 800791c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800791e:	4b09      	ldr	r3, [pc, #36]	@ (8007944 <HAL_RCC_ClockConfig+0x1c8>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4618      	mov	r0, r3
 8007924:	f7fd ff80 	bl	8005828 <HAL_InitTick>

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	40023c00 	.word	0x40023c00
 8007938:	40023800 	.word	0x40023800
 800793c:	0800c448 	.word	0x0800c448
 8007940:	20000004 	.word	0x20000004
 8007944:	20000008 	.word	0x20000008

08007948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007948:	b480      	push	{r7}
 800794a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800794c:	4b03      	ldr	r3, [pc, #12]	@ (800795c <HAL_RCC_GetHCLKFreq+0x14>)
 800794e:	681b      	ldr	r3, [r3, #0]
}
 8007950:	4618      	mov	r0, r3
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	20000004 	.word	0x20000004

08007960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007964:	f7ff fff0 	bl	8007948 <HAL_RCC_GetHCLKFreq>
 8007968:	4602      	mov	r2, r0
 800796a:	4b05      	ldr	r3, [pc, #20]	@ (8007980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	0a9b      	lsrs	r3, r3, #10
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	4903      	ldr	r1, [pc, #12]	@ (8007984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007976:	5ccb      	ldrb	r3, [r1, r3]
 8007978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800797c:	4618      	mov	r0, r3
 800797e:	bd80      	pop	{r7, pc}
 8007980:	40023800 	.word	0x40023800
 8007984:	0800c458 	.word	0x0800c458

08007988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800798c:	f7ff ffdc 	bl	8007948 <HAL_RCC_GetHCLKFreq>
 8007990:	4602      	mov	r2, r0
 8007992:	4b05      	ldr	r3, [pc, #20]	@ (80079a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	0b5b      	lsrs	r3, r3, #13
 8007998:	f003 0307 	and.w	r3, r3, #7
 800799c:	4903      	ldr	r1, [pc, #12]	@ (80079ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800799e:	5ccb      	ldrb	r3, [r1, r3]
 80079a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	40023800 	.word	0x40023800
 80079ac:	0800c458 	.word	0x0800c458

080079b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079b4:	b0ae      	sub	sp, #184	@ 0xb8
 80079b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80079d0:	2300      	movs	r3, #0
 80079d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079d6:	4bcb      	ldr	r3, [pc, #812]	@ (8007d04 <HAL_RCC_GetSysClockFreq+0x354>)
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f003 030c 	and.w	r3, r3, #12
 80079de:	2b0c      	cmp	r3, #12
 80079e0:	f200 8206 	bhi.w	8007df0 <HAL_RCC_GetSysClockFreq+0x440>
 80079e4:	a201      	add	r2, pc, #4	@ (adr r2, 80079ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80079e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ea:	bf00      	nop
 80079ec:	08007a21 	.word	0x08007a21
 80079f0:	08007df1 	.word	0x08007df1
 80079f4:	08007df1 	.word	0x08007df1
 80079f8:	08007df1 	.word	0x08007df1
 80079fc:	08007a29 	.word	0x08007a29
 8007a00:	08007df1 	.word	0x08007df1
 8007a04:	08007df1 	.word	0x08007df1
 8007a08:	08007df1 	.word	0x08007df1
 8007a0c:	08007a31 	.word	0x08007a31
 8007a10:	08007df1 	.word	0x08007df1
 8007a14:	08007df1 	.word	0x08007df1
 8007a18:	08007df1 	.word	0x08007df1
 8007a1c:	08007c21 	.word	0x08007c21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a20:	4bb9      	ldr	r3, [pc, #740]	@ (8007d08 <HAL_RCC_GetSysClockFreq+0x358>)
 8007a22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8007a26:	e1e7      	b.n	8007df8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a28:	4bb8      	ldr	r3, [pc, #736]	@ (8007d0c <HAL_RCC_GetSysClockFreq+0x35c>)
 8007a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007a2e:	e1e3      	b.n	8007df8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a30:	4bb4      	ldr	r3, [pc, #720]	@ (8007d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a3c:	4bb1      	ldr	r3, [pc, #708]	@ (8007d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d071      	beq.n	8007b2c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a48:	4bae      	ldr	r3, [pc, #696]	@ (8007d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	099b      	lsrs	r3, r3, #6
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a54:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a64:	2300      	movs	r3, #0
 8007a66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a6e:	4622      	mov	r2, r4
 8007a70:	462b      	mov	r3, r5
 8007a72:	f04f 0000 	mov.w	r0, #0
 8007a76:	f04f 0100 	mov.w	r1, #0
 8007a7a:	0159      	lsls	r1, r3, #5
 8007a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a80:	0150      	lsls	r0, r2, #5
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4621      	mov	r1, r4
 8007a88:	1a51      	subs	r1, r2, r1
 8007a8a:	6439      	str	r1, [r7, #64]	@ 0x40
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8007a92:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	f04f 0300 	mov.w	r3, #0
 8007a9c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007aa0:	4649      	mov	r1, r9
 8007aa2:	018b      	lsls	r3, r1, #6
 8007aa4:	4641      	mov	r1, r8
 8007aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007aaa:	4641      	mov	r1, r8
 8007aac:	018a      	lsls	r2, r1, #6
 8007aae:	4641      	mov	r1, r8
 8007ab0:	1a51      	subs	r1, r2, r1
 8007ab2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8007aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007abc:	f04f 0200 	mov.w	r2, #0
 8007ac0:	f04f 0300 	mov.w	r3, #0
 8007ac4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8007ac8:	4649      	mov	r1, r9
 8007aca:	00cb      	lsls	r3, r1, #3
 8007acc:	4641      	mov	r1, r8
 8007ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ad2:	4641      	mov	r1, r8
 8007ad4:	00ca      	lsls	r2, r1, #3
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4603      	mov	r3, r0
 8007adc:	4622      	mov	r2, r4
 8007ade:	189b      	adds	r3, r3, r2
 8007ae0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ae2:	462b      	mov	r3, r5
 8007ae4:	460a      	mov	r2, r1
 8007ae6:	eb42 0303 	adc.w	r3, r2, r3
 8007aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	f04f 0300 	mov.w	r3, #0
 8007af4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007af8:	4629      	mov	r1, r5
 8007afa:	024b      	lsls	r3, r1, #9
 8007afc:	4621      	mov	r1, r4
 8007afe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007b02:	4621      	mov	r1, r4
 8007b04:	024a      	lsls	r2, r1, #9
 8007b06:	4610      	mov	r0, r2
 8007b08:	4619      	mov	r1, r3
 8007b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007b18:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007b1c:	f7f9 f84a 	bl	8000bb4 <__aeabi_uldivmod>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	4613      	mov	r3, r2
 8007b26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b2a:	e067      	b.n	8007bfc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b2c:	4b75      	ldr	r3, [pc, #468]	@ (8007d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	099b      	lsrs	r3, r3, #6
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b38:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007b3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b46:	2300      	movs	r3, #0
 8007b48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b4a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8007b4e:	4622      	mov	r2, r4
 8007b50:	462b      	mov	r3, r5
 8007b52:	f04f 0000 	mov.w	r0, #0
 8007b56:	f04f 0100 	mov.w	r1, #0
 8007b5a:	0159      	lsls	r1, r3, #5
 8007b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b60:	0150      	lsls	r0, r2, #5
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4621      	mov	r1, r4
 8007b68:	1a51      	subs	r1, r2, r1
 8007b6a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8007b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b74:	f04f 0200 	mov.w	r2, #0
 8007b78:	f04f 0300 	mov.w	r3, #0
 8007b7c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007b80:	4649      	mov	r1, r9
 8007b82:	018b      	lsls	r3, r1, #6
 8007b84:	4641      	mov	r1, r8
 8007b86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b8a:	4641      	mov	r1, r8
 8007b8c:	018a      	lsls	r2, r1, #6
 8007b8e:	4641      	mov	r1, r8
 8007b90:	ebb2 0a01 	subs.w	sl, r2, r1
 8007b94:	4649      	mov	r1, r9
 8007b96:	eb63 0b01 	sbc.w	fp, r3, r1
 8007b9a:	f04f 0200 	mov.w	r2, #0
 8007b9e:	f04f 0300 	mov.w	r3, #0
 8007ba2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ba6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007baa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bae:	4692      	mov	sl, r2
 8007bb0:	469b      	mov	fp, r3
 8007bb2:	4623      	mov	r3, r4
 8007bb4:	eb1a 0303 	adds.w	r3, sl, r3
 8007bb8:	623b      	str	r3, [r7, #32]
 8007bba:	462b      	mov	r3, r5
 8007bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8007bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bc2:	f04f 0200 	mov.w	r2, #0
 8007bc6:	f04f 0300 	mov.w	r3, #0
 8007bca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007bce:	4629      	mov	r1, r5
 8007bd0:	028b      	lsls	r3, r1, #10
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007bd8:	4621      	mov	r1, r4
 8007bda:	028a      	lsls	r2, r1, #10
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4619      	mov	r1, r3
 8007be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007be4:	2200      	movs	r2, #0
 8007be6:	673b      	str	r3, [r7, #112]	@ 0x70
 8007be8:	677a      	str	r2, [r7, #116]	@ 0x74
 8007bea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007bee:	f7f8 ffe1 	bl	8000bb4 <__aeabi_uldivmod>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007bfc:	4b41      	ldr	r3, [pc, #260]	@ (8007d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	0c1b      	lsrs	r3, r3, #16
 8007c02:	f003 0303 	and.w	r3, r3, #3
 8007c06:	3301      	adds	r3, #1
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8007c0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007c1e:	e0eb      	b.n	8007df8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c20:	4b38      	ldr	r3, [pc, #224]	@ (8007d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c2c:	4b35      	ldr	r3, [pc, #212]	@ (8007d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d06b      	beq.n	8007d10 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c38:	4b32      	ldr	r3, [pc, #200]	@ (8007d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	099b      	lsrs	r3, r3, #6
 8007c3e:	2200      	movs	r2, #0
 8007c40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007c54:	4622      	mov	r2, r4
 8007c56:	462b      	mov	r3, r5
 8007c58:	f04f 0000 	mov.w	r0, #0
 8007c5c:	f04f 0100 	mov.w	r1, #0
 8007c60:	0159      	lsls	r1, r3, #5
 8007c62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c66:	0150      	lsls	r0, r2, #5
 8007c68:	4602      	mov	r2, r0
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	1a51      	subs	r1, r2, r1
 8007c70:	61b9      	str	r1, [r7, #24]
 8007c72:	4629      	mov	r1, r5
 8007c74:	eb63 0301 	sbc.w	r3, r3, r1
 8007c78:	61fb      	str	r3, [r7, #28]
 8007c7a:	f04f 0200 	mov.w	r2, #0
 8007c7e:	f04f 0300 	mov.w	r3, #0
 8007c82:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007c86:	4659      	mov	r1, fp
 8007c88:	018b      	lsls	r3, r1, #6
 8007c8a:	4651      	mov	r1, sl
 8007c8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c90:	4651      	mov	r1, sl
 8007c92:	018a      	lsls	r2, r1, #6
 8007c94:	4651      	mov	r1, sl
 8007c96:	ebb2 0801 	subs.w	r8, r2, r1
 8007c9a:	4659      	mov	r1, fp
 8007c9c:	eb63 0901 	sbc.w	r9, r3, r1
 8007ca0:	f04f 0200 	mov.w	r2, #0
 8007ca4:	f04f 0300 	mov.w	r3, #0
 8007ca8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007cac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007cb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007cb4:	4690      	mov	r8, r2
 8007cb6:	4699      	mov	r9, r3
 8007cb8:	4623      	mov	r3, r4
 8007cba:	eb18 0303 	adds.w	r3, r8, r3
 8007cbe:	613b      	str	r3, [r7, #16]
 8007cc0:	462b      	mov	r3, r5
 8007cc2:	eb49 0303 	adc.w	r3, r9, r3
 8007cc6:	617b      	str	r3, [r7, #20]
 8007cc8:	f04f 0200 	mov.w	r2, #0
 8007ccc:	f04f 0300 	mov.w	r3, #0
 8007cd0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	024b      	lsls	r3, r1, #9
 8007cd8:	4621      	mov	r1, r4
 8007cda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007cde:	4621      	mov	r1, r4
 8007ce0:	024a      	lsls	r2, r1, #9
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cea:	2200      	movs	r2, #0
 8007cec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007cf0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007cf4:	f7f8 ff5e 	bl	8000bb4 <__aeabi_uldivmod>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d02:	e065      	b.n	8007dd0 <HAL_RCC_GetSysClockFreq+0x420>
 8007d04:	40023800 	.word	0x40023800
 8007d08:	00f42400 	.word	0x00f42400
 8007d0c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d10:	4b3d      	ldr	r3, [pc, #244]	@ (8007e08 <HAL_RCC_GetSysClockFreq+0x458>)
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	099b      	lsrs	r3, r3, #6
 8007d16:	2200      	movs	r2, #0
 8007d18:	4618      	mov	r0, r3
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007d20:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d22:	2300      	movs	r3, #0
 8007d24:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d26:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8007d2a:	4642      	mov	r2, r8
 8007d2c:	464b      	mov	r3, r9
 8007d2e:	f04f 0000 	mov.w	r0, #0
 8007d32:	f04f 0100 	mov.w	r1, #0
 8007d36:	0159      	lsls	r1, r3, #5
 8007d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d3c:	0150      	lsls	r0, r2, #5
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4641      	mov	r1, r8
 8007d44:	1a51      	subs	r1, r2, r1
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	4649      	mov	r1, r9
 8007d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	f04f 0200 	mov.w	r2, #0
 8007d54:	f04f 0300 	mov.w	r3, #0
 8007d58:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007d5c:	4659      	mov	r1, fp
 8007d5e:	018b      	lsls	r3, r1, #6
 8007d60:	4651      	mov	r1, sl
 8007d62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d66:	4651      	mov	r1, sl
 8007d68:	018a      	lsls	r2, r1, #6
 8007d6a:	4651      	mov	r1, sl
 8007d6c:	1a54      	subs	r4, r2, r1
 8007d6e:	4659      	mov	r1, fp
 8007d70:	eb63 0501 	sbc.w	r5, r3, r1
 8007d74:	f04f 0200 	mov.w	r2, #0
 8007d78:	f04f 0300 	mov.w	r3, #0
 8007d7c:	00eb      	lsls	r3, r5, #3
 8007d7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d82:	00e2      	lsls	r2, r4, #3
 8007d84:	4614      	mov	r4, r2
 8007d86:	461d      	mov	r5, r3
 8007d88:	4643      	mov	r3, r8
 8007d8a:	18e3      	adds	r3, r4, r3
 8007d8c:	603b      	str	r3, [r7, #0]
 8007d8e:	464b      	mov	r3, r9
 8007d90:	eb45 0303 	adc.w	r3, r5, r3
 8007d94:	607b      	str	r3, [r7, #4]
 8007d96:	f04f 0200 	mov.w	r2, #0
 8007d9a:	f04f 0300 	mov.w	r3, #0
 8007d9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007da2:	4629      	mov	r1, r5
 8007da4:	028b      	lsls	r3, r1, #10
 8007da6:	4621      	mov	r1, r4
 8007da8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007dac:	4621      	mov	r1, r4
 8007dae:	028a      	lsls	r2, r1, #10
 8007db0:	4610      	mov	r0, r2
 8007db2:	4619      	mov	r1, r3
 8007db4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007db8:	2200      	movs	r2, #0
 8007dba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dbc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007dbe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007dc2:	f7f8 fef7 	bl	8000bb4 <__aeabi_uldivmod>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	4613      	mov	r3, r2
 8007dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8007e08 <HAL_RCC_GetSysClockFreq+0x458>)
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	0f1b      	lsrs	r3, r3, #28
 8007dd6:	f003 0307 	and.w	r3, r3, #7
 8007dda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8007dde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007de2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007dee:	e003      	b.n	8007df8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007df0:	4b06      	ldr	r3, [pc, #24]	@ (8007e0c <HAL_RCC_GetSysClockFreq+0x45c>)
 8007df2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007df6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007df8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	37b8      	adds	r7, #184	@ 0xb8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e06:	bf00      	nop
 8007e08:	40023800 	.word	0x40023800
 8007e0c:	00f42400 	.word	0x00f42400

08007e10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e28d      	b.n	800833e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 8083 	beq.w	8007f36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007e30:	4b94      	ldr	r3, [pc, #592]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f003 030c 	and.w	r3, r3, #12
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	d019      	beq.n	8007e70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007e3c:	4b91      	ldr	r3, [pc, #580]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d106      	bne.n	8007e56 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007e48:	4b8e      	ldr	r3, [pc, #568]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e54:	d00c      	beq.n	8007e70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e56:	4b8b      	ldr	r3, [pc, #556]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007e5e:	2b0c      	cmp	r3, #12
 8007e60:	d112      	bne.n	8007e88 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e62:	4b88      	ldr	r3, [pc, #544]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e6e:	d10b      	bne.n	8007e88 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e70:	4b84      	ldr	r3, [pc, #528]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d05b      	beq.n	8007f34 <HAL_RCC_OscConfig+0x124>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d157      	bne.n	8007f34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e25a      	b.n	800833e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e90:	d106      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x90>
 8007e92:	4b7c      	ldr	r3, [pc, #496]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a7b      	ldr	r2, [pc, #492]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e9c:	6013      	str	r3, [r2, #0]
 8007e9e:	e01d      	b.n	8007edc <HAL_RCC_OscConfig+0xcc>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ea8:	d10c      	bne.n	8007ec4 <HAL_RCC_OscConfig+0xb4>
 8007eaa:	4b76      	ldr	r3, [pc, #472]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a75      	ldr	r2, [pc, #468]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	4b73      	ldr	r3, [pc, #460]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a72      	ldr	r2, [pc, #456]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	e00b      	b.n	8007edc <HAL_RCC_OscConfig+0xcc>
 8007ec4:	4b6f      	ldr	r3, [pc, #444]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a6e      	ldr	r2, [pc, #440]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	4b6c      	ldr	r3, [pc, #432]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a6b      	ldr	r2, [pc, #428]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d013      	beq.n	8007f0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee4:	f7fd fce4 	bl	80058b0 <HAL_GetTick>
 8007ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007eec:	f7fd fce0 	bl	80058b0 <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b64      	cmp	r3, #100	@ 0x64
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e21f      	b.n	800833e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007efe:	4b61      	ldr	r3, [pc, #388]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0f0      	beq.n	8007eec <HAL_RCC_OscConfig+0xdc>
 8007f0a:	e014      	b.n	8007f36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f0c:	f7fd fcd0 	bl	80058b0 <HAL_GetTick>
 8007f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f12:	e008      	b.n	8007f26 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f14:	f7fd fccc 	bl	80058b0 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	2b64      	cmp	r3, #100	@ 0x64
 8007f20:	d901      	bls.n	8007f26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e20b      	b.n	800833e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f26:	4b57      	ldr	r3, [pc, #348]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1f0      	bne.n	8007f14 <HAL_RCC_OscConfig+0x104>
 8007f32:	e000      	b.n	8007f36 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d06f      	beq.n	8008022 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007f42:	4b50      	ldr	r3, [pc, #320]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f003 030c 	and.w	r3, r3, #12
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d017      	beq.n	8007f7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007f4e:	4b4d      	ldr	r3, [pc, #308]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007f56:	2b08      	cmp	r3, #8
 8007f58:	d105      	bne.n	8007f66 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00b      	beq.n	8007f7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f66:	4b47      	ldr	r3, [pc, #284]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007f6e:	2b0c      	cmp	r3, #12
 8007f70:	d11c      	bne.n	8007fac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f72:	4b44      	ldr	r3, [pc, #272]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d116      	bne.n	8007fac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f7e:	4b41      	ldr	r3, [pc, #260]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d005      	beq.n	8007f96 <HAL_RCC_OscConfig+0x186>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d001      	beq.n	8007f96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e1d3      	b.n	800833e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f96:	4b3b      	ldr	r3, [pc, #236]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	4937      	ldr	r1, [pc, #220]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007faa:	e03a      	b.n	8008022 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d020      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fb4:	4b34      	ldr	r3, [pc, #208]	@ (8008088 <HAL_RCC_OscConfig+0x278>)
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fba:	f7fd fc79 	bl	80058b0 <HAL_GetTick>
 8007fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fc0:	e008      	b.n	8007fd4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fc2:	f7fd fc75 	bl	80058b0 <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d901      	bls.n	8007fd4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e1b4      	b.n	800833e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0f0      	beq.n	8007fc2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fe0:	4b28      	ldr	r3, [pc, #160]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	00db      	lsls	r3, r3, #3
 8007fee:	4925      	ldr	r1, [pc, #148]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	600b      	str	r3, [r1, #0]
 8007ff4:	e015      	b.n	8008022 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ff6:	4b24      	ldr	r3, [pc, #144]	@ (8008088 <HAL_RCC_OscConfig+0x278>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ffc:	f7fd fc58 	bl	80058b0 <HAL_GetTick>
 8008000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008002:	e008      	b.n	8008016 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008004:	f7fd fc54 	bl	80058b0 <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	2b02      	cmp	r3, #2
 8008010:	d901      	bls.n	8008016 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e193      	b.n	800833e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008016:	4b1b      	ldr	r3, [pc, #108]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0302 	and.w	r3, r3, #2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1f0      	bne.n	8008004 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0308 	and.w	r3, r3, #8
 800802a:	2b00      	cmp	r3, #0
 800802c:	d036      	beq.n	800809c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d016      	beq.n	8008064 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008036:	4b15      	ldr	r3, [pc, #84]	@ (800808c <HAL_RCC_OscConfig+0x27c>)
 8008038:	2201      	movs	r2, #1
 800803a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800803c:	f7fd fc38 	bl	80058b0 <HAL_GetTick>
 8008040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008042:	e008      	b.n	8008056 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008044:	f7fd fc34 	bl	80058b0 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	d901      	bls.n	8008056 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e173      	b.n	800833e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008056:	4b0b      	ldr	r3, [pc, #44]	@ (8008084 <HAL_RCC_OscConfig+0x274>)
 8008058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800805a:	f003 0302 	and.w	r3, r3, #2
 800805e:	2b00      	cmp	r3, #0
 8008060:	d0f0      	beq.n	8008044 <HAL_RCC_OscConfig+0x234>
 8008062:	e01b      	b.n	800809c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008064:	4b09      	ldr	r3, [pc, #36]	@ (800808c <HAL_RCC_OscConfig+0x27c>)
 8008066:	2200      	movs	r2, #0
 8008068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800806a:	f7fd fc21 	bl	80058b0 <HAL_GetTick>
 800806e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008070:	e00e      	b.n	8008090 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008072:	f7fd fc1d 	bl	80058b0 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	2b02      	cmp	r3, #2
 800807e:	d907      	bls.n	8008090 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e15c      	b.n	800833e <HAL_RCC_OscConfig+0x52e>
 8008084:	40023800 	.word	0x40023800
 8008088:	42470000 	.word	0x42470000
 800808c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008090:	4b8a      	ldr	r3, [pc, #552]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 8008092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008094:	f003 0302 	and.w	r3, r3, #2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1ea      	bne.n	8008072 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0304 	and.w	r3, r3, #4
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 8097 	beq.w	80081d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080aa:	2300      	movs	r3, #0
 80080ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080ae:	4b83      	ldr	r3, [pc, #524]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 80080b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10f      	bne.n	80080da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080ba:	2300      	movs	r3, #0
 80080bc:	60bb      	str	r3, [r7, #8]
 80080be:	4b7f      	ldr	r3, [pc, #508]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 80080c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c2:	4a7e      	ldr	r2, [pc, #504]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 80080c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80080ca:	4b7c      	ldr	r3, [pc, #496]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 80080cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080d2:	60bb      	str	r3, [r7, #8]
 80080d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080d6:	2301      	movs	r3, #1
 80080d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080da:	4b79      	ldr	r3, [pc, #484]	@ (80082c0 <HAL_RCC_OscConfig+0x4b0>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d118      	bne.n	8008118 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80080e6:	4b76      	ldr	r3, [pc, #472]	@ (80082c0 <HAL_RCC_OscConfig+0x4b0>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a75      	ldr	r2, [pc, #468]	@ (80082c0 <HAL_RCC_OscConfig+0x4b0>)
 80080ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080f2:	f7fd fbdd 	bl	80058b0 <HAL_GetTick>
 80080f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080f8:	e008      	b.n	800810c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080fa:	f7fd fbd9 	bl	80058b0 <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	2b02      	cmp	r3, #2
 8008106:	d901      	bls.n	800810c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	e118      	b.n	800833e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800810c:	4b6c      	ldr	r3, [pc, #432]	@ (80082c0 <HAL_RCC_OscConfig+0x4b0>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008114:	2b00      	cmp	r3, #0
 8008116:	d0f0      	beq.n	80080fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d106      	bne.n	800812e <HAL_RCC_OscConfig+0x31e>
 8008120:	4b66      	ldr	r3, [pc, #408]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 8008122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008124:	4a65      	ldr	r2, [pc, #404]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 8008126:	f043 0301 	orr.w	r3, r3, #1
 800812a:	6713      	str	r3, [r2, #112]	@ 0x70
 800812c:	e01c      	b.n	8008168 <HAL_RCC_OscConfig+0x358>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	2b05      	cmp	r3, #5
 8008134:	d10c      	bne.n	8008150 <HAL_RCC_OscConfig+0x340>
 8008136:	4b61      	ldr	r3, [pc, #388]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 8008138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800813a:	4a60      	ldr	r2, [pc, #384]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 800813c:	f043 0304 	orr.w	r3, r3, #4
 8008140:	6713      	str	r3, [r2, #112]	@ 0x70
 8008142:	4b5e      	ldr	r3, [pc, #376]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 8008144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008146:	4a5d      	ldr	r2, [pc, #372]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 8008148:	f043 0301 	orr.w	r3, r3, #1
 800814c:	6713      	str	r3, [r2, #112]	@ 0x70
 800814e:	e00b      	b.n	8008168 <HAL_RCC_OscConfig+0x358>
 8008150:	4b5a      	ldr	r3, [pc, #360]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 8008152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008154:	4a59      	ldr	r2, [pc, #356]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 8008156:	f023 0301 	bic.w	r3, r3, #1
 800815a:	6713      	str	r3, [r2, #112]	@ 0x70
 800815c:	4b57      	ldr	r3, [pc, #348]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 800815e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008160:	4a56      	ldr	r2, [pc, #344]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 8008162:	f023 0304 	bic.w	r3, r3, #4
 8008166:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d015      	beq.n	800819c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008170:	f7fd fb9e 	bl	80058b0 <HAL_GetTick>
 8008174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008176:	e00a      	b.n	800818e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008178:	f7fd fb9a 	bl	80058b0 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008186:	4293      	cmp	r3, r2
 8008188:	d901      	bls.n	800818e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e0d7      	b.n	800833e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800818e:	4b4b      	ldr	r3, [pc, #300]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 8008190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008192:	f003 0302 	and.w	r3, r3, #2
 8008196:	2b00      	cmp	r3, #0
 8008198:	d0ee      	beq.n	8008178 <HAL_RCC_OscConfig+0x368>
 800819a:	e014      	b.n	80081c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800819c:	f7fd fb88 	bl	80058b0 <HAL_GetTick>
 80081a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081a2:	e00a      	b.n	80081ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081a4:	f7fd fb84 	bl	80058b0 <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d901      	bls.n	80081ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e0c1      	b.n	800833e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081ba:	4b40      	ldr	r3, [pc, #256]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 80081bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081be:	f003 0302 	and.w	r3, r3, #2
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1ee      	bne.n	80081a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d105      	bne.n	80081d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081cc:	4b3b      	ldr	r3, [pc, #236]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 80081ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d0:	4a3a      	ldr	r2, [pc, #232]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 80081d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 80ad 	beq.w	800833c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80081e2:	4b36      	ldr	r3, [pc, #216]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	f003 030c 	and.w	r3, r3, #12
 80081ea:	2b08      	cmp	r3, #8
 80081ec:	d060      	beq.n	80082b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d145      	bne.n	8008282 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081f6:	4b33      	ldr	r3, [pc, #204]	@ (80082c4 <HAL_RCC_OscConfig+0x4b4>)
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081fc:	f7fd fb58 	bl	80058b0 <HAL_GetTick>
 8008200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008202:	e008      	b.n	8008216 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008204:	f7fd fb54 	bl	80058b0 <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	2b02      	cmp	r3, #2
 8008210:	d901      	bls.n	8008216 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e093      	b.n	800833e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008216:	4b29      	ldr	r3, [pc, #164]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1f0      	bne.n	8008204 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	69da      	ldr	r2, [r3, #28]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	431a      	orrs	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008230:	019b      	lsls	r3, r3, #6
 8008232:	431a      	orrs	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008238:	085b      	lsrs	r3, r3, #1
 800823a:	3b01      	subs	r3, #1
 800823c:	041b      	lsls	r3, r3, #16
 800823e:	431a      	orrs	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008244:	061b      	lsls	r3, r3, #24
 8008246:	431a      	orrs	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800824c:	071b      	lsls	r3, r3, #28
 800824e:	491b      	ldr	r1, [pc, #108]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 8008250:	4313      	orrs	r3, r2
 8008252:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008254:	4b1b      	ldr	r3, [pc, #108]	@ (80082c4 <HAL_RCC_OscConfig+0x4b4>)
 8008256:	2201      	movs	r2, #1
 8008258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800825a:	f7fd fb29 	bl	80058b0 <HAL_GetTick>
 800825e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008260:	e008      	b.n	8008274 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008262:	f7fd fb25 	bl	80058b0 <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	2b02      	cmp	r3, #2
 800826e:	d901      	bls.n	8008274 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e064      	b.n	800833e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008274:	4b11      	ldr	r3, [pc, #68]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d0f0      	beq.n	8008262 <HAL_RCC_OscConfig+0x452>
 8008280:	e05c      	b.n	800833c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008282:	4b10      	ldr	r3, [pc, #64]	@ (80082c4 <HAL_RCC_OscConfig+0x4b4>)
 8008284:	2200      	movs	r2, #0
 8008286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008288:	f7fd fb12 	bl	80058b0 <HAL_GetTick>
 800828c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800828e:	e008      	b.n	80082a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008290:	f7fd fb0e 	bl	80058b0 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	2b02      	cmp	r3, #2
 800829c:	d901      	bls.n	80082a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e04d      	b.n	800833e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082a2:	4b06      	ldr	r3, [pc, #24]	@ (80082bc <HAL_RCC_OscConfig+0x4ac>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1f0      	bne.n	8008290 <HAL_RCC_OscConfig+0x480>
 80082ae:	e045      	b.n	800833c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d107      	bne.n	80082c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e040      	b.n	800833e <HAL_RCC_OscConfig+0x52e>
 80082bc:	40023800 	.word	0x40023800
 80082c0:	40007000 	.word	0x40007000
 80082c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80082c8:	4b1f      	ldr	r3, [pc, #124]	@ (8008348 <HAL_RCC_OscConfig+0x538>)
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d030      	beq.n	8008338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d129      	bne.n	8008338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d122      	bne.n	8008338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80082f8:	4013      	ands	r3, r2
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80082fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008300:	4293      	cmp	r3, r2
 8008302:	d119      	bne.n	8008338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800830e:	085b      	lsrs	r3, r3, #1
 8008310:	3b01      	subs	r3, #1
 8008312:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008314:	429a      	cmp	r2, r3
 8008316:	d10f      	bne.n	8008338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008322:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008324:	429a      	cmp	r2, r3
 8008326:	d107      	bne.n	8008338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008332:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008334:	429a      	cmp	r2, r3
 8008336:	d001      	beq.n	800833c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e000      	b.n	800833e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	40023800 	.word	0x40023800

0800834c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e041      	b.n	80083e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d106      	bne.n	8008378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7fc ffc6 	bl	8005304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2202      	movs	r2, #2
 800837c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	3304      	adds	r3, #4
 8008388:	4619      	mov	r1, r3
 800838a:	4610      	mov	r0, r2
 800838c:	f000 fbb2 	bl	8008af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
	...

080083ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d001      	beq.n	8008404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e04e      	b.n	80084a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2202      	movs	r2, #2
 8008408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68da      	ldr	r2, [r3, #12]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f042 0201 	orr.w	r2, r2, #1
 800841a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a23      	ldr	r2, [pc, #140]	@ (80084b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d022      	beq.n	800846c <HAL_TIM_Base_Start_IT+0x80>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800842e:	d01d      	beq.n	800846c <HAL_TIM_Base_Start_IT+0x80>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a1f      	ldr	r2, [pc, #124]	@ (80084b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d018      	beq.n	800846c <HAL_TIM_Base_Start_IT+0x80>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a1e      	ldr	r2, [pc, #120]	@ (80084b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d013      	beq.n	800846c <HAL_TIM_Base_Start_IT+0x80>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a1c      	ldr	r2, [pc, #112]	@ (80084bc <HAL_TIM_Base_Start_IT+0xd0>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d00e      	beq.n	800846c <HAL_TIM_Base_Start_IT+0x80>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a1b      	ldr	r2, [pc, #108]	@ (80084c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d009      	beq.n	800846c <HAL_TIM_Base_Start_IT+0x80>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a19      	ldr	r2, [pc, #100]	@ (80084c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d004      	beq.n	800846c <HAL_TIM_Base_Start_IT+0x80>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a18      	ldr	r2, [pc, #96]	@ (80084c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d111      	bne.n	8008490 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f003 0307 	and.w	r3, r3, #7
 8008476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2b06      	cmp	r3, #6
 800847c:	d010      	beq.n	80084a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f042 0201 	orr.w	r2, r2, #1
 800848c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800848e:	e007      	b.n	80084a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f042 0201 	orr.w	r2, r2, #1
 800849e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	40010000 	.word	0x40010000
 80084b4:	40000400 	.word	0x40000400
 80084b8:	40000800 	.word	0x40000800
 80084bc:	40000c00 	.word	0x40000c00
 80084c0:	40010400 	.word	0x40010400
 80084c4:	40014000 	.word	0x40014000
 80084c8:	40001800 	.word	0x40001800

080084cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e097      	b.n	8008610 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d106      	bne.n	80084fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f7fc fe17 	bl	8005128 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2202      	movs	r2, #2
 80084fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	6812      	ldr	r2, [r2, #0]
 800850c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008510:	f023 0307 	bic.w	r3, r3, #7
 8008514:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	3304      	adds	r3, #4
 800851e:	4619      	mov	r1, r3
 8008520:	4610      	mov	r0, r2
 8008522:	f000 fae7 	bl	8008af4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	4313      	orrs	r3, r2
 8008546:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800854e:	f023 0303 	bic.w	r3, r3, #3
 8008552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	021b      	lsls	r3, r3, #8
 800855e:	4313      	orrs	r3, r2
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	4313      	orrs	r3, r2
 8008564:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800856c:	f023 030c 	bic.w	r3, r3, #12
 8008570:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008578:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800857c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	68da      	ldr	r2, [r3, #12]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	021b      	lsls	r3, r3, #8
 8008588:	4313      	orrs	r3, r2
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	4313      	orrs	r3, r2
 800858e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	011a      	lsls	r2, r3, #4
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	031b      	lsls	r3, r3, #12
 800859c:	4313      	orrs	r3, r2
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80085aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80085b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	695b      	ldr	r3, [r3, #20]
 80085bc:	011b      	lsls	r3, r3, #4
 80085be:	4313      	orrs	r3, r2
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3718      	adds	r7, #24
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008628:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008630:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008638:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008640:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d110      	bne.n	800866a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d102      	bne.n	8008654 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800864e:	7b7b      	ldrb	r3, [r7, #13]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d001      	beq.n	8008658 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e069      	b.n	800872c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2202      	movs	r2, #2
 800865c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008668:	e031      	b.n	80086ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2b04      	cmp	r3, #4
 800866e:	d110      	bne.n	8008692 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d102      	bne.n	800867c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008676:	7b3b      	ldrb	r3, [r7, #12]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d001      	beq.n	8008680 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e055      	b.n	800872c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008690:	e01d      	b.n	80086ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d108      	bne.n	80086aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008698:	7bbb      	ldrb	r3, [r7, #14]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d105      	bne.n	80086aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800869e:	7b7b      	ldrb	r3, [r7, #13]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d102      	bne.n	80086aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80086a4:	7b3b      	ldrb	r3, [r7, #12]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d001      	beq.n	80086ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e03e      	b.n	800872c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2202      	movs	r2, #2
 80086b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2202      	movs	r2, #2
 80086ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2202      	movs	r2, #2
 80086c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2202      	movs	r2, #2
 80086ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d003      	beq.n	80086dc <HAL_TIM_Encoder_Start+0xc4>
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	d008      	beq.n	80086ec <HAL_TIM_Encoder_Start+0xd4>
 80086da:	e00f      	b.n	80086fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2201      	movs	r2, #1
 80086e2:	2100      	movs	r1, #0
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 fb4b 	bl	8008d80 <TIM_CCxChannelCmd>
      break;
 80086ea:	e016      	b.n	800871a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2201      	movs	r2, #1
 80086f2:	2104      	movs	r1, #4
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 fb43 	bl	8008d80 <TIM_CCxChannelCmd>
      break;
 80086fa:	e00e      	b.n	800871a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2201      	movs	r2, #1
 8008702:	2100      	movs	r1, #0
 8008704:	4618      	mov	r0, r3
 8008706:	f000 fb3b 	bl	8008d80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2201      	movs	r2, #1
 8008710:	2104      	movs	r1, #4
 8008712:	4618      	mov	r0, r3
 8008714:	f000 fb34 	bl	8008d80 <TIM_CCxChannelCmd>
      break;
 8008718:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f042 0201 	orr.w	r2, r2, #1
 8008728:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d020      	beq.n	8008798 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f003 0302 	and.w	r3, r3, #2
 800875c:	2b00      	cmp	r3, #0
 800875e:	d01b      	beq.n	8008798 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f06f 0202 	mvn.w	r2, #2
 8008768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f999 	bl	8008ab6 <HAL_TIM_IC_CaptureCallback>
 8008784:	e005      	b.n	8008792 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f98b 	bl	8008aa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f99c 	bl	8008aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f003 0304 	and.w	r3, r3, #4
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d020      	beq.n	80087e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f003 0304 	and.w	r3, r3, #4
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d01b      	beq.n	80087e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f06f 0204 	mvn.w	r2, #4
 80087b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2202      	movs	r2, #2
 80087ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d003      	beq.n	80087d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f973 	bl	8008ab6 <HAL_TIM_IC_CaptureCallback>
 80087d0:	e005      	b.n	80087de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f965 	bl	8008aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f976 	bl	8008aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f003 0308 	and.w	r3, r3, #8
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d020      	beq.n	8008830 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f003 0308 	and.w	r3, r3, #8
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d01b      	beq.n	8008830 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f06f 0208 	mvn.w	r2, #8
 8008800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2204      	movs	r2, #4
 8008806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	69db      	ldr	r3, [r3, #28]
 800880e:	f003 0303 	and.w	r3, r3, #3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f94d 	bl	8008ab6 <HAL_TIM_IC_CaptureCallback>
 800881c:	e005      	b.n	800882a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f93f 	bl	8008aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f950 	bl	8008aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	f003 0310 	and.w	r3, r3, #16
 8008836:	2b00      	cmp	r3, #0
 8008838:	d020      	beq.n	800887c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f003 0310 	and.w	r3, r3, #16
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01b      	beq.n	800887c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f06f 0210 	mvn.w	r2, #16
 800884c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2208      	movs	r2, #8
 8008852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f927 	bl	8008ab6 <HAL_TIM_IC_CaptureCallback>
 8008868:	e005      	b.n	8008876 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f919 	bl	8008aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f92a 	bl	8008aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00c      	beq.n	80088a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f003 0301 	and.w	r3, r3, #1
 800888c:	2b00      	cmp	r3, #0
 800888e:	d007      	beq.n	80088a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f06f 0201 	mvn.w	r2, #1
 8008898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7f8 fdd0 	bl	8001440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00c      	beq.n	80088c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d007      	beq.n	80088c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80088bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fb0a 	bl	8008ed8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00c      	beq.n	80088e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d007      	beq.n	80088e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80088e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f8fb 	bl	8008ade <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	f003 0320 	and.w	r3, r3, #32
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00c      	beq.n	800890c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f003 0320 	and.w	r3, r3, #32
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d007      	beq.n	800890c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f06f 0220 	mvn.w	r2, #32
 8008904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fadc 	bl	8008ec4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800890c:	bf00      	nop
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008928:	2b01      	cmp	r3, #1
 800892a:	d101      	bne.n	8008930 <HAL_TIM_ConfigClockSource+0x1c>
 800892c:	2302      	movs	r3, #2
 800892e:	e0b4      	b.n	8008a9a <HAL_TIM_ConfigClockSource+0x186>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800894e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008956:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008968:	d03e      	beq.n	80089e8 <HAL_TIM_ConfigClockSource+0xd4>
 800896a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800896e:	f200 8087 	bhi.w	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 8008972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008976:	f000 8086 	beq.w	8008a86 <HAL_TIM_ConfigClockSource+0x172>
 800897a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800897e:	d87f      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 8008980:	2b70      	cmp	r3, #112	@ 0x70
 8008982:	d01a      	beq.n	80089ba <HAL_TIM_ConfigClockSource+0xa6>
 8008984:	2b70      	cmp	r3, #112	@ 0x70
 8008986:	d87b      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 8008988:	2b60      	cmp	r3, #96	@ 0x60
 800898a:	d050      	beq.n	8008a2e <HAL_TIM_ConfigClockSource+0x11a>
 800898c:	2b60      	cmp	r3, #96	@ 0x60
 800898e:	d877      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 8008990:	2b50      	cmp	r3, #80	@ 0x50
 8008992:	d03c      	beq.n	8008a0e <HAL_TIM_ConfigClockSource+0xfa>
 8008994:	2b50      	cmp	r3, #80	@ 0x50
 8008996:	d873      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 8008998:	2b40      	cmp	r3, #64	@ 0x40
 800899a:	d058      	beq.n	8008a4e <HAL_TIM_ConfigClockSource+0x13a>
 800899c:	2b40      	cmp	r3, #64	@ 0x40
 800899e:	d86f      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 80089a0:	2b30      	cmp	r3, #48	@ 0x30
 80089a2:	d064      	beq.n	8008a6e <HAL_TIM_ConfigClockSource+0x15a>
 80089a4:	2b30      	cmp	r3, #48	@ 0x30
 80089a6:	d86b      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 80089a8:	2b20      	cmp	r3, #32
 80089aa:	d060      	beq.n	8008a6e <HAL_TIM_ConfigClockSource+0x15a>
 80089ac:	2b20      	cmp	r3, #32
 80089ae:	d867      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d05c      	beq.n	8008a6e <HAL_TIM_ConfigClockSource+0x15a>
 80089b4:	2b10      	cmp	r3, #16
 80089b6:	d05a      	beq.n	8008a6e <HAL_TIM_ConfigClockSource+0x15a>
 80089b8:	e062      	b.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089ca:	f000 f9b9 	bl	8008d40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80089dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	609a      	str	r2, [r3, #8]
      break;
 80089e6:	e04f      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089f8:	f000 f9a2 	bl	8008d40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	689a      	ldr	r2, [r3, #8]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a0a:	609a      	str	r2, [r3, #8]
      break;
 8008a0c:	e03c      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f000 f916 	bl	8008c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2150      	movs	r1, #80	@ 0x50
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 f96f 	bl	8008d0a <TIM_ITRx_SetConfig>
      break;
 8008a2c:	e02c      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f000 f935 	bl	8008caa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2160      	movs	r1, #96	@ 0x60
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 f95f 	bl	8008d0a <TIM_ITRx_SetConfig>
      break;
 8008a4c:	e01c      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	f000 f8f6 	bl	8008c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2140      	movs	r1, #64	@ 0x40
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 f94f 	bl	8008d0a <TIM_ITRx_SetConfig>
      break;
 8008a6c:	e00c      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4619      	mov	r1, r3
 8008a78:	4610      	mov	r0, r2
 8008a7a:	f000 f946 	bl	8008d0a <TIM_ITRx_SetConfig>
      break;
 8008a7e:	e003      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	73fb      	strb	r3, [r7, #15]
      break;
 8008a84:	e000      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b083      	sub	sp, #12
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008aaa:	bf00      	nop
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b083      	sub	sp, #12
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008abe:	bf00      	nop
 8008ac0:	370c      	adds	r7, #12
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b083      	sub	sp, #12
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ad2:	bf00      	nop
 8008ad4:	370c      	adds	r7, #12
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ade:	b480      	push	{r7}
 8008ae0:	b083      	sub	sp, #12
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ae6:	bf00      	nop
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
	...

08008af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a46      	ldr	r2, [pc, #280]	@ (8008c20 <TIM_Base_SetConfig+0x12c>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d013      	beq.n	8008b34 <TIM_Base_SetConfig+0x40>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b12:	d00f      	beq.n	8008b34 <TIM_Base_SetConfig+0x40>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a43      	ldr	r2, [pc, #268]	@ (8008c24 <TIM_Base_SetConfig+0x130>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d00b      	beq.n	8008b34 <TIM_Base_SetConfig+0x40>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a42      	ldr	r2, [pc, #264]	@ (8008c28 <TIM_Base_SetConfig+0x134>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d007      	beq.n	8008b34 <TIM_Base_SetConfig+0x40>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a41      	ldr	r2, [pc, #260]	@ (8008c2c <TIM_Base_SetConfig+0x138>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d003      	beq.n	8008b34 <TIM_Base_SetConfig+0x40>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a40      	ldr	r2, [pc, #256]	@ (8008c30 <TIM_Base_SetConfig+0x13c>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d108      	bne.n	8008b46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a35      	ldr	r2, [pc, #212]	@ (8008c20 <TIM_Base_SetConfig+0x12c>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d02b      	beq.n	8008ba6 <TIM_Base_SetConfig+0xb2>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b54:	d027      	beq.n	8008ba6 <TIM_Base_SetConfig+0xb2>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a32      	ldr	r2, [pc, #200]	@ (8008c24 <TIM_Base_SetConfig+0x130>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d023      	beq.n	8008ba6 <TIM_Base_SetConfig+0xb2>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a31      	ldr	r2, [pc, #196]	@ (8008c28 <TIM_Base_SetConfig+0x134>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d01f      	beq.n	8008ba6 <TIM_Base_SetConfig+0xb2>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a30      	ldr	r2, [pc, #192]	@ (8008c2c <TIM_Base_SetConfig+0x138>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d01b      	beq.n	8008ba6 <TIM_Base_SetConfig+0xb2>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a2f      	ldr	r2, [pc, #188]	@ (8008c30 <TIM_Base_SetConfig+0x13c>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d017      	beq.n	8008ba6 <TIM_Base_SetConfig+0xb2>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a2e      	ldr	r2, [pc, #184]	@ (8008c34 <TIM_Base_SetConfig+0x140>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d013      	beq.n	8008ba6 <TIM_Base_SetConfig+0xb2>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a2d      	ldr	r2, [pc, #180]	@ (8008c38 <TIM_Base_SetConfig+0x144>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d00f      	beq.n	8008ba6 <TIM_Base_SetConfig+0xb2>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a2c      	ldr	r2, [pc, #176]	@ (8008c3c <TIM_Base_SetConfig+0x148>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d00b      	beq.n	8008ba6 <TIM_Base_SetConfig+0xb2>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a2b      	ldr	r2, [pc, #172]	@ (8008c40 <TIM_Base_SetConfig+0x14c>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d007      	beq.n	8008ba6 <TIM_Base_SetConfig+0xb2>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a2a      	ldr	r2, [pc, #168]	@ (8008c44 <TIM_Base_SetConfig+0x150>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d003      	beq.n	8008ba6 <TIM_Base_SetConfig+0xb2>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a29      	ldr	r2, [pc, #164]	@ (8008c48 <TIM_Base_SetConfig+0x154>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d108      	bne.n	8008bb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	689a      	ldr	r2, [r3, #8]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a10      	ldr	r2, [pc, #64]	@ (8008c20 <TIM_Base_SetConfig+0x12c>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d003      	beq.n	8008bec <TIM_Base_SetConfig+0xf8>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a12      	ldr	r2, [pc, #72]	@ (8008c30 <TIM_Base_SetConfig+0x13c>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d103      	bne.n	8008bf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	691a      	ldr	r2, [r3, #16]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d105      	bne.n	8008c12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	f023 0201 	bic.w	r2, r3, #1
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	611a      	str	r2, [r3, #16]
  }
}
 8008c12:	bf00      	nop
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	40010000 	.word	0x40010000
 8008c24:	40000400 	.word	0x40000400
 8008c28:	40000800 	.word	0x40000800
 8008c2c:	40000c00 	.word	0x40000c00
 8008c30:	40010400 	.word	0x40010400
 8008c34:	40014000 	.word	0x40014000
 8008c38:	40014400 	.word	0x40014400
 8008c3c:	40014800 	.word	0x40014800
 8008c40:	40001800 	.word	0x40001800
 8008c44:	40001c00 	.word	0x40001c00
 8008c48:	40002000 	.word	0x40002000

08008c4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b087      	sub	sp, #28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6a1b      	ldr	r3, [r3, #32]
 8008c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	f023 0201 	bic.w	r2, r3, #1
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	011b      	lsls	r3, r3, #4
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f023 030a 	bic.w	r3, r3, #10
 8008c88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	621a      	str	r2, [r3, #32]
}
 8008c9e:	bf00      	nop
 8008ca0:	371c      	adds	r7, #28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b087      	sub	sp, #28
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6a1b      	ldr	r3, [r3, #32]
 8008cc0:	f023 0210 	bic.w	r2, r3, #16
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008cd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	031b      	lsls	r3, r3, #12
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ce6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	011b      	lsls	r3, r3, #4
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	621a      	str	r2, [r3, #32]
}
 8008cfe:	bf00      	nop
 8008d00:	371c      	adds	r7, #28
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b085      	sub	sp, #20
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	f043 0307 	orr.w	r3, r3, #7
 8008d2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	609a      	str	r2, [r3, #8]
}
 8008d34:	bf00      	nop
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
 8008d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	021a      	lsls	r2, r3, #8
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	431a      	orrs	r2, r3
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	609a      	str	r2, [r3, #8]
}
 8008d74:	bf00      	nop
 8008d76:	371c      	adds	r7, #28
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b087      	sub	sp, #28
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	f003 031f 	and.w	r3, r3, #31
 8008d92:	2201      	movs	r2, #1
 8008d94:	fa02 f303 	lsl.w	r3, r2, r3
 8008d98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6a1a      	ldr	r2, [r3, #32]
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	43db      	mvns	r3, r3
 8008da2:	401a      	ands	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6a1a      	ldr	r2, [r3, #32]
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	f003 031f 	and.w	r3, r3, #31
 8008db2:	6879      	ldr	r1, [r7, #4]
 8008db4:	fa01 f303 	lsl.w	r3, r1, r3
 8008db8:	431a      	orrs	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	621a      	str	r2, [r3, #32]
}
 8008dbe:	bf00      	nop
 8008dc0:	371c      	adds	r7, #28
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
	...

08008dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d101      	bne.n	8008de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008de0:	2302      	movs	r3, #2
 8008de2:	e05a      	b.n	8008e9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a21      	ldr	r2, [pc, #132]	@ (8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d022      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e30:	d01d      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a1d      	ldr	r2, [pc, #116]	@ (8008eac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d018      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a1b      	ldr	r2, [pc, #108]	@ (8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d013      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8008eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d00e      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a18      	ldr	r2, [pc, #96]	@ (8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d009      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a17      	ldr	r2, [pc, #92]	@ (8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d004      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a15      	ldr	r2, [pc, #84]	@ (8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d10c      	bne.n	8008e88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	40010000 	.word	0x40010000
 8008eac:	40000400 	.word	0x40000400
 8008eb0:	40000800 	.word	0x40000800
 8008eb4:	40000c00 	.word	0x40000c00
 8008eb8:	40010400 	.word	0x40010400
 8008ebc:	40014000 	.word	0x40014000
 8008ec0:	40001800 	.word	0x40001800

08008ec4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ee0:	bf00      	nop
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d101      	bne.n	8008efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e042      	b.n	8008f84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d106      	bne.n	8008f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7fc fa3c 	bl	8005390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2224      	movs	r2, #36	@ 0x24
 8008f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 ff37 	bl	8009da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	691a      	ldr	r2, [r3, #16]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	695a      	ldr	r2, [r3, #20]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68da      	ldr	r2, [r3, #12]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2220      	movs	r2, #32
 8008f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2220      	movs	r2, #32
 8008f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b08c      	sub	sp, #48	@ 0x30
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	4613      	mov	r3, r2
 8008f98:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b20      	cmp	r3, #32
 8008fa4:	d156      	bne.n	8009054 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <HAL_UART_Transmit_DMA+0x26>
 8008fac:	88fb      	ldrh	r3, [r7, #6]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d101      	bne.n	8008fb6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e04f      	b.n	8009056 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	88fa      	ldrh	r2, [r7, #6]
 8008fc0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	88fa      	ldrh	r2, [r7, #6]
 8008fc6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2221      	movs	r2, #33	@ 0x21
 8008fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fda:	4a21      	ldr	r2, [pc, #132]	@ (8009060 <HAL_UART_Transmit_DMA+0xd4>)
 8008fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe2:	4a20      	ldr	r2, [pc, #128]	@ (8009064 <HAL_UART_Transmit_DMA+0xd8>)
 8008fe4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fea:	4a1f      	ldr	r2, [pc, #124]	@ (8009068 <HAL_UART_Transmit_DMA+0xdc>)
 8008fec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008ff6:	f107 0308 	add.w	r3, r7, #8
 8008ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009002:	6819      	ldr	r1, [r3, #0]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3304      	adds	r3, #4
 800900a:	461a      	mov	r2, r3
 800900c:	88fb      	ldrh	r3, [r7, #6]
 800900e:	f7fc fe3f 	bl	8005c90 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800901a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3314      	adds	r3, #20
 8009022:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	e853 3f00 	ldrex	r3, [r3]
 800902a:	617b      	str	r3, [r7, #20]
   return(result);
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009032:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3314      	adds	r3, #20
 800903a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800903c:	627a      	str	r2, [r7, #36]	@ 0x24
 800903e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	6a39      	ldr	r1, [r7, #32]
 8009042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009044:	e841 2300 	strex	r3, r2, [r1]
 8009048:	61fb      	str	r3, [r7, #28]
   return(result);
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1e5      	bne.n	800901c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	e000      	b.n	8009056 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009054:	2302      	movs	r3, #2
  }
}
 8009056:	4618      	mov	r0, r3
 8009058:	3730      	adds	r7, #48	@ 0x30
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	08009631 	.word	0x08009631
 8009064:	080096cb 	.word	0x080096cb
 8009068:	0800984f 	.word	0x0800984f

0800906c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	4613      	mov	r3, r2
 8009078:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009080:	b2db      	uxtb	r3, r3
 8009082:	2b20      	cmp	r3, #32
 8009084:	d112      	bne.n	80090ac <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d002      	beq.n	8009092 <HAL_UART_Receive_DMA+0x26>
 800908c:	88fb      	ldrh	r3, [r7, #6]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d101      	bne.n	8009096 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e00b      	b.n	80090ae <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800909c:	88fb      	ldrh	r3, [r7, #6]
 800909e:	461a      	mov	r2, r3
 80090a0:	68b9      	ldr	r1, [r7, #8]
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f000 fc1e 	bl	80098e4 <UART_Start_Receive_DMA>
 80090a8:	4603      	mov	r3, r0
 80090aa:	e000      	b.n	80090ae <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80090ac:	2302      	movs	r3, #2
  }
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b0ba      	sub	sp, #232	@ 0xe8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80090de:	2300      	movs	r3, #0
 80090e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80090ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090ee:	f003 030f 	and.w	r3, r3, #15
 80090f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80090f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10f      	bne.n	800911e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009102:	f003 0320 	and.w	r3, r3, #32
 8009106:	2b00      	cmp	r3, #0
 8009108:	d009      	beq.n	800911e <HAL_UART_IRQHandler+0x66>
 800910a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800910e:	f003 0320 	and.w	r3, r3, #32
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fd85 	bl	8009c26 <UART_Receive_IT>
      return;
 800911c:	e25b      	b.n	80095d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800911e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 80de 	beq.w	80092e4 <HAL_UART_IRQHandler+0x22c>
 8009128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800912c:	f003 0301 	and.w	r3, r3, #1
 8009130:	2b00      	cmp	r3, #0
 8009132:	d106      	bne.n	8009142 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009138:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 80d1 	beq.w	80092e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00b      	beq.n	8009166 <HAL_UART_IRQHandler+0xae>
 800914e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009156:	2b00      	cmp	r3, #0
 8009158:	d005      	beq.n	8009166 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800915e:	f043 0201 	orr.w	r2, r3, #1
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800916a:	f003 0304 	and.w	r3, r3, #4
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00b      	beq.n	800918a <HAL_UART_IRQHandler+0xd2>
 8009172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009176:	f003 0301 	and.w	r3, r3, #1
 800917a:	2b00      	cmp	r3, #0
 800917c:	d005      	beq.n	800918a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009182:	f043 0202 	orr.w	r2, r3, #2
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800918a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800918e:	f003 0302 	and.w	r3, r3, #2
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00b      	beq.n	80091ae <HAL_UART_IRQHandler+0xf6>
 8009196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d005      	beq.n	80091ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091a6:	f043 0204 	orr.w	r2, r3, #4
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80091ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091b2:	f003 0308 	and.w	r3, r3, #8
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d011      	beq.n	80091de <HAL_UART_IRQHandler+0x126>
 80091ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091be:	f003 0320 	and.w	r3, r3, #32
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d105      	bne.n	80091d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80091c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d005      	beq.n	80091de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091d6:	f043 0208 	orr.w	r2, r3, #8
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 81f2 	beq.w	80095cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ec:	f003 0320 	and.w	r3, r3, #32
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d008      	beq.n	8009206 <HAL_UART_IRQHandler+0x14e>
 80091f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091f8:	f003 0320 	and.w	r3, r3, #32
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fd10 	bl	8009c26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009210:	2b40      	cmp	r3, #64	@ 0x40
 8009212:	bf0c      	ite	eq
 8009214:	2301      	moveq	r3, #1
 8009216:	2300      	movne	r3, #0
 8009218:	b2db      	uxtb	r3, r3
 800921a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009222:	f003 0308 	and.w	r3, r3, #8
 8009226:	2b00      	cmp	r3, #0
 8009228:	d103      	bne.n	8009232 <HAL_UART_IRQHandler+0x17a>
 800922a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800922e:	2b00      	cmp	r3, #0
 8009230:	d04f      	beq.n	80092d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fc18 	bl	8009a68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009242:	2b40      	cmp	r3, #64	@ 0x40
 8009244:	d141      	bne.n	80092ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3314      	adds	r3, #20
 800924c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009250:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009254:	e853 3f00 	ldrex	r3, [r3]
 8009258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800925c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009264:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3314      	adds	r3, #20
 800926e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009272:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009276:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800927e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009282:	e841 2300 	strex	r3, r2, [r1]
 8009286:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800928a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1d9      	bne.n	8009246 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009296:	2b00      	cmp	r3, #0
 8009298:	d013      	beq.n	80092c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800929e:	4a7e      	ldr	r2, [pc, #504]	@ (8009498 <HAL_UART_IRQHandler+0x3e0>)
 80092a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fc fdba 	bl	8005e20 <HAL_DMA_Abort_IT>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d016      	beq.n	80092e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80092bc:	4610      	mov	r0, r2
 80092be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c0:	e00e      	b.n	80092e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f99e 	bl	8009604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c8:	e00a      	b.n	80092e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f99a 	bl	8009604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d0:	e006      	b.n	80092e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f996 	bl	8009604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80092de:	e175      	b.n	80095cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e0:	bf00      	nop
    return;
 80092e2:	e173      	b.n	80095cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	f040 814f 	bne.w	800958c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80092ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092f2:	f003 0310 	and.w	r3, r3, #16
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f000 8148 	beq.w	800958c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80092fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009300:	f003 0310 	and.w	r3, r3, #16
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 8141 	beq.w	800958c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800930a:	2300      	movs	r3, #0
 800930c:	60bb      	str	r3, [r7, #8]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	60bb      	str	r3, [r7, #8]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	60bb      	str	r3, [r7, #8]
 800931e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800932a:	2b40      	cmp	r3, #64	@ 0x40
 800932c:	f040 80b6 	bne.w	800949c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800933c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 8145 	beq.w	80095d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800934a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800934e:	429a      	cmp	r2, r3
 8009350:	f080 813e 	bcs.w	80095d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800935a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009360:	69db      	ldr	r3, [r3, #28]
 8009362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009366:	f000 8088 	beq.w	800947a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	330c      	adds	r3, #12
 8009370:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009374:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009380:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009388:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	330c      	adds	r3, #12
 8009392:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009396:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800939a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80093a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80093a6:	e841 2300 	strex	r3, r2, [r1]
 80093aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80093ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1d9      	bne.n	800936a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3314      	adds	r3, #20
 80093bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093c0:	e853 3f00 	ldrex	r3, [r3]
 80093c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80093c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80093c8:	f023 0301 	bic.w	r3, r3, #1
 80093cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3314      	adds	r3, #20
 80093d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80093da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80093de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80093e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80093e6:	e841 2300 	strex	r3, r2, [r1]
 80093ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80093ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1e1      	bne.n	80093b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3314      	adds	r3, #20
 80093f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093fc:	e853 3f00 	ldrex	r3, [r3]
 8009400:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009402:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009404:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009408:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3314      	adds	r3, #20
 8009412:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009416:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009418:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800941c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800941e:	e841 2300 	strex	r3, r2, [r1]
 8009422:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009424:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1e3      	bne.n	80093f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2220      	movs	r2, #32
 800942e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	330c      	adds	r3, #12
 800943e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009440:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009442:	e853 3f00 	ldrex	r3, [r3]
 8009446:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800944a:	f023 0310 	bic.w	r3, r3, #16
 800944e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	330c      	adds	r3, #12
 8009458:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800945c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800945e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009462:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009464:	e841 2300 	strex	r3, r2, [r1]
 8009468:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800946a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e3      	bne.n	8009438 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009474:	4618      	mov	r0, r3
 8009476:	f7fc fc63 	bl	8005d40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2202      	movs	r2, #2
 800947e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009488:	b29b      	uxth	r3, r3
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	b29b      	uxth	r3, r3
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f8c1 	bl	8009618 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009496:	e09b      	b.n	80095d0 <HAL_UART_IRQHandler+0x518>
 8009498:	08009b2f 	.word	0x08009b2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f000 808e 	beq.w	80095d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80094b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f000 8089 	beq.w	80095d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	330c      	adds	r3, #12
 80094c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094cc:	e853 3f00 	ldrex	r3, [r3]
 80094d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	330c      	adds	r3, #12
 80094e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80094e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80094e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094ee:	e841 2300 	strex	r3, r2, [r1]
 80094f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1e3      	bne.n	80094c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3314      	adds	r3, #20
 8009500:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009504:	e853 3f00 	ldrex	r3, [r3]
 8009508:	623b      	str	r3, [r7, #32]
   return(result);
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	f023 0301 	bic.w	r3, r3, #1
 8009510:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3314      	adds	r3, #20
 800951a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800951e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009520:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009522:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009526:	e841 2300 	strex	r3, r2, [r1]
 800952a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800952c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1e3      	bne.n	80094fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2220      	movs	r2, #32
 8009536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	330c      	adds	r3, #12
 8009546:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	e853 3f00 	ldrex	r3, [r3]
 800954e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f023 0310 	bic.w	r3, r3, #16
 8009556:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	330c      	adds	r3, #12
 8009560:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009564:	61fa      	str	r2, [r7, #28]
 8009566:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009568:	69b9      	ldr	r1, [r7, #24]
 800956a:	69fa      	ldr	r2, [r7, #28]
 800956c:	e841 2300 	strex	r3, r2, [r1]
 8009570:	617b      	str	r3, [r7, #20]
   return(result);
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1e3      	bne.n	8009540 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800957e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009582:	4619      	mov	r1, r3
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f847 	bl	8009618 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800958a:	e023      	b.n	80095d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800958c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009594:	2b00      	cmp	r3, #0
 8009596:	d009      	beq.n	80095ac <HAL_UART_IRQHandler+0x4f4>
 8009598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800959c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d003      	beq.n	80095ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 fad6 	bl	8009b56 <UART_Transmit_IT>
    return;
 80095aa:	e014      	b.n	80095d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80095ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00e      	beq.n	80095d6 <HAL_UART_IRQHandler+0x51e>
 80095b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d008      	beq.n	80095d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fb16 	bl	8009bf6 <UART_EndTransmit_IT>
    return;
 80095ca:	e004      	b.n	80095d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80095cc:	bf00      	nop
 80095ce:	e002      	b.n	80095d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80095d0:	bf00      	nop
 80095d2:	e000      	b.n	80095d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80095d4:	bf00      	nop
  }
}
 80095d6:	37e8      	adds	r7, #232	@ 0xe8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b090      	sub	sp, #64	@ 0x40
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800963c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009648:	2b00      	cmp	r3, #0
 800964a:	d137      	bne.n	80096bc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800964c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800964e:	2200      	movs	r2, #0
 8009650:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3314      	adds	r3, #20
 8009658:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	623b      	str	r3, [r7, #32]
   return(result);
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009668:	63bb      	str	r3, [r7, #56]	@ 0x38
 800966a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3314      	adds	r3, #20
 8009670:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009672:	633a      	str	r2, [r7, #48]	@ 0x30
 8009674:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009676:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800967a:	e841 2300 	strex	r3, r2, [r1]
 800967e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1e5      	bne.n	8009652 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	330c      	adds	r3, #12
 800968c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	e853 3f00 	ldrex	r3, [r3]
 8009694:	60fb      	str	r3, [r7, #12]
   return(result);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800969c:	637b      	str	r3, [r7, #52]	@ 0x34
 800969e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	330c      	adds	r3, #12
 80096a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096a6:	61fa      	str	r2, [r7, #28]
 80096a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096aa:	69b9      	ldr	r1, [r7, #24]
 80096ac:	69fa      	ldr	r2, [r7, #28]
 80096ae:	e841 2300 	strex	r3, r2, [r1]
 80096b2:	617b      	str	r3, [r7, #20]
   return(result);
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1e5      	bne.n	8009686 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096ba:	e002      	b.n	80096c2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80096bc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80096be:	f7fa fa07 	bl	8003ad0 <HAL_UART_TxCpltCallback>
}
 80096c2:	bf00      	nop
 80096c4:	3740      	adds	r7, #64	@ 0x40
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b084      	sub	sp, #16
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f7ff ff7f 	bl	80095dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096de:	bf00      	nop
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b09c      	sub	sp, #112	@ 0x70
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d172      	bne.n	80097e8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009704:	2200      	movs	r2, #0
 8009706:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009708:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	330c      	adds	r3, #12
 800970e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009712:	e853 3f00 	ldrex	r3, [r3]
 8009716:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800971a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800971e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009720:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	330c      	adds	r3, #12
 8009726:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009728:	65ba      	str	r2, [r7, #88]	@ 0x58
 800972a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800972e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009730:	e841 2300 	strex	r3, r2, [r1]
 8009734:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009738:	2b00      	cmp	r3, #0
 800973a:	d1e5      	bne.n	8009708 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800973c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3314      	adds	r3, #20
 8009742:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009746:	e853 3f00 	ldrex	r3, [r3]
 800974a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800974c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800974e:	f023 0301 	bic.w	r3, r3, #1
 8009752:	667b      	str	r3, [r7, #100]	@ 0x64
 8009754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3314      	adds	r3, #20
 800975a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800975c:	647a      	str	r2, [r7, #68]	@ 0x44
 800975e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009762:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800976a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e5      	bne.n	800973c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3314      	adds	r3, #20
 8009776:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	623b      	str	r3, [r7, #32]
   return(result);
 8009780:	6a3b      	ldr	r3, [r7, #32]
 8009782:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009786:	663b      	str	r3, [r7, #96]	@ 0x60
 8009788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3314      	adds	r3, #20
 800978e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009790:	633a      	str	r2, [r7, #48]	@ 0x30
 8009792:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009794:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009798:	e841 2300 	strex	r3, r2, [r1]
 800979c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800979e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e5      	bne.n	8009770 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80097a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097a6:	2220      	movs	r2, #32
 80097a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d119      	bne.n	80097e8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	330c      	adds	r3, #12
 80097ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	e853 3f00 	ldrex	r3, [r3]
 80097c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f023 0310 	bic.w	r3, r3, #16
 80097ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	330c      	adds	r3, #12
 80097d2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80097d4:	61fa      	str	r2, [r7, #28]
 80097d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d8:	69b9      	ldr	r1, [r7, #24]
 80097da:	69fa      	ldr	r2, [r7, #28]
 80097dc:	e841 2300 	strex	r3, r2, [r1]
 80097e0:	617b      	str	r3, [r7, #20]
   return(result);
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1e5      	bne.n	80097b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097ea:	2200      	movs	r2, #0
 80097ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d106      	bne.n	8009804 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80097fa:	4619      	mov	r1, r3
 80097fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80097fe:	f7ff ff0b 	bl	8009618 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009802:	e002      	b.n	800980a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009804:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009806:	f7fa f97f 	bl	8003b08 <HAL_UART_RxCpltCallback>
}
 800980a:	bf00      	nop
 800980c:	3770      	adds	r7, #112	@ 0x70
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800981e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2201      	movs	r2, #1
 8009824:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800982a:	2b01      	cmp	r3, #1
 800982c:	d108      	bne.n	8009840 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009832:	085b      	lsrs	r3, r3, #1
 8009834:	b29b      	uxth	r3, r3
 8009836:	4619      	mov	r1, r3
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f7ff feed 	bl	8009618 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800983e:	e002      	b.n	8009846 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f7ff fed5 	bl	80095f0 <HAL_UART_RxHalfCpltCallback>
}
 8009846:	bf00      	nop
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b084      	sub	sp, #16
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009856:	2300      	movs	r3, #0
 8009858:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800985e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800986a:	2b80      	cmp	r3, #128	@ 0x80
 800986c:	bf0c      	ite	eq
 800986e:	2301      	moveq	r3, #1
 8009870:	2300      	movne	r3, #0
 8009872:	b2db      	uxtb	r3, r3
 8009874:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b21      	cmp	r3, #33	@ 0x21
 8009880:	d108      	bne.n	8009894 <UART_DMAError+0x46>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d005      	beq.n	8009894 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	2200      	movs	r2, #0
 800988c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800988e:	68b8      	ldr	r0, [r7, #8]
 8009890:	f000 f8c2 	bl	8009a18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800989e:	2b40      	cmp	r3, #64	@ 0x40
 80098a0:	bf0c      	ite	eq
 80098a2:	2301      	moveq	r3, #1
 80098a4:	2300      	movne	r3, #0
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	2b22      	cmp	r3, #34	@ 0x22
 80098b4:	d108      	bne.n	80098c8 <UART_DMAError+0x7a>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d005      	beq.n	80098c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	2200      	movs	r2, #0
 80098c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80098c2:	68b8      	ldr	r0, [r7, #8]
 80098c4:	f000 f8d0 	bl	8009a68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098cc:	f043 0210 	orr.w	r2, r3, #16
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098d4:	68b8      	ldr	r0, [r7, #8]
 80098d6:	f7ff fe95 	bl	8009604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098da:	bf00      	nop
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
	...

080098e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b098      	sub	sp, #96	@ 0x60
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	4613      	mov	r3, r2
 80098f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	88fa      	ldrh	r2, [r7, #6]
 80098fc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2222      	movs	r2, #34	@ 0x22
 8009908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009910:	4a3e      	ldr	r2, [pc, #248]	@ (8009a0c <UART_Start_Receive_DMA+0x128>)
 8009912:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009918:	4a3d      	ldr	r2, [pc, #244]	@ (8009a10 <UART_Start_Receive_DMA+0x12c>)
 800991a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009920:	4a3c      	ldr	r2, [pc, #240]	@ (8009a14 <UART_Start_Receive_DMA+0x130>)
 8009922:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009928:	2200      	movs	r2, #0
 800992a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800992c:	f107 0308 	add.w	r3, r7, #8
 8009930:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3304      	adds	r3, #4
 800993c:	4619      	mov	r1, r3
 800993e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	88fb      	ldrh	r3, [r7, #6]
 8009944:	f7fc f9a4 	bl	8005c90 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009948:	2300      	movs	r3, #0
 800994a:	613b      	str	r3, [r7, #16]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	613b      	str	r3, [r7, #16]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	613b      	str	r3, [r7, #16]
 800995c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d019      	beq.n	800999a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	330c      	adds	r3, #12
 800996c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009970:	e853 3f00 	ldrex	r3, [r3]
 8009974:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800997c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	330c      	adds	r3, #12
 8009984:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009986:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009988:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800998c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800998e:	e841 2300 	strex	r3, r2, [r1]
 8009992:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1e5      	bne.n	8009966 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	3314      	adds	r3, #20
 80099a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a4:	e853 3f00 	ldrex	r3, [r3]
 80099a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ac:	f043 0301 	orr.w	r3, r3, #1
 80099b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	3314      	adds	r3, #20
 80099b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80099ba:	63ba      	str	r2, [r7, #56]	@ 0x38
 80099bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80099c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099c2:	e841 2300 	strex	r3, r2, [r1]
 80099c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1e5      	bne.n	800999a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	3314      	adds	r3, #20
 80099d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	e853 3f00 	ldrex	r3, [r3]
 80099dc:	617b      	str	r3, [r7, #20]
   return(result);
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3314      	adds	r3, #20
 80099ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80099ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80099f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f2:	6a39      	ldr	r1, [r7, #32]
 80099f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099f6:	e841 2300 	strex	r3, r2, [r1]
 80099fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1e5      	bne.n	80099ce <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3760      	adds	r7, #96	@ 0x60
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	080096e7 	.word	0x080096e7
 8009a10:	08009813 	.word	0x08009813
 8009a14:	0800984f 	.word	0x0800984f

08009a18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b089      	sub	sp, #36	@ 0x24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	330c      	adds	r3, #12
 8009a26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	e853 3f00 	ldrex	r3, [r3]
 8009a2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009a36:	61fb      	str	r3, [r7, #28]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	330c      	adds	r3, #12
 8009a3e:	69fa      	ldr	r2, [r7, #28]
 8009a40:	61ba      	str	r2, [r7, #24]
 8009a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a44:	6979      	ldr	r1, [r7, #20]
 8009a46:	69ba      	ldr	r2, [r7, #24]
 8009a48:	e841 2300 	strex	r3, r2, [r1]
 8009a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1e5      	bne.n	8009a20 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2220      	movs	r2, #32
 8009a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009a5c:	bf00      	nop
 8009a5e:	3724      	adds	r7, #36	@ 0x24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b095      	sub	sp, #84	@ 0x54
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	330c      	adds	r3, #12
 8009a76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a7a:	e853 3f00 	ldrex	r3, [r3]
 8009a7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	330c      	adds	r3, #12
 8009a8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a90:	643a      	str	r2, [r7, #64]	@ 0x40
 8009a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a98:	e841 2300 	strex	r3, r2, [r1]
 8009a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1e5      	bne.n	8009a70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	3314      	adds	r3, #20
 8009aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aac:	6a3b      	ldr	r3, [r7, #32]
 8009aae:	e853 3f00 	ldrex	r3, [r3]
 8009ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	f023 0301 	bic.w	r3, r3, #1
 8009aba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3314      	adds	r3, #20
 8009ac2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ac4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009acc:	e841 2300 	strex	r3, r2, [r1]
 8009ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1e5      	bne.n	8009aa4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d119      	bne.n	8009b14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	330c      	adds	r3, #12
 8009ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	e853 3f00 	ldrex	r3, [r3]
 8009aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	f023 0310 	bic.w	r3, r3, #16
 8009af6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	330c      	adds	r3, #12
 8009afe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b00:	61ba      	str	r2, [r7, #24]
 8009b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b04:	6979      	ldr	r1, [r7, #20]
 8009b06:	69ba      	ldr	r2, [r7, #24]
 8009b08:	e841 2300 	strex	r3, r2, [r1]
 8009b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1e5      	bne.n	8009ae0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2220      	movs	r2, #32
 8009b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009b22:	bf00      	nop
 8009b24:	3754      	adds	r7, #84	@ 0x54
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr

08009b2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b084      	sub	sp, #16
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f7ff fd5b 	bl	8009604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b4e:	bf00      	nop
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009b56:	b480      	push	{r7}
 8009b58:	b085      	sub	sp, #20
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	2b21      	cmp	r3, #33	@ 0x21
 8009b68:	d13e      	bne.n	8009be8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b72:	d114      	bne.n	8009b9e <UART_Transmit_IT+0x48>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d110      	bne.n	8009b9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a1b      	ldr	r3, [r3, #32]
 8009b80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	461a      	mov	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a1b      	ldr	r3, [r3, #32]
 8009b96:	1c9a      	adds	r2, r3, #2
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	621a      	str	r2, [r3, #32]
 8009b9c:	e008      	b.n	8009bb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a1b      	ldr	r3, [r3, #32]
 8009ba2:	1c59      	adds	r1, r3, #1
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	6211      	str	r1, [r2, #32]
 8009ba8:	781a      	ldrb	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d10f      	bne.n	8009be4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68da      	ldr	r2, [r3, #12]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009bd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68da      	ldr	r2, [r3, #12]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009be2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	e000      	b.n	8009bea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009be8:	2302      	movs	r3, #2
  }
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b082      	sub	sp, #8
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68da      	ldr	r2, [r3, #12]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2220      	movs	r2, #32
 8009c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7f9 ff5a 	bl	8003ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b08c      	sub	sp, #48	@ 0x30
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b22      	cmp	r3, #34	@ 0x22
 8009c38:	f040 80ae 	bne.w	8009d98 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c44:	d117      	bne.n	8009c76 <UART_Receive_IT+0x50>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d113      	bne.n	8009c76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c56:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c6e:	1c9a      	adds	r2, r3, #2
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	629a      	str	r2, [r3, #40]	@ 0x28
 8009c74:	e026      	b.n	8009cc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c88:	d007      	beq.n	8009c9a <UART_Receive_IT+0x74>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10a      	bne.n	8009ca8 <UART_Receive_IT+0x82>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d106      	bne.n	8009ca8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca4:	701a      	strb	r2, [r3, #0]
 8009ca6:	e008      	b.n	8009cba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cb4:	b2da      	uxtb	r2, r3
 8009cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cbe:	1c5a      	adds	r2, r3, #1
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d15d      	bne.n	8009d94 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68da      	ldr	r2, [r3, #12]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f022 0220 	bic.w	r2, r2, #32
 8009ce6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68da      	ldr	r2, [r3, #12]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009cf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	695a      	ldr	r2, [r3, #20]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f022 0201 	bic.w	r2, r2, #1
 8009d06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d135      	bne.n	8009d8a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	330c      	adds	r3, #12
 8009d2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	e853 3f00 	ldrex	r3, [r3]
 8009d32:	613b      	str	r3, [r7, #16]
   return(result);
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	f023 0310 	bic.w	r3, r3, #16
 8009d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	330c      	adds	r3, #12
 8009d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d44:	623a      	str	r2, [r7, #32]
 8009d46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d48:	69f9      	ldr	r1, [r7, #28]
 8009d4a:	6a3a      	ldr	r2, [r7, #32]
 8009d4c:	e841 2300 	strex	r3, r2, [r1]
 8009d50:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1e5      	bne.n	8009d24 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f003 0310 	and.w	r3, r3, #16
 8009d62:	2b10      	cmp	r3, #16
 8009d64:	d10a      	bne.n	8009d7c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d66:	2300      	movs	r3, #0
 8009d68:	60fb      	str	r3, [r7, #12]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	60fb      	str	r3, [r7, #12]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	60fb      	str	r3, [r7, #12]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff fc48 	bl	8009618 <HAL_UARTEx_RxEventCallback>
 8009d88:	e002      	b.n	8009d90 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7f9 febc 	bl	8003b08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	e002      	b.n	8009d9a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009d94:	2300      	movs	r3, #0
 8009d96:	e000      	b.n	8009d9a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009d98:	2302      	movs	r3, #2
  }
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3730      	adds	r7, #48	@ 0x30
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
	...

08009da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009da8:	b0c0      	sub	sp, #256	@ 0x100
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dc0:	68d9      	ldr	r1, [r3, #12]
 8009dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	ea40 0301 	orr.w	r3, r0, r1
 8009dcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dd2:	689a      	ldr	r2, [r3, #8]
 8009dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	431a      	orrs	r2, r3
 8009ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	431a      	orrs	r2, r3
 8009de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009de8:	69db      	ldr	r3, [r3, #28]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009dfc:	f021 010c 	bic.w	r1, r1, #12
 8009e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009e0a:	430b      	orrs	r3, r1
 8009e0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e1e:	6999      	ldr	r1, [r3, #24]
 8009e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	ea40 0301 	orr.w	r3, r0, r1
 8009e2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	4b8f      	ldr	r3, [pc, #572]	@ (800a070 <UART_SetConfig+0x2cc>)
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d005      	beq.n	8009e44 <UART_SetConfig+0xa0>
 8009e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	4b8d      	ldr	r3, [pc, #564]	@ (800a074 <UART_SetConfig+0x2d0>)
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d104      	bne.n	8009e4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e44:	f7fd fda0 	bl	8007988 <HAL_RCC_GetPCLK2Freq>
 8009e48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009e4c:	e003      	b.n	8009e56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e4e:	f7fd fd87 	bl	8007960 <HAL_RCC_GetPCLK1Freq>
 8009e52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e5a:	69db      	ldr	r3, [r3, #28]
 8009e5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e60:	f040 810c 	bne.w	800a07c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009e6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009e72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009e76:	4622      	mov	r2, r4
 8009e78:	462b      	mov	r3, r5
 8009e7a:	1891      	adds	r1, r2, r2
 8009e7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009e7e:	415b      	adcs	r3, r3
 8009e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009e86:	4621      	mov	r1, r4
 8009e88:	eb12 0801 	adds.w	r8, r2, r1
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	eb43 0901 	adc.w	r9, r3, r1
 8009e92:	f04f 0200 	mov.w	r2, #0
 8009e96:	f04f 0300 	mov.w	r3, #0
 8009e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009ea6:	4690      	mov	r8, r2
 8009ea8:	4699      	mov	r9, r3
 8009eaa:	4623      	mov	r3, r4
 8009eac:	eb18 0303 	adds.w	r3, r8, r3
 8009eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009eb4:	462b      	mov	r3, r5
 8009eb6:	eb49 0303 	adc.w	r3, r9, r3
 8009eba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009eca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009ece:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	18db      	adds	r3, r3, r3
 8009ed6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ed8:	4613      	mov	r3, r2
 8009eda:	eb42 0303 	adc.w	r3, r2, r3
 8009ede:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ee0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009ee4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009ee8:	f7f6 fe64 	bl	8000bb4 <__aeabi_uldivmod>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4b61      	ldr	r3, [pc, #388]	@ (800a078 <UART_SetConfig+0x2d4>)
 8009ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8009ef6:	095b      	lsrs	r3, r3, #5
 8009ef8:	011c      	lsls	r4, r3, #4
 8009efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009efe:	2200      	movs	r2, #0
 8009f00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009f04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009f08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009f0c:	4642      	mov	r2, r8
 8009f0e:	464b      	mov	r3, r9
 8009f10:	1891      	adds	r1, r2, r2
 8009f12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009f14:	415b      	adcs	r3, r3
 8009f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009f1c:	4641      	mov	r1, r8
 8009f1e:	eb12 0a01 	adds.w	sl, r2, r1
 8009f22:	4649      	mov	r1, r9
 8009f24:	eb43 0b01 	adc.w	fp, r3, r1
 8009f28:	f04f 0200 	mov.w	r2, #0
 8009f2c:	f04f 0300 	mov.w	r3, #0
 8009f30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f3c:	4692      	mov	sl, r2
 8009f3e:	469b      	mov	fp, r3
 8009f40:	4643      	mov	r3, r8
 8009f42:	eb1a 0303 	adds.w	r3, sl, r3
 8009f46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f4a:	464b      	mov	r3, r9
 8009f4c:	eb4b 0303 	adc.w	r3, fp, r3
 8009f50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009f60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009f64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009f68:	460b      	mov	r3, r1
 8009f6a:	18db      	adds	r3, r3, r3
 8009f6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f6e:	4613      	mov	r3, r2
 8009f70:	eb42 0303 	adc.w	r3, r2, r3
 8009f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009f7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009f7e:	f7f6 fe19 	bl	8000bb4 <__aeabi_uldivmod>
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	4611      	mov	r1, r2
 8009f88:	4b3b      	ldr	r3, [pc, #236]	@ (800a078 <UART_SetConfig+0x2d4>)
 8009f8a:	fba3 2301 	umull	r2, r3, r3, r1
 8009f8e:	095b      	lsrs	r3, r3, #5
 8009f90:	2264      	movs	r2, #100	@ 0x64
 8009f92:	fb02 f303 	mul.w	r3, r2, r3
 8009f96:	1acb      	subs	r3, r1, r3
 8009f98:	00db      	lsls	r3, r3, #3
 8009f9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009f9e:	4b36      	ldr	r3, [pc, #216]	@ (800a078 <UART_SetConfig+0x2d4>)
 8009fa0:	fba3 2302 	umull	r2, r3, r3, r2
 8009fa4:	095b      	lsrs	r3, r3, #5
 8009fa6:	005b      	lsls	r3, r3, #1
 8009fa8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009fac:	441c      	add	r4, r3
 8009fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009fb8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009fbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009fc0:	4642      	mov	r2, r8
 8009fc2:	464b      	mov	r3, r9
 8009fc4:	1891      	adds	r1, r2, r2
 8009fc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009fc8:	415b      	adcs	r3, r3
 8009fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009fd0:	4641      	mov	r1, r8
 8009fd2:	1851      	adds	r1, r2, r1
 8009fd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8009fd6:	4649      	mov	r1, r9
 8009fd8:	414b      	adcs	r3, r1
 8009fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fdc:	f04f 0200 	mov.w	r2, #0
 8009fe0:	f04f 0300 	mov.w	r3, #0
 8009fe4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009fe8:	4659      	mov	r1, fp
 8009fea:	00cb      	lsls	r3, r1, #3
 8009fec:	4651      	mov	r1, sl
 8009fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ff2:	4651      	mov	r1, sl
 8009ff4:	00ca      	lsls	r2, r1, #3
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	4642      	mov	r2, r8
 8009ffe:	189b      	adds	r3, r3, r2
 800a000:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a004:	464b      	mov	r3, r9
 800a006:	460a      	mov	r2, r1
 800a008:	eb42 0303 	adc.w	r3, r2, r3
 800a00c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a01c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a020:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a024:	460b      	mov	r3, r1
 800a026:	18db      	adds	r3, r3, r3
 800a028:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a02a:	4613      	mov	r3, r2
 800a02c:	eb42 0303 	adc.w	r3, r2, r3
 800a030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a032:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a036:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a03a:	f7f6 fdbb 	bl	8000bb4 <__aeabi_uldivmod>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	4b0d      	ldr	r3, [pc, #52]	@ (800a078 <UART_SetConfig+0x2d4>)
 800a044:	fba3 1302 	umull	r1, r3, r3, r2
 800a048:	095b      	lsrs	r3, r3, #5
 800a04a:	2164      	movs	r1, #100	@ 0x64
 800a04c:	fb01 f303 	mul.w	r3, r1, r3
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	00db      	lsls	r3, r3, #3
 800a054:	3332      	adds	r3, #50	@ 0x32
 800a056:	4a08      	ldr	r2, [pc, #32]	@ (800a078 <UART_SetConfig+0x2d4>)
 800a058:	fba2 2303 	umull	r2, r3, r2, r3
 800a05c:	095b      	lsrs	r3, r3, #5
 800a05e:	f003 0207 	and.w	r2, r3, #7
 800a062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4422      	add	r2, r4
 800a06a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a06c:	e106      	b.n	800a27c <UART_SetConfig+0x4d8>
 800a06e:	bf00      	nop
 800a070:	40011000 	.word	0x40011000
 800a074:	40011400 	.word	0x40011400
 800a078:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a07c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a080:	2200      	movs	r2, #0
 800a082:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a086:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a08a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a08e:	4642      	mov	r2, r8
 800a090:	464b      	mov	r3, r9
 800a092:	1891      	adds	r1, r2, r2
 800a094:	6239      	str	r1, [r7, #32]
 800a096:	415b      	adcs	r3, r3
 800a098:	627b      	str	r3, [r7, #36]	@ 0x24
 800a09a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a09e:	4641      	mov	r1, r8
 800a0a0:	1854      	adds	r4, r2, r1
 800a0a2:	4649      	mov	r1, r9
 800a0a4:	eb43 0501 	adc.w	r5, r3, r1
 800a0a8:	f04f 0200 	mov.w	r2, #0
 800a0ac:	f04f 0300 	mov.w	r3, #0
 800a0b0:	00eb      	lsls	r3, r5, #3
 800a0b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a0b6:	00e2      	lsls	r2, r4, #3
 800a0b8:	4614      	mov	r4, r2
 800a0ba:	461d      	mov	r5, r3
 800a0bc:	4643      	mov	r3, r8
 800a0be:	18e3      	adds	r3, r4, r3
 800a0c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a0c4:	464b      	mov	r3, r9
 800a0c6:	eb45 0303 	adc.w	r3, r5, r3
 800a0ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a0ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a0da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a0de:	f04f 0200 	mov.w	r2, #0
 800a0e2:	f04f 0300 	mov.w	r3, #0
 800a0e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	008b      	lsls	r3, r1, #2
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	008a      	lsls	r2, r1, #2
 800a0f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a0fc:	f7f6 fd5a 	bl	8000bb4 <__aeabi_uldivmod>
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	4b60      	ldr	r3, [pc, #384]	@ (800a288 <UART_SetConfig+0x4e4>)
 800a106:	fba3 2302 	umull	r2, r3, r3, r2
 800a10a:	095b      	lsrs	r3, r3, #5
 800a10c:	011c      	lsls	r4, r3, #4
 800a10e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a112:	2200      	movs	r2, #0
 800a114:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a118:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a11c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a120:	4642      	mov	r2, r8
 800a122:	464b      	mov	r3, r9
 800a124:	1891      	adds	r1, r2, r2
 800a126:	61b9      	str	r1, [r7, #24]
 800a128:	415b      	adcs	r3, r3
 800a12a:	61fb      	str	r3, [r7, #28]
 800a12c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a130:	4641      	mov	r1, r8
 800a132:	1851      	adds	r1, r2, r1
 800a134:	6139      	str	r1, [r7, #16]
 800a136:	4649      	mov	r1, r9
 800a138:	414b      	adcs	r3, r1
 800a13a:	617b      	str	r3, [r7, #20]
 800a13c:	f04f 0200 	mov.w	r2, #0
 800a140:	f04f 0300 	mov.w	r3, #0
 800a144:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a148:	4659      	mov	r1, fp
 800a14a:	00cb      	lsls	r3, r1, #3
 800a14c:	4651      	mov	r1, sl
 800a14e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a152:	4651      	mov	r1, sl
 800a154:	00ca      	lsls	r2, r1, #3
 800a156:	4610      	mov	r0, r2
 800a158:	4619      	mov	r1, r3
 800a15a:	4603      	mov	r3, r0
 800a15c:	4642      	mov	r2, r8
 800a15e:	189b      	adds	r3, r3, r2
 800a160:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a164:	464b      	mov	r3, r9
 800a166:	460a      	mov	r2, r1
 800a168:	eb42 0303 	adc.w	r3, r2, r3
 800a16c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a17a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a17c:	f04f 0200 	mov.w	r2, #0
 800a180:	f04f 0300 	mov.w	r3, #0
 800a184:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a188:	4649      	mov	r1, r9
 800a18a:	008b      	lsls	r3, r1, #2
 800a18c:	4641      	mov	r1, r8
 800a18e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a192:	4641      	mov	r1, r8
 800a194:	008a      	lsls	r2, r1, #2
 800a196:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a19a:	f7f6 fd0b 	bl	8000bb4 <__aeabi_uldivmod>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4611      	mov	r1, r2
 800a1a4:	4b38      	ldr	r3, [pc, #224]	@ (800a288 <UART_SetConfig+0x4e4>)
 800a1a6:	fba3 2301 	umull	r2, r3, r3, r1
 800a1aa:	095b      	lsrs	r3, r3, #5
 800a1ac:	2264      	movs	r2, #100	@ 0x64
 800a1ae:	fb02 f303 	mul.w	r3, r2, r3
 800a1b2:	1acb      	subs	r3, r1, r3
 800a1b4:	011b      	lsls	r3, r3, #4
 800a1b6:	3332      	adds	r3, #50	@ 0x32
 800a1b8:	4a33      	ldr	r2, [pc, #204]	@ (800a288 <UART_SetConfig+0x4e4>)
 800a1ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a1be:	095b      	lsrs	r3, r3, #5
 800a1c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1c4:	441c      	add	r4, r3
 800a1c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	673b      	str	r3, [r7, #112]	@ 0x70
 800a1ce:	677a      	str	r2, [r7, #116]	@ 0x74
 800a1d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a1d4:	4642      	mov	r2, r8
 800a1d6:	464b      	mov	r3, r9
 800a1d8:	1891      	adds	r1, r2, r2
 800a1da:	60b9      	str	r1, [r7, #8]
 800a1dc:	415b      	adcs	r3, r3
 800a1de:	60fb      	str	r3, [r7, #12]
 800a1e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1e4:	4641      	mov	r1, r8
 800a1e6:	1851      	adds	r1, r2, r1
 800a1e8:	6039      	str	r1, [r7, #0]
 800a1ea:	4649      	mov	r1, r9
 800a1ec:	414b      	adcs	r3, r1
 800a1ee:	607b      	str	r3, [r7, #4]
 800a1f0:	f04f 0200 	mov.w	r2, #0
 800a1f4:	f04f 0300 	mov.w	r3, #0
 800a1f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a1fc:	4659      	mov	r1, fp
 800a1fe:	00cb      	lsls	r3, r1, #3
 800a200:	4651      	mov	r1, sl
 800a202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a206:	4651      	mov	r1, sl
 800a208:	00ca      	lsls	r2, r1, #3
 800a20a:	4610      	mov	r0, r2
 800a20c:	4619      	mov	r1, r3
 800a20e:	4603      	mov	r3, r0
 800a210:	4642      	mov	r2, r8
 800a212:	189b      	adds	r3, r3, r2
 800a214:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a216:	464b      	mov	r3, r9
 800a218:	460a      	mov	r2, r1
 800a21a:	eb42 0303 	adc.w	r3, r2, r3
 800a21e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	663b      	str	r3, [r7, #96]	@ 0x60
 800a22a:	667a      	str	r2, [r7, #100]	@ 0x64
 800a22c:	f04f 0200 	mov.w	r2, #0
 800a230:	f04f 0300 	mov.w	r3, #0
 800a234:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a238:	4649      	mov	r1, r9
 800a23a:	008b      	lsls	r3, r1, #2
 800a23c:	4641      	mov	r1, r8
 800a23e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a242:	4641      	mov	r1, r8
 800a244:	008a      	lsls	r2, r1, #2
 800a246:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a24a:	f7f6 fcb3 	bl	8000bb4 <__aeabi_uldivmod>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	4b0d      	ldr	r3, [pc, #52]	@ (800a288 <UART_SetConfig+0x4e4>)
 800a254:	fba3 1302 	umull	r1, r3, r3, r2
 800a258:	095b      	lsrs	r3, r3, #5
 800a25a:	2164      	movs	r1, #100	@ 0x64
 800a25c:	fb01 f303 	mul.w	r3, r1, r3
 800a260:	1ad3      	subs	r3, r2, r3
 800a262:	011b      	lsls	r3, r3, #4
 800a264:	3332      	adds	r3, #50	@ 0x32
 800a266:	4a08      	ldr	r2, [pc, #32]	@ (800a288 <UART_SetConfig+0x4e4>)
 800a268:	fba2 2303 	umull	r2, r3, r2, r3
 800a26c:	095b      	lsrs	r3, r3, #5
 800a26e:	f003 020f 	and.w	r2, r3, #15
 800a272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4422      	add	r2, r4
 800a27a:	609a      	str	r2, [r3, #8]
}
 800a27c:	bf00      	nop
 800a27e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a282:	46bd      	mov	sp, r7
 800a284:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a288:	51eb851f 	.word	0x51eb851f
 800a28c:	00000000 	.word	0x00000000

0800a290 <atan>:
 800a290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a294:	ec55 4b10 	vmov	r4, r5, d0
 800a298:	4bbf      	ldr	r3, [pc, #764]	@ (800a598 <atan+0x308>)
 800a29a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a29e:	429e      	cmp	r6, r3
 800a2a0:	46ab      	mov	fp, r5
 800a2a2:	d918      	bls.n	800a2d6 <atan+0x46>
 800a2a4:	4bbd      	ldr	r3, [pc, #756]	@ (800a59c <atan+0x30c>)
 800a2a6:	429e      	cmp	r6, r3
 800a2a8:	d801      	bhi.n	800a2ae <atan+0x1e>
 800a2aa:	d109      	bne.n	800a2c0 <atan+0x30>
 800a2ac:	b144      	cbz	r4, 800a2c0 <atan+0x30>
 800a2ae:	4622      	mov	r2, r4
 800a2b0:	462b      	mov	r3, r5
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	f7f5 ffb5 	bl	8000224 <__adddf3>
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	460d      	mov	r5, r1
 800a2be:	e006      	b.n	800a2ce <atan+0x3e>
 800a2c0:	f1bb 0f00 	cmp.w	fp, #0
 800a2c4:	f340 812b 	ble.w	800a51e <atan+0x28e>
 800a2c8:	a597      	add	r5, pc, #604	@ (adr r5, 800a528 <atan+0x298>)
 800a2ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a2ce:	ec45 4b10 	vmov	d0, r4, r5
 800a2d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d6:	4bb2      	ldr	r3, [pc, #712]	@ (800a5a0 <atan+0x310>)
 800a2d8:	429e      	cmp	r6, r3
 800a2da:	d813      	bhi.n	800a304 <atan+0x74>
 800a2dc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a2e0:	429e      	cmp	r6, r3
 800a2e2:	d80c      	bhi.n	800a2fe <atan+0x6e>
 800a2e4:	a392      	add	r3, pc, #584	@ (adr r3, 800a530 <atan+0x2a0>)
 800a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	4629      	mov	r1, r5
 800a2ee:	f7f5 ff99 	bl	8000224 <__adddf3>
 800a2f2:	4bac      	ldr	r3, [pc, #688]	@ (800a5a4 <atan+0x314>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f7f6 fbdb 	bl	8000ab0 <__aeabi_dcmpgt>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d1e7      	bne.n	800a2ce <atan+0x3e>
 800a2fe:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a302:	e029      	b.n	800a358 <atan+0xc8>
 800a304:	f000 f9b0 	bl	800a668 <fabs>
 800a308:	4ba7      	ldr	r3, [pc, #668]	@ (800a5a8 <atan+0x318>)
 800a30a:	429e      	cmp	r6, r3
 800a30c:	ec55 4b10 	vmov	r4, r5, d0
 800a310:	f200 80bc 	bhi.w	800a48c <atan+0x1fc>
 800a314:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a318:	429e      	cmp	r6, r3
 800a31a:	f200 809e 	bhi.w	800a45a <atan+0x1ca>
 800a31e:	4622      	mov	r2, r4
 800a320:	462b      	mov	r3, r5
 800a322:	4620      	mov	r0, r4
 800a324:	4629      	mov	r1, r5
 800a326:	f7f5 ff7d 	bl	8000224 <__adddf3>
 800a32a:	4b9e      	ldr	r3, [pc, #632]	@ (800a5a4 <atan+0x314>)
 800a32c:	2200      	movs	r2, #0
 800a32e:	f7f5 ff77 	bl	8000220 <__aeabi_dsub>
 800a332:	2200      	movs	r2, #0
 800a334:	4606      	mov	r6, r0
 800a336:	460f      	mov	r7, r1
 800a338:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a33c:	4620      	mov	r0, r4
 800a33e:	4629      	mov	r1, r5
 800a340:	f7f5 ff70 	bl	8000224 <__adddf3>
 800a344:	4602      	mov	r2, r0
 800a346:	460b      	mov	r3, r1
 800a348:	4630      	mov	r0, r6
 800a34a:	4639      	mov	r1, r7
 800a34c:	f7f6 fa4a 	bl	80007e4 <__aeabi_ddiv>
 800a350:	f04f 0a00 	mov.w	sl, #0
 800a354:	4604      	mov	r4, r0
 800a356:	460d      	mov	r5, r1
 800a358:	4622      	mov	r2, r4
 800a35a:	462b      	mov	r3, r5
 800a35c:	4620      	mov	r0, r4
 800a35e:	4629      	mov	r1, r5
 800a360:	f7f6 f916 	bl	8000590 <__aeabi_dmul>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4680      	mov	r8, r0
 800a36a:	4689      	mov	r9, r1
 800a36c:	f7f6 f910 	bl	8000590 <__aeabi_dmul>
 800a370:	a371      	add	r3, pc, #452	@ (adr r3, 800a538 <atan+0x2a8>)
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	4606      	mov	r6, r0
 800a378:	460f      	mov	r7, r1
 800a37a:	f7f6 f909 	bl	8000590 <__aeabi_dmul>
 800a37e:	a370      	add	r3, pc, #448	@ (adr r3, 800a540 <atan+0x2b0>)
 800a380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a384:	f7f5 ff4e 	bl	8000224 <__adddf3>
 800a388:	4632      	mov	r2, r6
 800a38a:	463b      	mov	r3, r7
 800a38c:	f7f6 f900 	bl	8000590 <__aeabi_dmul>
 800a390:	a36d      	add	r3, pc, #436	@ (adr r3, 800a548 <atan+0x2b8>)
 800a392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a396:	f7f5 ff45 	bl	8000224 <__adddf3>
 800a39a:	4632      	mov	r2, r6
 800a39c:	463b      	mov	r3, r7
 800a39e:	f7f6 f8f7 	bl	8000590 <__aeabi_dmul>
 800a3a2:	a36b      	add	r3, pc, #428	@ (adr r3, 800a550 <atan+0x2c0>)
 800a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a8:	f7f5 ff3c 	bl	8000224 <__adddf3>
 800a3ac:	4632      	mov	r2, r6
 800a3ae:	463b      	mov	r3, r7
 800a3b0:	f7f6 f8ee 	bl	8000590 <__aeabi_dmul>
 800a3b4:	a368      	add	r3, pc, #416	@ (adr r3, 800a558 <atan+0x2c8>)
 800a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ba:	f7f5 ff33 	bl	8000224 <__adddf3>
 800a3be:	4632      	mov	r2, r6
 800a3c0:	463b      	mov	r3, r7
 800a3c2:	f7f6 f8e5 	bl	8000590 <__aeabi_dmul>
 800a3c6:	a366      	add	r3, pc, #408	@ (adr r3, 800a560 <atan+0x2d0>)
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	f7f5 ff2a 	bl	8000224 <__adddf3>
 800a3d0:	4642      	mov	r2, r8
 800a3d2:	464b      	mov	r3, r9
 800a3d4:	f7f6 f8dc 	bl	8000590 <__aeabi_dmul>
 800a3d8:	a363      	add	r3, pc, #396	@ (adr r3, 800a568 <atan+0x2d8>)
 800a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3de:	4680      	mov	r8, r0
 800a3e0:	4689      	mov	r9, r1
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	4639      	mov	r1, r7
 800a3e6:	f7f6 f8d3 	bl	8000590 <__aeabi_dmul>
 800a3ea:	a361      	add	r3, pc, #388	@ (adr r3, 800a570 <atan+0x2e0>)
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	f7f5 ff16 	bl	8000220 <__aeabi_dsub>
 800a3f4:	4632      	mov	r2, r6
 800a3f6:	463b      	mov	r3, r7
 800a3f8:	f7f6 f8ca 	bl	8000590 <__aeabi_dmul>
 800a3fc:	a35e      	add	r3, pc, #376	@ (adr r3, 800a578 <atan+0x2e8>)
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	f7f5 ff0d 	bl	8000220 <__aeabi_dsub>
 800a406:	4632      	mov	r2, r6
 800a408:	463b      	mov	r3, r7
 800a40a:	f7f6 f8c1 	bl	8000590 <__aeabi_dmul>
 800a40e:	a35c      	add	r3, pc, #368	@ (adr r3, 800a580 <atan+0x2f0>)
 800a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a414:	f7f5 ff04 	bl	8000220 <__aeabi_dsub>
 800a418:	4632      	mov	r2, r6
 800a41a:	463b      	mov	r3, r7
 800a41c:	f7f6 f8b8 	bl	8000590 <__aeabi_dmul>
 800a420:	a359      	add	r3, pc, #356	@ (adr r3, 800a588 <atan+0x2f8>)
 800a422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a426:	f7f5 fefb 	bl	8000220 <__aeabi_dsub>
 800a42a:	4632      	mov	r2, r6
 800a42c:	463b      	mov	r3, r7
 800a42e:	f7f6 f8af 	bl	8000590 <__aeabi_dmul>
 800a432:	4602      	mov	r2, r0
 800a434:	460b      	mov	r3, r1
 800a436:	4640      	mov	r0, r8
 800a438:	4649      	mov	r1, r9
 800a43a:	f7f5 fef3 	bl	8000224 <__adddf3>
 800a43e:	4622      	mov	r2, r4
 800a440:	462b      	mov	r3, r5
 800a442:	f7f6 f8a5 	bl	8000590 <__aeabi_dmul>
 800a446:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	d148      	bne.n	800a4e2 <atan+0x252>
 800a450:	4620      	mov	r0, r4
 800a452:	4629      	mov	r1, r5
 800a454:	f7f5 fee4 	bl	8000220 <__aeabi_dsub>
 800a458:	e72f      	b.n	800a2ba <atan+0x2a>
 800a45a:	4b52      	ldr	r3, [pc, #328]	@ (800a5a4 <atan+0x314>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	4620      	mov	r0, r4
 800a460:	4629      	mov	r1, r5
 800a462:	f7f5 fedd 	bl	8000220 <__aeabi_dsub>
 800a466:	4b4f      	ldr	r3, [pc, #316]	@ (800a5a4 <atan+0x314>)
 800a468:	4606      	mov	r6, r0
 800a46a:	460f      	mov	r7, r1
 800a46c:	2200      	movs	r2, #0
 800a46e:	4620      	mov	r0, r4
 800a470:	4629      	mov	r1, r5
 800a472:	f7f5 fed7 	bl	8000224 <__adddf3>
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	4630      	mov	r0, r6
 800a47c:	4639      	mov	r1, r7
 800a47e:	f7f6 f9b1 	bl	80007e4 <__aeabi_ddiv>
 800a482:	f04f 0a01 	mov.w	sl, #1
 800a486:	4604      	mov	r4, r0
 800a488:	460d      	mov	r5, r1
 800a48a:	e765      	b.n	800a358 <atan+0xc8>
 800a48c:	4b47      	ldr	r3, [pc, #284]	@ (800a5ac <atan+0x31c>)
 800a48e:	429e      	cmp	r6, r3
 800a490:	d21c      	bcs.n	800a4cc <atan+0x23c>
 800a492:	4b47      	ldr	r3, [pc, #284]	@ (800a5b0 <atan+0x320>)
 800a494:	2200      	movs	r2, #0
 800a496:	4620      	mov	r0, r4
 800a498:	4629      	mov	r1, r5
 800a49a:	f7f5 fec1 	bl	8000220 <__aeabi_dsub>
 800a49e:	4b44      	ldr	r3, [pc, #272]	@ (800a5b0 <atan+0x320>)
 800a4a0:	4606      	mov	r6, r0
 800a4a2:	460f      	mov	r7, r1
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	f7f6 f871 	bl	8000590 <__aeabi_dmul>
 800a4ae:	4b3d      	ldr	r3, [pc, #244]	@ (800a5a4 <atan+0x314>)
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f7f5 feb7 	bl	8000224 <__adddf3>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	4639      	mov	r1, r7
 800a4be:	f7f6 f991 	bl	80007e4 <__aeabi_ddiv>
 800a4c2:	f04f 0a02 	mov.w	sl, #2
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	460d      	mov	r5, r1
 800a4ca:	e745      	b.n	800a358 <atan+0xc8>
 800a4cc:	4622      	mov	r2, r4
 800a4ce:	462b      	mov	r3, r5
 800a4d0:	4938      	ldr	r1, [pc, #224]	@ (800a5b4 <atan+0x324>)
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	f7f6 f986 	bl	80007e4 <__aeabi_ddiv>
 800a4d8:	f04f 0a03 	mov.w	sl, #3
 800a4dc:	4604      	mov	r4, r0
 800a4de:	460d      	mov	r5, r1
 800a4e0:	e73a      	b.n	800a358 <atan+0xc8>
 800a4e2:	4b35      	ldr	r3, [pc, #212]	@ (800a5b8 <atan+0x328>)
 800a4e4:	4e35      	ldr	r6, [pc, #212]	@ (800a5bc <atan+0x32c>)
 800a4e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ee:	f7f5 fe97 	bl	8000220 <__aeabi_dsub>
 800a4f2:	4622      	mov	r2, r4
 800a4f4:	462b      	mov	r3, r5
 800a4f6:	f7f5 fe93 	bl	8000220 <__aeabi_dsub>
 800a4fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a506:	f7f5 fe8b 	bl	8000220 <__aeabi_dsub>
 800a50a:	f1bb 0f00 	cmp.w	fp, #0
 800a50e:	4604      	mov	r4, r0
 800a510:	460d      	mov	r5, r1
 800a512:	f6bf aedc 	bge.w	800a2ce <atan+0x3e>
 800a516:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a51a:	461d      	mov	r5, r3
 800a51c:	e6d7      	b.n	800a2ce <atan+0x3e>
 800a51e:	a51c      	add	r5, pc, #112	@ (adr r5, 800a590 <atan+0x300>)
 800a520:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a524:	e6d3      	b.n	800a2ce <atan+0x3e>
 800a526:	bf00      	nop
 800a528:	54442d18 	.word	0x54442d18
 800a52c:	3ff921fb 	.word	0x3ff921fb
 800a530:	8800759c 	.word	0x8800759c
 800a534:	7e37e43c 	.word	0x7e37e43c
 800a538:	e322da11 	.word	0xe322da11
 800a53c:	3f90ad3a 	.word	0x3f90ad3a
 800a540:	24760deb 	.word	0x24760deb
 800a544:	3fa97b4b 	.word	0x3fa97b4b
 800a548:	a0d03d51 	.word	0xa0d03d51
 800a54c:	3fb10d66 	.word	0x3fb10d66
 800a550:	c54c206e 	.word	0xc54c206e
 800a554:	3fb745cd 	.word	0x3fb745cd
 800a558:	920083ff 	.word	0x920083ff
 800a55c:	3fc24924 	.word	0x3fc24924
 800a560:	5555550d 	.word	0x5555550d
 800a564:	3fd55555 	.word	0x3fd55555
 800a568:	2c6a6c2f 	.word	0x2c6a6c2f
 800a56c:	bfa2b444 	.word	0xbfa2b444
 800a570:	52defd9a 	.word	0x52defd9a
 800a574:	3fadde2d 	.word	0x3fadde2d
 800a578:	af749a6d 	.word	0xaf749a6d
 800a57c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a580:	fe231671 	.word	0xfe231671
 800a584:	3fbc71c6 	.word	0x3fbc71c6
 800a588:	9998ebc4 	.word	0x9998ebc4
 800a58c:	3fc99999 	.word	0x3fc99999
 800a590:	54442d18 	.word	0x54442d18
 800a594:	bff921fb 	.word	0xbff921fb
 800a598:	440fffff 	.word	0x440fffff
 800a59c:	7ff00000 	.word	0x7ff00000
 800a5a0:	3fdbffff 	.word	0x3fdbffff
 800a5a4:	3ff00000 	.word	0x3ff00000
 800a5a8:	3ff2ffff 	.word	0x3ff2ffff
 800a5ac:	40038000 	.word	0x40038000
 800a5b0:	3ff80000 	.word	0x3ff80000
 800a5b4:	bff00000 	.word	0xbff00000
 800a5b8:	0800c468 	.word	0x0800c468
 800a5bc:	0800c488 	.word	0x0800c488

0800a5c0 <cos>:
 800a5c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5c2:	ec53 2b10 	vmov	r2, r3, d0
 800a5c6:	4826      	ldr	r0, [pc, #152]	@ (800a660 <cos+0xa0>)
 800a5c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a5cc:	4281      	cmp	r1, r0
 800a5ce:	d806      	bhi.n	800a5de <cos+0x1e>
 800a5d0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a658 <cos+0x98>
 800a5d4:	b005      	add	sp, #20
 800a5d6:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5da:	f000 b8a1 	b.w	800a720 <__kernel_cos>
 800a5de:	4821      	ldr	r0, [pc, #132]	@ (800a664 <cos+0xa4>)
 800a5e0:	4281      	cmp	r1, r0
 800a5e2:	d908      	bls.n	800a5f6 <cos+0x36>
 800a5e4:	4610      	mov	r0, r2
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	f7f5 fe1a 	bl	8000220 <__aeabi_dsub>
 800a5ec:	ec41 0b10 	vmov	d0, r0, r1
 800a5f0:	b005      	add	sp, #20
 800a5f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5f6:	4668      	mov	r0, sp
 800a5f8:	f000 fa16 	bl	800aa28 <__ieee754_rem_pio2>
 800a5fc:	f000 0003 	and.w	r0, r0, #3
 800a600:	2801      	cmp	r0, #1
 800a602:	d00b      	beq.n	800a61c <cos+0x5c>
 800a604:	2802      	cmp	r0, #2
 800a606:	d015      	beq.n	800a634 <cos+0x74>
 800a608:	b9d8      	cbnz	r0, 800a642 <cos+0x82>
 800a60a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a60e:	ed9d 0b00 	vldr	d0, [sp]
 800a612:	f000 f885 	bl	800a720 <__kernel_cos>
 800a616:	ec51 0b10 	vmov	r0, r1, d0
 800a61a:	e7e7      	b.n	800a5ec <cos+0x2c>
 800a61c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a620:	ed9d 0b00 	vldr	d0, [sp]
 800a624:	f000 f944 	bl	800a8b0 <__kernel_sin>
 800a628:	ec53 2b10 	vmov	r2, r3, d0
 800a62c:	4610      	mov	r0, r2
 800a62e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a632:	e7db      	b.n	800a5ec <cos+0x2c>
 800a634:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a638:	ed9d 0b00 	vldr	d0, [sp]
 800a63c:	f000 f870 	bl	800a720 <__kernel_cos>
 800a640:	e7f2      	b.n	800a628 <cos+0x68>
 800a642:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a646:	ed9d 0b00 	vldr	d0, [sp]
 800a64a:	2001      	movs	r0, #1
 800a64c:	f000 f930 	bl	800a8b0 <__kernel_sin>
 800a650:	e7e1      	b.n	800a616 <cos+0x56>
 800a652:	bf00      	nop
 800a654:	f3af 8000 	nop.w
	...
 800a660:	3fe921fb 	.word	0x3fe921fb
 800a664:	7fefffff 	.word	0x7fefffff

0800a668 <fabs>:
 800a668:	ec51 0b10 	vmov	r0, r1, d0
 800a66c:	4602      	mov	r2, r0
 800a66e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a672:	ec43 2b10 	vmov	d0, r2, r3
 800a676:	4770      	bx	lr

0800a678 <sin>:
 800a678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a67a:	ec53 2b10 	vmov	r2, r3, d0
 800a67e:	4826      	ldr	r0, [pc, #152]	@ (800a718 <sin+0xa0>)
 800a680:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a684:	4281      	cmp	r1, r0
 800a686:	d807      	bhi.n	800a698 <sin+0x20>
 800a688:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a710 <sin+0x98>
 800a68c:	2000      	movs	r0, #0
 800a68e:	b005      	add	sp, #20
 800a690:	f85d eb04 	ldr.w	lr, [sp], #4
 800a694:	f000 b90c 	b.w	800a8b0 <__kernel_sin>
 800a698:	4820      	ldr	r0, [pc, #128]	@ (800a71c <sin+0xa4>)
 800a69a:	4281      	cmp	r1, r0
 800a69c:	d908      	bls.n	800a6b0 <sin+0x38>
 800a69e:	4610      	mov	r0, r2
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	f7f5 fdbd 	bl	8000220 <__aeabi_dsub>
 800a6a6:	ec41 0b10 	vmov	d0, r0, r1
 800a6aa:	b005      	add	sp, #20
 800a6ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6b0:	4668      	mov	r0, sp
 800a6b2:	f000 f9b9 	bl	800aa28 <__ieee754_rem_pio2>
 800a6b6:	f000 0003 	and.w	r0, r0, #3
 800a6ba:	2801      	cmp	r0, #1
 800a6bc:	d00c      	beq.n	800a6d8 <sin+0x60>
 800a6be:	2802      	cmp	r0, #2
 800a6c0:	d011      	beq.n	800a6e6 <sin+0x6e>
 800a6c2:	b9e8      	cbnz	r0, 800a700 <sin+0x88>
 800a6c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6c8:	ed9d 0b00 	vldr	d0, [sp]
 800a6cc:	2001      	movs	r0, #1
 800a6ce:	f000 f8ef 	bl	800a8b0 <__kernel_sin>
 800a6d2:	ec51 0b10 	vmov	r0, r1, d0
 800a6d6:	e7e6      	b.n	800a6a6 <sin+0x2e>
 800a6d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6dc:	ed9d 0b00 	vldr	d0, [sp]
 800a6e0:	f000 f81e 	bl	800a720 <__kernel_cos>
 800a6e4:	e7f5      	b.n	800a6d2 <sin+0x5a>
 800a6e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6ea:	ed9d 0b00 	vldr	d0, [sp]
 800a6ee:	2001      	movs	r0, #1
 800a6f0:	f000 f8de 	bl	800a8b0 <__kernel_sin>
 800a6f4:	ec53 2b10 	vmov	r2, r3, d0
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a6fe:	e7d2      	b.n	800a6a6 <sin+0x2e>
 800a700:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a704:	ed9d 0b00 	vldr	d0, [sp]
 800a708:	f000 f80a 	bl	800a720 <__kernel_cos>
 800a70c:	e7f2      	b.n	800a6f4 <sin+0x7c>
 800a70e:	bf00      	nop
	...
 800a718:	3fe921fb 	.word	0x3fe921fb
 800a71c:	7fefffff 	.word	0x7fefffff

0800a720 <__kernel_cos>:
 800a720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a724:	ec57 6b10 	vmov	r6, r7, d0
 800a728:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a72c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a730:	ed8d 1b00 	vstr	d1, [sp]
 800a734:	d206      	bcs.n	800a744 <__kernel_cos+0x24>
 800a736:	4630      	mov	r0, r6
 800a738:	4639      	mov	r1, r7
 800a73a:	f7f6 f9c3 	bl	8000ac4 <__aeabi_d2iz>
 800a73e:	2800      	cmp	r0, #0
 800a740:	f000 8088 	beq.w	800a854 <__kernel_cos+0x134>
 800a744:	4632      	mov	r2, r6
 800a746:	463b      	mov	r3, r7
 800a748:	4630      	mov	r0, r6
 800a74a:	4639      	mov	r1, r7
 800a74c:	f7f5 ff20 	bl	8000590 <__aeabi_dmul>
 800a750:	4b51      	ldr	r3, [pc, #324]	@ (800a898 <__kernel_cos+0x178>)
 800a752:	2200      	movs	r2, #0
 800a754:	4604      	mov	r4, r0
 800a756:	460d      	mov	r5, r1
 800a758:	f7f5 ff1a 	bl	8000590 <__aeabi_dmul>
 800a75c:	a340      	add	r3, pc, #256	@ (adr r3, 800a860 <__kernel_cos+0x140>)
 800a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a762:	4682      	mov	sl, r0
 800a764:	468b      	mov	fp, r1
 800a766:	4620      	mov	r0, r4
 800a768:	4629      	mov	r1, r5
 800a76a:	f7f5 ff11 	bl	8000590 <__aeabi_dmul>
 800a76e:	a33e      	add	r3, pc, #248	@ (adr r3, 800a868 <__kernel_cos+0x148>)
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	f7f5 fd56 	bl	8000224 <__adddf3>
 800a778:	4622      	mov	r2, r4
 800a77a:	462b      	mov	r3, r5
 800a77c:	f7f5 ff08 	bl	8000590 <__aeabi_dmul>
 800a780:	a33b      	add	r3, pc, #236	@ (adr r3, 800a870 <__kernel_cos+0x150>)
 800a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a786:	f7f5 fd4b 	bl	8000220 <__aeabi_dsub>
 800a78a:	4622      	mov	r2, r4
 800a78c:	462b      	mov	r3, r5
 800a78e:	f7f5 feff 	bl	8000590 <__aeabi_dmul>
 800a792:	a339      	add	r3, pc, #228	@ (adr r3, 800a878 <__kernel_cos+0x158>)
 800a794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a798:	f7f5 fd44 	bl	8000224 <__adddf3>
 800a79c:	4622      	mov	r2, r4
 800a79e:	462b      	mov	r3, r5
 800a7a0:	f7f5 fef6 	bl	8000590 <__aeabi_dmul>
 800a7a4:	a336      	add	r3, pc, #216	@ (adr r3, 800a880 <__kernel_cos+0x160>)
 800a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7aa:	f7f5 fd39 	bl	8000220 <__aeabi_dsub>
 800a7ae:	4622      	mov	r2, r4
 800a7b0:	462b      	mov	r3, r5
 800a7b2:	f7f5 feed 	bl	8000590 <__aeabi_dmul>
 800a7b6:	a334      	add	r3, pc, #208	@ (adr r3, 800a888 <__kernel_cos+0x168>)
 800a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7bc:	f7f5 fd32 	bl	8000224 <__adddf3>
 800a7c0:	4622      	mov	r2, r4
 800a7c2:	462b      	mov	r3, r5
 800a7c4:	f7f5 fee4 	bl	8000590 <__aeabi_dmul>
 800a7c8:	4622      	mov	r2, r4
 800a7ca:	462b      	mov	r3, r5
 800a7cc:	f7f5 fee0 	bl	8000590 <__aeabi_dmul>
 800a7d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	460d      	mov	r5, r1
 800a7d8:	4630      	mov	r0, r6
 800a7da:	4639      	mov	r1, r7
 800a7dc:	f7f5 fed8 	bl	8000590 <__aeabi_dmul>
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	4629      	mov	r1, r5
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f7f5 fd1a 	bl	8000220 <__aeabi_dsub>
 800a7ec:	4b2b      	ldr	r3, [pc, #172]	@ (800a89c <__kernel_cos+0x17c>)
 800a7ee:	4598      	cmp	r8, r3
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	460f      	mov	r7, r1
 800a7f4:	d810      	bhi.n	800a818 <__kernel_cos+0xf8>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	4650      	mov	r0, sl
 800a7fc:	4659      	mov	r1, fp
 800a7fe:	f7f5 fd0f 	bl	8000220 <__aeabi_dsub>
 800a802:	460b      	mov	r3, r1
 800a804:	4926      	ldr	r1, [pc, #152]	@ (800a8a0 <__kernel_cos+0x180>)
 800a806:	4602      	mov	r2, r0
 800a808:	2000      	movs	r0, #0
 800a80a:	f7f5 fd09 	bl	8000220 <__aeabi_dsub>
 800a80e:	ec41 0b10 	vmov	d0, r0, r1
 800a812:	b003      	add	sp, #12
 800a814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a818:	4b22      	ldr	r3, [pc, #136]	@ (800a8a4 <__kernel_cos+0x184>)
 800a81a:	4921      	ldr	r1, [pc, #132]	@ (800a8a0 <__kernel_cos+0x180>)
 800a81c:	4598      	cmp	r8, r3
 800a81e:	bf8c      	ite	hi
 800a820:	4d21      	ldrhi	r5, [pc, #132]	@ (800a8a8 <__kernel_cos+0x188>)
 800a822:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a826:	2400      	movs	r4, #0
 800a828:	4622      	mov	r2, r4
 800a82a:	462b      	mov	r3, r5
 800a82c:	2000      	movs	r0, #0
 800a82e:	f7f5 fcf7 	bl	8000220 <__aeabi_dsub>
 800a832:	4622      	mov	r2, r4
 800a834:	4680      	mov	r8, r0
 800a836:	4689      	mov	r9, r1
 800a838:	462b      	mov	r3, r5
 800a83a:	4650      	mov	r0, sl
 800a83c:	4659      	mov	r1, fp
 800a83e:	f7f5 fcef 	bl	8000220 <__aeabi_dsub>
 800a842:	4632      	mov	r2, r6
 800a844:	463b      	mov	r3, r7
 800a846:	f7f5 fceb 	bl	8000220 <__aeabi_dsub>
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	4640      	mov	r0, r8
 800a850:	4649      	mov	r1, r9
 800a852:	e7da      	b.n	800a80a <__kernel_cos+0xea>
 800a854:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a890 <__kernel_cos+0x170>
 800a858:	e7db      	b.n	800a812 <__kernel_cos+0xf2>
 800a85a:	bf00      	nop
 800a85c:	f3af 8000 	nop.w
 800a860:	be8838d4 	.word	0xbe8838d4
 800a864:	bda8fae9 	.word	0xbda8fae9
 800a868:	bdb4b1c4 	.word	0xbdb4b1c4
 800a86c:	3e21ee9e 	.word	0x3e21ee9e
 800a870:	809c52ad 	.word	0x809c52ad
 800a874:	3e927e4f 	.word	0x3e927e4f
 800a878:	19cb1590 	.word	0x19cb1590
 800a87c:	3efa01a0 	.word	0x3efa01a0
 800a880:	16c15177 	.word	0x16c15177
 800a884:	3f56c16c 	.word	0x3f56c16c
 800a888:	5555554c 	.word	0x5555554c
 800a88c:	3fa55555 	.word	0x3fa55555
 800a890:	00000000 	.word	0x00000000
 800a894:	3ff00000 	.word	0x3ff00000
 800a898:	3fe00000 	.word	0x3fe00000
 800a89c:	3fd33332 	.word	0x3fd33332
 800a8a0:	3ff00000 	.word	0x3ff00000
 800a8a4:	3fe90000 	.word	0x3fe90000
 800a8a8:	3fd20000 	.word	0x3fd20000
 800a8ac:	00000000 	.word	0x00000000

0800a8b0 <__kernel_sin>:
 800a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b4:	ec55 4b10 	vmov	r4, r5, d0
 800a8b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a8bc:	b085      	sub	sp, #20
 800a8be:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a8c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a8c6:	4680      	mov	r8, r0
 800a8c8:	d205      	bcs.n	800a8d6 <__kernel_sin+0x26>
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	f7f6 f8f9 	bl	8000ac4 <__aeabi_d2iz>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d052      	beq.n	800a97c <__kernel_sin+0xcc>
 800a8d6:	4622      	mov	r2, r4
 800a8d8:	462b      	mov	r3, r5
 800a8da:	4620      	mov	r0, r4
 800a8dc:	4629      	mov	r1, r5
 800a8de:	f7f5 fe57 	bl	8000590 <__aeabi_dmul>
 800a8e2:	4682      	mov	sl, r0
 800a8e4:	468b      	mov	fp, r1
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	f7f5 fe4f 	bl	8000590 <__aeabi_dmul>
 800a8f2:	a342      	add	r3, pc, #264	@ (adr r3, 800a9fc <__kernel_sin+0x14c>)
 800a8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f8:	e9cd 0100 	strd	r0, r1, [sp]
 800a8fc:	4650      	mov	r0, sl
 800a8fe:	4659      	mov	r1, fp
 800a900:	f7f5 fe46 	bl	8000590 <__aeabi_dmul>
 800a904:	a33f      	add	r3, pc, #252	@ (adr r3, 800aa04 <__kernel_sin+0x154>)
 800a906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90a:	f7f5 fc89 	bl	8000220 <__aeabi_dsub>
 800a90e:	4652      	mov	r2, sl
 800a910:	465b      	mov	r3, fp
 800a912:	f7f5 fe3d 	bl	8000590 <__aeabi_dmul>
 800a916:	a33d      	add	r3, pc, #244	@ (adr r3, 800aa0c <__kernel_sin+0x15c>)
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	f7f5 fc82 	bl	8000224 <__adddf3>
 800a920:	4652      	mov	r2, sl
 800a922:	465b      	mov	r3, fp
 800a924:	f7f5 fe34 	bl	8000590 <__aeabi_dmul>
 800a928:	a33a      	add	r3, pc, #232	@ (adr r3, 800aa14 <__kernel_sin+0x164>)
 800a92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92e:	f7f5 fc77 	bl	8000220 <__aeabi_dsub>
 800a932:	4652      	mov	r2, sl
 800a934:	465b      	mov	r3, fp
 800a936:	f7f5 fe2b 	bl	8000590 <__aeabi_dmul>
 800a93a:	a338      	add	r3, pc, #224	@ (adr r3, 800aa1c <__kernel_sin+0x16c>)
 800a93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a940:	f7f5 fc70 	bl	8000224 <__adddf3>
 800a944:	4606      	mov	r6, r0
 800a946:	460f      	mov	r7, r1
 800a948:	f1b8 0f00 	cmp.w	r8, #0
 800a94c:	d11b      	bne.n	800a986 <__kernel_sin+0xd6>
 800a94e:	4602      	mov	r2, r0
 800a950:	460b      	mov	r3, r1
 800a952:	4650      	mov	r0, sl
 800a954:	4659      	mov	r1, fp
 800a956:	f7f5 fe1b 	bl	8000590 <__aeabi_dmul>
 800a95a:	a325      	add	r3, pc, #148	@ (adr r3, 800a9f0 <__kernel_sin+0x140>)
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	f7f5 fc5e 	bl	8000220 <__aeabi_dsub>
 800a964:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a968:	f7f5 fe12 	bl	8000590 <__aeabi_dmul>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4620      	mov	r0, r4
 800a972:	4629      	mov	r1, r5
 800a974:	f7f5 fc56 	bl	8000224 <__adddf3>
 800a978:	4604      	mov	r4, r0
 800a97a:	460d      	mov	r5, r1
 800a97c:	ec45 4b10 	vmov	d0, r4, r5
 800a980:	b005      	add	sp, #20
 800a982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a98a:	4b1b      	ldr	r3, [pc, #108]	@ (800a9f8 <__kernel_sin+0x148>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	f7f5 fdff 	bl	8000590 <__aeabi_dmul>
 800a992:	4632      	mov	r2, r6
 800a994:	4680      	mov	r8, r0
 800a996:	4689      	mov	r9, r1
 800a998:	463b      	mov	r3, r7
 800a99a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a99e:	f7f5 fdf7 	bl	8000590 <__aeabi_dmul>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	4640      	mov	r0, r8
 800a9a8:	4649      	mov	r1, r9
 800a9aa:	f7f5 fc39 	bl	8000220 <__aeabi_dsub>
 800a9ae:	4652      	mov	r2, sl
 800a9b0:	465b      	mov	r3, fp
 800a9b2:	f7f5 fded 	bl	8000590 <__aeabi_dmul>
 800a9b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9ba:	f7f5 fc31 	bl	8000220 <__aeabi_dsub>
 800a9be:	a30c      	add	r3, pc, #48	@ (adr r3, 800a9f0 <__kernel_sin+0x140>)
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	4606      	mov	r6, r0
 800a9c6:	460f      	mov	r7, r1
 800a9c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9cc:	f7f5 fde0 	bl	8000590 <__aeabi_dmul>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	4639      	mov	r1, r7
 800a9d8:	f7f5 fc24 	bl	8000224 <__adddf3>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	4629      	mov	r1, r5
 800a9e4:	f7f5 fc1c 	bl	8000220 <__aeabi_dsub>
 800a9e8:	e7c6      	b.n	800a978 <__kernel_sin+0xc8>
 800a9ea:	bf00      	nop
 800a9ec:	f3af 8000 	nop.w
 800a9f0:	55555549 	.word	0x55555549
 800a9f4:	3fc55555 	.word	0x3fc55555
 800a9f8:	3fe00000 	.word	0x3fe00000
 800a9fc:	5acfd57c 	.word	0x5acfd57c
 800aa00:	3de5d93a 	.word	0x3de5d93a
 800aa04:	8a2b9ceb 	.word	0x8a2b9ceb
 800aa08:	3e5ae5e6 	.word	0x3e5ae5e6
 800aa0c:	57b1fe7d 	.word	0x57b1fe7d
 800aa10:	3ec71de3 	.word	0x3ec71de3
 800aa14:	19c161d5 	.word	0x19c161d5
 800aa18:	3f2a01a0 	.word	0x3f2a01a0
 800aa1c:	1110f8a6 	.word	0x1110f8a6
 800aa20:	3f811111 	.word	0x3f811111
 800aa24:	00000000 	.word	0x00000000

0800aa28 <__ieee754_rem_pio2>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	ec57 6b10 	vmov	r6, r7, d0
 800aa30:	4bc5      	ldr	r3, [pc, #788]	@ (800ad48 <__ieee754_rem_pio2+0x320>)
 800aa32:	b08d      	sub	sp, #52	@ 0x34
 800aa34:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800aa38:	4598      	cmp	r8, r3
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	9704      	str	r7, [sp, #16]
 800aa3e:	d807      	bhi.n	800aa50 <__ieee754_rem_pio2+0x28>
 800aa40:	2200      	movs	r2, #0
 800aa42:	2300      	movs	r3, #0
 800aa44:	ed80 0b00 	vstr	d0, [r0]
 800aa48:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800aa4c:	2500      	movs	r5, #0
 800aa4e:	e028      	b.n	800aaa2 <__ieee754_rem_pio2+0x7a>
 800aa50:	4bbe      	ldr	r3, [pc, #760]	@ (800ad4c <__ieee754_rem_pio2+0x324>)
 800aa52:	4598      	cmp	r8, r3
 800aa54:	d878      	bhi.n	800ab48 <__ieee754_rem_pio2+0x120>
 800aa56:	9b04      	ldr	r3, [sp, #16]
 800aa58:	4dbd      	ldr	r5, [pc, #756]	@ (800ad50 <__ieee754_rem_pio2+0x328>)
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ad10 <__ieee754_rem_pio2+0x2e8>)
 800aa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa64:	4639      	mov	r1, r7
 800aa66:	dd38      	ble.n	800aada <__ieee754_rem_pio2+0xb2>
 800aa68:	f7f5 fbda 	bl	8000220 <__aeabi_dsub>
 800aa6c:	45a8      	cmp	r8, r5
 800aa6e:	4606      	mov	r6, r0
 800aa70:	460f      	mov	r7, r1
 800aa72:	d01a      	beq.n	800aaaa <__ieee754_rem_pio2+0x82>
 800aa74:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ad18 <__ieee754_rem_pio2+0x2f0>)
 800aa76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7a:	f7f5 fbd1 	bl	8000220 <__aeabi_dsub>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	4680      	mov	r8, r0
 800aa84:	4689      	mov	r9, r1
 800aa86:	4630      	mov	r0, r6
 800aa88:	4639      	mov	r1, r7
 800aa8a:	f7f5 fbc9 	bl	8000220 <__aeabi_dsub>
 800aa8e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ad18 <__ieee754_rem_pio2+0x2f0>)
 800aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa94:	f7f5 fbc4 	bl	8000220 <__aeabi_dsub>
 800aa98:	e9c4 8900 	strd	r8, r9, [r4]
 800aa9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aaa0:	2501      	movs	r5, #1
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	b00d      	add	sp, #52	@ 0x34
 800aaa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaaa:	a39d      	add	r3, pc, #628	@ (adr r3, 800ad20 <__ieee754_rem_pio2+0x2f8>)
 800aaac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab0:	f7f5 fbb6 	bl	8000220 <__aeabi_dsub>
 800aab4:	a39c      	add	r3, pc, #624	@ (adr r3, 800ad28 <__ieee754_rem_pio2+0x300>)
 800aab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaba:	4606      	mov	r6, r0
 800aabc:	460f      	mov	r7, r1
 800aabe:	f7f5 fbaf 	bl	8000220 <__aeabi_dsub>
 800aac2:	4602      	mov	r2, r0
 800aac4:	460b      	mov	r3, r1
 800aac6:	4680      	mov	r8, r0
 800aac8:	4689      	mov	r9, r1
 800aaca:	4630      	mov	r0, r6
 800aacc:	4639      	mov	r1, r7
 800aace:	f7f5 fba7 	bl	8000220 <__aeabi_dsub>
 800aad2:	a395      	add	r3, pc, #596	@ (adr r3, 800ad28 <__ieee754_rem_pio2+0x300>)
 800aad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad8:	e7dc      	b.n	800aa94 <__ieee754_rem_pio2+0x6c>
 800aada:	f7f5 fba3 	bl	8000224 <__adddf3>
 800aade:	45a8      	cmp	r8, r5
 800aae0:	4606      	mov	r6, r0
 800aae2:	460f      	mov	r7, r1
 800aae4:	d018      	beq.n	800ab18 <__ieee754_rem_pio2+0xf0>
 800aae6:	a38c      	add	r3, pc, #560	@ (adr r3, 800ad18 <__ieee754_rem_pio2+0x2f0>)
 800aae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaec:	f7f5 fb9a 	bl	8000224 <__adddf3>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	4680      	mov	r8, r0
 800aaf6:	4689      	mov	r9, r1
 800aaf8:	4630      	mov	r0, r6
 800aafa:	4639      	mov	r1, r7
 800aafc:	f7f5 fb90 	bl	8000220 <__aeabi_dsub>
 800ab00:	a385      	add	r3, pc, #532	@ (adr r3, 800ad18 <__ieee754_rem_pio2+0x2f0>)
 800ab02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab06:	f7f5 fb8d 	bl	8000224 <__adddf3>
 800ab0a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800ab0e:	e9c4 8900 	strd	r8, r9, [r4]
 800ab12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ab16:	e7c4      	b.n	800aaa2 <__ieee754_rem_pio2+0x7a>
 800ab18:	a381      	add	r3, pc, #516	@ (adr r3, 800ad20 <__ieee754_rem_pio2+0x2f8>)
 800ab1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1e:	f7f5 fb81 	bl	8000224 <__adddf3>
 800ab22:	a381      	add	r3, pc, #516	@ (adr r3, 800ad28 <__ieee754_rem_pio2+0x300>)
 800ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab28:	4606      	mov	r6, r0
 800ab2a:	460f      	mov	r7, r1
 800ab2c:	f7f5 fb7a 	bl	8000224 <__adddf3>
 800ab30:	4602      	mov	r2, r0
 800ab32:	460b      	mov	r3, r1
 800ab34:	4680      	mov	r8, r0
 800ab36:	4689      	mov	r9, r1
 800ab38:	4630      	mov	r0, r6
 800ab3a:	4639      	mov	r1, r7
 800ab3c:	f7f5 fb70 	bl	8000220 <__aeabi_dsub>
 800ab40:	a379      	add	r3, pc, #484	@ (adr r3, 800ad28 <__ieee754_rem_pio2+0x300>)
 800ab42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab46:	e7de      	b.n	800ab06 <__ieee754_rem_pio2+0xde>
 800ab48:	4b82      	ldr	r3, [pc, #520]	@ (800ad54 <__ieee754_rem_pio2+0x32c>)
 800ab4a:	4598      	cmp	r8, r3
 800ab4c:	f200 80d1 	bhi.w	800acf2 <__ieee754_rem_pio2+0x2ca>
 800ab50:	f7ff fd8a 	bl	800a668 <fabs>
 800ab54:	ec57 6b10 	vmov	r6, r7, d0
 800ab58:	a375      	add	r3, pc, #468	@ (adr r3, 800ad30 <__ieee754_rem_pio2+0x308>)
 800ab5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5e:	4630      	mov	r0, r6
 800ab60:	4639      	mov	r1, r7
 800ab62:	f7f5 fd15 	bl	8000590 <__aeabi_dmul>
 800ab66:	4b7c      	ldr	r3, [pc, #496]	@ (800ad58 <__ieee754_rem_pio2+0x330>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f7f5 fb5b 	bl	8000224 <__adddf3>
 800ab6e:	f7f5 ffa9 	bl	8000ac4 <__aeabi_d2iz>
 800ab72:	4605      	mov	r5, r0
 800ab74:	f7f5 fca2 	bl	80004bc <__aeabi_i2d>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab80:	a363      	add	r3, pc, #396	@ (adr r3, 800ad10 <__ieee754_rem_pio2+0x2e8>)
 800ab82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab86:	f7f5 fd03 	bl	8000590 <__aeabi_dmul>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	4630      	mov	r0, r6
 800ab90:	4639      	mov	r1, r7
 800ab92:	f7f5 fb45 	bl	8000220 <__aeabi_dsub>
 800ab96:	a360      	add	r3, pc, #384	@ (adr r3, 800ad18 <__ieee754_rem_pio2+0x2f0>)
 800ab98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9c:	4682      	mov	sl, r0
 800ab9e:	468b      	mov	fp, r1
 800aba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aba4:	f7f5 fcf4 	bl	8000590 <__aeabi_dmul>
 800aba8:	2d1f      	cmp	r5, #31
 800abaa:	4606      	mov	r6, r0
 800abac:	460f      	mov	r7, r1
 800abae:	dc0c      	bgt.n	800abca <__ieee754_rem_pio2+0x1a2>
 800abb0:	4b6a      	ldr	r3, [pc, #424]	@ (800ad5c <__ieee754_rem_pio2+0x334>)
 800abb2:	1e6a      	subs	r2, r5, #1
 800abb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb8:	4543      	cmp	r3, r8
 800abba:	d006      	beq.n	800abca <__ieee754_rem_pio2+0x1a2>
 800abbc:	4632      	mov	r2, r6
 800abbe:	463b      	mov	r3, r7
 800abc0:	4650      	mov	r0, sl
 800abc2:	4659      	mov	r1, fp
 800abc4:	f7f5 fb2c 	bl	8000220 <__aeabi_dsub>
 800abc8:	e00e      	b.n	800abe8 <__ieee754_rem_pio2+0x1c0>
 800abca:	463b      	mov	r3, r7
 800abcc:	4632      	mov	r2, r6
 800abce:	4650      	mov	r0, sl
 800abd0:	4659      	mov	r1, fp
 800abd2:	f7f5 fb25 	bl	8000220 <__aeabi_dsub>
 800abd6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800abda:	9305      	str	r3, [sp, #20]
 800abdc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800abe0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800abe4:	2b10      	cmp	r3, #16
 800abe6:	dc02      	bgt.n	800abee <__ieee754_rem_pio2+0x1c6>
 800abe8:	e9c4 0100 	strd	r0, r1, [r4]
 800abec:	e039      	b.n	800ac62 <__ieee754_rem_pio2+0x23a>
 800abee:	a34c      	add	r3, pc, #304	@ (adr r3, 800ad20 <__ieee754_rem_pio2+0x2f8>)
 800abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abf8:	f7f5 fcca 	bl	8000590 <__aeabi_dmul>
 800abfc:	4606      	mov	r6, r0
 800abfe:	460f      	mov	r7, r1
 800ac00:	4602      	mov	r2, r0
 800ac02:	460b      	mov	r3, r1
 800ac04:	4650      	mov	r0, sl
 800ac06:	4659      	mov	r1, fp
 800ac08:	f7f5 fb0a 	bl	8000220 <__aeabi_dsub>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	460b      	mov	r3, r1
 800ac10:	4680      	mov	r8, r0
 800ac12:	4689      	mov	r9, r1
 800ac14:	4650      	mov	r0, sl
 800ac16:	4659      	mov	r1, fp
 800ac18:	f7f5 fb02 	bl	8000220 <__aeabi_dsub>
 800ac1c:	4632      	mov	r2, r6
 800ac1e:	463b      	mov	r3, r7
 800ac20:	f7f5 fafe 	bl	8000220 <__aeabi_dsub>
 800ac24:	a340      	add	r3, pc, #256	@ (adr r3, 800ad28 <__ieee754_rem_pio2+0x300>)
 800ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2a:	4606      	mov	r6, r0
 800ac2c:	460f      	mov	r7, r1
 800ac2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac32:	f7f5 fcad 	bl	8000590 <__aeabi_dmul>
 800ac36:	4632      	mov	r2, r6
 800ac38:	463b      	mov	r3, r7
 800ac3a:	f7f5 faf1 	bl	8000220 <__aeabi_dsub>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	4606      	mov	r6, r0
 800ac44:	460f      	mov	r7, r1
 800ac46:	4640      	mov	r0, r8
 800ac48:	4649      	mov	r1, r9
 800ac4a:	f7f5 fae9 	bl	8000220 <__aeabi_dsub>
 800ac4e:	9a05      	ldr	r2, [sp, #20]
 800ac50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	2b31      	cmp	r3, #49	@ 0x31
 800ac58:	dc20      	bgt.n	800ac9c <__ieee754_rem_pio2+0x274>
 800ac5a:	e9c4 0100 	strd	r0, r1, [r4]
 800ac5e:	46c2      	mov	sl, r8
 800ac60:	46cb      	mov	fp, r9
 800ac62:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ac66:	4650      	mov	r0, sl
 800ac68:	4642      	mov	r2, r8
 800ac6a:	464b      	mov	r3, r9
 800ac6c:	4659      	mov	r1, fp
 800ac6e:	f7f5 fad7 	bl	8000220 <__aeabi_dsub>
 800ac72:	463b      	mov	r3, r7
 800ac74:	4632      	mov	r2, r6
 800ac76:	f7f5 fad3 	bl	8000220 <__aeabi_dsub>
 800ac7a:	9b04      	ldr	r3, [sp, #16]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac82:	f6bf af0e 	bge.w	800aaa2 <__ieee754_rem_pio2+0x7a>
 800ac86:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ac8a:	6063      	str	r3, [r4, #4]
 800ac8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac90:	f8c4 8000 	str.w	r8, [r4]
 800ac94:	60a0      	str	r0, [r4, #8]
 800ac96:	60e3      	str	r3, [r4, #12]
 800ac98:	426d      	negs	r5, r5
 800ac9a:	e702      	b.n	800aaa2 <__ieee754_rem_pio2+0x7a>
 800ac9c:	a326      	add	r3, pc, #152	@ (adr r3, 800ad38 <__ieee754_rem_pio2+0x310>)
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aca6:	f7f5 fc73 	bl	8000590 <__aeabi_dmul>
 800acaa:	4606      	mov	r6, r0
 800acac:	460f      	mov	r7, r1
 800acae:	4602      	mov	r2, r0
 800acb0:	460b      	mov	r3, r1
 800acb2:	4640      	mov	r0, r8
 800acb4:	4649      	mov	r1, r9
 800acb6:	f7f5 fab3 	bl	8000220 <__aeabi_dsub>
 800acba:	4602      	mov	r2, r0
 800acbc:	460b      	mov	r3, r1
 800acbe:	4682      	mov	sl, r0
 800acc0:	468b      	mov	fp, r1
 800acc2:	4640      	mov	r0, r8
 800acc4:	4649      	mov	r1, r9
 800acc6:	f7f5 faab 	bl	8000220 <__aeabi_dsub>
 800acca:	4632      	mov	r2, r6
 800accc:	463b      	mov	r3, r7
 800acce:	f7f5 faa7 	bl	8000220 <__aeabi_dsub>
 800acd2:	a31b      	add	r3, pc, #108	@ (adr r3, 800ad40 <__ieee754_rem_pio2+0x318>)
 800acd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd8:	4606      	mov	r6, r0
 800acda:	460f      	mov	r7, r1
 800acdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ace0:	f7f5 fc56 	bl	8000590 <__aeabi_dmul>
 800ace4:	4632      	mov	r2, r6
 800ace6:	463b      	mov	r3, r7
 800ace8:	f7f5 fa9a 	bl	8000220 <__aeabi_dsub>
 800acec:	4606      	mov	r6, r0
 800acee:	460f      	mov	r7, r1
 800acf0:	e764      	b.n	800abbc <__ieee754_rem_pio2+0x194>
 800acf2:	4b1b      	ldr	r3, [pc, #108]	@ (800ad60 <__ieee754_rem_pio2+0x338>)
 800acf4:	4598      	cmp	r8, r3
 800acf6:	d935      	bls.n	800ad64 <__ieee754_rem_pio2+0x33c>
 800acf8:	4632      	mov	r2, r6
 800acfa:	463b      	mov	r3, r7
 800acfc:	4630      	mov	r0, r6
 800acfe:	4639      	mov	r1, r7
 800ad00:	f7f5 fa8e 	bl	8000220 <__aeabi_dsub>
 800ad04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ad08:	e9c4 0100 	strd	r0, r1, [r4]
 800ad0c:	e69e      	b.n	800aa4c <__ieee754_rem_pio2+0x24>
 800ad0e:	bf00      	nop
 800ad10:	54400000 	.word	0x54400000
 800ad14:	3ff921fb 	.word	0x3ff921fb
 800ad18:	1a626331 	.word	0x1a626331
 800ad1c:	3dd0b461 	.word	0x3dd0b461
 800ad20:	1a600000 	.word	0x1a600000
 800ad24:	3dd0b461 	.word	0x3dd0b461
 800ad28:	2e037073 	.word	0x2e037073
 800ad2c:	3ba3198a 	.word	0x3ba3198a
 800ad30:	6dc9c883 	.word	0x6dc9c883
 800ad34:	3fe45f30 	.word	0x3fe45f30
 800ad38:	2e000000 	.word	0x2e000000
 800ad3c:	3ba3198a 	.word	0x3ba3198a
 800ad40:	252049c1 	.word	0x252049c1
 800ad44:	397b839a 	.word	0x397b839a
 800ad48:	3fe921fb 	.word	0x3fe921fb
 800ad4c:	4002d97b 	.word	0x4002d97b
 800ad50:	3ff921fb 	.word	0x3ff921fb
 800ad54:	413921fb 	.word	0x413921fb
 800ad58:	3fe00000 	.word	0x3fe00000
 800ad5c:	0800c4a8 	.word	0x0800c4a8
 800ad60:	7fefffff 	.word	0x7fefffff
 800ad64:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ad68:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ad6c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ad70:	4630      	mov	r0, r6
 800ad72:	460f      	mov	r7, r1
 800ad74:	f7f5 fea6 	bl	8000ac4 <__aeabi_d2iz>
 800ad78:	f7f5 fba0 	bl	80004bc <__aeabi_i2d>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	460b      	mov	r3, r1
 800ad80:	4630      	mov	r0, r6
 800ad82:	4639      	mov	r1, r7
 800ad84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad88:	f7f5 fa4a 	bl	8000220 <__aeabi_dsub>
 800ad8c:	4b22      	ldr	r3, [pc, #136]	@ (800ae18 <__ieee754_rem_pio2+0x3f0>)
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f7f5 fbfe 	bl	8000590 <__aeabi_dmul>
 800ad94:	460f      	mov	r7, r1
 800ad96:	4606      	mov	r6, r0
 800ad98:	f7f5 fe94 	bl	8000ac4 <__aeabi_d2iz>
 800ad9c:	f7f5 fb8e 	bl	80004bc <__aeabi_i2d>
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	4630      	mov	r0, r6
 800ada6:	4639      	mov	r1, r7
 800ada8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800adac:	f7f5 fa38 	bl	8000220 <__aeabi_dsub>
 800adb0:	4b19      	ldr	r3, [pc, #100]	@ (800ae18 <__ieee754_rem_pio2+0x3f0>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	f7f5 fbec 	bl	8000590 <__aeabi_dmul>
 800adb8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800adbc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800adc0:	f04f 0803 	mov.w	r8, #3
 800adc4:	2600      	movs	r6, #0
 800adc6:	2700      	movs	r7, #0
 800adc8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800adcc:	4632      	mov	r2, r6
 800adce:	463b      	mov	r3, r7
 800add0:	46c2      	mov	sl, r8
 800add2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800add6:	f7f5 fe43 	bl	8000a60 <__aeabi_dcmpeq>
 800adda:	2800      	cmp	r0, #0
 800addc:	d1f4      	bne.n	800adc8 <__ieee754_rem_pio2+0x3a0>
 800adde:	4b0f      	ldr	r3, [pc, #60]	@ (800ae1c <__ieee754_rem_pio2+0x3f4>)
 800ade0:	9301      	str	r3, [sp, #4]
 800ade2:	2302      	movs	r3, #2
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	462a      	mov	r2, r5
 800ade8:	4653      	mov	r3, sl
 800adea:	4621      	mov	r1, r4
 800adec:	a806      	add	r0, sp, #24
 800adee:	f000 f817 	bl	800ae20 <__kernel_rem_pio2>
 800adf2:	9b04      	ldr	r3, [sp, #16]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	4605      	mov	r5, r0
 800adf8:	f6bf ae53 	bge.w	800aaa2 <__ieee754_rem_pio2+0x7a>
 800adfc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ae00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae04:	e9c4 2300 	strd	r2, r3, [r4]
 800ae08:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ae0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae10:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ae14:	e740      	b.n	800ac98 <__ieee754_rem_pio2+0x270>
 800ae16:	bf00      	nop
 800ae18:	41700000 	.word	0x41700000
 800ae1c:	0800c528 	.word	0x0800c528

0800ae20 <__kernel_rem_pio2>:
 800ae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae24:	ed2d 8b02 	vpush	{d8}
 800ae28:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ae2c:	f112 0f14 	cmn.w	r2, #20
 800ae30:	9306      	str	r3, [sp, #24]
 800ae32:	9104      	str	r1, [sp, #16]
 800ae34:	4bbe      	ldr	r3, [pc, #760]	@ (800b130 <__kernel_rem_pio2+0x310>)
 800ae36:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800ae38:	9008      	str	r0, [sp, #32]
 800ae3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	9b06      	ldr	r3, [sp, #24]
 800ae42:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ae46:	bfa8      	it	ge
 800ae48:	1ed4      	subge	r4, r2, #3
 800ae4a:	9305      	str	r3, [sp, #20]
 800ae4c:	bfb2      	itee	lt
 800ae4e:	2400      	movlt	r4, #0
 800ae50:	2318      	movge	r3, #24
 800ae52:	fb94 f4f3 	sdivge	r4, r4, r3
 800ae56:	f06f 0317 	mvn.w	r3, #23
 800ae5a:	fb04 3303 	mla	r3, r4, r3, r3
 800ae5e:	eb03 0b02 	add.w	fp, r3, r2
 800ae62:	9b00      	ldr	r3, [sp, #0]
 800ae64:	9a05      	ldr	r2, [sp, #20]
 800ae66:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800b120 <__kernel_rem_pio2+0x300>
 800ae6a:	eb03 0802 	add.w	r8, r3, r2
 800ae6e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ae70:	1aa7      	subs	r7, r4, r2
 800ae72:	ae20      	add	r6, sp, #128	@ 0x80
 800ae74:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ae78:	2500      	movs	r5, #0
 800ae7a:	4545      	cmp	r5, r8
 800ae7c:	dd13      	ble.n	800aea6 <__kernel_rem_pio2+0x86>
 800ae7e:	9b06      	ldr	r3, [sp, #24]
 800ae80:	aa20      	add	r2, sp, #128	@ 0x80
 800ae82:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ae86:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800ae8a:	f04f 0800 	mov.w	r8, #0
 800ae8e:	9b00      	ldr	r3, [sp, #0]
 800ae90:	4598      	cmp	r8, r3
 800ae92:	dc31      	bgt.n	800aef8 <__kernel_rem_pio2+0xd8>
 800ae94:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800b120 <__kernel_rem_pio2+0x300>
 800ae98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aea0:	462f      	mov	r7, r5
 800aea2:	2600      	movs	r6, #0
 800aea4:	e01b      	b.n	800aede <__kernel_rem_pio2+0xbe>
 800aea6:	42ef      	cmn	r7, r5
 800aea8:	d407      	bmi.n	800aeba <__kernel_rem_pio2+0x9a>
 800aeaa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800aeae:	f7f5 fb05 	bl	80004bc <__aeabi_i2d>
 800aeb2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aeb6:	3501      	adds	r5, #1
 800aeb8:	e7df      	b.n	800ae7a <__kernel_rem_pio2+0x5a>
 800aeba:	ec51 0b18 	vmov	r0, r1, d8
 800aebe:	e7f8      	b.n	800aeb2 <__kernel_rem_pio2+0x92>
 800aec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aec4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800aec8:	f7f5 fb62 	bl	8000590 <__aeabi_dmul>
 800aecc:	4602      	mov	r2, r0
 800aece:	460b      	mov	r3, r1
 800aed0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aed4:	f7f5 f9a6 	bl	8000224 <__adddf3>
 800aed8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aedc:	3601      	adds	r6, #1
 800aede:	9b05      	ldr	r3, [sp, #20]
 800aee0:	429e      	cmp	r6, r3
 800aee2:	f1a7 0708 	sub.w	r7, r7, #8
 800aee6:	ddeb      	ble.n	800aec0 <__kernel_rem_pio2+0xa0>
 800aee8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aeec:	f108 0801 	add.w	r8, r8, #1
 800aef0:	ecaa 7b02 	vstmia	sl!, {d7}
 800aef4:	3508      	adds	r5, #8
 800aef6:	e7ca      	b.n	800ae8e <__kernel_rem_pio2+0x6e>
 800aef8:	9b00      	ldr	r3, [sp, #0]
 800aefa:	f8dd 8000 	ldr.w	r8, [sp]
 800aefe:	aa0c      	add	r2, sp, #48	@ 0x30
 800af00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af04:	930a      	str	r3, [sp, #40]	@ 0x28
 800af06:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800af08:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800af0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af0e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800af12:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af14:	ab98      	add	r3, sp, #608	@ 0x260
 800af16:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800af1a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800af1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af22:	ac0c      	add	r4, sp, #48	@ 0x30
 800af24:	ab70      	add	r3, sp, #448	@ 0x1c0
 800af26:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800af2a:	46a1      	mov	r9, r4
 800af2c:	46c2      	mov	sl, r8
 800af2e:	f1ba 0f00 	cmp.w	sl, #0
 800af32:	f1a5 0508 	sub.w	r5, r5, #8
 800af36:	dc77      	bgt.n	800b028 <__kernel_rem_pio2+0x208>
 800af38:	4658      	mov	r0, fp
 800af3a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800af3e:	f000 fac7 	bl	800b4d0 <scalbn>
 800af42:	ec57 6b10 	vmov	r6, r7, d0
 800af46:	2200      	movs	r2, #0
 800af48:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800af4c:	4630      	mov	r0, r6
 800af4e:	4639      	mov	r1, r7
 800af50:	f7f5 fb1e 	bl	8000590 <__aeabi_dmul>
 800af54:	ec41 0b10 	vmov	d0, r0, r1
 800af58:	f000 fb3a 	bl	800b5d0 <floor>
 800af5c:	4b75      	ldr	r3, [pc, #468]	@ (800b134 <__kernel_rem_pio2+0x314>)
 800af5e:	ec51 0b10 	vmov	r0, r1, d0
 800af62:	2200      	movs	r2, #0
 800af64:	f7f5 fb14 	bl	8000590 <__aeabi_dmul>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4630      	mov	r0, r6
 800af6e:	4639      	mov	r1, r7
 800af70:	f7f5 f956 	bl	8000220 <__aeabi_dsub>
 800af74:	460f      	mov	r7, r1
 800af76:	4606      	mov	r6, r0
 800af78:	f7f5 fda4 	bl	8000ac4 <__aeabi_d2iz>
 800af7c:	9002      	str	r0, [sp, #8]
 800af7e:	f7f5 fa9d 	bl	80004bc <__aeabi_i2d>
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	4630      	mov	r0, r6
 800af88:	4639      	mov	r1, r7
 800af8a:	f7f5 f949 	bl	8000220 <__aeabi_dsub>
 800af8e:	f1bb 0f00 	cmp.w	fp, #0
 800af92:	4606      	mov	r6, r0
 800af94:	460f      	mov	r7, r1
 800af96:	dd6c      	ble.n	800b072 <__kernel_rem_pio2+0x252>
 800af98:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800af9c:	ab0c      	add	r3, sp, #48	@ 0x30
 800af9e:	9d02      	ldr	r5, [sp, #8]
 800afa0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afa4:	f1cb 0018 	rsb	r0, fp, #24
 800afa8:	fa43 f200 	asr.w	r2, r3, r0
 800afac:	4415      	add	r5, r2
 800afae:	4082      	lsls	r2, r0
 800afb0:	1a9b      	subs	r3, r3, r2
 800afb2:	aa0c      	add	r2, sp, #48	@ 0x30
 800afb4:	9502      	str	r5, [sp, #8]
 800afb6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800afba:	f1cb 0217 	rsb	r2, fp, #23
 800afbe:	fa43 f902 	asr.w	r9, r3, r2
 800afc2:	f1b9 0f00 	cmp.w	r9, #0
 800afc6:	dd64      	ble.n	800b092 <__kernel_rem_pio2+0x272>
 800afc8:	9b02      	ldr	r3, [sp, #8]
 800afca:	2200      	movs	r2, #0
 800afcc:	3301      	adds	r3, #1
 800afce:	9302      	str	r3, [sp, #8]
 800afd0:	4615      	mov	r5, r2
 800afd2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800afd6:	4590      	cmp	r8, r2
 800afd8:	f300 80b8 	bgt.w	800b14c <__kernel_rem_pio2+0x32c>
 800afdc:	f1bb 0f00 	cmp.w	fp, #0
 800afe0:	dd07      	ble.n	800aff2 <__kernel_rem_pio2+0x1d2>
 800afe2:	f1bb 0f01 	cmp.w	fp, #1
 800afe6:	f000 80bf 	beq.w	800b168 <__kernel_rem_pio2+0x348>
 800afea:	f1bb 0f02 	cmp.w	fp, #2
 800afee:	f000 80c6 	beq.w	800b17e <__kernel_rem_pio2+0x35e>
 800aff2:	f1b9 0f02 	cmp.w	r9, #2
 800aff6:	d14c      	bne.n	800b092 <__kernel_rem_pio2+0x272>
 800aff8:	4632      	mov	r2, r6
 800affa:	463b      	mov	r3, r7
 800affc:	494e      	ldr	r1, [pc, #312]	@ (800b138 <__kernel_rem_pio2+0x318>)
 800affe:	2000      	movs	r0, #0
 800b000:	f7f5 f90e 	bl	8000220 <__aeabi_dsub>
 800b004:	4606      	mov	r6, r0
 800b006:	460f      	mov	r7, r1
 800b008:	2d00      	cmp	r5, #0
 800b00a:	d042      	beq.n	800b092 <__kernel_rem_pio2+0x272>
 800b00c:	4658      	mov	r0, fp
 800b00e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800b128 <__kernel_rem_pio2+0x308>
 800b012:	f000 fa5d 	bl	800b4d0 <scalbn>
 800b016:	4630      	mov	r0, r6
 800b018:	4639      	mov	r1, r7
 800b01a:	ec53 2b10 	vmov	r2, r3, d0
 800b01e:	f7f5 f8ff 	bl	8000220 <__aeabi_dsub>
 800b022:	4606      	mov	r6, r0
 800b024:	460f      	mov	r7, r1
 800b026:	e034      	b.n	800b092 <__kernel_rem_pio2+0x272>
 800b028:	4b44      	ldr	r3, [pc, #272]	@ (800b13c <__kernel_rem_pio2+0x31c>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b030:	f7f5 faae 	bl	8000590 <__aeabi_dmul>
 800b034:	f7f5 fd46 	bl	8000ac4 <__aeabi_d2iz>
 800b038:	f7f5 fa40 	bl	80004bc <__aeabi_i2d>
 800b03c:	4b40      	ldr	r3, [pc, #256]	@ (800b140 <__kernel_rem_pio2+0x320>)
 800b03e:	2200      	movs	r2, #0
 800b040:	4606      	mov	r6, r0
 800b042:	460f      	mov	r7, r1
 800b044:	f7f5 faa4 	bl	8000590 <__aeabi_dmul>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b050:	f7f5 f8e6 	bl	8000220 <__aeabi_dsub>
 800b054:	f7f5 fd36 	bl	8000ac4 <__aeabi_d2iz>
 800b058:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b05c:	f849 0b04 	str.w	r0, [r9], #4
 800b060:	4639      	mov	r1, r7
 800b062:	4630      	mov	r0, r6
 800b064:	f7f5 f8de 	bl	8000224 <__adddf3>
 800b068:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b06c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b070:	e75d      	b.n	800af2e <__kernel_rem_pio2+0x10e>
 800b072:	d107      	bne.n	800b084 <__kernel_rem_pio2+0x264>
 800b074:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800b078:	aa0c      	add	r2, sp, #48	@ 0x30
 800b07a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b07e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800b082:	e79e      	b.n	800afc2 <__kernel_rem_pio2+0x1a2>
 800b084:	4b2f      	ldr	r3, [pc, #188]	@ (800b144 <__kernel_rem_pio2+0x324>)
 800b086:	2200      	movs	r2, #0
 800b088:	f7f5 fd08 	bl	8000a9c <__aeabi_dcmpge>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d143      	bne.n	800b118 <__kernel_rem_pio2+0x2f8>
 800b090:	4681      	mov	r9, r0
 800b092:	2200      	movs	r2, #0
 800b094:	2300      	movs	r3, #0
 800b096:	4630      	mov	r0, r6
 800b098:	4639      	mov	r1, r7
 800b09a:	f7f5 fce1 	bl	8000a60 <__aeabi_dcmpeq>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	f000 80bf 	beq.w	800b222 <__kernel_rem_pio2+0x402>
 800b0a4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	9900      	ldr	r1, [sp, #0]
 800b0ac:	428b      	cmp	r3, r1
 800b0ae:	da6e      	bge.n	800b18e <__kernel_rem_pio2+0x36e>
 800b0b0:	2a00      	cmp	r2, #0
 800b0b2:	f000 8089 	beq.w	800b1c8 <__kernel_rem_pio2+0x3a8>
 800b0b6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b0ba:	ab0c      	add	r3, sp, #48	@ 0x30
 800b0bc:	f1ab 0b18 	sub.w	fp, fp, #24
 800b0c0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d0f6      	beq.n	800b0b6 <__kernel_rem_pio2+0x296>
 800b0c8:	4658      	mov	r0, fp
 800b0ca:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b128 <__kernel_rem_pio2+0x308>
 800b0ce:	f000 f9ff 	bl	800b4d0 <scalbn>
 800b0d2:	f108 0301 	add.w	r3, r8, #1
 800b0d6:	00da      	lsls	r2, r3, #3
 800b0d8:	9205      	str	r2, [sp, #20]
 800b0da:	ec55 4b10 	vmov	r4, r5, d0
 800b0de:	aa70      	add	r2, sp, #448	@ 0x1c0
 800b0e0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800b13c <__kernel_rem_pio2+0x31c>
 800b0e4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800b0e8:	4646      	mov	r6, r8
 800b0ea:	f04f 0a00 	mov.w	sl, #0
 800b0ee:	2e00      	cmp	r6, #0
 800b0f0:	f280 80cf 	bge.w	800b292 <__kernel_rem_pio2+0x472>
 800b0f4:	4644      	mov	r4, r8
 800b0f6:	2c00      	cmp	r4, #0
 800b0f8:	f2c0 80fd 	blt.w	800b2f6 <__kernel_rem_pio2+0x4d6>
 800b0fc:	4b12      	ldr	r3, [pc, #72]	@ (800b148 <__kernel_rem_pio2+0x328>)
 800b0fe:	461f      	mov	r7, r3
 800b100:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b102:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b106:	9306      	str	r3, [sp, #24]
 800b108:	f04f 0a00 	mov.w	sl, #0
 800b10c:	f04f 0b00 	mov.w	fp, #0
 800b110:	2600      	movs	r6, #0
 800b112:	eba8 0504 	sub.w	r5, r8, r4
 800b116:	e0e2      	b.n	800b2de <__kernel_rem_pio2+0x4be>
 800b118:	f04f 0902 	mov.w	r9, #2
 800b11c:	e754      	b.n	800afc8 <__kernel_rem_pio2+0x1a8>
 800b11e:	bf00      	nop
	...
 800b12c:	3ff00000 	.word	0x3ff00000
 800b130:	0800c670 	.word	0x0800c670
 800b134:	40200000 	.word	0x40200000
 800b138:	3ff00000 	.word	0x3ff00000
 800b13c:	3e700000 	.word	0x3e700000
 800b140:	41700000 	.word	0x41700000
 800b144:	3fe00000 	.word	0x3fe00000
 800b148:	0800c630 	.word	0x0800c630
 800b14c:	f854 3b04 	ldr.w	r3, [r4], #4
 800b150:	b945      	cbnz	r5, 800b164 <__kernel_rem_pio2+0x344>
 800b152:	b123      	cbz	r3, 800b15e <__kernel_rem_pio2+0x33e>
 800b154:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800b158:	f844 3c04 	str.w	r3, [r4, #-4]
 800b15c:	2301      	movs	r3, #1
 800b15e:	3201      	adds	r2, #1
 800b160:	461d      	mov	r5, r3
 800b162:	e738      	b.n	800afd6 <__kernel_rem_pio2+0x1b6>
 800b164:	1acb      	subs	r3, r1, r3
 800b166:	e7f7      	b.n	800b158 <__kernel_rem_pio2+0x338>
 800b168:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800b16c:	ab0c      	add	r3, sp, #48	@ 0x30
 800b16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b172:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b176:	a90c      	add	r1, sp, #48	@ 0x30
 800b178:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b17c:	e739      	b.n	800aff2 <__kernel_rem_pio2+0x1d2>
 800b17e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800b182:	ab0c      	add	r3, sp, #48	@ 0x30
 800b184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b188:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b18c:	e7f3      	b.n	800b176 <__kernel_rem_pio2+0x356>
 800b18e:	a90c      	add	r1, sp, #48	@ 0x30
 800b190:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b194:	3b01      	subs	r3, #1
 800b196:	430a      	orrs	r2, r1
 800b198:	e787      	b.n	800b0aa <__kernel_rem_pio2+0x28a>
 800b19a:	3401      	adds	r4, #1
 800b19c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b1a0:	2a00      	cmp	r2, #0
 800b1a2:	d0fa      	beq.n	800b19a <__kernel_rem_pio2+0x37a>
 800b1a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1a6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b1aa:	eb0d 0503 	add.w	r5, sp, r3
 800b1ae:	9b06      	ldr	r3, [sp, #24]
 800b1b0:	aa20      	add	r2, sp, #128	@ 0x80
 800b1b2:	4443      	add	r3, r8
 800b1b4:	f108 0701 	add.w	r7, r8, #1
 800b1b8:	3d98      	subs	r5, #152	@ 0x98
 800b1ba:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800b1be:	4444      	add	r4, r8
 800b1c0:	42bc      	cmp	r4, r7
 800b1c2:	da04      	bge.n	800b1ce <__kernel_rem_pio2+0x3ae>
 800b1c4:	46a0      	mov	r8, r4
 800b1c6:	e6a2      	b.n	800af0e <__kernel_rem_pio2+0xee>
 800b1c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1ca:	2401      	movs	r4, #1
 800b1cc:	e7e6      	b.n	800b19c <__kernel_rem_pio2+0x37c>
 800b1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1d0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b1d4:	f7f5 f972 	bl	80004bc <__aeabi_i2d>
 800b1d8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800b4a0 <__kernel_rem_pio2+0x680>
 800b1dc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b1e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b1e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b1e8:	46b2      	mov	sl, r6
 800b1ea:	f04f 0800 	mov.w	r8, #0
 800b1ee:	9b05      	ldr	r3, [sp, #20]
 800b1f0:	4598      	cmp	r8, r3
 800b1f2:	dd05      	ble.n	800b200 <__kernel_rem_pio2+0x3e0>
 800b1f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1f8:	3701      	adds	r7, #1
 800b1fa:	eca5 7b02 	vstmia	r5!, {d7}
 800b1fe:	e7df      	b.n	800b1c0 <__kernel_rem_pio2+0x3a0>
 800b200:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b204:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b208:	f7f5 f9c2 	bl	8000590 <__aeabi_dmul>
 800b20c:	4602      	mov	r2, r0
 800b20e:	460b      	mov	r3, r1
 800b210:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b214:	f7f5 f806 	bl	8000224 <__adddf3>
 800b218:	f108 0801 	add.w	r8, r8, #1
 800b21c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b220:	e7e5      	b.n	800b1ee <__kernel_rem_pio2+0x3ce>
 800b222:	f1cb 0000 	rsb	r0, fp, #0
 800b226:	ec47 6b10 	vmov	d0, r6, r7
 800b22a:	f000 f951 	bl	800b4d0 <scalbn>
 800b22e:	ec55 4b10 	vmov	r4, r5, d0
 800b232:	4b9d      	ldr	r3, [pc, #628]	@ (800b4a8 <__kernel_rem_pio2+0x688>)
 800b234:	2200      	movs	r2, #0
 800b236:	4620      	mov	r0, r4
 800b238:	4629      	mov	r1, r5
 800b23a:	f7f5 fc2f 	bl	8000a9c <__aeabi_dcmpge>
 800b23e:	b300      	cbz	r0, 800b282 <__kernel_rem_pio2+0x462>
 800b240:	4b9a      	ldr	r3, [pc, #616]	@ (800b4ac <__kernel_rem_pio2+0x68c>)
 800b242:	2200      	movs	r2, #0
 800b244:	4620      	mov	r0, r4
 800b246:	4629      	mov	r1, r5
 800b248:	f7f5 f9a2 	bl	8000590 <__aeabi_dmul>
 800b24c:	f7f5 fc3a 	bl	8000ac4 <__aeabi_d2iz>
 800b250:	4606      	mov	r6, r0
 800b252:	f7f5 f933 	bl	80004bc <__aeabi_i2d>
 800b256:	4b94      	ldr	r3, [pc, #592]	@ (800b4a8 <__kernel_rem_pio2+0x688>)
 800b258:	2200      	movs	r2, #0
 800b25a:	f7f5 f999 	bl	8000590 <__aeabi_dmul>
 800b25e:	460b      	mov	r3, r1
 800b260:	4602      	mov	r2, r0
 800b262:	4629      	mov	r1, r5
 800b264:	4620      	mov	r0, r4
 800b266:	f7f4 ffdb 	bl	8000220 <__aeabi_dsub>
 800b26a:	f7f5 fc2b 	bl	8000ac4 <__aeabi_d2iz>
 800b26e:	ab0c      	add	r3, sp, #48	@ 0x30
 800b270:	f10b 0b18 	add.w	fp, fp, #24
 800b274:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b278:	f108 0801 	add.w	r8, r8, #1
 800b27c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800b280:	e722      	b.n	800b0c8 <__kernel_rem_pio2+0x2a8>
 800b282:	4620      	mov	r0, r4
 800b284:	4629      	mov	r1, r5
 800b286:	f7f5 fc1d 	bl	8000ac4 <__aeabi_d2iz>
 800b28a:	ab0c      	add	r3, sp, #48	@ 0x30
 800b28c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b290:	e71a      	b.n	800b0c8 <__kernel_rem_pio2+0x2a8>
 800b292:	ab0c      	add	r3, sp, #48	@ 0x30
 800b294:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b298:	f7f5 f910 	bl	80004bc <__aeabi_i2d>
 800b29c:	4622      	mov	r2, r4
 800b29e:	462b      	mov	r3, r5
 800b2a0:	f7f5 f976 	bl	8000590 <__aeabi_dmul>
 800b2a4:	4652      	mov	r2, sl
 800b2a6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b2aa:	465b      	mov	r3, fp
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	4629      	mov	r1, r5
 800b2b0:	f7f5 f96e 	bl	8000590 <__aeabi_dmul>
 800b2b4:	3e01      	subs	r6, #1
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	460d      	mov	r5, r1
 800b2ba:	e718      	b.n	800b0ee <__kernel_rem_pio2+0x2ce>
 800b2bc:	9906      	ldr	r1, [sp, #24]
 800b2be:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b2c2:	9106      	str	r1, [sp, #24]
 800b2c4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b2c8:	f7f5 f962 	bl	8000590 <__aeabi_dmul>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	4650      	mov	r0, sl
 800b2d2:	4659      	mov	r1, fp
 800b2d4:	f7f4 ffa6 	bl	8000224 <__adddf3>
 800b2d8:	3601      	adds	r6, #1
 800b2da:	4682      	mov	sl, r0
 800b2dc:	468b      	mov	fp, r1
 800b2de:	9b00      	ldr	r3, [sp, #0]
 800b2e0:	429e      	cmp	r6, r3
 800b2e2:	dc01      	bgt.n	800b2e8 <__kernel_rem_pio2+0x4c8>
 800b2e4:	42b5      	cmp	r5, r6
 800b2e6:	dae9      	bge.n	800b2bc <__kernel_rem_pio2+0x49c>
 800b2e8:	ab48      	add	r3, sp, #288	@ 0x120
 800b2ea:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b2ee:	e9c5 ab00 	strd	sl, fp, [r5]
 800b2f2:	3c01      	subs	r4, #1
 800b2f4:	e6ff      	b.n	800b0f6 <__kernel_rem_pio2+0x2d6>
 800b2f6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b2f8:	2b02      	cmp	r3, #2
 800b2fa:	dc0b      	bgt.n	800b314 <__kernel_rem_pio2+0x4f4>
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	dc39      	bgt.n	800b374 <__kernel_rem_pio2+0x554>
 800b300:	d05d      	beq.n	800b3be <__kernel_rem_pio2+0x59e>
 800b302:	9b02      	ldr	r3, [sp, #8]
 800b304:	f003 0007 	and.w	r0, r3, #7
 800b308:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b30c:	ecbd 8b02 	vpop	{d8}
 800b310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b314:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b316:	2b03      	cmp	r3, #3
 800b318:	d1f3      	bne.n	800b302 <__kernel_rem_pio2+0x4e2>
 800b31a:	9b05      	ldr	r3, [sp, #20]
 800b31c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b320:	eb0d 0403 	add.w	r4, sp, r3
 800b324:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b328:	4625      	mov	r5, r4
 800b32a:	46c2      	mov	sl, r8
 800b32c:	f1ba 0f00 	cmp.w	sl, #0
 800b330:	f1a5 0508 	sub.w	r5, r5, #8
 800b334:	dc6b      	bgt.n	800b40e <__kernel_rem_pio2+0x5ee>
 800b336:	4645      	mov	r5, r8
 800b338:	2d01      	cmp	r5, #1
 800b33a:	f1a4 0408 	sub.w	r4, r4, #8
 800b33e:	f300 8087 	bgt.w	800b450 <__kernel_rem_pio2+0x630>
 800b342:	9c05      	ldr	r4, [sp, #20]
 800b344:	ab48      	add	r3, sp, #288	@ 0x120
 800b346:	441c      	add	r4, r3
 800b348:	2000      	movs	r0, #0
 800b34a:	2100      	movs	r1, #0
 800b34c:	f1b8 0f01 	cmp.w	r8, #1
 800b350:	f300 809c 	bgt.w	800b48c <__kernel_rem_pio2+0x66c>
 800b354:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800b358:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800b35c:	f1b9 0f00 	cmp.w	r9, #0
 800b360:	f040 80a6 	bne.w	800b4b0 <__kernel_rem_pio2+0x690>
 800b364:	9b04      	ldr	r3, [sp, #16]
 800b366:	e9c3 7800 	strd	r7, r8, [r3]
 800b36a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b36e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b372:	e7c6      	b.n	800b302 <__kernel_rem_pio2+0x4e2>
 800b374:	9d05      	ldr	r5, [sp, #20]
 800b376:	ab48      	add	r3, sp, #288	@ 0x120
 800b378:	441d      	add	r5, r3
 800b37a:	4644      	mov	r4, r8
 800b37c:	2000      	movs	r0, #0
 800b37e:	2100      	movs	r1, #0
 800b380:	2c00      	cmp	r4, #0
 800b382:	da35      	bge.n	800b3f0 <__kernel_rem_pio2+0x5d0>
 800b384:	f1b9 0f00 	cmp.w	r9, #0
 800b388:	d038      	beq.n	800b3fc <__kernel_rem_pio2+0x5dc>
 800b38a:	4602      	mov	r2, r0
 800b38c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b390:	9c04      	ldr	r4, [sp, #16]
 800b392:	e9c4 2300 	strd	r2, r3, [r4]
 800b396:	4602      	mov	r2, r0
 800b398:	460b      	mov	r3, r1
 800b39a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b39e:	f7f4 ff3f 	bl	8000220 <__aeabi_dsub>
 800b3a2:	ad4a      	add	r5, sp, #296	@ 0x128
 800b3a4:	2401      	movs	r4, #1
 800b3a6:	45a0      	cmp	r8, r4
 800b3a8:	da2b      	bge.n	800b402 <__kernel_rem_pio2+0x5e2>
 800b3aa:	f1b9 0f00 	cmp.w	r9, #0
 800b3ae:	d002      	beq.n	800b3b6 <__kernel_rem_pio2+0x596>
 800b3b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	9b04      	ldr	r3, [sp, #16]
 800b3b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b3bc:	e7a1      	b.n	800b302 <__kernel_rem_pio2+0x4e2>
 800b3be:	9c05      	ldr	r4, [sp, #20]
 800b3c0:	ab48      	add	r3, sp, #288	@ 0x120
 800b3c2:	441c      	add	r4, r3
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	f1b8 0f00 	cmp.w	r8, #0
 800b3cc:	da09      	bge.n	800b3e2 <__kernel_rem_pio2+0x5c2>
 800b3ce:	f1b9 0f00 	cmp.w	r9, #0
 800b3d2:	d002      	beq.n	800b3da <__kernel_rem_pio2+0x5ba>
 800b3d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b3d8:	4619      	mov	r1, r3
 800b3da:	9b04      	ldr	r3, [sp, #16]
 800b3dc:	e9c3 0100 	strd	r0, r1, [r3]
 800b3e0:	e78f      	b.n	800b302 <__kernel_rem_pio2+0x4e2>
 800b3e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b3e6:	f7f4 ff1d 	bl	8000224 <__adddf3>
 800b3ea:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b3ee:	e7eb      	b.n	800b3c8 <__kernel_rem_pio2+0x5a8>
 800b3f0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b3f4:	f7f4 ff16 	bl	8000224 <__adddf3>
 800b3f8:	3c01      	subs	r4, #1
 800b3fa:	e7c1      	b.n	800b380 <__kernel_rem_pio2+0x560>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	460b      	mov	r3, r1
 800b400:	e7c6      	b.n	800b390 <__kernel_rem_pio2+0x570>
 800b402:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b406:	f7f4 ff0d 	bl	8000224 <__adddf3>
 800b40a:	3401      	adds	r4, #1
 800b40c:	e7cb      	b.n	800b3a6 <__kernel_rem_pio2+0x586>
 800b40e:	ed95 7b00 	vldr	d7, [r5]
 800b412:	ed8d 7b00 	vstr	d7, [sp]
 800b416:	ed95 7b02 	vldr	d7, [r5, #8]
 800b41a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b41e:	ec53 2b17 	vmov	r2, r3, d7
 800b422:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b426:	f7f4 fefd 	bl	8000224 <__adddf3>
 800b42a:	4602      	mov	r2, r0
 800b42c:	460b      	mov	r3, r1
 800b42e:	4606      	mov	r6, r0
 800b430:	460f      	mov	r7, r1
 800b432:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b436:	f7f4 fef3 	bl	8000220 <__aeabi_dsub>
 800b43a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b43e:	f7f4 fef1 	bl	8000224 <__adddf3>
 800b442:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b446:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b44a:	e9c5 6700 	strd	r6, r7, [r5]
 800b44e:	e76d      	b.n	800b32c <__kernel_rem_pio2+0x50c>
 800b450:	ed94 7b00 	vldr	d7, [r4]
 800b454:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800b458:	ec51 0b17 	vmov	r0, r1, d7
 800b45c:	4652      	mov	r2, sl
 800b45e:	465b      	mov	r3, fp
 800b460:	ed8d 7b00 	vstr	d7, [sp]
 800b464:	f7f4 fede 	bl	8000224 <__adddf3>
 800b468:	4602      	mov	r2, r0
 800b46a:	460b      	mov	r3, r1
 800b46c:	4606      	mov	r6, r0
 800b46e:	460f      	mov	r7, r1
 800b470:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b474:	f7f4 fed4 	bl	8000220 <__aeabi_dsub>
 800b478:	4652      	mov	r2, sl
 800b47a:	465b      	mov	r3, fp
 800b47c:	f7f4 fed2 	bl	8000224 <__adddf3>
 800b480:	3d01      	subs	r5, #1
 800b482:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b486:	e9c4 6700 	strd	r6, r7, [r4]
 800b48a:	e755      	b.n	800b338 <__kernel_rem_pio2+0x518>
 800b48c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b490:	f7f4 fec8 	bl	8000224 <__adddf3>
 800b494:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b498:	e758      	b.n	800b34c <__kernel_rem_pio2+0x52c>
 800b49a:	bf00      	nop
 800b49c:	f3af 8000 	nop.w
	...
 800b4a8:	41700000 	.word	0x41700000
 800b4ac:	3e700000 	.word	0x3e700000
 800b4b0:	9b04      	ldr	r3, [sp, #16]
 800b4b2:	9a04      	ldr	r2, [sp, #16]
 800b4b4:	601f      	str	r7, [r3, #0]
 800b4b6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b4ba:	605c      	str	r4, [r3, #4]
 800b4bc:	609d      	str	r5, [r3, #8]
 800b4be:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b4c2:	60d3      	str	r3, [r2, #12]
 800b4c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b4c8:	6110      	str	r0, [r2, #16]
 800b4ca:	6153      	str	r3, [r2, #20]
 800b4cc:	e719      	b.n	800b302 <__kernel_rem_pio2+0x4e2>
 800b4ce:	bf00      	nop

0800b4d0 <scalbn>:
 800b4d0:	b570      	push	{r4, r5, r6, lr}
 800b4d2:	ec55 4b10 	vmov	r4, r5, d0
 800b4d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b4da:	4606      	mov	r6, r0
 800b4dc:	462b      	mov	r3, r5
 800b4de:	b991      	cbnz	r1, 800b506 <scalbn+0x36>
 800b4e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b4e4:	4323      	orrs	r3, r4
 800b4e6:	d03d      	beq.n	800b564 <scalbn+0x94>
 800b4e8:	4b35      	ldr	r3, [pc, #212]	@ (800b5c0 <scalbn+0xf0>)
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	4629      	mov	r1, r5
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f7f5 f84e 	bl	8000590 <__aeabi_dmul>
 800b4f4:	4b33      	ldr	r3, [pc, #204]	@ (800b5c4 <scalbn+0xf4>)
 800b4f6:	429e      	cmp	r6, r3
 800b4f8:	4604      	mov	r4, r0
 800b4fa:	460d      	mov	r5, r1
 800b4fc:	da0f      	bge.n	800b51e <scalbn+0x4e>
 800b4fe:	a328      	add	r3, pc, #160	@ (adr r3, 800b5a0 <scalbn+0xd0>)
 800b500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b504:	e01e      	b.n	800b544 <scalbn+0x74>
 800b506:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b50a:	4291      	cmp	r1, r2
 800b50c:	d10b      	bne.n	800b526 <scalbn+0x56>
 800b50e:	4622      	mov	r2, r4
 800b510:	4620      	mov	r0, r4
 800b512:	4629      	mov	r1, r5
 800b514:	f7f4 fe86 	bl	8000224 <__adddf3>
 800b518:	4604      	mov	r4, r0
 800b51a:	460d      	mov	r5, r1
 800b51c:	e022      	b.n	800b564 <scalbn+0x94>
 800b51e:	460b      	mov	r3, r1
 800b520:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b524:	3936      	subs	r1, #54	@ 0x36
 800b526:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b52a:	4296      	cmp	r6, r2
 800b52c:	dd0d      	ble.n	800b54a <scalbn+0x7a>
 800b52e:	2d00      	cmp	r5, #0
 800b530:	a11d      	add	r1, pc, #116	@ (adr r1, 800b5a8 <scalbn+0xd8>)
 800b532:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b536:	da02      	bge.n	800b53e <scalbn+0x6e>
 800b538:	a11d      	add	r1, pc, #116	@ (adr r1, 800b5b0 <scalbn+0xe0>)
 800b53a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b53e:	a31a      	add	r3, pc, #104	@ (adr r3, 800b5a8 <scalbn+0xd8>)
 800b540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b544:	f7f5 f824 	bl	8000590 <__aeabi_dmul>
 800b548:	e7e6      	b.n	800b518 <scalbn+0x48>
 800b54a:	1872      	adds	r2, r6, r1
 800b54c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b550:	428a      	cmp	r2, r1
 800b552:	dcec      	bgt.n	800b52e <scalbn+0x5e>
 800b554:	2a00      	cmp	r2, #0
 800b556:	dd08      	ble.n	800b56a <scalbn+0x9a>
 800b558:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b55c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b560:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b564:	ec45 4b10 	vmov	d0, r4, r5
 800b568:	bd70      	pop	{r4, r5, r6, pc}
 800b56a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b56e:	da08      	bge.n	800b582 <scalbn+0xb2>
 800b570:	2d00      	cmp	r5, #0
 800b572:	a10b      	add	r1, pc, #44	@ (adr r1, 800b5a0 <scalbn+0xd0>)
 800b574:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b578:	dac1      	bge.n	800b4fe <scalbn+0x2e>
 800b57a:	a10f      	add	r1, pc, #60	@ (adr r1, 800b5b8 <scalbn+0xe8>)
 800b57c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b580:	e7bd      	b.n	800b4fe <scalbn+0x2e>
 800b582:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b586:	3236      	adds	r2, #54	@ 0x36
 800b588:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b58c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b590:	4620      	mov	r0, r4
 800b592:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c8 <scalbn+0xf8>)
 800b594:	4629      	mov	r1, r5
 800b596:	2200      	movs	r2, #0
 800b598:	e7d4      	b.n	800b544 <scalbn+0x74>
 800b59a:	bf00      	nop
 800b59c:	f3af 8000 	nop.w
 800b5a0:	c2f8f359 	.word	0xc2f8f359
 800b5a4:	01a56e1f 	.word	0x01a56e1f
 800b5a8:	8800759c 	.word	0x8800759c
 800b5ac:	7e37e43c 	.word	0x7e37e43c
 800b5b0:	8800759c 	.word	0x8800759c
 800b5b4:	fe37e43c 	.word	0xfe37e43c
 800b5b8:	c2f8f359 	.word	0xc2f8f359
 800b5bc:	81a56e1f 	.word	0x81a56e1f
 800b5c0:	43500000 	.word	0x43500000
 800b5c4:	ffff3cb0 	.word	0xffff3cb0
 800b5c8:	3c900000 	.word	0x3c900000
 800b5cc:	00000000 	.word	0x00000000

0800b5d0 <floor>:
 800b5d0:	ec51 0b10 	vmov	r0, r1, d0
 800b5d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5dc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b5e0:	2e13      	cmp	r6, #19
 800b5e2:	460c      	mov	r4, r1
 800b5e4:	4605      	mov	r5, r0
 800b5e6:	4680      	mov	r8, r0
 800b5e8:	dc34      	bgt.n	800b654 <floor+0x84>
 800b5ea:	2e00      	cmp	r6, #0
 800b5ec:	da17      	bge.n	800b61e <floor+0x4e>
 800b5ee:	a332      	add	r3, pc, #200	@ (adr r3, 800b6b8 <floor+0xe8>)
 800b5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f4:	f7f4 fe16 	bl	8000224 <__adddf3>
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	f7f5 fa58 	bl	8000ab0 <__aeabi_dcmpgt>
 800b600:	b150      	cbz	r0, 800b618 <floor+0x48>
 800b602:	2c00      	cmp	r4, #0
 800b604:	da55      	bge.n	800b6b2 <floor+0xe2>
 800b606:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b60a:	432c      	orrs	r4, r5
 800b60c:	2500      	movs	r5, #0
 800b60e:	42ac      	cmp	r4, r5
 800b610:	4c2b      	ldr	r4, [pc, #172]	@ (800b6c0 <floor+0xf0>)
 800b612:	bf08      	it	eq
 800b614:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b618:	4621      	mov	r1, r4
 800b61a:	4628      	mov	r0, r5
 800b61c:	e023      	b.n	800b666 <floor+0x96>
 800b61e:	4f29      	ldr	r7, [pc, #164]	@ (800b6c4 <floor+0xf4>)
 800b620:	4137      	asrs	r7, r6
 800b622:	ea01 0307 	and.w	r3, r1, r7
 800b626:	4303      	orrs	r3, r0
 800b628:	d01d      	beq.n	800b666 <floor+0x96>
 800b62a:	a323      	add	r3, pc, #140	@ (adr r3, 800b6b8 <floor+0xe8>)
 800b62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b630:	f7f4 fdf8 	bl	8000224 <__adddf3>
 800b634:	2200      	movs	r2, #0
 800b636:	2300      	movs	r3, #0
 800b638:	f7f5 fa3a 	bl	8000ab0 <__aeabi_dcmpgt>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	d0eb      	beq.n	800b618 <floor+0x48>
 800b640:	2c00      	cmp	r4, #0
 800b642:	bfbe      	ittt	lt
 800b644:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b648:	4133      	asrlt	r3, r6
 800b64a:	18e4      	addlt	r4, r4, r3
 800b64c:	ea24 0407 	bic.w	r4, r4, r7
 800b650:	2500      	movs	r5, #0
 800b652:	e7e1      	b.n	800b618 <floor+0x48>
 800b654:	2e33      	cmp	r6, #51	@ 0x33
 800b656:	dd0a      	ble.n	800b66e <floor+0x9e>
 800b658:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b65c:	d103      	bne.n	800b666 <floor+0x96>
 800b65e:	4602      	mov	r2, r0
 800b660:	460b      	mov	r3, r1
 800b662:	f7f4 fddf 	bl	8000224 <__adddf3>
 800b666:	ec41 0b10 	vmov	d0, r0, r1
 800b66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b66e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b672:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b676:	40df      	lsrs	r7, r3
 800b678:	4207      	tst	r7, r0
 800b67a:	d0f4      	beq.n	800b666 <floor+0x96>
 800b67c:	a30e      	add	r3, pc, #56	@ (adr r3, 800b6b8 <floor+0xe8>)
 800b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b682:	f7f4 fdcf 	bl	8000224 <__adddf3>
 800b686:	2200      	movs	r2, #0
 800b688:	2300      	movs	r3, #0
 800b68a:	f7f5 fa11 	bl	8000ab0 <__aeabi_dcmpgt>
 800b68e:	2800      	cmp	r0, #0
 800b690:	d0c2      	beq.n	800b618 <floor+0x48>
 800b692:	2c00      	cmp	r4, #0
 800b694:	da0a      	bge.n	800b6ac <floor+0xdc>
 800b696:	2e14      	cmp	r6, #20
 800b698:	d101      	bne.n	800b69e <floor+0xce>
 800b69a:	3401      	adds	r4, #1
 800b69c:	e006      	b.n	800b6ac <floor+0xdc>
 800b69e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	40b3      	lsls	r3, r6
 800b6a6:	441d      	add	r5, r3
 800b6a8:	4545      	cmp	r5, r8
 800b6aa:	d3f6      	bcc.n	800b69a <floor+0xca>
 800b6ac:	ea25 0507 	bic.w	r5, r5, r7
 800b6b0:	e7b2      	b.n	800b618 <floor+0x48>
 800b6b2:	2500      	movs	r5, #0
 800b6b4:	462c      	mov	r4, r5
 800b6b6:	e7af      	b.n	800b618 <floor+0x48>
 800b6b8:	8800759c 	.word	0x8800759c
 800b6bc:	7e37e43c 	.word	0x7e37e43c
 800b6c0:	bff00000 	.word	0xbff00000
 800b6c4:	000fffff 	.word	0x000fffff

0800b6c8 <realloc>:
 800b6c8:	4b02      	ldr	r3, [pc, #8]	@ (800b6d4 <realloc+0xc>)
 800b6ca:	460a      	mov	r2, r1
 800b6cc:	4601      	mov	r1, r0
 800b6ce:	6818      	ldr	r0, [r3, #0]
 800b6d0:	f000 b802 	b.w	800b6d8 <_realloc_r>
 800b6d4:	2000001c 	.word	0x2000001c

0800b6d8 <_realloc_r>:
 800b6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6dc:	4680      	mov	r8, r0
 800b6de:	4615      	mov	r5, r2
 800b6e0:	460c      	mov	r4, r1
 800b6e2:	b921      	cbnz	r1, 800b6ee <_realloc_r+0x16>
 800b6e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e8:	4611      	mov	r1, r2
 800b6ea:	f000 bb11 	b.w	800bd10 <_malloc_r>
 800b6ee:	b92a      	cbnz	r2, 800b6fc <_realloc_r+0x24>
 800b6f0:	f000 faa2 	bl	800bc38 <_free_r>
 800b6f4:	2400      	movs	r4, #0
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6fc:	f000 fb94 	bl	800be28 <_malloc_usable_size_r>
 800b700:	4285      	cmp	r5, r0
 800b702:	4606      	mov	r6, r0
 800b704:	d802      	bhi.n	800b70c <_realloc_r+0x34>
 800b706:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b70a:	d8f4      	bhi.n	800b6f6 <_realloc_r+0x1e>
 800b70c:	4629      	mov	r1, r5
 800b70e:	4640      	mov	r0, r8
 800b710:	f000 fafe 	bl	800bd10 <_malloc_r>
 800b714:	4607      	mov	r7, r0
 800b716:	2800      	cmp	r0, #0
 800b718:	d0ec      	beq.n	800b6f4 <_realloc_r+0x1c>
 800b71a:	42b5      	cmp	r5, r6
 800b71c:	462a      	mov	r2, r5
 800b71e:	4621      	mov	r1, r4
 800b720:	bf28      	it	cs
 800b722:	4632      	movcs	r2, r6
 800b724:	f000 fa79 	bl	800bc1a <memcpy>
 800b728:	4621      	mov	r1, r4
 800b72a:	4640      	mov	r0, r8
 800b72c:	f000 fa84 	bl	800bc38 <_free_r>
 800b730:	463c      	mov	r4, r7
 800b732:	e7e0      	b.n	800b6f6 <_realloc_r+0x1e>

0800b734 <std>:
 800b734:	2300      	movs	r3, #0
 800b736:	b510      	push	{r4, lr}
 800b738:	4604      	mov	r4, r0
 800b73a:	e9c0 3300 	strd	r3, r3, [r0]
 800b73e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b742:	6083      	str	r3, [r0, #8]
 800b744:	8181      	strh	r1, [r0, #12]
 800b746:	6643      	str	r3, [r0, #100]	@ 0x64
 800b748:	81c2      	strh	r2, [r0, #14]
 800b74a:	6183      	str	r3, [r0, #24]
 800b74c:	4619      	mov	r1, r3
 800b74e:	2208      	movs	r2, #8
 800b750:	305c      	adds	r0, #92	@ 0x5c
 800b752:	f000 f9e7 	bl	800bb24 <memset>
 800b756:	4b0d      	ldr	r3, [pc, #52]	@ (800b78c <std+0x58>)
 800b758:	6263      	str	r3, [r4, #36]	@ 0x24
 800b75a:	4b0d      	ldr	r3, [pc, #52]	@ (800b790 <std+0x5c>)
 800b75c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b75e:	4b0d      	ldr	r3, [pc, #52]	@ (800b794 <std+0x60>)
 800b760:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b762:	4b0d      	ldr	r3, [pc, #52]	@ (800b798 <std+0x64>)
 800b764:	6323      	str	r3, [r4, #48]	@ 0x30
 800b766:	4b0d      	ldr	r3, [pc, #52]	@ (800b79c <std+0x68>)
 800b768:	6224      	str	r4, [r4, #32]
 800b76a:	429c      	cmp	r4, r3
 800b76c:	d006      	beq.n	800b77c <std+0x48>
 800b76e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b772:	4294      	cmp	r4, r2
 800b774:	d002      	beq.n	800b77c <std+0x48>
 800b776:	33d0      	adds	r3, #208	@ 0xd0
 800b778:	429c      	cmp	r4, r3
 800b77a:	d105      	bne.n	800b788 <std+0x54>
 800b77c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b784:	f000 ba46 	b.w	800bc14 <__retarget_lock_init_recursive>
 800b788:	bd10      	pop	{r4, pc}
 800b78a:	bf00      	nop
 800b78c:	0800b975 	.word	0x0800b975
 800b790:	0800b997 	.word	0x0800b997
 800b794:	0800b9cf 	.word	0x0800b9cf
 800b798:	0800b9f3 	.word	0x0800b9f3
 800b79c:	20001b8c 	.word	0x20001b8c

0800b7a0 <stdio_exit_handler>:
 800b7a0:	4a02      	ldr	r2, [pc, #8]	@ (800b7ac <stdio_exit_handler+0xc>)
 800b7a2:	4903      	ldr	r1, [pc, #12]	@ (800b7b0 <stdio_exit_handler+0x10>)
 800b7a4:	4803      	ldr	r0, [pc, #12]	@ (800b7b4 <stdio_exit_handler+0x14>)
 800b7a6:	f000 b869 	b.w	800b87c <_fwalk_sglue>
 800b7aa:	bf00      	nop
 800b7ac:	20000010 	.word	0x20000010
 800b7b0:	0800bf41 	.word	0x0800bf41
 800b7b4:	20000020 	.word	0x20000020

0800b7b8 <cleanup_stdio>:
 800b7b8:	6841      	ldr	r1, [r0, #4]
 800b7ba:	4b0c      	ldr	r3, [pc, #48]	@ (800b7ec <cleanup_stdio+0x34>)
 800b7bc:	4299      	cmp	r1, r3
 800b7be:	b510      	push	{r4, lr}
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	d001      	beq.n	800b7c8 <cleanup_stdio+0x10>
 800b7c4:	f000 fbbc 	bl	800bf40 <_fflush_r>
 800b7c8:	68a1      	ldr	r1, [r4, #8]
 800b7ca:	4b09      	ldr	r3, [pc, #36]	@ (800b7f0 <cleanup_stdio+0x38>)
 800b7cc:	4299      	cmp	r1, r3
 800b7ce:	d002      	beq.n	800b7d6 <cleanup_stdio+0x1e>
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f000 fbb5 	bl	800bf40 <_fflush_r>
 800b7d6:	68e1      	ldr	r1, [r4, #12]
 800b7d8:	4b06      	ldr	r3, [pc, #24]	@ (800b7f4 <cleanup_stdio+0x3c>)
 800b7da:	4299      	cmp	r1, r3
 800b7dc:	d004      	beq.n	800b7e8 <cleanup_stdio+0x30>
 800b7de:	4620      	mov	r0, r4
 800b7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7e4:	f000 bbac 	b.w	800bf40 <_fflush_r>
 800b7e8:	bd10      	pop	{r4, pc}
 800b7ea:	bf00      	nop
 800b7ec:	20001b8c 	.word	0x20001b8c
 800b7f0:	20001bf4 	.word	0x20001bf4
 800b7f4:	20001c5c 	.word	0x20001c5c

0800b7f8 <global_stdio_init.part.0>:
 800b7f8:	b510      	push	{r4, lr}
 800b7fa:	4b0b      	ldr	r3, [pc, #44]	@ (800b828 <global_stdio_init.part.0+0x30>)
 800b7fc:	4c0b      	ldr	r4, [pc, #44]	@ (800b82c <global_stdio_init.part.0+0x34>)
 800b7fe:	4a0c      	ldr	r2, [pc, #48]	@ (800b830 <global_stdio_init.part.0+0x38>)
 800b800:	601a      	str	r2, [r3, #0]
 800b802:	4620      	mov	r0, r4
 800b804:	2200      	movs	r2, #0
 800b806:	2104      	movs	r1, #4
 800b808:	f7ff ff94 	bl	800b734 <std>
 800b80c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b810:	2201      	movs	r2, #1
 800b812:	2109      	movs	r1, #9
 800b814:	f7ff ff8e 	bl	800b734 <std>
 800b818:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b81c:	2202      	movs	r2, #2
 800b81e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b822:	2112      	movs	r1, #18
 800b824:	f7ff bf86 	b.w	800b734 <std>
 800b828:	20001cc4 	.word	0x20001cc4
 800b82c:	20001b8c 	.word	0x20001b8c
 800b830:	0800b7a1 	.word	0x0800b7a1

0800b834 <__sfp_lock_acquire>:
 800b834:	4801      	ldr	r0, [pc, #4]	@ (800b83c <__sfp_lock_acquire+0x8>)
 800b836:	f000 b9ee 	b.w	800bc16 <__retarget_lock_acquire_recursive>
 800b83a:	bf00      	nop
 800b83c:	20001ccd 	.word	0x20001ccd

0800b840 <__sfp_lock_release>:
 800b840:	4801      	ldr	r0, [pc, #4]	@ (800b848 <__sfp_lock_release+0x8>)
 800b842:	f000 b9e9 	b.w	800bc18 <__retarget_lock_release_recursive>
 800b846:	bf00      	nop
 800b848:	20001ccd 	.word	0x20001ccd

0800b84c <__sinit>:
 800b84c:	b510      	push	{r4, lr}
 800b84e:	4604      	mov	r4, r0
 800b850:	f7ff fff0 	bl	800b834 <__sfp_lock_acquire>
 800b854:	6a23      	ldr	r3, [r4, #32]
 800b856:	b11b      	cbz	r3, 800b860 <__sinit+0x14>
 800b858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b85c:	f7ff bff0 	b.w	800b840 <__sfp_lock_release>
 800b860:	4b04      	ldr	r3, [pc, #16]	@ (800b874 <__sinit+0x28>)
 800b862:	6223      	str	r3, [r4, #32]
 800b864:	4b04      	ldr	r3, [pc, #16]	@ (800b878 <__sinit+0x2c>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1f5      	bne.n	800b858 <__sinit+0xc>
 800b86c:	f7ff ffc4 	bl	800b7f8 <global_stdio_init.part.0>
 800b870:	e7f2      	b.n	800b858 <__sinit+0xc>
 800b872:	bf00      	nop
 800b874:	0800b7b9 	.word	0x0800b7b9
 800b878:	20001cc4 	.word	0x20001cc4

0800b87c <_fwalk_sglue>:
 800b87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b880:	4607      	mov	r7, r0
 800b882:	4688      	mov	r8, r1
 800b884:	4614      	mov	r4, r2
 800b886:	2600      	movs	r6, #0
 800b888:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b88c:	f1b9 0901 	subs.w	r9, r9, #1
 800b890:	d505      	bpl.n	800b89e <_fwalk_sglue+0x22>
 800b892:	6824      	ldr	r4, [r4, #0]
 800b894:	2c00      	cmp	r4, #0
 800b896:	d1f7      	bne.n	800b888 <_fwalk_sglue+0xc>
 800b898:	4630      	mov	r0, r6
 800b89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b89e:	89ab      	ldrh	r3, [r5, #12]
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d907      	bls.n	800b8b4 <_fwalk_sglue+0x38>
 800b8a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	d003      	beq.n	800b8b4 <_fwalk_sglue+0x38>
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	47c0      	blx	r8
 800b8b2:	4306      	orrs	r6, r0
 800b8b4:	3568      	adds	r5, #104	@ 0x68
 800b8b6:	e7e9      	b.n	800b88c <_fwalk_sglue+0x10>

0800b8b8 <_puts_r>:
 800b8b8:	6a03      	ldr	r3, [r0, #32]
 800b8ba:	b570      	push	{r4, r5, r6, lr}
 800b8bc:	6884      	ldr	r4, [r0, #8]
 800b8be:	4605      	mov	r5, r0
 800b8c0:	460e      	mov	r6, r1
 800b8c2:	b90b      	cbnz	r3, 800b8c8 <_puts_r+0x10>
 800b8c4:	f7ff ffc2 	bl	800b84c <__sinit>
 800b8c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b8ca:	07db      	lsls	r3, r3, #31
 800b8cc:	d405      	bmi.n	800b8da <_puts_r+0x22>
 800b8ce:	89a3      	ldrh	r3, [r4, #12]
 800b8d0:	0598      	lsls	r0, r3, #22
 800b8d2:	d402      	bmi.n	800b8da <_puts_r+0x22>
 800b8d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8d6:	f000 f99e 	bl	800bc16 <__retarget_lock_acquire_recursive>
 800b8da:	89a3      	ldrh	r3, [r4, #12]
 800b8dc:	0719      	lsls	r1, r3, #28
 800b8de:	d502      	bpl.n	800b8e6 <_puts_r+0x2e>
 800b8e0:	6923      	ldr	r3, [r4, #16]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d135      	bne.n	800b952 <_puts_r+0x9a>
 800b8e6:	4621      	mov	r1, r4
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	f000 f8c5 	bl	800ba78 <__swsetup_r>
 800b8ee:	b380      	cbz	r0, 800b952 <_puts_r+0x9a>
 800b8f0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b8f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b8f6:	07da      	lsls	r2, r3, #31
 800b8f8:	d405      	bmi.n	800b906 <_puts_r+0x4e>
 800b8fa:	89a3      	ldrh	r3, [r4, #12]
 800b8fc:	059b      	lsls	r3, r3, #22
 800b8fe:	d402      	bmi.n	800b906 <_puts_r+0x4e>
 800b900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b902:	f000 f989 	bl	800bc18 <__retarget_lock_release_recursive>
 800b906:	4628      	mov	r0, r5
 800b908:	bd70      	pop	{r4, r5, r6, pc}
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	da04      	bge.n	800b918 <_puts_r+0x60>
 800b90e:	69a2      	ldr	r2, [r4, #24]
 800b910:	429a      	cmp	r2, r3
 800b912:	dc17      	bgt.n	800b944 <_puts_r+0x8c>
 800b914:	290a      	cmp	r1, #10
 800b916:	d015      	beq.n	800b944 <_puts_r+0x8c>
 800b918:	6823      	ldr	r3, [r4, #0]
 800b91a:	1c5a      	adds	r2, r3, #1
 800b91c:	6022      	str	r2, [r4, #0]
 800b91e:	7019      	strb	r1, [r3, #0]
 800b920:	68a3      	ldr	r3, [r4, #8]
 800b922:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b926:	3b01      	subs	r3, #1
 800b928:	60a3      	str	r3, [r4, #8]
 800b92a:	2900      	cmp	r1, #0
 800b92c:	d1ed      	bne.n	800b90a <_puts_r+0x52>
 800b92e:	2b00      	cmp	r3, #0
 800b930:	da11      	bge.n	800b956 <_puts_r+0x9e>
 800b932:	4622      	mov	r2, r4
 800b934:	210a      	movs	r1, #10
 800b936:	4628      	mov	r0, r5
 800b938:	f000 f85f 	bl	800b9fa <__swbuf_r>
 800b93c:	3001      	adds	r0, #1
 800b93e:	d0d7      	beq.n	800b8f0 <_puts_r+0x38>
 800b940:	250a      	movs	r5, #10
 800b942:	e7d7      	b.n	800b8f4 <_puts_r+0x3c>
 800b944:	4622      	mov	r2, r4
 800b946:	4628      	mov	r0, r5
 800b948:	f000 f857 	bl	800b9fa <__swbuf_r>
 800b94c:	3001      	adds	r0, #1
 800b94e:	d1e7      	bne.n	800b920 <_puts_r+0x68>
 800b950:	e7ce      	b.n	800b8f0 <_puts_r+0x38>
 800b952:	3e01      	subs	r6, #1
 800b954:	e7e4      	b.n	800b920 <_puts_r+0x68>
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	1c5a      	adds	r2, r3, #1
 800b95a:	6022      	str	r2, [r4, #0]
 800b95c:	220a      	movs	r2, #10
 800b95e:	701a      	strb	r2, [r3, #0]
 800b960:	e7ee      	b.n	800b940 <_puts_r+0x88>
	...

0800b964 <puts>:
 800b964:	4b02      	ldr	r3, [pc, #8]	@ (800b970 <puts+0xc>)
 800b966:	4601      	mov	r1, r0
 800b968:	6818      	ldr	r0, [r3, #0]
 800b96a:	f7ff bfa5 	b.w	800b8b8 <_puts_r>
 800b96e:	bf00      	nop
 800b970:	2000001c 	.word	0x2000001c

0800b974 <__sread>:
 800b974:	b510      	push	{r4, lr}
 800b976:	460c      	mov	r4, r1
 800b978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b97c:	f000 f8fc 	bl	800bb78 <_read_r>
 800b980:	2800      	cmp	r0, #0
 800b982:	bfab      	itete	ge
 800b984:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b986:	89a3      	ldrhlt	r3, [r4, #12]
 800b988:	181b      	addge	r3, r3, r0
 800b98a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b98e:	bfac      	ite	ge
 800b990:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b992:	81a3      	strhlt	r3, [r4, #12]
 800b994:	bd10      	pop	{r4, pc}

0800b996 <__swrite>:
 800b996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b99a:	461f      	mov	r7, r3
 800b99c:	898b      	ldrh	r3, [r1, #12]
 800b99e:	05db      	lsls	r3, r3, #23
 800b9a0:	4605      	mov	r5, r0
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	4616      	mov	r6, r2
 800b9a6:	d505      	bpl.n	800b9b4 <__swrite+0x1e>
 800b9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ac:	2302      	movs	r3, #2
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f000 f8d0 	bl	800bb54 <_lseek_r>
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b9be:	81a3      	strh	r3, [r4, #12]
 800b9c0:	4632      	mov	r2, r6
 800b9c2:	463b      	mov	r3, r7
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ca:	f000 b8e7 	b.w	800bb9c <_write_r>

0800b9ce <__sseek>:
 800b9ce:	b510      	push	{r4, lr}
 800b9d0:	460c      	mov	r4, r1
 800b9d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d6:	f000 f8bd 	bl	800bb54 <_lseek_r>
 800b9da:	1c43      	adds	r3, r0, #1
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	bf15      	itete	ne
 800b9e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b9e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b9e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b9ea:	81a3      	strheq	r3, [r4, #12]
 800b9ec:	bf18      	it	ne
 800b9ee:	81a3      	strhne	r3, [r4, #12]
 800b9f0:	bd10      	pop	{r4, pc}

0800b9f2 <__sclose>:
 800b9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f6:	f000 b89d 	b.w	800bb34 <_close_r>

0800b9fa <__swbuf_r>:
 800b9fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fc:	460e      	mov	r6, r1
 800b9fe:	4614      	mov	r4, r2
 800ba00:	4605      	mov	r5, r0
 800ba02:	b118      	cbz	r0, 800ba0c <__swbuf_r+0x12>
 800ba04:	6a03      	ldr	r3, [r0, #32]
 800ba06:	b90b      	cbnz	r3, 800ba0c <__swbuf_r+0x12>
 800ba08:	f7ff ff20 	bl	800b84c <__sinit>
 800ba0c:	69a3      	ldr	r3, [r4, #24]
 800ba0e:	60a3      	str	r3, [r4, #8]
 800ba10:	89a3      	ldrh	r3, [r4, #12]
 800ba12:	071a      	lsls	r2, r3, #28
 800ba14:	d501      	bpl.n	800ba1a <__swbuf_r+0x20>
 800ba16:	6923      	ldr	r3, [r4, #16]
 800ba18:	b943      	cbnz	r3, 800ba2c <__swbuf_r+0x32>
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f000 f82b 	bl	800ba78 <__swsetup_r>
 800ba22:	b118      	cbz	r0, 800ba2c <__swbuf_r+0x32>
 800ba24:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ba28:	4638      	mov	r0, r7
 800ba2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba2c:	6823      	ldr	r3, [r4, #0]
 800ba2e:	6922      	ldr	r2, [r4, #16]
 800ba30:	1a98      	subs	r0, r3, r2
 800ba32:	6963      	ldr	r3, [r4, #20]
 800ba34:	b2f6      	uxtb	r6, r6
 800ba36:	4283      	cmp	r3, r0
 800ba38:	4637      	mov	r7, r6
 800ba3a:	dc05      	bgt.n	800ba48 <__swbuf_r+0x4e>
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	4628      	mov	r0, r5
 800ba40:	f000 fa7e 	bl	800bf40 <_fflush_r>
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d1ed      	bne.n	800ba24 <__swbuf_r+0x2a>
 800ba48:	68a3      	ldr	r3, [r4, #8]
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	60a3      	str	r3, [r4, #8]
 800ba4e:	6823      	ldr	r3, [r4, #0]
 800ba50:	1c5a      	adds	r2, r3, #1
 800ba52:	6022      	str	r2, [r4, #0]
 800ba54:	701e      	strb	r6, [r3, #0]
 800ba56:	6962      	ldr	r2, [r4, #20]
 800ba58:	1c43      	adds	r3, r0, #1
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d004      	beq.n	800ba68 <__swbuf_r+0x6e>
 800ba5e:	89a3      	ldrh	r3, [r4, #12]
 800ba60:	07db      	lsls	r3, r3, #31
 800ba62:	d5e1      	bpl.n	800ba28 <__swbuf_r+0x2e>
 800ba64:	2e0a      	cmp	r6, #10
 800ba66:	d1df      	bne.n	800ba28 <__swbuf_r+0x2e>
 800ba68:	4621      	mov	r1, r4
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	f000 fa68 	bl	800bf40 <_fflush_r>
 800ba70:	2800      	cmp	r0, #0
 800ba72:	d0d9      	beq.n	800ba28 <__swbuf_r+0x2e>
 800ba74:	e7d6      	b.n	800ba24 <__swbuf_r+0x2a>
	...

0800ba78 <__swsetup_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4b29      	ldr	r3, [pc, #164]	@ (800bb20 <__swsetup_r+0xa8>)
 800ba7c:	4605      	mov	r5, r0
 800ba7e:	6818      	ldr	r0, [r3, #0]
 800ba80:	460c      	mov	r4, r1
 800ba82:	b118      	cbz	r0, 800ba8c <__swsetup_r+0x14>
 800ba84:	6a03      	ldr	r3, [r0, #32]
 800ba86:	b90b      	cbnz	r3, 800ba8c <__swsetup_r+0x14>
 800ba88:	f7ff fee0 	bl	800b84c <__sinit>
 800ba8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba90:	0719      	lsls	r1, r3, #28
 800ba92:	d422      	bmi.n	800bada <__swsetup_r+0x62>
 800ba94:	06da      	lsls	r2, r3, #27
 800ba96:	d407      	bmi.n	800baa8 <__swsetup_r+0x30>
 800ba98:	2209      	movs	r2, #9
 800ba9a:	602a      	str	r2, [r5, #0]
 800ba9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baa0:	81a3      	strh	r3, [r4, #12]
 800baa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800baa6:	e033      	b.n	800bb10 <__swsetup_r+0x98>
 800baa8:	0758      	lsls	r0, r3, #29
 800baaa:	d512      	bpl.n	800bad2 <__swsetup_r+0x5a>
 800baac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800baae:	b141      	cbz	r1, 800bac2 <__swsetup_r+0x4a>
 800bab0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bab4:	4299      	cmp	r1, r3
 800bab6:	d002      	beq.n	800babe <__swsetup_r+0x46>
 800bab8:	4628      	mov	r0, r5
 800baba:	f000 f8bd 	bl	800bc38 <_free_r>
 800babe:	2300      	movs	r3, #0
 800bac0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bac2:	89a3      	ldrh	r3, [r4, #12]
 800bac4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bac8:	81a3      	strh	r3, [r4, #12]
 800baca:	2300      	movs	r3, #0
 800bacc:	6063      	str	r3, [r4, #4]
 800bace:	6923      	ldr	r3, [r4, #16]
 800bad0:	6023      	str	r3, [r4, #0]
 800bad2:	89a3      	ldrh	r3, [r4, #12]
 800bad4:	f043 0308 	orr.w	r3, r3, #8
 800bad8:	81a3      	strh	r3, [r4, #12]
 800bada:	6923      	ldr	r3, [r4, #16]
 800badc:	b94b      	cbnz	r3, 800baf2 <__swsetup_r+0x7a>
 800bade:	89a3      	ldrh	r3, [r4, #12]
 800bae0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bae8:	d003      	beq.n	800baf2 <__swsetup_r+0x7a>
 800baea:	4621      	mov	r1, r4
 800baec:	4628      	mov	r0, r5
 800baee:	f000 fa75 	bl	800bfdc <__smakebuf_r>
 800baf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baf6:	f013 0201 	ands.w	r2, r3, #1
 800bafa:	d00a      	beq.n	800bb12 <__swsetup_r+0x9a>
 800bafc:	2200      	movs	r2, #0
 800bafe:	60a2      	str	r2, [r4, #8]
 800bb00:	6962      	ldr	r2, [r4, #20]
 800bb02:	4252      	negs	r2, r2
 800bb04:	61a2      	str	r2, [r4, #24]
 800bb06:	6922      	ldr	r2, [r4, #16]
 800bb08:	b942      	cbnz	r2, 800bb1c <__swsetup_r+0xa4>
 800bb0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bb0e:	d1c5      	bne.n	800ba9c <__swsetup_r+0x24>
 800bb10:	bd38      	pop	{r3, r4, r5, pc}
 800bb12:	0799      	lsls	r1, r3, #30
 800bb14:	bf58      	it	pl
 800bb16:	6962      	ldrpl	r2, [r4, #20]
 800bb18:	60a2      	str	r2, [r4, #8]
 800bb1a:	e7f4      	b.n	800bb06 <__swsetup_r+0x8e>
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	e7f7      	b.n	800bb10 <__swsetup_r+0x98>
 800bb20:	2000001c 	.word	0x2000001c

0800bb24 <memset>:
 800bb24:	4402      	add	r2, r0
 800bb26:	4603      	mov	r3, r0
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d100      	bne.n	800bb2e <memset+0xa>
 800bb2c:	4770      	bx	lr
 800bb2e:	f803 1b01 	strb.w	r1, [r3], #1
 800bb32:	e7f9      	b.n	800bb28 <memset+0x4>

0800bb34 <_close_r>:
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	4d06      	ldr	r5, [pc, #24]	@ (800bb50 <_close_r+0x1c>)
 800bb38:	2300      	movs	r3, #0
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	4608      	mov	r0, r1
 800bb3e:	602b      	str	r3, [r5, #0]
 800bb40:	f7f9 fd7d 	bl	800563e <_close>
 800bb44:	1c43      	adds	r3, r0, #1
 800bb46:	d102      	bne.n	800bb4e <_close_r+0x1a>
 800bb48:	682b      	ldr	r3, [r5, #0]
 800bb4a:	b103      	cbz	r3, 800bb4e <_close_r+0x1a>
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	bd38      	pop	{r3, r4, r5, pc}
 800bb50:	20001cc8 	.word	0x20001cc8

0800bb54 <_lseek_r>:
 800bb54:	b538      	push	{r3, r4, r5, lr}
 800bb56:	4d07      	ldr	r5, [pc, #28]	@ (800bb74 <_lseek_r+0x20>)
 800bb58:	4604      	mov	r4, r0
 800bb5a:	4608      	mov	r0, r1
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	2200      	movs	r2, #0
 800bb60:	602a      	str	r2, [r5, #0]
 800bb62:	461a      	mov	r2, r3
 800bb64:	f7f9 fd92 	bl	800568c <_lseek>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d102      	bne.n	800bb72 <_lseek_r+0x1e>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	b103      	cbz	r3, 800bb72 <_lseek_r+0x1e>
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	20001cc8 	.word	0x20001cc8

0800bb78 <_read_r>:
 800bb78:	b538      	push	{r3, r4, r5, lr}
 800bb7a:	4d07      	ldr	r5, [pc, #28]	@ (800bb98 <_read_r+0x20>)
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	4608      	mov	r0, r1
 800bb80:	4611      	mov	r1, r2
 800bb82:	2200      	movs	r2, #0
 800bb84:	602a      	str	r2, [r5, #0]
 800bb86:	461a      	mov	r2, r3
 800bb88:	f7f9 fd20 	bl	80055cc <_read>
 800bb8c:	1c43      	adds	r3, r0, #1
 800bb8e:	d102      	bne.n	800bb96 <_read_r+0x1e>
 800bb90:	682b      	ldr	r3, [r5, #0]
 800bb92:	b103      	cbz	r3, 800bb96 <_read_r+0x1e>
 800bb94:	6023      	str	r3, [r4, #0]
 800bb96:	bd38      	pop	{r3, r4, r5, pc}
 800bb98:	20001cc8 	.word	0x20001cc8

0800bb9c <_write_r>:
 800bb9c:	b538      	push	{r3, r4, r5, lr}
 800bb9e:	4d07      	ldr	r5, [pc, #28]	@ (800bbbc <_write_r+0x20>)
 800bba0:	4604      	mov	r4, r0
 800bba2:	4608      	mov	r0, r1
 800bba4:	4611      	mov	r1, r2
 800bba6:	2200      	movs	r2, #0
 800bba8:	602a      	str	r2, [r5, #0]
 800bbaa:	461a      	mov	r2, r3
 800bbac:	f7f9 fd2b 	bl	8005606 <_write>
 800bbb0:	1c43      	adds	r3, r0, #1
 800bbb2:	d102      	bne.n	800bbba <_write_r+0x1e>
 800bbb4:	682b      	ldr	r3, [r5, #0]
 800bbb6:	b103      	cbz	r3, 800bbba <_write_r+0x1e>
 800bbb8:	6023      	str	r3, [r4, #0]
 800bbba:	bd38      	pop	{r3, r4, r5, pc}
 800bbbc:	20001cc8 	.word	0x20001cc8

0800bbc0 <__errno>:
 800bbc0:	4b01      	ldr	r3, [pc, #4]	@ (800bbc8 <__errno+0x8>)
 800bbc2:	6818      	ldr	r0, [r3, #0]
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	2000001c 	.word	0x2000001c

0800bbcc <__libc_init_array>:
 800bbcc:	b570      	push	{r4, r5, r6, lr}
 800bbce:	4d0d      	ldr	r5, [pc, #52]	@ (800bc04 <__libc_init_array+0x38>)
 800bbd0:	4c0d      	ldr	r4, [pc, #52]	@ (800bc08 <__libc_init_array+0x3c>)
 800bbd2:	1b64      	subs	r4, r4, r5
 800bbd4:	10a4      	asrs	r4, r4, #2
 800bbd6:	2600      	movs	r6, #0
 800bbd8:	42a6      	cmp	r6, r4
 800bbda:	d109      	bne.n	800bbf0 <__libc_init_array+0x24>
 800bbdc:	4d0b      	ldr	r5, [pc, #44]	@ (800bc0c <__libc_init_array+0x40>)
 800bbde:	4c0c      	ldr	r4, [pc, #48]	@ (800bc10 <__libc_init_array+0x44>)
 800bbe0:	f000 fa6a 	bl	800c0b8 <_init>
 800bbe4:	1b64      	subs	r4, r4, r5
 800bbe6:	10a4      	asrs	r4, r4, #2
 800bbe8:	2600      	movs	r6, #0
 800bbea:	42a6      	cmp	r6, r4
 800bbec:	d105      	bne.n	800bbfa <__libc_init_array+0x2e>
 800bbee:	bd70      	pop	{r4, r5, r6, pc}
 800bbf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbf4:	4798      	blx	r3
 800bbf6:	3601      	adds	r6, #1
 800bbf8:	e7ee      	b.n	800bbd8 <__libc_init_array+0xc>
 800bbfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbfe:	4798      	blx	r3
 800bc00:	3601      	adds	r6, #1
 800bc02:	e7f2      	b.n	800bbea <__libc_init_array+0x1e>
 800bc04:	0800c688 	.word	0x0800c688
 800bc08:	0800c688 	.word	0x0800c688
 800bc0c:	0800c688 	.word	0x0800c688
 800bc10:	0800c690 	.word	0x0800c690

0800bc14 <__retarget_lock_init_recursive>:
 800bc14:	4770      	bx	lr

0800bc16 <__retarget_lock_acquire_recursive>:
 800bc16:	4770      	bx	lr

0800bc18 <__retarget_lock_release_recursive>:
 800bc18:	4770      	bx	lr

0800bc1a <memcpy>:
 800bc1a:	440a      	add	r2, r1
 800bc1c:	4291      	cmp	r1, r2
 800bc1e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bc22:	d100      	bne.n	800bc26 <memcpy+0xc>
 800bc24:	4770      	bx	lr
 800bc26:	b510      	push	{r4, lr}
 800bc28:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc30:	4291      	cmp	r1, r2
 800bc32:	d1f9      	bne.n	800bc28 <memcpy+0xe>
 800bc34:	bd10      	pop	{r4, pc}
	...

0800bc38 <_free_r>:
 800bc38:	b538      	push	{r3, r4, r5, lr}
 800bc3a:	4605      	mov	r5, r0
 800bc3c:	2900      	cmp	r1, #0
 800bc3e:	d041      	beq.n	800bcc4 <_free_r+0x8c>
 800bc40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc44:	1f0c      	subs	r4, r1, #4
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	bfb8      	it	lt
 800bc4a:	18e4      	addlt	r4, r4, r3
 800bc4c:	f000 f8e0 	bl	800be10 <__malloc_lock>
 800bc50:	4a1d      	ldr	r2, [pc, #116]	@ (800bcc8 <_free_r+0x90>)
 800bc52:	6813      	ldr	r3, [r2, #0]
 800bc54:	b933      	cbnz	r3, 800bc64 <_free_r+0x2c>
 800bc56:	6063      	str	r3, [r4, #4]
 800bc58:	6014      	str	r4, [r2, #0]
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc60:	f000 b8dc 	b.w	800be1c <__malloc_unlock>
 800bc64:	42a3      	cmp	r3, r4
 800bc66:	d908      	bls.n	800bc7a <_free_r+0x42>
 800bc68:	6820      	ldr	r0, [r4, #0]
 800bc6a:	1821      	adds	r1, r4, r0
 800bc6c:	428b      	cmp	r3, r1
 800bc6e:	bf01      	itttt	eq
 800bc70:	6819      	ldreq	r1, [r3, #0]
 800bc72:	685b      	ldreq	r3, [r3, #4]
 800bc74:	1809      	addeq	r1, r1, r0
 800bc76:	6021      	streq	r1, [r4, #0]
 800bc78:	e7ed      	b.n	800bc56 <_free_r+0x1e>
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	b10b      	cbz	r3, 800bc84 <_free_r+0x4c>
 800bc80:	42a3      	cmp	r3, r4
 800bc82:	d9fa      	bls.n	800bc7a <_free_r+0x42>
 800bc84:	6811      	ldr	r1, [r2, #0]
 800bc86:	1850      	adds	r0, r2, r1
 800bc88:	42a0      	cmp	r0, r4
 800bc8a:	d10b      	bne.n	800bca4 <_free_r+0x6c>
 800bc8c:	6820      	ldr	r0, [r4, #0]
 800bc8e:	4401      	add	r1, r0
 800bc90:	1850      	adds	r0, r2, r1
 800bc92:	4283      	cmp	r3, r0
 800bc94:	6011      	str	r1, [r2, #0]
 800bc96:	d1e0      	bne.n	800bc5a <_free_r+0x22>
 800bc98:	6818      	ldr	r0, [r3, #0]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	6053      	str	r3, [r2, #4]
 800bc9e:	4408      	add	r0, r1
 800bca0:	6010      	str	r0, [r2, #0]
 800bca2:	e7da      	b.n	800bc5a <_free_r+0x22>
 800bca4:	d902      	bls.n	800bcac <_free_r+0x74>
 800bca6:	230c      	movs	r3, #12
 800bca8:	602b      	str	r3, [r5, #0]
 800bcaa:	e7d6      	b.n	800bc5a <_free_r+0x22>
 800bcac:	6820      	ldr	r0, [r4, #0]
 800bcae:	1821      	adds	r1, r4, r0
 800bcb0:	428b      	cmp	r3, r1
 800bcb2:	bf04      	itt	eq
 800bcb4:	6819      	ldreq	r1, [r3, #0]
 800bcb6:	685b      	ldreq	r3, [r3, #4]
 800bcb8:	6063      	str	r3, [r4, #4]
 800bcba:	bf04      	itt	eq
 800bcbc:	1809      	addeq	r1, r1, r0
 800bcbe:	6021      	streq	r1, [r4, #0]
 800bcc0:	6054      	str	r4, [r2, #4]
 800bcc2:	e7ca      	b.n	800bc5a <_free_r+0x22>
 800bcc4:	bd38      	pop	{r3, r4, r5, pc}
 800bcc6:	bf00      	nop
 800bcc8:	20001cd4 	.word	0x20001cd4

0800bccc <sbrk_aligned>:
 800bccc:	b570      	push	{r4, r5, r6, lr}
 800bcce:	4e0f      	ldr	r6, [pc, #60]	@ (800bd0c <sbrk_aligned+0x40>)
 800bcd0:	460c      	mov	r4, r1
 800bcd2:	6831      	ldr	r1, [r6, #0]
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	b911      	cbnz	r1, 800bcde <sbrk_aligned+0x12>
 800bcd8:	f000 f9de 	bl	800c098 <_sbrk_r>
 800bcdc:	6030      	str	r0, [r6, #0]
 800bcde:	4621      	mov	r1, r4
 800bce0:	4628      	mov	r0, r5
 800bce2:	f000 f9d9 	bl	800c098 <_sbrk_r>
 800bce6:	1c43      	adds	r3, r0, #1
 800bce8:	d103      	bne.n	800bcf2 <sbrk_aligned+0x26>
 800bcea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bcee:	4620      	mov	r0, r4
 800bcf0:	bd70      	pop	{r4, r5, r6, pc}
 800bcf2:	1cc4      	adds	r4, r0, #3
 800bcf4:	f024 0403 	bic.w	r4, r4, #3
 800bcf8:	42a0      	cmp	r0, r4
 800bcfa:	d0f8      	beq.n	800bcee <sbrk_aligned+0x22>
 800bcfc:	1a21      	subs	r1, r4, r0
 800bcfe:	4628      	mov	r0, r5
 800bd00:	f000 f9ca 	bl	800c098 <_sbrk_r>
 800bd04:	3001      	adds	r0, #1
 800bd06:	d1f2      	bne.n	800bcee <sbrk_aligned+0x22>
 800bd08:	e7ef      	b.n	800bcea <sbrk_aligned+0x1e>
 800bd0a:	bf00      	nop
 800bd0c:	20001cd0 	.word	0x20001cd0

0800bd10 <_malloc_r>:
 800bd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd14:	1ccd      	adds	r5, r1, #3
 800bd16:	f025 0503 	bic.w	r5, r5, #3
 800bd1a:	3508      	adds	r5, #8
 800bd1c:	2d0c      	cmp	r5, #12
 800bd1e:	bf38      	it	cc
 800bd20:	250c      	movcc	r5, #12
 800bd22:	2d00      	cmp	r5, #0
 800bd24:	4606      	mov	r6, r0
 800bd26:	db01      	blt.n	800bd2c <_malloc_r+0x1c>
 800bd28:	42a9      	cmp	r1, r5
 800bd2a:	d904      	bls.n	800bd36 <_malloc_r+0x26>
 800bd2c:	230c      	movs	r3, #12
 800bd2e:	6033      	str	r3, [r6, #0]
 800bd30:	2000      	movs	r0, #0
 800bd32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be0c <_malloc_r+0xfc>
 800bd3a:	f000 f869 	bl	800be10 <__malloc_lock>
 800bd3e:	f8d8 3000 	ldr.w	r3, [r8]
 800bd42:	461c      	mov	r4, r3
 800bd44:	bb44      	cbnz	r4, 800bd98 <_malloc_r+0x88>
 800bd46:	4629      	mov	r1, r5
 800bd48:	4630      	mov	r0, r6
 800bd4a:	f7ff ffbf 	bl	800bccc <sbrk_aligned>
 800bd4e:	1c43      	adds	r3, r0, #1
 800bd50:	4604      	mov	r4, r0
 800bd52:	d158      	bne.n	800be06 <_malloc_r+0xf6>
 800bd54:	f8d8 4000 	ldr.w	r4, [r8]
 800bd58:	4627      	mov	r7, r4
 800bd5a:	2f00      	cmp	r7, #0
 800bd5c:	d143      	bne.n	800bde6 <_malloc_r+0xd6>
 800bd5e:	2c00      	cmp	r4, #0
 800bd60:	d04b      	beq.n	800bdfa <_malloc_r+0xea>
 800bd62:	6823      	ldr	r3, [r4, #0]
 800bd64:	4639      	mov	r1, r7
 800bd66:	4630      	mov	r0, r6
 800bd68:	eb04 0903 	add.w	r9, r4, r3
 800bd6c:	f000 f994 	bl	800c098 <_sbrk_r>
 800bd70:	4581      	cmp	r9, r0
 800bd72:	d142      	bne.n	800bdfa <_malloc_r+0xea>
 800bd74:	6821      	ldr	r1, [r4, #0]
 800bd76:	1a6d      	subs	r5, r5, r1
 800bd78:	4629      	mov	r1, r5
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	f7ff ffa6 	bl	800bccc <sbrk_aligned>
 800bd80:	3001      	adds	r0, #1
 800bd82:	d03a      	beq.n	800bdfa <_malloc_r+0xea>
 800bd84:	6823      	ldr	r3, [r4, #0]
 800bd86:	442b      	add	r3, r5
 800bd88:	6023      	str	r3, [r4, #0]
 800bd8a:	f8d8 3000 	ldr.w	r3, [r8]
 800bd8e:	685a      	ldr	r2, [r3, #4]
 800bd90:	bb62      	cbnz	r2, 800bdec <_malloc_r+0xdc>
 800bd92:	f8c8 7000 	str.w	r7, [r8]
 800bd96:	e00f      	b.n	800bdb8 <_malloc_r+0xa8>
 800bd98:	6822      	ldr	r2, [r4, #0]
 800bd9a:	1b52      	subs	r2, r2, r5
 800bd9c:	d420      	bmi.n	800bde0 <_malloc_r+0xd0>
 800bd9e:	2a0b      	cmp	r2, #11
 800bda0:	d917      	bls.n	800bdd2 <_malloc_r+0xc2>
 800bda2:	1961      	adds	r1, r4, r5
 800bda4:	42a3      	cmp	r3, r4
 800bda6:	6025      	str	r5, [r4, #0]
 800bda8:	bf18      	it	ne
 800bdaa:	6059      	strne	r1, [r3, #4]
 800bdac:	6863      	ldr	r3, [r4, #4]
 800bdae:	bf08      	it	eq
 800bdb0:	f8c8 1000 	streq.w	r1, [r8]
 800bdb4:	5162      	str	r2, [r4, r5]
 800bdb6:	604b      	str	r3, [r1, #4]
 800bdb8:	4630      	mov	r0, r6
 800bdba:	f000 f82f 	bl	800be1c <__malloc_unlock>
 800bdbe:	f104 000b 	add.w	r0, r4, #11
 800bdc2:	1d23      	adds	r3, r4, #4
 800bdc4:	f020 0007 	bic.w	r0, r0, #7
 800bdc8:	1ac2      	subs	r2, r0, r3
 800bdca:	bf1c      	itt	ne
 800bdcc:	1a1b      	subne	r3, r3, r0
 800bdce:	50a3      	strne	r3, [r4, r2]
 800bdd0:	e7af      	b.n	800bd32 <_malloc_r+0x22>
 800bdd2:	6862      	ldr	r2, [r4, #4]
 800bdd4:	42a3      	cmp	r3, r4
 800bdd6:	bf0c      	ite	eq
 800bdd8:	f8c8 2000 	streq.w	r2, [r8]
 800bddc:	605a      	strne	r2, [r3, #4]
 800bdde:	e7eb      	b.n	800bdb8 <_malloc_r+0xa8>
 800bde0:	4623      	mov	r3, r4
 800bde2:	6864      	ldr	r4, [r4, #4]
 800bde4:	e7ae      	b.n	800bd44 <_malloc_r+0x34>
 800bde6:	463c      	mov	r4, r7
 800bde8:	687f      	ldr	r7, [r7, #4]
 800bdea:	e7b6      	b.n	800bd5a <_malloc_r+0x4a>
 800bdec:	461a      	mov	r2, r3
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	42a3      	cmp	r3, r4
 800bdf2:	d1fb      	bne.n	800bdec <_malloc_r+0xdc>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	6053      	str	r3, [r2, #4]
 800bdf8:	e7de      	b.n	800bdb8 <_malloc_r+0xa8>
 800bdfa:	230c      	movs	r3, #12
 800bdfc:	6033      	str	r3, [r6, #0]
 800bdfe:	4630      	mov	r0, r6
 800be00:	f000 f80c 	bl	800be1c <__malloc_unlock>
 800be04:	e794      	b.n	800bd30 <_malloc_r+0x20>
 800be06:	6005      	str	r5, [r0, #0]
 800be08:	e7d6      	b.n	800bdb8 <_malloc_r+0xa8>
 800be0a:	bf00      	nop
 800be0c:	20001cd4 	.word	0x20001cd4

0800be10 <__malloc_lock>:
 800be10:	4801      	ldr	r0, [pc, #4]	@ (800be18 <__malloc_lock+0x8>)
 800be12:	f7ff bf00 	b.w	800bc16 <__retarget_lock_acquire_recursive>
 800be16:	bf00      	nop
 800be18:	20001ccc 	.word	0x20001ccc

0800be1c <__malloc_unlock>:
 800be1c:	4801      	ldr	r0, [pc, #4]	@ (800be24 <__malloc_unlock+0x8>)
 800be1e:	f7ff befb 	b.w	800bc18 <__retarget_lock_release_recursive>
 800be22:	bf00      	nop
 800be24:	20001ccc 	.word	0x20001ccc

0800be28 <_malloc_usable_size_r>:
 800be28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be2c:	1f18      	subs	r0, r3, #4
 800be2e:	2b00      	cmp	r3, #0
 800be30:	bfbc      	itt	lt
 800be32:	580b      	ldrlt	r3, [r1, r0]
 800be34:	18c0      	addlt	r0, r0, r3
 800be36:	4770      	bx	lr

0800be38 <__sflush_r>:
 800be38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be40:	0716      	lsls	r6, r2, #28
 800be42:	4605      	mov	r5, r0
 800be44:	460c      	mov	r4, r1
 800be46:	d454      	bmi.n	800bef2 <__sflush_r+0xba>
 800be48:	684b      	ldr	r3, [r1, #4]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	dc02      	bgt.n	800be54 <__sflush_r+0x1c>
 800be4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be50:	2b00      	cmp	r3, #0
 800be52:	dd48      	ble.n	800bee6 <__sflush_r+0xae>
 800be54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be56:	2e00      	cmp	r6, #0
 800be58:	d045      	beq.n	800bee6 <__sflush_r+0xae>
 800be5a:	2300      	movs	r3, #0
 800be5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be60:	682f      	ldr	r7, [r5, #0]
 800be62:	6a21      	ldr	r1, [r4, #32]
 800be64:	602b      	str	r3, [r5, #0]
 800be66:	d030      	beq.n	800beca <__sflush_r+0x92>
 800be68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be6a:	89a3      	ldrh	r3, [r4, #12]
 800be6c:	0759      	lsls	r1, r3, #29
 800be6e:	d505      	bpl.n	800be7c <__sflush_r+0x44>
 800be70:	6863      	ldr	r3, [r4, #4]
 800be72:	1ad2      	subs	r2, r2, r3
 800be74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be76:	b10b      	cbz	r3, 800be7c <__sflush_r+0x44>
 800be78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be7a:	1ad2      	subs	r2, r2, r3
 800be7c:	2300      	movs	r3, #0
 800be7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be80:	6a21      	ldr	r1, [r4, #32]
 800be82:	4628      	mov	r0, r5
 800be84:	47b0      	blx	r6
 800be86:	1c43      	adds	r3, r0, #1
 800be88:	89a3      	ldrh	r3, [r4, #12]
 800be8a:	d106      	bne.n	800be9a <__sflush_r+0x62>
 800be8c:	6829      	ldr	r1, [r5, #0]
 800be8e:	291d      	cmp	r1, #29
 800be90:	d82b      	bhi.n	800beea <__sflush_r+0xb2>
 800be92:	4a2a      	ldr	r2, [pc, #168]	@ (800bf3c <__sflush_r+0x104>)
 800be94:	410a      	asrs	r2, r1
 800be96:	07d6      	lsls	r6, r2, #31
 800be98:	d427      	bmi.n	800beea <__sflush_r+0xb2>
 800be9a:	2200      	movs	r2, #0
 800be9c:	6062      	str	r2, [r4, #4]
 800be9e:	04d9      	lsls	r1, r3, #19
 800bea0:	6922      	ldr	r2, [r4, #16]
 800bea2:	6022      	str	r2, [r4, #0]
 800bea4:	d504      	bpl.n	800beb0 <__sflush_r+0x78>
 800bea6:	1c42      	adds	r2, r0, #1
 800bea8:	d101      	bne.n	800beae <__sflush_r+0x76>
 800beaa:	682b      	ldr	r3, [r5, #0]
 800beac:	b903      	cbnz	r3, 800beb0 <__sflush_r+0x78>
 800beae:	6560      	str	r0, [r4, #84]	@ 0x54
 800beb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800beb2:	602f      	str	r7, [r5, #0]
 800beb4:	b1b9      	cbz	r1, 800bee6 <__sflush_r+0xae>
 800beb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800beba:	4299      	cmp	r1, r3
 800bebc:	d002      	beq.n	800bec4 <__sflush_r+0x8c>
 800bebe:	4628      	mov	r0, r5
 800bec0:	f7ff feba 	bl	800bc38 <_free_r>
 800bec4:	2300      	movs	r3, #0
 800bec6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bec8:	e00d      	b.n	800bee6 <__sflush_r+0xae>
 800beca:	2301      	movs	r3, #1
 800becc:	4628      	mov	r0, r5
 800bece:	47b0      	blx	r6
 800bed0:	4602      	mov	r2, r0
 800bed2:	1c50      	adds	r0, r2, #1
 800bed4:	d1c9      	bne.n	800be6a <__sflush_r+0x32>
 800bed6:	682b      	ldr	r3, [r5, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d0c6      	beq.n	800be6a <__sflush_r+0x32>
 800bedc:	2b1d      	cmp	r3, #29
 800bede:	d001      	beq.n	800bee4 <__sflush_r+0xac>
 800bee0:	2b16      	cmp	r3, #22
 800bee2:	d11e      	bne.n	800bf22 <__sflush_r+0xea>
 800bee4:	602f      	str	r7, [r5, #0]
 800bee6:	2000      	movs	r0, #0
 800bee8:	e022      	b.n	800bf30 <__sflush_r+0xf8>
 800beea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beee:	b21b      	sxth	r3, r3
 800bef0:	e01b      	b.n	800bf2a <__sflush_r+0xf2>
 800bef2:	690f      	ldr	r7, [r1, #16]
 800bef4:	2f00      	cmp	r7, #0
 800bef6:	d0f6      	beq.n	800bee6 <__sflush_r+0xae>
 800bef8:	0793      	lsls	r3, r2, #30
 800befa:	680e      	ldr	r6, [r1, #0]
 800befc:	bf08      	it	eq
 800befe:	694b      	ldreq	r3, [r1, #20]
 800bf00:	600f      	str	r7, [r1, #0]
 800bf02:	bf18      	it	ne
 800bf04:	2300      	movne	r3, #0
 800bf06:	eba6 0807 	sub.w	r8, r6, r7
 800bf0a:	608b      	str	r3, [r1, #8]
 800bf0c:	f1b8 0f00 	cmp.w	r8, #0
 800bf10:	dde9      	ble.n	800bee6 <__sflush_r+0xae>
 800bf12:	6a21      	ldr	r1, [r4, #32]
 800bf14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf16:	4643      	mov	r3, r8
 800bf18:	463a      	mov	r2, r7
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	47b0      	blx	r6
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	dc08      	bgt.n	800bf34 <__sflush_r+0xfc>
 800bf22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf2a:	81a3      	strh	r3, [r4, #12]
 800bf2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf34:	4407      	add	r7, r0
 800bf36:	eba8 0800 	sub.w	r8, r8, r0
 800bf3a:	e7e7      	b.n	800bf0c <__sflush_r+0xd4>
 800bf3c:	dfbffffe 	.word	0xdfbffffe

0800bf40 <_fflush_r>:
 800bf40:	b538      	push	{r3, r4, r5, lr}
 800bf42:	690b      	ldr	r3, [r1, #16]
 800bf44:	4605      	mov	r5, r0
 800bf46:	460c      	mov	r4, r1
 800bf48:	b913      	cbnz	r3, 800bf50 <_fflush_r+0x10>
 800bf4a:	2500      	movs	r5, #0
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	bd38      	pop	{r3, r4, r5, pc}
 800bf50:	b118      	cbz	r0, 800bf5a <_fflush_r+0x1a>
 800bf52:	6a03      	ldr	r3, [r0, #32]
 800bf54:	b90b      	cbnz	r3, 800bf5a <_fflush_r+0x1a>
 800bf56:	f7ff fc79 	bl	800b84c <__sinit>
 800bf5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d0f3      	beq.n	800bf4a <_fflush_r+0xa>
 800bf62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf64:	07d0      	lsls	r0, r2, #31
 800bf66:	d404      	bmi.n	800bf72 <_fflush_r+0x32>
 800bf68:	0599      	lsls	r1, r3, #22
 800bf6a:	d402      	bmi.n	800bf72 <_fflush_r+0x32>
 800bf6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf6e:	f7ff fe52 	bl	800bc16 <__retarget_lock_acquire_recursive>
 800bf72:	4628      	mov	r0, r5
 800bf74:	4621      	mov	r1, r4
 800bf76:	f7ff ff5f 	bl	800be38 <__sflush_r>
 800bf7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf7c:	07da      	lsls	r2, r3, #31
 800bf7e:	4605      	mov	r5, r0
 800bf80:	d4e4      	bmi.n	800bf4c <_fflush_r+0xc>
 800bf82:	89a3      	ldrh	r3, [r4, #12]
 800bf84:	059b      	lsls	r3, r3, #22
 800bf86:	d4e1      	bmi.n	800bf4c <_fflush_r+0xc>
 800bf88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf8a:	f7ff fe45 	bl	800bc18 <__retarget_lock_release_recursive>
 800bf8e:	e7dd      	b.n	800bf4c <_fflush_r+0xc>

0800bf90 <__swhatbuf_r>:
 800bf90:	b570      	push	{r4, r5, r6, lr}
 800bf92:	460c      	mov	r4, r1
 800bf94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf98:	2900      	cmp	r1, #0
 800bf9a:	b096      	sub	sp, #88	@ 0x58
 800bf9c:	4615      	mov	r5, r2
 800bf9e:	461e      	mov	r6, r3
 800bfa0:	da0d      	bge.n	800bfbe <__swhatbuf_r+0x2e>
 800bfa2:	89a3      	ldrh	r3, [r4, #12]
 800bfa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bfa8:	f04f 0100 	mov.w	r1, #0
 800bfac:	bf14      	ite	ne
 800bfae:	2340      	movne	r3, #64	@ 0x40
 800bfb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	6031      	str	r1, [r6, #0]
 800bfb8:	602b      	str	r3, [r5, #0]
 800bfba:	b016      	add	sp, #88	@ 0x58
 800bfbc:	bd70      	pop	{r4, r5, r6, pc}
 800bfbe:	466a      	mov	r2, sp
 800bfc0:	f000 f848 	bl	800c054 <_fstat_r>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	dbec      	blt.n	800bfa2 <__swhatbuf_r+0x12>
 800bfc8:	9901      	ldr	r1, [sp, #4]
 800bfca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bfce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bfd2:	4259      	negs	r1, r3
 800bfd4:	4159      	adcs	r1, r3
 800bfd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bfda:	e7eb      	b.n	800bfb4 <__swhatbuf_r+0x24>

0800bfdc <__smakebuf_r>:
 800bfdc:	898b      	ldrh	r3, [r1, #12]
 800bfde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfe0:	079d      	lsls	r5, r3, #30
 800bfe2:	4606      	mov	r6, r0
 800bfe4:	460c      	mov	r4, r1
 800bfe6:	d507      	bpl.n	800bff8 <__smakebuf_r+0x1c>
 800bfe8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bfec:	6023      	str	r3, [r4, #0]
 800bfee:	6123      	str	r3, [r4, #16]
 800bff0:	2301      	movs	r3, #1
 800bff2:	6163      	str	r3, [r4, #20]
 800bff4:	b003      	add	sp, #12
 800bff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bff8:	ab01      	add	r3, sp, #4
 800bffa:	466a      	mov	r2, sp
 800bffc:	f7ff ffc8 	bl	800bf90 <__swhatbuf_r>
 800c000:	9f00      	ldr	r7, [sp, #0]
 800c002:	4605      	mov	r5, r0
 800c004:	4639      	mov	r1, r7
 800c006:	4630      	mov	r0, r6
 800c008:	f7ff fe82 	bl	800bd10 <_malloc_r>
 800c00c:	b948      	cbnz	r0, 800c022 <__smakebuf_r+0x46>
 800c00e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c012:	059a      	lsls	r2, r3, #22
 800c014:	d4ee      	bmi.n	800bff4 <__smakebuf_r+0x18>
 800c016:	f023 0303 	bic.w	r3, r3, #3
 800c01a:	f043 0302 	orr.w	r3, r3, #2
 800c01e:	81a3      	strh	r3, [r4, #12]
 800c020:	e7e2      	b.n	800bfe8 <__smakebuf_r+0xc>
 800c022:	89a3      	ldrh	r3, [r4, #12]
 800c024:	6020      	str	r0, [r4, #0]
 800c026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c02a:	81a3      	strh	r3, [r4, #12]
 800c02c:	9b01      	ldr	r3, [sp, #4]
 800c02e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c032:	b15b      	cbz	r3, 800c04c <__smakebuf_r+0x70>
 800c034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c038:	4630      	mov	r0, r6
 800c03a:	f000 f81d 	bl	800c078 <_isatty_r>
 800c03e:	b128      	cbz	r0, 800c04c <__smakebuf_r+0x70>
 800c040:	89a3      	ldrh	r3, [r4, #12]
 800c042:	f023 0303 	bic.w	r3, r3, #3
 800c046:	f043 0301 	orr.w	r3, r3, #1
 800c04a:	81a3      	strh	r3, [r4, #12]
 800c04c:	89a3      	ldrh	r3, [r4, #12]
 800c04e:	431d      	orrs	r5, r3
 800c050:	81a5      	strh	r5, [r4, #12]
 800c052:	e7cf      	b.n	800bff4 <__smakebuf_r+0x18>

0800c054 <_fstat_r>:
 800c054:	b538      	push	{r3, r4, r5, lr}
 800c056:	4d07      	ldr	r5, [pc, #28]	@ (800c074 <_fstat_r+0x20>)
 800c058:	2300      	movs	r3, #0
 800c05a:	4604      	mov	r4, r0
 800c05c:	4608      	mov	r0, r1
 800c05e:	4611      	mov	r1, r2
 800c060:	602b      	str	r3, [r5, #0]
 800c062:	f7f9 faf8 	bl	8005656 <_fstat>
 800c066:	1c43      	adds	r3, r0, #1
 800c068:	d102      	bne.n	800c070 <_fstat_r+0x1c>
 800c06a:	682b      	ldr	r3, [r5, #0]
 800c06c:	b103      	cbz	r3, 800c070 <_fstat_r+0x1c>
 800c06e:	6023      	str	r3, [r4, #0]
 800c070:	bd38      	pop	{r3, r4, r5, pc}
 800c072:	bf00      	nop
 800c074:	20001cc8 	.word	0x20001cc8

0800c078 <_isatty_r>:
 800c078:	b538      	push	{r3, r4, r5, lr}
 800c07a:	4d06      	ldr	r5, [pc, #24]	@ (800c094 <_isatty_r+0x1c>)
 800c07c:	2300      	movs	r3, #0
 800c07e:	4604      	mov	r4, r0
 800c080:	4608      	mov	r0, r1
 800c082:	602b      	str	r3, [r5, #0]
 800c084:	f7f9 faf7 	bl	8005676 <_isatty>
 800c088:	1c43      	adds	r3, r0, #1
 800c08a:	d102      	bne.n	800c092 <_isatty_r+0x1a>
 800c08c:	682b      	ldr	r3, [r5, #0]
 800c08e:	b103      	cbz	r3, 800c092 <_isatty_r+0x1a>
 800c090:	6023      	str	r3, [r4, #0]
 800c092:	bd38      	pop	{r3, r4, r5, pc}
 800c094:	20001cc8 	.word	0x20001cc8

0800c098 <_sbrk_r>:
 800c098:	b538      	push	{r3, r4, r5, lr}
 800c09a:	4d06      	ldr	r5, [pc, #24]	@ (800c0b4 <_sbrk_r+0x1c>)
 800c09c:	2300      	movs	r3, #0
 800c09e:	4604      	mov	r4, r0
 800c0a0:	4608      	mov	r0, r1
 800c0a2:	602b      	str	r3, [r5, #0]
 800c0a4:	f7f9 fb00 	bl	80056a8 <_sbrk>
 800c0a8:	1c43      	adds	r3, r0, #1
 800c0aa:	d102      	bne.n	800c0b2 <_sbrk_r+0x1a>
 800c0ac:	682b      	ldr	r3, [r5, #0]
 800c0ae:	b103      	cbz	r3, 800c0b2 <_sbrk_r+0x1a>
 800c0b0:	6023      	str	r3, [r4, #0]
 800c0b2:	bd38      	pop	{r3, r4, r5, pc}
 800c0b4:	20001cc8 	.word	0x20001cc8

0800c0b8 <_init>:
 800c0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ba:	bf00      	nop
 800c0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0be:	bc08      	pop	{r3}
 800c0c0:	469e      	mov	lr, r3
 800c0c2:	4770      	bx	lr

0800c0c4 <_fini>:
 800c0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0c6:	bf00      	nop
 800c0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ca:	bc08      	pop	{r3}
 800c0cc:	469e      	mov	lr, r3
 800c0ce:	4770      	bx	lr
