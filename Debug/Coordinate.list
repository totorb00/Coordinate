
Coordinate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aea8  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  0800b070  0800b070  0000c070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b588  0800b588  0000d05c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b588  0800b588  0000c588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b590  0800b590  0000d05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b590  0800b590  0000c590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b598  0800b598  0000c598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800b59c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bd4  20000060  0800b5f8  0000d060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001c34  0800b5f8  0000dc34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188d4  00000000  00000000  0000d08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f46  00000000  00000000  00025960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  000288a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef1  00000000  00000000  00029b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023eb8  00000000  00000000  0002aa71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d9e  00000000  00000000  0004e929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da134  00000000  00000000  000656c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f7fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058e4  00000000  00000000  0013f840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00145124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000060 	.word	0x20000060
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b058 	.word	0x0800b058

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000064 	.word	0x20000064
 8000204:	0800b058 	.word	0x0800b058

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bc8:	f000 b96a 	b.w	8000ea0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	460c      	mov	r4, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14e      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	458c      	cmp	ip, r1
 8000bf4:	4686      	mov	lr, r0
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	d962      	bls.n	8000cc2 <__udivmoddi4+0xde>
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	4091      	lsls	r1, r2
 8000c04:	fa20 f303 	lsr.w	r3, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f f68c 	uxth.w	r6, ip
 8000c1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c22:	fb07 1114 	mls	r1, r7, r4, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb04 f106 	mul.w	r1, r4, r6
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c3a:	f080 8112 	bcs.w	8000e62 <__udivmoddi4+0x27e>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 810f 	bls.w	8000e62 <__udivmoddi4+0x27e>
 8000c44:	3c02      	subs	r4, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a59      	subs	r1, r3, r1
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c52:	fb07 1110 	mls	r1, r7, r0, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb00 f606 	mul.w	r6, r0, r6
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x94>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c6a:	f080 80fc 	bcs.w	8000e66 <__udivmoddi4+0x282>
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	f240 80f9 	bls.w	8000e66 <__udivmoddi4+0x282>
 8000c74:	4463      	add	r3, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa6>
 8000c82:	40d3      	lsrs	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xba>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb4>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x150>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xcc>
 8000caa:	4290      	cmp	r0, r2
 8000cac:	f0c0 80f0 	bcc.w	8000e90 <__udivmoddi4+0x2ac>
 8000cb0:	1a86      	subs	r6, r0, r2
 8000cb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d0e6      	beq.n	8000c8a <__udivmoddi4+0xa6>
 8000cbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc0:	e7e3      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x204>
 8000cc8:	eba1 040c 	sub.w	r4, r1, ip
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa1f f78c 	uxth.w	r7, ip
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cde:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb07 f006 	mul.w	r0, r7, r6
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x11c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x11a>
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cfe:	4626      	mov	r6, r4
 8000d00:	1a1c      	subs	r4, r3, r0
 8000d02:	fa1f f38e 	uxth.w	r3, lr
 8000d06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	429f      	cmp	r7, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x148>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x146>
 8000d24:	429f      	cmp	r7, r3
 8000d26:	f200 80b0 	bhi.w	8000e8a <__udivmoddi4+0x2a6>
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	1bdb      	subs	r3, r3, r7
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x9c>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d44:	fa04 f301 	lsl.w	r3, r4, r1
 8000d48:	ea43 030c 	orr.w	r3, r3, ip
 8000d4c:	40f4      	lsrs	r4, r6
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	0c38      	lsrs	r0, r7, #16
 8000d54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d58:	fbb4 fef0 	udiv	lr, r4, r0
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fb00 441e 	mls	r4, r0, lr, r4
 8000d64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d68:	fb0e f90c 	mul.w	r9, lr, ip
 8000d6c:	45a1      	cmp	r9, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x1a6>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d7a:	f080 8084 	bcs.w	8000e86 <__udivmoddi4+0x2a2>
 8000d7e:	45a1      	cmp	r9, r4
 8000d80:	f240 8081 	bls.w	8000e86 <__udivmoddi4+0x2a2>
 8000d84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	eba4 0409 	sub.w	r4, r4, r9
 8000d8e:	fa1f f983 	uxth.w	r9, r3
 8000d92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d96:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1d2>
 8000da6:	193c      	adds	r4, r7, r4
 8000da8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dac:	d267      	bcs.n	8000e7e <__udivmoddi4+0x29a>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d965      	bls.n	8000e7e <__udivmoddi4+0x29a>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dba:	fba0 9302 	umull	r9, r3, r0, r2
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	d351      	bcc.n	8000e6e <__udivmoddi4+0x28a>
 8000dca:	d04e      	beq.n	8000e6a <__udivmoddi4+0x286>
 8000dcc:	b155      	cbz	r5, 8000de4 <__udivmoddi4+0x200>
 8000dce:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	40cb      	lsrs	r3, r1
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c5 6400 	strd	r6, r4, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e750      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f103 	lsr.w	r1, r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa24 f303 	lsr.w	r3, r4, r3
 8000df8:	4094      	lsls	r4, r2
 8000dfa:	430c      	orrs	r4, r1
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e16:	fb00 f107 	mul.w	r1, r0, r7
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x24c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e26:	d22c      	bcs.n	8000e82 <__udivmoddi4+0x29e>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d92a      	bls.n	8000e82 <__udivmoddi4+0x29e>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb01 f307 	mul.w	r3, r1, r7
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x276>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e50:	d213      	bcs.n	8000e7a <__udivmoddi4+0x296>
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	d911      	bls.n	8000e7a <__udivmoddi4+0x296>
 8000e56:	3902      	subs	r1, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	1ae4      	subs	r4, r4, r3
 8000e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e60:	e739      	b.n	8000cd6 <__udivmoddi4+0xf2>
 8000e62:	4604      	mov	r4, r0
 8000e64:	e6f0      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e706      	b.n	8000c78 <__udivmoddi4+0x94>
 8000e6a:	45c8      	cmp	r8, r9
 8000e6c:	d2ae      	bcs.n	8000dcc <__udivmoddi4+0x1e8>
 8000e6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7a8      	b.n	8000dcc <__udivmoddi4+0x1e8>
 8000e7a:	4631      	mov	r1, r6
 8000e7c:	e7ed      	b.n	8000e5a <__udivmoddi4+0x276>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e799      	b.n	8000db6 <__udivmoddi4+0x1d2>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e7d4      	b.n	8000e30 <__udivmoddi4+0x24c>
 8000e86:	46d6      	mov	lr, sl
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1a6>
 8000e8a:	4463      	add	r3, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e74d      	b.n	8000d2c <__udivmoddi4+0x148>
 8000e90:	4606      	mov	r6, r0
 8000e92:	4623      	mov	r3, r4
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70f      	b.n	8000cb8 <__udivmoddi4+0xd4>
 8000e98:	3e02      	subs	r6, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	e730      	b.n	8000d00 <__udivmoddi4+0x11c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	0000      	movs	r0, r0
	...

08000ea8 <HAL_TIM_PeriodElapsedCallback>:
//		flag++;
//	}
//
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
//	if(htim==&htim12)
//	{
////		can_transmit(&hcan1, 0x201, buffer[0], buffer[1], buffer[2],buffer[3],buffer[4]);
//		loop();
//	}
	if(htim==&htim5)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a69      	ldr	r2, [pc, #420]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	f040 80c2 	bne.w	800103e <HAL_TIM_PeriodElapsedCallback+0x196>
	{
		uint16_t new_countA = TIM3->CNT;
 8000eba:	4b68      	ldr	r3, [pc, #416]	@ (800105c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ebe:	823b      	strh	r3, [r7, #16]
		uint16_t new_countB = TIM4->CNT;
 8000ec0:	4b67      	ldr	r3, [pc, #412]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec4:	81fb      	strh	r3, [r7, #14]
		uint16_t new_countC = TIM8->CNT;
 8000ec6:	4b67      	ldr	r3, [pc, #412]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eca:	81bb      	strh	r3, [r7, #12]
		int16_t diffA = new_countA - valueA;
 8000ecc:	4b66      	ldr	r3, [pc, #408]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	8a3a      	ldrh	r2, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	82fb      	strh	r3, [r7, #22]
		int16_t diffB = new_countB - valueB;
 8000eda:	4b64      	ldr	r3, [pc, #400]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	89fa      	ldrh	r2, [r7, #14]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	82bb      	strh	r3, [r7, #20]
		int16_t diffC = new_countC - valueC;
 8000ee8:	4b61      	ldr	r3, [pc, #388]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	89ba      	ldrh	r2, [r7, #12]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	827b      	strh	r3, [r7, #18]

		if (diffA > 32767) {
			diffA -= 65536; // Handle overflow
		} else if (diffA < -32767) {
 8000ef6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000efa:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
			diffA += 65536; // Handle underflow
		}

		if (diffB > 32767) {
			diffB -= 65536; // Handle overflow
		} else if (diffB < -32767) {
 8000efe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f02:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
			diffB += 65536; // Handle underflow
		}

		if (diffC > 32767) {
			diffC -= 65536; // Handle overflow
		} else if (diffC < -32767) {
 8000f06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f0a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
			diffC += 65536; // Handle underflow
		}

		// Update total distances traveled
		Speed_EncoderA=diffA*per_step;
 8000f0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fad2 	bl	80004bc <__aeabi_i2d>
 8000f18:	a34b      	add	r3, pc, #300	@ (adr r3, 8001048 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1e:	f7ff fb37 	bl	8000590 <__aeabi_dmul>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4610      	mov	r0, r2
 8000f28:	4619      	mov	r1, r3
 8000f2a:	a349      	add	r3, pc, #292	@ (adr r3, 8001050 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f30:	f7ff fb2e 	bl	8000590 <__aeabi_dmul>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4610      	mov	r0, r2
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	4b4c      	ldr	r3, [pc, #304]	@ (8001074 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000f42:	f7ff fc4f 	bl	80007e4 <__aeabi_ddiv>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	494b      	ldr	r1, [pc, #300]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000f4c:	e9c1 2300 	strd	r2, r3, [r1]
		Speed_EncoderB=diffB*per_step;
 8000f50:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fab1 	bl	80004bc <__aeabi_i2d>
 8000f5a:	a33b      	add	r3, pc, #236	@ (adr r3, 8001048 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	f7ff fb16 	bl	8000590 <__aeabi_dmul>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	a338      	add	r3, pc, #224	@ (adr r3, 8001050 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	f7ff fb0d 	bl	8000590 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	4b3c      	ldr	r3, [pc, #240]	@ (8001074 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000f84:	f7ff fc2e 	bl	80007e4 <__aeabi_ddiv>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	493b      	ldr	r1, [pc, #236]	@ (800107c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000f8e:	e9c1 2300 	strd	r2, r3, [r1]
		Speed_EncoderC=diffC*per_step;
 8000f92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fa90 	bl	80004bc <__aeabi_i2d>
 8000f9c:	a32a      	add	r3, pc, #168	@ (adr r3, 8001048 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa2:	f7ff faf5 	bl	8000590 <__aeabi_dmul>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4610      	mov	r0, r2
 8000fac:	4619      	mov	r1, r3
 8000fae:	a328      	add	r3, pc, #160	@ (adr r3, 8001050 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb4:	f7ff faec 	bl	8000590 <__aeabi_dmul>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001074 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000fc6:	f7ff fc0d 	bl	80007e4 <__aeabi_ddiv>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	492c      	ldr	r1, [pc, #176]	@ (8001080 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000fd0:	e9c1 2300 	strd	r2, r3, [r1]
		distanceA += Speed_EncoderA;
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001084 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000fd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fda:	4b27      	ldr	r3, [pc, #156]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff f920 	bl	8000224 <__adddf3>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4926      	ldr	r1, [pc, #152]	@ (8001084 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000fea:	e9c1 2300 	strd	r2, r3, [r1]
		distanceB += Speed_EncoderB;
 8000fee:	4b26      	ldr	r3, [pc, #152]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000ff0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ff4:	4b21      	ldr	r3, [pc, #132]	@ (800107c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffa:	f7ff f913 	bl	8000224 <__adddf3>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4921      	ldr	r1, [pc, #132]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001004:	e9c1 2300 	strd	r2, r3, [r1]
		distanceC += Speed_EncoderC;
 8001008:	4b20      	ldr	r3, [pc, #128]	@ (800108c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800100a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800100e:	4b1c      	ldr	r3, [pc, #112]	@ (8001080 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	f7ff f906 	bl	8000224 <__adddf3>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	491b      	ldr	r1, [pc, #108]	@ (800108c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800101e:	e9c1 2300 	strd	r2, r3, [r1]
		// Update current counts
		valueA = new_countA;
 8001022:	8a3b      	ldrh	r3, [r7, #16]
 8001024:	4a10      	ldr	r2, [pc, #64]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001026:	6013      	str	r3, [r2, #0]
		valueB = new_countB;
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	4a10      	ldr	r2, [pc, #64]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800102c:	6013      	str	r3, [r2, #0]
		valueC = new_countC;
 800102e:	89bb      	ldrh	r3, [r7, #12]
 8001030:	4a0f      	ldr	r2, [pc, #60]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001032:	6013      	str	r3, [r2, #0]
		interrupt_counter++;
 8001034:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	4a15      	ldr	r2, [pc, #84]	@ (8001090 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800103c:	6013      	str	r3, [r2, #0]
	}
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	33333333 	.word	0x33333333
 800104c:	40153333 	.word	0x40153333
 8001050:	54442d18 	.word	0x54442d18
 8001054:	400921fb 	.word	0x400921fb
 8001058:	200001a8 	.word	0x200001a8
 800105c:	40000400 	.word	0x40000400
 8001060:	40000800 	.word	0x40000800
 8001064:	40010400 	.word	0x40010400
 8001068:	20000388 	.word	0x20000388
 800106c:	2000038c 	.word	0x2000038c
 8001070:	20000390 	.word	0x20000390
 8001074:	409f4000 	.word	0x409f4000
 8001078:	200003a0 	.word	0x200003a0
 800107c:	200003a8 	.word	0x200003a8
 8001080:	200003b0 	.word	0x200003b0
 8001084:	20000458 	.word	0x20000458
 8001088:	20000460 	.word	0x20000460
 800108c:	20000468 	.word	0x20000468
 8001090:	20000398 	.word	0x20000398

08001094 <MPU6050_Init>:
void MPU6050_Init (void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af04      	add	r7, sp, #16
	uint8_t check, Data;
	HAL_I2C_Mem_Read (&hi2c3, MPU6050_ADDR, WHO_AM_I_REG,1,&check,1,1000);
 800109a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109e:	9302      	str	r3, [sp, #8]
 80010a0:	2301      	movs	r3, #1
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2301      	movs	r3, #1
 80010aa:	2275      	movs	r2, #117	@ 0x75
 80010ac:	21d0      	movs	r1, #208	@ 0xd0
 80010ae:	4823      	ldr	r0, [pc, #140]	@ (800113c <MPU6050_Init+0xa8>)
 80010b0:	f005 f870 	bl	8006194 <HAL_I2C_Mem_Read>

	if( check == 104)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b68      	cmp	r3, #104	@ 0x68
 80010b8:	d13b      	bne.n	8001132 <MPU6050_Init+0x9e>
	{
		Data=0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 80010be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	2301      	movs	r3, #1
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	1dbb      	adds	r3, r7, #6
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	226b      	movs	r2, #107	@ 0x6b
 80010d0:	21d0      	movs	r1, #208	@ 0xd0
 80010d2:	481a      	ldr	r0, [pc, #104]	@ (800113c <MPU6050_Init+0xa8>)
 80010d4:	f004 ff64 	bl	8005fa0 <HAL_I2C_Mem_Write>

		Data=0x07;
 80010d8:	2307      	movs	r3, #7
 80010da:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80010dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e0:	9302      	str	r3, [sp, #8]
 80010e2:	2301      	movs	r3, #1
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	1dbb      	adds	r3, r7, #6
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2301      	movs	r3, #1
 80010ec:	2219      	movs	r2, #25
 80010ee:	21d0      	movs	r1, #208	@ 0xd0
 80010f0:	4812      	ldr	r0, [pc, #72]	@ (800113c <MPU6050_Init+0xa8>)
 80010f2:	f004 ff55 	bl	8005fa0 <HAL_I2C_Mem_Write>

		Data=0x00;
 80010f6:	2300      	movs	r3, #0
 80010f8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80010fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	2301      	movs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	1dbb      	adds	r3, r7, #6
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	221c      	movs	r2, #28
 800110c:	21d0      	movs	r1, #208	@ 0xd0
 800110e:	480b      	ldr	r0, [pc, #44]	@ (800113c <MPU6050_Init+0xa8>)
 8001110:	f004 ff46 	bl	8005fa0 <HAL_I2C_Mem_Write>

		Data=0x00;
 8001114:	2300      	movs	r3, #0
 8001116:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001118:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	2301      	movs	r3, #1
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	1dbb      	adds	r3, r7, #6
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2301      	movs	r3, #1
 8001128:	221b      	movs	r2, #27
 800112a:	21d0      	movs	r1, #208	@ 0xd0
 800112c:	4803      	ldr	r0, [pc, #12]	@ (800113c <MPU6050_Init+0xa8>)
 800112e:	f004 ff37 	bl	8005fa0 <HAL_I2C_Mem_Write>
	}
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000007c 	.word	0x2000007c

08001140 <MPU6050_Read_Accel>:
void MPU6050_Read_Accel(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	HAL_I2C_Mem_Read(&hi2c3, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114a:	9302      	str	r3, [sp, #8]
 800114c:	2306      	movs	r3, #6
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	463b      	mov	r3, r7
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2301      	movs	r3, #1
 8001156:	223b      	movs	r2, #59	@ 0x3b
 8001158:	21d0      	movs	r1, #208	@ 0xd0
 800115a:	482f      	ldr	r0, [pc, #188]	@ (8001218 <MPU6050_Read_Accel+0xd8>)
 800115c:	f005 f81a 	bl	8006194 <HAL_I2C_Mem_Read>

	Accel_X_Raw=(int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001160:	783b      	ldrb	r3, [r7, #0]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b21a      	sxth	r2, r3
 8001166:	787b      	ldrb	r3, [r7, #1]
 8001168:	b21b      	sxth	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b21b      	sxth	r3, r3
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b2a      	ldr	r3, [pc, #168]	@ (800121c <MPU6050_Read_Accel+0xdc>)
 8001172:	801a      	strh	r2, [r3, #0]
	Accel_Y_Raw=(int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001174:	78bb      	ldrb	r3, [r7, #2]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	b21a      	sxth	r2, r3
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	b21b      	sxth	r3, r3
 800117e:	4313      	orrs	r3, r2
 8001180:	b21b      	sxth	r3, r3
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <MPU6050_Read_Accel+0xe0>)
 8001186:	801a      	strh	r2, [r3, #0]
	Accel_Z_Raw=(int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001188:	793b      	ldrb	r3, [r7, #4]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	b21a      	sxth	r2, r3
 800118e:	797b      	ldrb	r3, [r7, #5]
 8001190:	b21b      	sxth	r3, r3
 8001192:	4313      	orrs	r3, r2
 8001194:	b21b      	sxth	r3, r3
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <MPU6050_Read_Accel+0xe4>)
 800119a:	801a      	strh	r2, [r3, #0]
	//		can_transmit(&hcan1, 0x191, Rec_Data[0], Rec_Data[1]);
	Ax=Accel_X_Raw/4096.0;
 800119c:	4b1f      	ldr	r3, [pc, #124]	@ (800121c <MPU6050_Read_Accel+0xdc>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f98b 	bl	80004bc <__aeabi_i2d>
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001228 <MPU6050_Read_Accel+0xe8>)
 80011ac:	f7ff fb1a 	bl	80007e4 <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f7ff fcac 	bl	8000b14 <__aeabi_d2f>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a1b      	ldr	r2, [pc, #108]	@ (800122c <MPU6050_Read_Accel+0xec>)
 80011c0:	6013      	str	r3, [r2, #0]
	Ay=Accel_Y_Raw/4096.0;
 80011c2:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <MPU6050_Read_Accel+0xe0>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f978 	bl	80004bc <__aeabi_i2d>
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <MPU6050_Read_Accel+0xe8>)
 80011d2:	f7ff fb07 	bl	80007e4 <__aeabi_ddiv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fc99 	bl	8000b14 <__aeabi_d2f>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a12      	ldr	r2, [pc, #72]	@ (8001230 <MPU6050_Read_Accel+0xf0>)
 80011e6:	6013      	str	r3, [r2, #0]
	Az=Accel_Z_Raw/4096.0;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <MPU6050_Read_Accel+0xe4>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f965 	bl	80004bc <__aeabi_i2d>
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <MPU6050_Read_Accel+0xe8>)
 80011f8:	f7ff faf4 	bl	80007e4 <__aeabi_ddiv>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fc86 	bl	8000b14 <__aeabi_d2f>
 8001208:	4603      	mov	r3, r0
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <MPU6050_Read_Accel+0xf4>)
 800120c:	6013      	str	r3, [r2, #0]
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000007c 	.word	0x2000007c
 800121c:	20000478 	.word	0x20000478
 8001220:	2000047a 	.word	0x2000047a
 8001224:	2000047c 	.word	0x2000047c
 8001228:	40b00000 	.word	0x40b00000
 800122c:	20000480 	.word	0x20000480
 8001230:	20000484 	.word	0x20000484
 8001234:	20000488 	.word	0x20000488

08001238 <Accel_X_Angle>:
float Accel_X_Angle(float Ax, float Ay, float Az) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001242:	edc7 0a02 	vstr	s1, [r7, #8]
 8001246:	ed87 1a01 	vstr	s2, [r7, #4]
	float angle_deg = (180/3.141592)*(atan(Az/Ax));
 800124a:	ed97 7a01 	vldr	s14, [r7, #4]
 800124e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001252:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001256:	ee16 0a90 	vmov	r0, s13
 800125a:	f7ff f941 	bl	80004e0 <__aeabi_f2d>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	ec43 2b10 	vmov	d0, r2, r3
 8001266:	f008 fb53 	bl	8009910 <atan>
 800126a:	ec51 0b10 	vmov	r0, r1, d0
 800126e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001298 <Accel_X_Angle+0x60>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff f98c 	bl	8000590 <__aeabi_dmul>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fc48 	bl	8000b14 <__aeabi_d2f>
 8001284:	4603      	mov	r3, r0
 8001286:	617b      	str	r3, [r7, #20]
	return angle_deg;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	ee07 3a90 	vmov	s15, r3
}
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	7e61df46 	.word	0x7e61df46
 800129c:	404ca5dc 	.word	0x404ca5dc

080012a0 <Accel_Y_Angle>:
float Accel_Y_Angle(float Ax, float Ay, float Az) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80012aa:	edc7 0a02 	vstr	s1, [r7, #8]
 80012ae:	ed87 1a01 	vstr	s2, [r7, #4]
	float angle_deg = (180/3.141592)*(atan(Ay/Az));
 80012b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80012b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012be:	ee16 0a90 	vmov	r0, s13
 80012c2:	f7ff f90d 	bl	80004e0 <__aeabi_f2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	ec43 2b10 	vmov	d0, r2, r3
 80012ce:	f008 fb1f 	bl	8009910 <atan>
 80012d2:	ec51 0b10 	vmov	r0, r1, d0
 80012d6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001300 <Accel_Y_Angle+0x60>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff f958 	bl	8000590 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc14 	bl	8000b14 <__aeabi_d2f>
 80012ec:	4603      	mov	r3, r0
 80012ee:	617b      	str	r3, [r7, #20]
	return angle_deg;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	ee07 3a90 	vmov	s15, r3
}
 80012f6:	eeb0 0a67 	vmov.f32	s0, s15
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	7e61df46 	.word	0x7e61df46
 8001304:	404ca5dc 	.word	0x404ca5dc

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800130c:	b096      	sub	sp, #88	@ 0x58
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001310:	f003 fdce 	bl	8004eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001314:	f000 fdde 	bl	8001ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001318:	f001 f8a8 	bl	800246c <MX_GPIO_Init>
  MX_DMA_Init();
 800131c:	f001 f87e 	bl	800241c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001320:	f001 f852 	bl	80023c8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001324:	f000 feca 	bl	80020bc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001328:	f000 ff1c 	bl	8002164 <MX_TIM4_Init>
  MX_TIM5_Init();
 800132c:	f000 ff6e 	bl	800220c <MX_TIM5_Init>
  MX_TIM8_Init();
 8001330:	f000 ffba 	bl	80022a8 <MX_TIM8_Init>
  MX_I2C3_Init();
 8001334:	f000 fe40 	bl	8001fb8 <MX_I2C3_Init>
  MX_TIM12_Init();
 8001338:	f001 f80e 	bl	8002358 <MX_TIM12_Init>
  MX_TIM2_Init();
 800133c:	f000 fe6a 	bl	8002014 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim5);
 8001340:	48b3      	ldr	r0, [pc, #716]	@ (8001610 <main+0x308>)
 8001342:	f006 fb95 	bl	8007a70 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8001346:	2100      	movs	r1, #0
 8001348:	48b2      	ldr	r0, [pc, #712]	@ (8001614 <main+0x30c>)
 800134a:	f006 fca7 	bl	8007c9c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 800134e:	2100      	movs	r1, #0
 8001350:	48b1      	ldr	r0, [pc, #708]	@ (8001618 <main+0x310>)
 8001352:	f006 fca3 	bl	8007c9c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 8001356:	2100      	movs	r1, #0
 8001358:	48b0      	ldr	r0, [pc, #704]	@ (800161c <main+0x314>)
 800135a:	f006 fc9f 	bl	8007c9c <HAL_TIM_Encoder_Start>

	/*initial buyu neg robot geometry cm */
	radian_Alpha=(M_PI/180)*alpha;		//alpha untsugiig degree to radian bolgoj hurwuulj  baigaa uildel
 800135e:	49b0      	ldr	r1, [pc, #704]	@ (8001620 <main+0x318>)
 8001360:	a3a3      	add	r3, pc, #652	@ (adr r3, 80015f0 <main+0x2e8>)
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	e9c1 2300 	strd	r2, r3, [r1]
	radian_Beta=(M_PI/180)*beta;		//beta untsugiig degree to radian bolgoj hurwuulj  baigaa uildel
 800136a:	49ae      	ldr	r1, [pc, #696]	@ (8001624 <main+0x31c>)
 800136c:	a3a2      	add	r3, pc, #648	@ (adr r3, 80015f8 <main+0x2f0>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	e9c1 2300 	strd	r2, r3, [r1]
	radian_Gamma=(M_PI/180)*gamma;		//gamma untsugiig degree to radian bolgoj hurwuulj  baigaa uildel;
 8001376:	49ac      	ldr	r1, [pc, #688]	@ (8001628 <main+0x320>)
 8001378:	a3a1      	add	r3, pc, #644	@ (adr r3, 8001600 <main+0x2f8>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	e9c1 2300 	strd	r2, r3, [r1]
	radian_Delta=(M_PI/180)*delta;		//delta untsugiig degree to radian bolgoj hurwuulj  baigaa uildel;
 8001382:	49aa      	ldr	r1, [pc, #680]	@ (800162c <main+0x324>)
 8001384:	a3a0      	add	r3, pc, #640	@ (adr r3, 8001608 <main+0x300>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	e9c1 2300 	strd	r2, r3, [r1]
	// AB vector
	AB[0][0]=L*cos(radian_Delta);
 800138e:	4ba7      	ldr	r3, [pc, #668]	@ (800162c <main+0x324>)
 8001390:	ed93 7b00 	vldr	d7, [r3]
 8001394:	eeb0 0a47 	vmov.f32	s0, s14
 8001398:	eef0 0a67 	vmov.f32	s1, s15
 800139c:	f008 fc50 	bl	8009c40 <cos>
 80013a0:	ec51 0b10 	vmov	r0, r1, d0
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4ba1      	ldr	r3, [pc, #644]	@ (8001630 <main+0x328>)
 80013aa:	f7ff f8f1 	bl	8000590 <__aeabi_dmul>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	49a0      	ldr	r1, [pc, #640]	@ (8001634 <main+0x32c>)
 80013b4:	e9c1 2300 	strd	r2, r3, [r1]
	AB[1][0]=L*sin(radian_Delta);
 80013b8:	4b9c      	ldr	r3, [pc, #624]	@ (800162c <main+0x324>)
 80013ba:	ed93 7b00 	vldr	d7, [r3]
 80013be:	eeb0 0a47 	vmov.f32	s0, s14
 80013c2:	eef0 0a67 	vmov.f32	s1, s15
 80013c6:	f008 fc97 	bl	8009cf8 <sin>
 80013ca:	ec51 0b10 	vmov	r0, r1, d0
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	4b97      	ldr	r3, [pc, #604]	@ (8001630 <main+0x328>)
 80013d4:	f7ff f8dc 	bl	8000590 <__aeabi_dmul>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4995      	ldr	r1, [pc, #596]	@ (8001634 <main+0x32c>)
 80013de:	e9c1 2302 	strd	r2, r3, [r1, #8]

	// AC vector
	AC[0][0]=M*1;
 80013e2:	4995      	ldr	r1, [pc, #596]	@ (8001638 <main+0x330>)
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	4b94      	ldr	r3, [pc, #592]	@ (800163c <main+0x334>)
 80013ea:	e9c1 2300 	strd	r2, r3, [r1]
	AC[1][0]=M*0;
 80013ee:	4992      	ldr	r1, [pc, #584]	@ (8001638 <main+0x330>)
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	e9c1 2302 	strd	r2, r3, [r1, #8]

	//a_encoder Vector
	a_encoder[0][0]=cos(radian_Delta + radian_Alpha),
 80013fc:	4b8b      	ldr	r3, [pc, #556]	@ (800162c <main+0x324>)
 80013fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001402:	4b87      	ldr	r3, [pc, #540]	@ (8001620 <main+0x318>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7fe ff0c 	bl	8000224 <__adddf3>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	ec43 2b17 	vmov	d7, r2, r3
 8001414:	eeb0 0a47 	vmov.f32	s0, s14
 8001418:	eef0 0a67 	vmov.f32	s1, s15
 800141c:	f008 fc10 	bl	8009c40 <cos>
 8001420:	eeb0 7a40 	vmov.f32	s14, s0
 8001424:	eef0 7a60 	vmov.f32	s15, s1
 8001428:	4b85      	ldr	r3, [pc, #532]	@ (8001640 <main+0x338>)
 800142a:	ed83 7b00 	vstr	d7, [r3]
	a_encoder[1][0]=sin(radian_Delta + radian_Alpha);
 800142e:	4b7f      	ldr	r3, [pc, #508]	@ (800162c <main+0x324>)
 8001430:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001434:	4b7a      	ldr	r3, [pc, #488]	@ (8001620 <main+0x318>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	f7fe fef3 	bl	8000224 <__adddf3>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	ec43 2b17 	vmov	d7, r2, r3
 8001446:	eeb0 0a47 	vmov.f32	s0, s14
 800144a:	eef0 0a67 	vmov.f32	s1, s15
 800144e:	f008 fc53 	bl	8009cf8 <sin>
 8001452:	eeb0 7a40 	vmov.f32	s14, s0
 8001456:	eef0 7a60 	vmov.f32	s15, s1
 800145a:	4b79      	ldr	r3, [pc, #484]	@ (8001640 <main+0x338>)
 800145c:	ed83 7b02 	vstr	d7, [r3, #8]
	//a_perp Vector
	a_perp[0][0]=-1*a_encoder[1][0];
 8001460:	4b77      	ldr	r3, [pc, #476]	@ (8001640 <main+0x338>)
 8001462:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001466:	4614      	mov	r4, r2
 8001468:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800146c:	4b75      	ldr	r3, [pc, #468]	@ (8001644 <main+0x33c>)
 800146e:	e9c3 4500 	strd	r4, r5, [r3]
	a_perp[1][0]=1*a_encoder[0][0];
 8001472:	4b73      	ldr	r3, [pc, #460]	@ (8001640 <main+0x338>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	4972      	ldr	r1, [pc, #456]	@ (8001644 <main+0x33c>)
 800147a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	//b vector
	b_encoder[0][0]=cos(radian_Delta+radian_Beta);
 800147e:	4b6b      	ldr	r3, [pc, #428]	@ (800162c <main+0x324>)
 8001480:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001484:	4b67      	ldr	r3, [pc, #412]	@ (8001624 <main+0x31c>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7fe fecb 	bl	8000224 <__adddf3>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	ec43 2b17 	vmov	d7, r2, r3
 8001496:	eeb0 0a47 	vmov.f32	s0, s14
 800149a:	eef0 0a67 	vmov.f32	s1, s15
 800149e:	f008 fbcf 	bl	8009c40 <cos>
 80014a2:	eeb0 7a40 	vmov.f32	s14, s0
 80014a6:	eef0 7a60 	vmov.f32	s15, s1
 80014aa:	4b67      	ldr	r3, [pc, #412]	@ (8001648 <main+0x340>)
 80014ac:	ed83 7b00 	vstr	d7, [r3]
	b_encoder[1][0]=sin(radian_Delta+radian_Beta);
 80014b0:	4b5e      	ldr	r3, [pc, #376]	@ (800162c <main+0x324>)
 80014b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001624 <main+0x31c>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7fe feb2 	bl	8000224 <__adddf3>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	ec43 2b17 	vmov	d7, r2, r3
 80014c8:	eeb0 0a47 	vmov.f32	s0, s14
 80014cc:	eef0 0a67 	vmov.f32	s1, s15
 80014d0:	f008 fc12 	bl	8009cf8 <sin>
 80014d4:	eeb0 7a40 	vmov.f32	s14, s0
 80014d8:	eef0 7a60 	vmov.f32	s15, s1
 80014dc:	4b5a      	ldr	r3, [pc, #360]	@ (8001648 <main+0x340>)
 80014de:	ed83 7b02 	vstr	d7, [r3, #8]

	//c_vector
	c_encoder[0][0]=cos(radian_Gamma);
 80014e2:	4b51      	ldr	r3, [pc, #324]	@ (8001628 <main+0x320>)
 80014e4:	ed93 7b00 	vldr	d7, [r3]
 80014e8:	eeb0 0a47 	vmov.f32	s0, s14
 80014ec:	eef0 0a67 	vmov.f32	s1, s15
 80014f0:	f008 fba6 	bl	8009c40 <cos>
 80014f4:	eeb0 7a40 	vmov.f32	s14, s0
 80014f8:	eef0 7a60 	vmov.f32	s15, s1
 80014fc:	4b53      	ldr	r3, [pc, #332]	@ (800164c <main+0x344>)
 80014fe:	ed83 7b00 	vstr	d7, [r3]
	c_encoder[1][0]=sin(radian_Gamma);
 8001502:	4b49      	ldr	r3, [pc, #292]	@ (8001628 <main+0x320>)
 8001504:	ed93 7b00 	vldr	d7, [r3]
 8001508:	eeb0 0a47 	vmov.f32	s0, s14
 800150c:	eef0 0a67 	vmov.f32	s1, s15
 8001510:	f008 fbf2 	bl	8009cf8 <sin>
 8001514:	eeb0 7a40 	vmov.f32	s14, s0
 8001518:	eef0 7a60 	vmov.f32	s15, s1
 800151c:	4b4b      	ldr	r3, [pc, #300]	@ (800164c <main+0x344>)
 800151e:	ed83 7b02 	vstr	d7, [r3, #8]
	 * g=inv([b,c])*a;
	 * [b,c]=[b_encoder,c_encoder]  [4][4]
	 * inv([b,c])
	 * a=[2][1]
	 */
	b_c_encoder[0][0]=b_encoder[0][0];
 8001522:	4b49      	ldr	r3, [pc, #292]	@ (8001648 <main+0x340>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	4949      	ldr	r1, [pc, #292]	@ (8001650 <main+0x348>)
 800152a:	e9c1 2300 	strd	r2, r3, [r1]
	b_c_encoder[1][0]=b_encoder[1][0];
 800152e:	4b46      	ldr	r3, [pc, #280]	@ (8001648 <main+0x340>)
 8001530:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001534:	4946      	ldr	r1, [pc, #280]	@ (8001650 <main+0x348>)
 8001536:	e9c1 2304 	strd	r2, r3, [r1, #16]
	b_c_encoder[0][1]=c_encoder[0][0];
 800153a:	4b44      	ldr	r3, [pc, #272]	@ (800164c <main+0x344>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	4943      	ldr	r1, [pc, #268]	@ (8001650 <main+0x348>)
 8001542:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_c_encoder[1][1]=c_encoder[1][0];
 8001546:	4b41      	ldr	r3, [pc, #260]	@ (800164c <main+0x344>)
 8001548:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800154c:	4940      	ldr	r1, [pc, #256]	@ (8001650 <main+0x348>)
 800154e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	/*
	 * Determinant
	 */
	double determinant;
	determinant=b_c_encoder[0][0] * b_c_encoder[1][1] - b_c_encoder[0][1] * b_c_encoder[1][0];
 8001552:	4b3f      	ldr	r3, [pc, #252]	@ (8001650 <main+0x348>)
 8001554:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001558:	4b3d      	ldr	r3, [pc, #244]	@ (8001650 <main+0x348>)
 800155a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800155e:	f7ff f817 	bl	8000590 <__aeabi_dmul>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4614      	mov	r4, r2
 8001568:	461d      	mov	r5, r3
 800156a:	4b39      	ldr	r3, [pc, #228]	@ (8001650 <main+0x348>)
 800156c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001570:	4b37      	ldr	r3, [pc, #220]	@ (8001650 <main+0x348>)
 8001572:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001576:	f7ff f80b 	bl	8000590 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4620      	mov	r0, r4
 8001580:	4629      	mov	r1, r5
 8001582:	f7fe fe4d 	bl	8000220 <__aeabi_dsub>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	/*
	 * Matrix inverse
	 */
	double inv_det;
	inv_det=1/determinant;
 800158e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001592:	f04f 0000 	mov.w	r0, #0
 8001596:	492f      	ldr	r1, [pc, #188]	@ (8001654 <main+0x34c>)
 8001598:	f7ff f924 	bl	80007e4 <__aeabi_ddiv>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double temp[2][2];
	temp[0][0] =  b_c_encoder[1][1] * inv_det;
 80015a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001650 <main+0x348>)
 80015a6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80015aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80015ae:	f7fe ffef 	bl	8000590 <__aeabi_dmul>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	temp[0][1] = -b_c_encoder[0][1] * inv_det;
 80015ba:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <main+0x348>)
 80015bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015c0:	60ba      	str	r2, [r7, #8]
 80015c2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80015cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015d0:	f7fe ffde 	bl	8000590 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	temp[1][0] = -b_c_encoder[1][0] * inv_det;
 80015dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <main+0x348>)
 80015de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80015e2:	4690      	mov	r8, r2
 80015e4:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80015e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80015ec:	4640      	mov	r0, r8
 80015ee:	e033      	b.n	8001658 <main+0x350>
 80015f0:	87c952c4 	.word	0x87c952c4
 80015f4:	3ff197c9 	.word	0x3ff197c9
 80015f8:	e1257683 	.word	0xe1257683
 80015fc:	40173f6e 	.word	0x40173f6e
 8001600:	54442d18 	.word	0x54442d18
 8001604:	3ff921fb 	.word	0x3ff921fb
 8001608:	31eb6950 	.word	0x31eb6950
 800160c:	3fde28c7 	.word	0x3fde28c7
 8001610:	200001a8 	.word	0x200001a8
 8001614:	20000118 	.word	0x20000118
 8001618:	20000160 	.word	0x20000160
 800161c:	200001f0 	.word	0x200001f0
 8001620:	20000498 	.word	0x20000498
 8001624:	200004a0 	.word	0x200004a0
 8001628:	200004a8 	.word	0x200004a8
 800162c:	200004b0 	.word	0x200004b0
 8001630:	40468000 	.word	0x40468000
 8001634:	200004b8 	.word	0x200004b8
 8001638:	200004c8 	.word	0x200004c8
 800163c:	40408000 	.word	0x40408000
 8001640:	200004d8 	.word	0x200004d8
 8001644:	200004e8 	.word	0x200004e8
 8001648:	200004f8 	.word	0x200004f8
 800164c:	20000508 	.word	0x20000508
 8001650:	20000538 	.word	0x20000538
 8001654:	3ff00000 	.word	0x3ff00000
 8001658:	4649      	mov	r1, r9
 800165a:	f7fe ff99 	bl	8000590 <__aeabi_dmul>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	e9c7 2308 	strd	r2, r3, [r7, #32]
	temp[1][1] =  b_c_encoder[0][0] * inv_det;
 8001666:	4bb2      	ldr	r3, [pc, #712]	@ (8001930 <main+0x628>)
 8001668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800166c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001670:	f7fe ff8e 	bl	8000590 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	/*
	 *
	 */
	g[0][0]=temp[0][0]*a_encoder[0][0]+temp[0][1]*a_encoder[1][0];
 800167c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001680:	4bac      	ldr	r3, [pc, #688]	@ (8001934 <main+0x62c>)
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	f7fe ff83 	bl	8000590 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4614      	mov	r4, r2
 8001690:	461d      	mov	r5, r3
 8001692:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001696:	4ba7      	ldr	r3, [pc, #668]	@ (8001934 <main+0x62c>)
 8001698:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800169c:	f7fe ff78 	bl	8000590 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4620      	mov	r0, r4
 80016a6:	4629      	mov	r1, r5
 80016a8:	f7fe fdbc 	bl	8000224 <__adddf3>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	49a1      	ldr	r1, [pc, #644]	@ (8001938 <main+0x630>)
 80016b2:	e9c1 2300 	strd	r2, r3, [r1]
	g[1][0]=temp[1][0]*a_encoder[0][0]+temp[1][1]*a_encoder[1][0];
 80016b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016ba:	4b9e      	ldr	r3, [pc, #632]	@ (8001934 <main+0x62c>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7fe ff66 	bl	8000590 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4614      	mov	r4, r2
 80016ca:	461d      	mov	r5, r3
 80016cc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80016d0:	4b98      	ldr	r3, [pc, #608]	@ (8001934 <main+0x62c>)
 80016d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016d6:	f7fe ff5b 	bl	8000590 <__aeabi_dmul>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4620      	mov	r0, r4
 80016e0:	4629      	mov	r1, r5
 80016e2:	f7fe fd9f 	bl	8000224 <__adddf3>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4993      	ldr	r1, [pc, #588]	@ (8001938 <main+0x630>)
 80016ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
	/*
	 * g_perp
	 */
	g_perp[0][0]=temp[0][0]*a_perp[0][0]+temp[0][1]*a_perp[1][0];
 80016f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016f4:	4b91      	ldr	r3, [pc, #580]	@ (800193c <main+0x634>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f7fe ff49 	bl	8000590 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4614      	mov	r4, r2
 8001704:	461d      	mov	r5, r3
 8001706:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800170a:	4b8c      	ldr	r3, [pc, #560]	@ (800193c <main+0x634>)
 800170c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001710:	f7fe ff3e 	bl	8000590 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4620      	mov	r0, r4
 800171a:	4629      	mov	r1, r5
 800171c:	f7fe fd82 	bl	8000224 <__adddf3>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4986      	ldr	r1, [pc, #536]	@ (8001940 <main+0x638>)
 8001726:	e9c1 2300 	strd	r2, r3, [r1]
	g_perp[1][0]=temp[1][0]*a_perp[0][0]+temp[1][1]*a_perp[1][0];
 800172a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800172e:	4b83      	ldr	r3, [pc, #524]	@ (800193c <main+0x634>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7fe ff2c 	bl	8000590 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4614      	mov	r4, r2
 800173e:	461d      	mov	r5, r3
 8001740:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001744:	4b7d      	ldr	r3, [pc, #500]	@ (800193c <main+0x634>)
 8001746:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800174a:	f7fe ff21 	bl	8000590 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f7fe fd65 	bl	8000224 <__adddf3>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4978      	ldr	r1, [pc, #480]	@ (8001940 <main+0x638>)
 8001760:	e9c1 2302 	strd	r2, r3, [r1, #8]
	double Bb=AB[0][0]*b_encoder[1][0]-AB[1][0]*b_encoder[0][0];
 8001764:	4b77      	ldr	r3, [pc, #476]	@ (8001944 <main+0x63c>)
 8001766:	e9d3 0100 	ldrd	r0, r1, [r3]
 800176a:	4b77      	ldr	r3, [pc, #476]	@ (8001948 <main+0x640>)
 800176c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001770:	f7fe ff0e 	bl	8000590 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4614      	mov	r4, r2
 800177a:	461d      	mov	r5, r3
 800177c:	4b71      	ldr	r3, [pc, #452]	@ (8001944 <main+0x63c>)
 800177e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001782:	4b71      	ldr	r3, [pc, #452]	@ (8001948 <main+0x640>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7fe ff02 	bl	8000590 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4620      	mov	r0, r4
 8001792:	4629      	mov	r1, r5
 8001794:	f7fe fd44 	bl	8000220 <__aeabi_dsub>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double Cc=AC[0][0]*c_encoder[1][0]-AC[1][0]*c_encoder[0][0];
 80017a0:	4b6a      	ldr	r3, [pc, #424]	@ (800194c <main+0x644>)
 80017a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001950 <main+0x648>)
 80017a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017ac:	f7fe fef0 	bl	8000590 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4614      	mov	r4, r2
 80017b6:	461d      	mov	r5, r3
 80017b8:	4b64      	ldr	r3, [pc, #400]	@ (800194c <main+0x644>)
 80017ba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80017be:	4b64      	ldr	r3, [pc, #400]	@ (8001950 <main+0x648>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7fe fee4 	bl	8000590 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4620      	mov	r0, r4
 80017ce:	4629      	mov	r1, r5
 80017d0:	f7fe fd26 	bl	8000220 <__aeabi_dsub>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	ha_perp=(g_perp[0][0]*Bb+g_perp[1][0]*Cc)/(g[0][0]*Bb+g[1][0]*Cc);
 80017dc:	4b58      	ldr	r3, [pc, #352]	@ (8001940 <main+0x638>)
 80017de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80017e6:	f7fe fed3 	bl	8000590 <__aeabi_dmul>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4614      	mov	r4, r2
 80017f0:	461d      	mov	r5, r3
 80017f2:	4b53      	ldr	r3, [pc, #332]	@ (8001940 <main+0x638>)
 80017f4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80017f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80017fc:	f7fe fec8 	bl	8000590 <__aeabi_dmul>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4620      	mov	r0, r4
 8001806:	4629      	mov	r1, r5
 8001808:	f7fe fd0c 	bl	8000224 <__adddf3>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4614      	mov	r4, r2
 8001812:	461d      	mov	r5, r3
 8001814:	4b48      	ldr	r3, [pc, #288]	@ (8001938 <main+0x630>)
 8001816:	e9d3 0100 	ldrd	r0, r1, [r3]
 800181a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800181e:	f7fe feb7 	bl	8000590 <__aeabi_dmul>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4690      	mov	r8, r2
 8001828:	4699      	mov	r9, r3
 800182a:	4b43      	ldr	r3, [pc, #268]	@ (8001938 <main+0x630>)
 800182c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001830:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001834:	f7fe feac 	bl	8000590 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4640      	mov	r0, r8
 800183e:	4649      	mov	r1, r9
 8001840:	f7fe fcf0 	bl	8000224 <__adddf3>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4620      	mov	r0, r4
 800184a:	4629      	mov	r1, r5
 800184c:	f7fe ffca 	bl	80007e4 <__aeabi_ddiv>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	493f      	ldr	r1, [pc, #252]	@ (8001954 <main+0x64c>)
 8001856:	e9c1 2300 	strd	r2, r3, [r1]
	hb_perp=(g_perp[0][0]*g[1][0]-g_perp[1][0]*g[1][1])*Cc/(g[0][0]*Bb+g[1][0]*Cc);
 800185a:	4b39      	ldr	r3, [pc, #228]	@ (8001940 <main+0x638>)
 800185c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001860:	4b35      	ldr	r3, [pc, #212]	@ (8001938 <main+0x630>)
 8001862:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001866:	f7fe fe93 	bl	8000590 <__aeabi_dmul>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4614      	mov	r4, r2
 8001870:	461d      	mov	r5, r3
 8001872:	4b33      	ldr	r3, [pc, #204]	@ (8001940 <main+0x638>)
 8001874:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001878:	4b2f      	ldr	r3, [pc, #188]	@ (8001938 <main+0x630>)
 800187a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800187e:	f7fe fe87 	bl	8000590 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4620      	mov	r0, r4
 8001888:	4629      	mov	r1, r5
 800188a:	f7fe fcc9 	bl	8000220 <__aeabi_dsub>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800189a:	f7fe fe79 	bl	8000590 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4614      	mov	r4, r2
 80018a4:	461d      	mov	r5, r3
 80018a6:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <main+0x630>)
 80018a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80018b0:	f7fe fe6e 	bl	8000590 <__aeabi_dmul>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4690      	mov	r8, r2
 80018ba:	4699      	mov	r9, r3
 80018bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001938 <main+0x630>)
 80018be:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80018c6:	f7fe fe63 	bl	8000590 <__aeabi_dmul>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4640      	mov	r0, r8
 80018d0:	4649      	mov	r1, r9
 80018d2:	f7fe fca7 	bl	8000224 <__adddf3>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4620      	mov	r0, r4
 80018dc:	4629      	mov	r1, r5
 80018de:	f7fe ff81 	bl	80007e4 <__aeabi_ddiv>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	491c      	ldr	r1, [pc, #112]	@ (8001958 <main+0x650>)
 80018e8:	e9c1 2300 	strd	r2, r3, [r1]
	hc_perp=-(g_perp[0][0]*g[1][0]-g_perp[1][0]*g[0][0])*Bb/(g[0][0]*Bb+g[1][0]*Cc);
 80018ec:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <main+0x638>)
 80018ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <main+0x630>)
 80018f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018f8:	f7fe fe4a 	bl	8000590 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4614      	mov	r4, r2
 8001902:	461d      	mov	r5, r3
 8001904:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <main+0x638>)
 8001906:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800190a:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <main+0x630>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe fe3e 	bl	8000590 <__aeabi_dmul>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4620      	mov	r0, r4
 800191a:	4629      	mov	r1, r5
 800191c:	f7fe fc80 	bl	8000220 <__aeabi_dsub>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	603a      	str	r2, [r7, #0]
 8001926:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	e016      	b.n	800195c <main+0x654>
 800192e:	bf00      	nop
 8001930:	20000538 	.word	0x20000538
 8001934:	200004d8 	.word	0x200004d8
 8001938:	20000518 	.word	0x20000518
 800193c:	200004e8 	.word	0x200004e8
 8001940:	20000528 	.word	0x20000528
 8001944:	200004b8 	.word	0x200004b8
 8001948:	200004f8 	.word	0x200004f8
 800194c:	200004c8 	.word	0x200004c8
 8001950:	20000508 	.word	0x20000508
 8001954:	200003b8 	.word	0x200003b8
 8001958:	200003c0 	.word	0x200003c0
 800195c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001960:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001964:	f7fe fe14 	bl	8000590 <__aeabi_dmul>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4614      	mov	r4, r2
 800196e:	461d      	mov	r5, r3
 8001970:	4bb7      	ldr	r3, [pc, #732]	@ (8001c50 <main+0x948>)
 8001972:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001976:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800197a:	f7fe fe09 	bl	8000590 <__aeabi_dmul>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4690      	mov	r8, r2
 8001984:	4699      	mov	r9, r3
 8001986:	4bb2      	ldr	r3, [pc, #712]	@ (8001c50 <main+0x948>)
 8001988:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800198c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001990:	f7fe fdfe 	bl	8000590 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4640      	mov	r0, r8
 800199a:	4649      	mov	r1, r9
 800199c:	f7fe fc42 	bl	8000224 <__adddf3>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4620      	mov	r0, r4
 80019a6:	4629      	mov	r1, r5
 80019a8:	f7fe ff1c 	bl	80007e4 <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	49a8      	ldr	r1, [pc, #672]	@ (8001c54 <main+0x94c>)
 80019b2:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_TIM_Base_Start_IT(&htim12);
 80019b6:	48a8      	ldr	r0, [pc, #672]	@ (8001c58 <main+0x950>)
 80019b8:	f006 f85a 	bl	8007a70 <HAL_TIM_Base_Start_IT>
	MPU6050_Init();
 80019bc:	f7ff fb6a 	bl	8001094 <MPU6050_Init>
	setup();
 80019c0:	f002 f9e0 	bl	8003d84 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(interrupt_counter>old_couter)
 80019c4:	4ba5      	ldr	r3, [pc, #660]	@ (8001c5c <main+0x954>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4ba5      	ldr	r3, [pc, #660]	@ (8001c60 <main+0x958>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d9f9      	bls.n	80019c4 <main+0x6bc>
		{
			//omega=(g[0][0]*Speed_EncoderB+g[1][0]*Speed_EncoderC-Speed_EncoderA)/(g[1][1]*Bb+g[1][0]*Cc);
			theta=theta_0+((g[0][0]*distanceB+g[1][0]*distanceC)-distanceA)/(g[0][0]*Bb+g[1][0]*Cc);
 80019d0:	4b9f      	ldr	r3, [pc, #636]	@ (8001c50 <main+0x948>)
 80019d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019d6:	4ba3      	ldr	r3, [pc, #652]	@ (8001c64 <main+0x95c>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	f7fe fdd8 	bl	8000590 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4614      	mov	r4, r2
 80019e6:	461d      	mov	r5, r3
 80019e8:	4b99      	ldr	r3, [pc, #612]	@ (8001c50 <main+0x948>)
 80019ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80019ee:	4b9e      	ldr	r3, [pc, #632]	@ (8001c68 <main+0x960>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7fe fdcc 	bl	8000590 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4620      	mov	r0, r4
 80019fe:	4629      	mov	r1, r5
 8001a00:	f7fe fc10 	bl	8000224 <__adddf3>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4b97      	ldr	r3, [pc, #604]	@ (8001c6c <main+0x964>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	f7fe fc05 	bl	8000220 <__aeabi_dsub>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4614      	mov	r4, r2
 8001a1c:	461d      	mov	r5, r3
 8001a1e:	4b8c      	ldr	r3, [pc, #560]	@ (8001c50 <main+0x948>)
 8001a20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001a28:	f7fe fdb2 	bl	8000590 <__aeabi_dmul>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4690      	mov	r8, r2
 8001a32:	4699      	mov	r9, r3
 8001a34:	4b86      	ldr	r3, [pc, #536]	@ (8001c50 <main+0x948>)
 8001a36:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a3a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a3e:	f7fe fda7 	bl	8000590 <__aeabi_dmul>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4640      	mov	r0, r8
 8001a48:	4649      	mov	r1, r9
 8001a4a:	f7fe fbeb 	bl	8000224 <__adddf3>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4620      	mov	r0, r4
 8001a54:	4629      	mov	r1, r5
 8001a56:	f7fe fec5 	bl	80007e4 <__aeabi_ddiv>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	4b83      	ldr	r3, [pc, #524]	@ (8001c70 <main+0x968>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	f7fe fbdc 	bl	8000224 <__adddf3>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4980      	ldr	r1, [pc, #512]	@ (8001c74 <main+0x96c>)
 8001a72:	e9c1 2300 	strd	r2, r3, [r1]
			vA_perp=Speed_EncoderA*ha_perp+Speed_EncoderB*hb_perp+Speed_EncoderC*hc_perp;
 8001a76:	4b80      	ldr	r3, [pc, #512]	@ (8001c78 <main+0x970>)
 8001a78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a7c:	4b7f      	ldr	r3, [pc, #508]	@ (8001c7c <main+0x974>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f7fe fd85 	bl	8000590 <__aeabi_dmul>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4614      	mov	r4, r2
 8001a8c:	461d      	mov	r5, r3
 8001a8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c80 <main+0x978>)
 8001a90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a94:	4b7b      	ldr	r3, [pc, #492]	@ (8001c84 <main+0x97c>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe fd79 	bl	8000590 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	f7fe fbbd 	bl	8000224 <__adddf3>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4614      	mov	r4, r2
 8001ab0:	461d      	mov	r5, r3
 8001ab2:	4b75      	ldr	r3, [pc, #468]	@ (8001c88 <main+0x980>)
 8001ab4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ab8:	4b66      	ldr	r3, [pc, #408]	@ (8001c54 <main+0x94c>)
 8001aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abe:	f7fe fd67 	bl	8000590 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	4629      	mov	r1, r5
 8001aca:	f7fe fbab 	bl	8000224 <__adddf3>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	496e      	ldr	r1, [pc, #440]	@ (8001c8c <main+0x984>)
 8001ad4:	e9c1 2300 	strd	r2, r3, [r1]
			/*
			 * Rotation matrix
			 */
			RX[0][0]=cos(theta);
 8001ad8:	4b66      	ldr	r3, [pc, #408]	@ (8001c74 <main+0x96c>)
 8001ada:	ed93 7b00 	vldr	d7, [r3]
 8001ade:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae2:	eef0 0a67 	vmov.f32	s1, s15
 8001ae6:	f008 f8ab 	bl	8009c40 <cos>
 8001aea:	eeb0 7a40 	vmov.f32	s14, s0
 8001aee:	eef0 7a60 	vmov.f32	s15, s1
 8001af2:	4b67      	ldr	r3, [pc, #412]	@ (8001c90 <main+0x988>)
 8001af4:	ed83 7b00 	vstr	d7, [r3]
			RX[1][0]=sin(theta);
 8001af8:	4b5e      	ldr	r3, [pc, #376]	@ (8001c74 <main+0x96c>)
 8001afa:	ed93 7b00 	vldr	d7, [r3]
 8001afe:	eeb0 0a47 	vmov.f32	s0, s14
 8001b02:	eef0 0a67 	vmov.f32	s1, s15
 8001b06:	f008 f8f7 	bl	8009cf8 <sin>
 8001b0a:	eeb0 7a40 	vmov.f32	s14, s0
 8001b0e:	eef0 7a60 	vmov.f32	s15, s1
 8001b12:	4b5f      	ldr	r3, [pc, #380]	@ (8001c90 <main+0x988>)
 8001b14:	ed83 7b02 	vstr	d7, [r3, #8]
			RY[0][0]=-sin(theta);
 8001b18:	4b56      	ldr	r3, [pc, #344]	@ (8001c74 <main+0x96c>)
 8001b1a:	ed93 7b00 	vldr	d7, [r3]
 8001b1e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b22:	eef0 0a67 	vmov.f32	s1, s15
 8001b26:	f008 f8e7 	bl	8009cf8 <sin>
 8001b2a:	ec53 2b10 	vmov	r2, r3, d0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8001b34:	4b57      	ldr	r3, [pc, #348]	@ (8001c94 <main+0x98c>)
 8001b36:	e9c3 ab00 	strd	sl, fp, [r3]
			RY[1][0]=cos(theta);
 8001b3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c74 <main+0x96c>)
 8001b3c:	ed93 7b00 	vldr	d7, [r3]
 8001b40:	eeb0 0a47 	vmov.f32	s0, s14
 8001b44:	eef0 0a67 	vmov.f32	s1, s15
 8001b48:	f008 f87a 	bl	8009c40 <cos>
 8001b4c:	eeb0 7a40 	vmov.f32	s14, s0
 8001b50:	eef0 7a60 	vmov.f32	s15, s1
 8001b54:	4b4f      	ldr	r3, [pc, #316]	@ (8001c94 <main+0x98c>)
 8001b56:	ed83 7b02 	vstr	d7, [r3, #8]

			at[0][0]=a_encoder[0][0]*RX[0][0]+a_encoder[1][0]*RY[0][0];
 8001b5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001c98 <main+0x990>)
 8001b5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b60:	4b4b      	ldr	r3, [pc, #300]	@ (8001c90 <main+0x988>)
 8001b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b66:	f7fe fd13 	bl	8000590 <__aeabi_dmul>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4614      	mov	r4, r2
 8001b70:	461d      	mov	r5, r3
 8001b72:	4b49      	ldr	r3, [pc, #292]	@ (8001c98 <main+0x990>)
 8001b74:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b78:	4b46      	ldr	r3, [pc, #280]	@ (8001c94 <main+0x98c>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	f7fe fd07 	bl	8000590 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4620      	mov	r0, r4
 8001b88:	4629      	mov	r1, r5
 8001b8a:	f7fe fb4b 	bl	8000224 <__adddf3>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4942      	ldr	r1, [pc, #264]	@ (8001c9c <main+0x994>)
 8001b94:	e9c1 2300 	strd	r2, r3, [r1]
			at[1][0]=a_encoder[0][0]*RX[1][0]+a_encoder[1][0]*RY[1][0];
 8001b98:	4b3f      	ldr	r3, [pc, #252]	@ (8001c98 <main+0x990>)
 8001b9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c90 <main+0x988>)
 8001ba0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ba4:	f7fe fcf4 	bl	8000590 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4614      	mov	r4, r2
 8001bae:	461d      	mov	r5, r3
 8001bb0:	4b39      	ldr	r3, [pc, #228]	@ (8001c98 <main+0x990>)
 8001bb2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001bb6:	4b37      	ldr	r3, [pc, #220]	@ (8001c94 <main+0x98c>)
 8001bb8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001bbc:	f7fe fce8 	bl	8000590 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	f7fe fb2c 	bl	8000224 <__adddf3>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4932      	ldr	r1, [pc, #200]	@ (8001c9c <main+0x994>)
 8001bd2:	e9c1 2302 	strd	r2, r3, [r1, #8]

			//			at_perp[0][0]=a_perp[0][0]*RX[0][0]+a_perp[1][0]*RX[0][1];
			//			at_perp[1][0]=a_perp[0][0]*RY[0][0]+a_perp[1][0]*RY[0][1];

			at_perp[0][0]=a_perp[0][0]*RX[0][0]+a_perp[1][0]*RY[0][1];
 8001bd6:	4b32      	ldr	r3, [pc, #200]	@ (8001ca0 <main+0x998>)
 8001bd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8001c90 <main+0x988>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	f7fe fcd5 	bl	8000590 <__aeabi_dmul>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4614      	mov	r4, r2
 8001bec:	461d      	mov	r5, r3
 8001bee:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca0 <main+0x998>)
 8001bf0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001bf4:	4b27      	ldr	r3, [pc, #156]	@ (8001c94 <main+0x98c>)
 8001bf6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001bfa:	f7fe fcc9 	bl	8000590 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4620      	mov	r0, r4
 8001c04:	4629      	mov	r1, r5
 8001c06:	f7fe fb0d 	bl	8000224 <__adddf3>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4925      	ldr	r1, [pc, #148]	@ (8001ca4 <main+0x99c>)
 8001c10:	e9c1 2300 	strd	r2, r3, [r1]
			at_perp[1][0]=a_perp[0][0]*RX[1][0]+a_perp[1][0]*RY[1][0];
 8001c14:	4b22      	ldr	r3, [pc, #136]	@ (8001ca0 <main+0x998>)
 8001c16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c90 <main+0x988>)
 8001c1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c20:	f7fe fcb6 	bl	8000590 <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4614      	mov	r4, r2
 8001c2a:	461d      	mov	r5, r3
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca0 <main+0x998>)
 8001c2e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c32:	4b18      	ldr	r3, [pc, #96]	@ (8001c94 <main+0x98c>)
 8001c34:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c38:	f7fe fcaa 	bl	8000590 <__aeabi_dmul>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4620      	mov	r0, r4
 8001c42:	4629      	mov	r1, r5
 8001c44:	f7fe faee 	bl	8000224 <__adddf3>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	e02c      	b.n	8001ca8 <main+0x9a0>
 8001c4e:	bf00      	nop
 8001c50:	20000518 	.word	0x20000518
 8001c54:	200003c8 	.word	0x200003c8
 8001c58:	20000238 	.word	0x20000238
 8001c5c:	20000398 	.word	0x20000398
 8001c60:	20000560 	.word	0x20000560
 8001c64:	20000460 	.word	0x20000460
 8001c68:	20000468 	.word	0x20000468
 8001c6c:	20000458 	.word	0x20000458
 8001c70:	20000558 	.word	0x20000558
 8001c74:	20000470 	.word	0x20000470
 8001c78:	200003a0 	.word	0x200003a0
 8001c7c:	200003b8 	.word	0x200003b8
 8001c80:	200003a8 	.word	0x200003a8
 8001c84:	200003c0 	.word	0x200003c0
 8001c88:	200003b0 	.word	0x200003b0
 8001c8c:	200003d0 	.word	0x200003d0
 8001c90:	200003d8 	.word	0x200003d8
 8001c94:	200003e8 	.word	0x200003e8
 8001c98:	200004d8 	.word	0x200004d8
 8001c9c:	200003f8 	.word	0x200003f8
 8001ca0:	200004e8 	.word	0x200004e8
 8001ca4:	20000408 	.word	0x20000408
 8001ca8:	4977      	ldr	r1, [pc, #476]	@ (8001e88 <main+0xb80>)
 8001caa:	e9c1 2302 	strd	r2, r3, [r1, #8]

			velocity_A[0][0]=Speed_EncoderA*at[0][0];
 8001cae:	4b77      	ldr	r3, [pc, #476]	@ (8001e8c <main+0xb84>)
 8001cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cb4:	4b76      	ldr	r3, [pc, #472]	@ (8001e90 <main+0xb88>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe fc69 	bl	8000590 <__aeabi_dmul>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4974      	ldr	r1, [pc, #464]	@ (8001e94 <main+0xb8c>)
 8001cc4:	e9c1 2300 	strd	r2, r3, [r1]
			velocity_A[1][0]=Speed_EncoderA*at[1][0];
 8001cc8:	4b70      	ldr	r3, [pc, #448]	@ (8001e8c <main+0xb84>)
 8001cca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001cce:	4b70      	ldr	r3, [pc, #448]	@ (8001e90 <main+0xb88>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	f7fe fc5c 	bl	8000590 <__aeabi_dmul>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	496d      	ldr	r1, [pc, #436]	@ (8001e94 <main+0xb8c>)
 8001cde:	e9c1 2302 	strd	r2, r3, [r1, #8]

			velocity_A_perp[0][0]=vA_perp*at_perp[0][0];
 8001ce2:	4b69      	ldr	r3, [pc, #420]	@ (8001e88 <main+0xb80>)
 8001ce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ce8:	4b6b      	ldr	r3, [pc, #428]	@ (8001e98 <main+0xb90>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	f7fe fc4f 	bl	8000590 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4969      	ldr	r1, [pc, #420]	@ (8001e9c <main+0xb94>)
 8001cf8:	e9c1 2300 	strd	r2, r3, [r1]
			velocity_A_perp[0][1]=vA_perp*at_perp[1][0];
 8001cfc:	4b62      	ldr	r3, [pc, #392]	@ (8001e88 <main+0xb80>)
 8001cfe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d02:	4b65      	ldr	r3, [pc, #404]	@ (8001e98 <main+0xb90>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fc42 	bl	8000590 <__aeabi_dmul>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4962      	ldr	r1, [pc, #392]	@ (8001e9c <main+0xb94>)
 8001d12:	e9c1 2302 	strd	r2, r3, [r1, #8]

			A_velocity[0][0]=velocity_A[0][0]+velocity_A_perp[0][0];
 8001d16:	4b5f      	ldr	r3, [pc, #380]	@ (8001e94 <main+0xb8c>)
 8001d18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d1c:	4b5f      	ldr	r3, [pc, #380]	@ (8001e9c <main+0xb94>)
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f7fe fa7f 	bl	8000224 <__adddf3>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	495d      	ldr	r1, [pc, #372]	@ (8001ea0 <main+0xb98>)
 8001d2c:	e9c1 2300 	strd	r2, r3, [r1]
			A_velocity[1][0]=velocity_A[1][0]+velocity_A_perp[1][0];
 8001d30:	4b58      	ldr	r3, [pc, #352]	@ (8001e94 <main+0xb8c>)
 8001d32:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d36:	4b59      	ldr	r3, [pc, #356]	@ (8001e9c <main+0xb94>)
 8001d38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d3c:	f7fe fa72 	bl	8000224 <__adddf3>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4956      	ldr	r1, [pc, #344]	@ (8001ea0 <main+0xb98>)
 8001d46:	e9c1 2302 	strd	r2, r3, [r1, #8]
			rA[0][0]=rA[0][0]+(A_velocity[0][0]);
 8001d4a:	4b56      	ldr	r3, [pc, #344]	@ (8001ea4 <main+0xb9c>)
 8001d4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d50:	4b53      	ldr	r3, [pc, #332]	@ (8001ea0 <main+0xb98>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fa65 	bl	8000224 <__adddf3>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4951      	ldr	r1, [pc, #324]	@ (8001ea4 <main+0xb9c>)
 8001d60:	e9c1 2300 	strd	r2, r3, [r1]
			rA[1][0]=rA[1][0]+(A_velocity[1][0]);
 8001d64:	4b4f      	ldr	r3, [pc, #316]	@ (8001ea4 <main+0xb9c>)
 8001d66:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d6a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ea0 <main+0xb98>)
 8001d6c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d70:	f7fe fa58 	bl	8000224 <__adddf3>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	494a      	ldr	r1, [pc, #296]	@ (8001ea4 <main+0xb9c>)
 8001d7a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			old_couter=interrupt_counter;
 8001d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea8 <main+0xba0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a4a      	ldr	r2, [pc, #296]	@ (8001eac <main+0xba4>)
 8001d84:	6013      	str	r3, [r2, #0]

			MPU6050_Read_Accel();
 8001d86:	f7ff f9db 	bl	8001140 <MPU6050_Read_Accel>
			angle_X = Accel_X_Angle(Ax, Ay, Az);
 8001d8a:	4b49      	ldr	r3, [pc, #292]	@ (8001eb0 <main+0xba8>)
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	4b48      	ldr	r3, [pc, #288]	@ (8001eb4 <main+0xbac>)
 8001d92:	ed93 7a00 	vldr	s14, [r3]
 8001d96:	4b48      	ldr	r3, [pc, #288]	@ (8001eb8 <main+0xbb0>)
 8001d98:	edd3 6a00 	vldr	s13, [r3]
 8001d9c:	eeb0 1a66 	vmov.f32	s2, s13
 8001da0:	eef0 0a47 	vmov.f32	s1, s14
 8001da4:	eeb0 0a67 	vmov.f32	s0, s15
 8001da8:	f7ff fa46 	bl	8001238 <Accel_X_Angle>
 8001dac:	eef0 7a40 	vmov.f32	s15, s0
 8001db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001db4:	edc7 7a02 	vstr	s15, [r7, #8]
 8001db8:	7a3b      	ldrb	r3, [r7, #8]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	4b3f      	ldr	r3, [pc, #252]	@ (8001ebc <main+0xbb4>)
 8001dbe:	701a      	strb	r2, [r3, #0]
			angle_Y = Accel_Y_Angle(Ax, Ay, Az);
 8001dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb0 <main+0xba8>)
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb4 <main+0xbac>)
 8001dc8:	ed93 7a00 	vldr	s14, [r3]
 8001dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb8 <main+0xbb0>)
 8001dce:	edd3 6a00 	vldr	s13, [r3]
 8001dd2:	eeb0 1a66 	vmov.f32	s2, s13
 8001dd6:	eef0 0a47 	vmov.f32	s1, s14
 8001dda:	eeb0 0a67 	vmov.f32	s0, s15
 8001dde:	f7ff fa5f 	bl	80012a0 <Accel_Y_Angle>
 8001de2:	eef0 7a40 	vmov.f32	s15, s0
 8001de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dea:	edc7 7a02 	vstr	s15, [r7, #8]
 8001dee:	7a3b      	ldrb	r3, [r7, #8]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4b33      	ldr	r3, [pc, #204]	@ (8001ec0 <main+0xbb8>)
 8001df4:	701a      	strb	r2, [r3, #0]
			theta_angle=theta*180/M_PI;
 8001df6:	4b33      	ldr	r3, [pc, #204]	@ (8001ec4 <main+0xbbc>)
 8001df8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	4b31      	ldr	r3, [pc, #196]	@ (8001ec8 <main+0xbc0>)
 8001e02:	f7fe fbc5 	bl	8000590 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	a31c      	add	r3, pc, #112	@ (adr r3, 8001e80 <main+0xb78>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	f7fe fce6 	bl	80007e4 <__aeabi_ddiv>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f7fe fe50 	bl	8000ac4 <__aeabi_d2iz>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b21a      	sxth	r2, r3
 8001e28:	4b28      	ldr	r3, [pc, #160]	@ (8001ecc <main+0xbc4>)
 8001e2a:	801a      	strh	r2, [r3, #0]
			int16_t rA_x_int16_t = (int16_t)rA[0][0];
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea4 <main+0xb9c>)
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7fe fe45 	bl	8000ac4 <__aeabi_d2iz>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
			int16_t rA_y_int16_t = (int16_t)rA[1][0];
 8001e3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <main+0xb9c>)
 8001e40:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	f7fe fe3c 	bl	8000ac4 <__aeabi_d2iz>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	86bb      	strh	r3, [r7, #52]	@ 0x34
			buffer[0]= angle_X;
 8001e50:	4b1a      	ldr	r3, [pc, #104]	@ (8001ebc <main+0xbb4>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed0 <main+0xbc8>)
 8001e58:	801a      	strh	r2, [r3, #0]
			buffer[1]= angle_Y;
 8001e5a:	4b19      	ldr	r3, [pc, #100]	@ (8001ec0 <main+0xbb8>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	b21a      	sxth	r2, r3
 8001e60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <main+0xbc8>)
 8001e62:	805a      	strh	r2, [r3, #2]
			buffer[2]= theta_angle;
 8001e64:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <main+0xbc4>)
 8001e66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ed0 <main+0xbc8>)
 8001e6c:	809a      	strh	r2, [r3, #4]
			buffer[3]= rA_x_int16_t;
 8001e6e:	4a18      	ldr	r2, [pc, #96]	@ (8001ed0 <main+0xbc8>)
 8001e70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001e72:	80d3      	strh	r3, [r2, #6]
			buffer[4]= rA_y_int16_t;
 8001e74:	4a16      	ldr	r2, [pc, #88]	@ (8001ed0 <main+0xbc8>)
 8001e76:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001e78:	8113      	strh	r3, [r2, #8]
			loop();
 8001e7a:	f001 ff93 	bl	8003da4 <loop>
		if(interrupt_counter>old_couter)
 8001e7e:	e5a1      	b.n	80019c4 <main+0x6bc>
 8001e80:	54442d18 	.word	0x54442d18
 8001e84:	400921fb 	.word	0x400921fb
 8001e88:	20000408 	.word	0x20000408
 8001e8c:	200003f8 	.word	0x200003f8
 8001e90:	200003a0 	.word	0x200003a0
 8001e94:	20000428 	.word	0x20000428
 8001e98:	200003d0 	.word	0x200003d0
 8001e9c:	20000438 	.word	0x20000438
 8001ea0:	20000448 	.word	0x20000448
 8001ea4:	20000418 	.word	0x20000418
 8001ea8:	20000398 	.word	0x20000398
 8001eac:	20000560 	.word	0x20000560
 8001eb0:	20000480 	.word	0x20000480
 8001eb4:	20000484 	.word	0x20000484
 8001eb8:	20000488 	.word	0x20000488
 8001ebc:	20000496 	.word	0x20000496
 8001ec0:	20000497 	.word	0x20000497
 8001ec4:	20000470 	.word	0x20000470
 8001ec8:	40668000 	.word	0x40668000
 8001ecc:	20000394 	.word	0x20000394
 8001ed0:	2000048c 	.word	0x2000048c

08001ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b094      	sub	sp, #80	@ 0x50
 8001ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	2234      	movs	r2, #52	@ 0x34
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f008 ff66 	bl	800adb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef8:	2300      	movs	r3, #0
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb0 <SystemClock_Config+0xdc>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb0 <SystemClock_Config+0xdc>)
 8001f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f08:	4b29      	ldr	r3, [pc, #164]	@ (8001fb0 <SystemClock_Config+0xdc>)
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f14:	2300      	movs	r3, #0
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	4b26      	ldr	r3, [pc, #152]	@ (8001fb4 <SystemClock_Config+0xe0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a25      	ldr	r2, [pc, #148]	@ (8001fb4 <SystemClock_Config+0xe0>)
 8001f1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b23      	ldr	r3, [pc, #140]	@ (8001fb4 <SystemClock_Config+0xe0>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f30:	2302      	movs	r3, #2
 8001f32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f34:	2301      	movs	r3, #1
 8001f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f38:	2310      	movs	r3, #16
 8001f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f40:	2300      	movs	r3, #0
 8001f42:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f44:	2308      	movs	r3, #8
 8001f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001f48:	23b4      	movs	r3, #180	@ 0xb4
 8001f4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f50:	2302      	movs	r3, #2
 8001f52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f54:	2302      	movs	r3, #2
 8001f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f005 fa99 	bl	8007494 <HAL_RCC_OscConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f68:	f000 faee 	bl	8002548 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f6c:	f004 fef8 	bl	8006d60 <HAL_PWREx_EnableOverDrive>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001f76:	f000 fae7 	bl	8002548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f7a:	230f      	movs	r3, #15
 8001f7c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f86:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f90:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f92:	f107 0308 	add.w	r3, r7, #8
 8001f96:	2105      	movs	r1, #5
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f004 ff31 	bl	8006e00 <HAL_RCC_ClockConfig>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001fa4:	f000 fad0 	bl	8002548 <Error_Handler>
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3750      	adds	r7, #80	@ 0x50
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40007000 	.word	0x40007000

08001fb8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001fbc:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <MX_I2C3_Init+0x50>)
 8001fbe:	4a13      	ldr	r2, [pc, #76]	@ (800200c <MX_I2C3_Init+0x54>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <MX_I2C3_Init+0x50>)
 8001fc4:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <MX_I2C3_Init+0x58>)
 8001fc6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <MX_I2C3_Init+0x50>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <MX_I2C3_Init+0x50>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <MX_I2C3_Init+0x50>)
 8001fd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fda:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <MX_I2C3_Init+0x50>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <MX_I2C3_Init+0x50>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fe8:	4b07      	ldr	r3, [pc, #28]	@ (8002008 <MX_I2C3_Init+0x50>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <MX_I2C3_Init+0x50>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ff4:	4804      	ldr	r0, [pc, #16]	@ (8002008 <MX_I2C3_Init+0x50>)
 8001ff6:	f003 fe8f 	bl	8005d18 <HAL_I2C_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002000:	f000 faa2 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	2000007c 	.word	0x2000007c
 800200c:	40005c00 	.word	0x40005c00
 8002010:	000186a0 	.word	0x000186a0

08002014 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08c      	sub	sp, #48	@ 0x30
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800201a:	f107 030c 	add.w	r3, r7, #12
 800201e:	2224      	movs	r2, #36	@ 0x24
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f008 fec6 	bl	800adb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002030:	4b21      	ldr	r3, [pc, #132]	@ (80020b8 <MX_TIM2_Init+0xa4>)
 8002032:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002036:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002038:	4b1f      	ldr	r3, [pc, #124]	@ (80020b8 <MX_TIM2_Init+0xa4>)
 800203a:	2200      	movs	r2, #0
 800203c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203e:	4b1e      	ldr	r3, [pc, #120]	@ (80020b8 <MX_TIM2_Init+0xa4>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002044:	4b1c      	ldr	r3, [pc, #112]	@ (80020b8 <MX_TIM2_Init+0xa4>)
 8002046:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800204a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204c:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <MX_TIM2_Init+0xa4>)
 800204e:	2200      	movs	r2, #0
 8002050:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002052:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <MX_TIM2_Init+0xa4>)
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002058:	2301      	movs	r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002060:	2301      	movs	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002064:	2300      	movs	r3, #0
 8002066:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002070:	2301      	movs	r3, #1
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002074:	2300      	movs	r3, #0
 8002076:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	4619      	mov	r1, r3
 8002082:	480d      	ldr	r0, [pc, #52]	@ (80020b8 <MX_TIM2_Init+0xa4>)
 8002084:	f005 fd64 	bl	8007b50 <HAL_TIM_Encoder_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800208e:	f000 fa5b 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	4619      	mov	r1, r3
 800209e:	4806      	ldr	r0, [pc, #24]	@ (80020b8 <MX_TIM2_Init+0xa4>)
 80020a0:	f006 f9d6 	bl	8008450 <HAL_TIMEx_MasterConfigSynchronization>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80020aa:	f000 fa4d 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020ae:	bf00      	nop
 80020b0:	3730      	adds	r7, #48	@ 0x30
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200000d0 	.word	0x200000d0

080020bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	@ 0x30
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	2224      	movs	r2, #36	@ 0x24
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f008 fe72 	bl	800adb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020d8:	4b20      	ldr	r3, [pc, #128]	@ (800215c <MX_TIM3_Init+0xa0>)
 80020da:	4a21      	ldr	r2, [pc, #132]	@ (8002160 <MX_TIM3_Init+0xa4>)
 80020dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020de:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <MX_TIM3_Init+0xa0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e4:	4b1d      	ldr	r3, [pc, #116]	@ (800215c <MX_TIM3_Init+0xa0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <MX_TIM3_Init+0xa0>)
 80020ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <MX_TIM3_Init+0xa0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020f8:	4b18      	ldr	r3, [pc, #96]	@ (800215c <MX_TIM3_Init+0xa0>)
 80020fa:	2280      	movs	r2, #128	@ 0x80
 80020fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80020fe:	2301      	movs	r3, #1
 8002100:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002106:	2301      	movs	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 800210a:	2308      	movs	r3, #8
 800210c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002116:	2301      	movs	r3, #1
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 800211a:	2308      	movs	r3, #8
 800211c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	4619      	mov	r1, r3
 8002128:	480c      	ldr	r0, [pc, #48]	@ (800215c <MX_TIM3_Init+0xa0>)
 800212a:	f005 fd11 	bl	8007b50 <HAL_TIM_Encoder_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002134:	f000 fa08 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	4619      	mov	r1, r3
 8002144:	4805      	ldr	r0, [pc, #20]	@ (800215c <MX_TIM3_Init+0xa0>)
 8002146:	f006 f983 	bl	8008450 <HAL_TIMEx_MasterConfigSynchronization>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002150:	f000 f9fa 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002154:	bf00      	nop
 8002156:	3730      	adds	r7, #48	@ 0x30
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000118 	.word	0x20000118
 8002160:	40000400 	.word	0x40000400

08002164 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08c      	sub	sp, #48	@ 0x30
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800216a:	f107 030c 	add.w	r3, r7, #12
 800216e:	2224      	movs	r2, #36	@ 0x24
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f008 fe1e 	bl	800adb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002180:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <MX_TIM4_Init+0xa0>)
 8002182:	4a21      	ldr	r2, [pc, #132]	@ (8002208 <MX_TIM4_Init+0xa4>)
 8002184:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002186:	4b1f      	ldr	r3, [pc, #124]	@ (8002204 <MX_TIM4_Init+0xa0>)
 8002188:	2200      	movs	r2, #0
 800218a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218c:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <MX_TIM4_Init+0xa0>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002192:	4b1c      	ldr	r3, [pc, #112]	@ (8002204 <MX_TIM4_Init+0xa0>)
 8002194:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002198:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800219a:	4b1a      	ldr	r3, [pc, #104]	@ (8002204 <MX_TIM4_Init+0xa0>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021a0:	4b18      	ldr	r3, [pc, #96]	@ (8002204 <MX_TIM4_Init+0xa0>)
 80021a2:	2280      	movs	r2, #128	@ 0x80
 80021a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80021a6:	2301      	movs	r3, #1
 80021a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021ae:	2301      	movs	r3, #1
 80021b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 80021b2:	2308      	movs	r3, #8
 80021b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021be:	2301      	movs	r3, #1
 80021c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 80021c2:	2308      	movs	r3, #8
 80021c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80021ca:	f107 030c 	add.w	r3, r7, #12
 80021ce:	4619      	mov	r1, r3
 80021d0:	480c      	ldr	r0, [pc, #48]	@ (8002204 <MX_TIM4_Init+0xa0>)
 80021d2:	f005 fcbd 	bl	8007b50 <HAL_TIM_Encoder_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80021dc:	f000 f9b4 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	4619      	mov	r1, r3
 80021ec:	4805      	ldr	r0, [pc, #20]	@ (8002204 <MX_TIM4_Init+0xa0>)
 80021ee:	f006 f92f 	bl	8008450 <HAL_TIMEx_MasterConfigSynchronization>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80021f8:	f000 f9a6 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021fc:	bf00      	nop
 80021fe:	3730      	adds	r7, #48	@ 0x30
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000160 	.word	0x20000160
 8002208:	40000800 	.word	0x40000800

0800220c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002212:	f107 0308 	add.w	r3, r7, #8
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002220:	463b      	mov	r3, r7
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002228:	4b1c      	ldr	r3, [pc, #112]	@ (800229c <MX_TIM5_Init+0x90>)
 800222a:	4a1d      	ldr	r2, [pc, #116]	@ (80022a0 <MX_TIM5_Init+0x94>)
 800222c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 5;
 800222e:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <MX_TIM5_Init+0x90>)
 8002230:	2205      	movs	r2, #5
 8002232:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002234:	4b19      	ldr	r3, [pc, #100]	@ (800229c <MX_TIM5_Init+0x90>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 899999;
 800223a:	4b18      	ldr	r3, [pc, #96]	@ (800229c <MX_TIM5_Init+0x90>)
 800223c:	4a19      	ldr	r2, [pc, #100]	@ (80022a4 <MX_TIM5_Init+0x98>)
 800223e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002240:	4b16      	ldr	r3, [pc, #88]	@ (800229c <MX_TIM5_Init+0x90>)
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002246:	4b15      	ldr	r3, [pc, #84]	@ (800229c <MX_TIM5_Init+0x90>)
 8002248:	2280      	movs	r2, #128	@ 0x80
 800224a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800224c:	4813      	ldr	r0, [pc, #76]	@ (800229c <MX_TIM5_Init+0x90>)
 800224e:	f005 fbbf 	bl	80079d0 <HAL_TIM_Base_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8002258:	f000 f976 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800225c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002260:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002262:	f107 0308 	add.w	r3, r7, #8
 8002266:	4619      	mov	r1, r3
 8002268:	480c      	ldr	r0, [pc, #48]	@ (800229c <MX_TIM5_Init+0x90>)
 800226a:	f005 fe95 	bl	8007f98 <HAL_TIM_ConfigClockSource>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8002274:	f000 f968 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002278:	2300      	movs	r3, #0
 800227a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002280:	463b      	mov	r3, r7
 8002282:	4619      	mov	r1, r3
 8002284:	4805      	ldr	r0, [pc, #20]	@ (800229c <MX_TIM5_Init+0x90>)
 8002286:	f006 f8e3 	bl	8008450 <HAL_TIMEx_MasterConfigSynchronization>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8002290:	f000 f95a 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002294:	bf00      	nop
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	200001a8 	.word	0x200001a8
 80022a0:	40000c00 	.word	0x40000c00
 80022a4:	000dbb9f 	.word	0x000dbb9f

080022a8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	@ 0x30
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022ae:	f107 030c 	add.w	r3, r7, #12
 80022b2:	2224      	movs	r2, #36	@ 0x24
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f008 fd7c 	bl	800adb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80022c4:	4b22      	ldr	r3, [pc, #136]	@ (8002350 <MX_TIM8_Init+0xa8>)
 80022c6:	4a23      	ldr	r2, [pc, #140]	@ (8002354 <MX_TIM8_Init+0xac>)
 80022c8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80022ca:	4b21      	ldr	r3, [pc, #132]	@ (8002350 <MX_TIM8_Init+0xa8>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002350 <MX_TIM8_Init+0xa8>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80022d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002350 <MX_TIM8_Init+0xa8>)
 80022d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022dc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022de:	4b1c      	ldr	r3, [pc, #112]	@ (8002350 <MX_TIM8_Init+0xa8>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80022e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002350 <MX_TIM8_Init+0xa8>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022ea:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <MX_TIM8_Init+0xa8>)
 80022ec:	2280      	movs	r2, #128	@ 0x80
 80022ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80022f0:	2301      	movs	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022f4:	2300      	movs	r3, #0
 80022f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022f8:	2301      	movs	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 80022fc:	2308      	movs	r3, #8
 80022fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002308:	2301      	movs	r3, #1
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 800230c:	2308      	movs	r3, #8
 800230e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	4619      	mov	r1, r3
 800231a:	480d      	ldr	r0, [pc, #52]	@ (8002350 <MX_TIM8_Init+0xa8>)
 800231c:	f005 fc18 	bl	8007b50 <HAL_TIM_Encoder_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002326:	f000 f90f 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	4619      	mov	r1, r3
 8002336:	4806      	ldr	r0, [pc, #24]	@ (8002350 <MX_TIM8_Init+0xa8>)
 8002338:	f006 f88a 	bl	8008450 <HAL_TIMEx_MasterConfigSynchronization>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002342:	f000 f901 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002346:	bf00      	nop
 8002348:	3730      	adds	r7, #48	@ 0x30
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200001f0 	.word	0x200001f0
 8002354:	40010400 	.word	0x40010400

08002358 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800235e:	463b      	mov	r3, r7
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800236a:	4b15      	ldr	r3, [pc, #84]	@ (80023c0 <MX_TIM12_Init+0x68>)
 800236c:	4a15      	ldr	r2, [pc, #84]	@ (80023c4 <MX_TIM12_Init+0x6c>)
 800236e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 90-1;
 8002370:	4b13      	ldr	r3, [pc, #76]	@ (80023c0 <MX_TIM12_Init+0x68>)
 8002372:	2259      	movs	r2, #89	@ 0x59
 8002374:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002376:	4b12      	ldr	r3, [pc, #72]	@ (80023c0 <MX_TIM12_Init+0x68>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 200-1;
 800237c:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <MX_TIM12_Init+0x68>)
 800237e:	22c7      	movs	r2, #199	@ 0xc7
 8002380:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002382:	4b0f      	ldr	r3, [pc, #60]	@ (80023c0 <MX_TIM12_Init+0x68>)
 8002384:	2200      	movs	r2, #0
 8002386:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002388:	4b0d      	ldr	r3, [pc, #52]	@ (80023c0 <MX_TIM12_Init+0x68>)
 800238a:	2200      	movs	r2, #0
 800238c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800238e:	480c      	ldr	r0, [pc, #48]	@ (80023c0 <MX_TIM12_Init+0x68>)
 8002390:	f005 fb1e 	bl	80079d0 <HAL_TIM_Base_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM12_Init+0x46>
  {
    Error_Handler();
 800239a:	f000 f8d5 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800239e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023a2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80023a4:	463b      	mov	r3, r7
 80023a6:	4619      	mov	r1, r3
 80023a8:	4805      	ldr	r0, [pc, #20]	@ (80023c0 <MX_TIM12_Init+0x68>)
 80023aa:	f005 fdf5 	bl	8007f98 <HAL_TIM_ConfigClockSource>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM12_Init+0x60>
  {
    Error_Handler();
 80023b4:	f000 f8c8 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000238 	.word	0x20000238
 80023c4:	40001800 	.word	0x40001800

080023c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023cc:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 80023ce:	4a12      	ldr	r2, [pc, #72]	@ (8002418 <MX_USART2_UART_Init+0x50>)
 80023d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023d2:	4b10      	ldr	r3, [pc, #64]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 80023d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023da:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023ec:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 80023ee:	220c      	movs	r2, #12
 80023f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f2:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f8:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023fe:	4805      	ldr	r0, [pc, #20]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 8002400:	f006 f8b6 	bl	8008570 <HAL_UART_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800240a:	f000 f89d 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000280 	.word	0x20000280
 8002418:	40004400 	.word	0x40004400

0800241c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	4b10      	ldr	r3, [pc, #64]	@ (8002468 <MX_DMA_Init+0x4c>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	4a0f      	ldr	r2, [pc, #60]	@ (8002468 <MX_DMA_Init+0x4c>)
 800242c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002430:	6313      	str	r3, [r2, #48]	@ 0x30
 8002432:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <MX_DMA_Init+0x4c>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2100      	movs	r1, #0
 8002442:	2010      	movs	r0, #16
 8002444:	f002 fe81 	bl	800514a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002448:	2010      	movs	r0, #16
 800244a:	f002 fe9a 	bl	8005182 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	2100      	movs	r1, #0
 8002452:	2011      	movs	r0, #17
 8002454:	f002 fe79 	bl	800514a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002458:	2011      	movs	r0, #17
 800245a:	f002 fe92 	bl	8005182 <HAL_NVIC_EnableIRQ>

}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800

0800246c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	@ 0x28
 8002470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	4b2d      	ldr	r3, [pc, #180]	@ (800253c <MX_GPIO_Init+0xd0>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	4a2c      	ldr	r2, [pc, #176]	@ (800253c <MX_GPIO_Init+0xd0>)
 800248c:	f043 0304 	orr.w	r3, r3, #4
 8002490:	6313      	str	r3, [r2, #48]	@ 0x30
 8002492:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <MX_GPIO_Init+0xd0>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	4b26      	ldr	r3, [pc, #152]	@ (800253c <MX_GPIO_Init+0xd0>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	4a25      	ldr	r2, [pc, #148]	@ (800253c <MX_GPIO_Init+0xd0>)
 80024a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ae:	4b23      	ldr	r3, [pc, #140]	@ (800253c <MX_GPIO_Init+0xd0>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	4b1f      	ldr	r3, [pc, #124]	@ (800253c <MX_GPIO_Init+0xd0>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	4a1e      	ldr	r2, [pc, #120]	@ (800253c <MX_GPIO_Init+0xd0>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ca:	4b1c      	ldr	r3, [pc, #112]	@ (800253c <MX_GPIO_Init+0xd0>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
 80024da:	4b18      	ldr	r3, [pc, #96]	@ (800253c <MX_GPIO_Init+0xd0>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024de:	4a17      	ldr	r2, [pc, #92]	@ (800253c <MX_GPIO_Init+0xd0>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e6:	4b15      	ldr	r3, [pc, #84]	@ (800253c <MX_GPIO_Init+0xd0>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2120      	movs	r1, #32
 80024f6:	4812      	ldr	r0, [pc, #72]	@ (8002540 <MX_GPIO_Init+0xd4>)
 80024f8:	f003 fbf4 	bl	8005ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80024fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002502:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	4619      	mov	r1, r3
 8002512:	480c      	ldr	r0, [pc, #48]	@ (8002544 <MX_GPIO_Init+0xd8>)
 8002514:	f003 fa52 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002518:	2320      	movs	r3, #32
 800251a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251c:	2301      	movs	r3, #1
 800251e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002524:	2300      	movs	r3, #0
 8002526:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	4619      	mov	r1, r3
 800252e:	4804      	ldr	r0, [pc, #16]	@ (8002540 <MX_GPIO_Init+0xd4>)
 8002530:	f003 fa44 	bl	80059bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002534:	bf00      	nop
 8002536:	3728      	adds	r7, #40	@ 0x28
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40023800 	.word	0x40023800
 8002540:	40020000 	.word	0x40020000
 8002544:	40020800 	.word	0x40020800

08002548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800254c:	b672      	cpsid	i
}
 800254e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <Error_Handler+0x8>

08002554 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <_ZN3ros3MsgC1Ev+0x1c>)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	0800b340 	.word	0x0800b340

08002598 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
      data()
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff ffe8 	bl	8002578 <_ZN3ros3MsgC1Ev>
 80025a8:	4a06      	ldr	r2, [pc, #24]	@ (80025c4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3304      	adds	r3, #4
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ffce 	bl	8002554 <_ZN3ros4TimeC1Ev>
    {
    }
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	0800b328 	.word	0x0800b328

080025c8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6859      	ldr	r1, [r3, #4]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	b2ca      	uxtb	r2, r1
 80025e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	0a19      	lsrs	r1, r3, #8
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	3301      	adds	r3, #1
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	4413      	add	r3, r2
 80025f2:	b2ca      	uxtb	r2, r1
 80025f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	0c19      	lsrs	r1, r3, #16
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3302      	adds	r3, #2
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	4413      	add	r3, r2
 8002604:	b2ca      	uxtb	r2, r1
 8002606:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	0e19      	lsrs	r1, r3, #24
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	3303      	adds	r3, #3
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	4413      	add	r3, r2
 8002616:	b2ca      	uxtb	r2, r1
 8002618:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3304      	adds	r3, #4
 800261e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6899      	ldr	r1, [r3, #8]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	4413      	add	r3, r2
 800262a:	b2ca      	uxtb	r2, r1
 800262c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	0a19      	lsrs	r1, r3, #8
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3301      	adds	r3, #1
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	4413      	add	r3, r2
 800263c:	b2ca      	uxtb	r2, r1
 800263e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	0c19      	lsrs	r1, r3, #16
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3302      	adds	r3, #2
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	4413      	add	r3, r2
 800264e:	b2ca      	uxtb	r2, r1
 8002650:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	0e19      	lsrs	r1, r3, #24
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3303      	adds	r3, #3
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	4413      	add	r3, r2
 8002660:	b2ca      	uxtb	r2, r1
 8002662:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3304      	adds	r3, #4
 8002668:	60fb      	str	r3, [r7, #12]
      return offset;
 800266a:	68fb      	ldr	r3, [r7, #12]
    }
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	4413      	add	r3, r2
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3301      	adds	r3, #1
 800269c:	6839      	ldr	r1, [r7, #0]
 800269e:	440b      	add	r3, r1
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3302      	adds	r3, #2
 80026b2:	6839      	ldr	r1, [r7, #0]
 80026b4:	440b      	add	r3, r1
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	041b      	lsls	r3, r3, #16
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3303      	adds	r3, #3
 80026c8:	6839      	ldr	r1, [r7, #0]
 80026ca:	440b      	add	r3, r1
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	061b      	lsls	r3, r3, #24
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3304      	adds	r3, #4
 80026da:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	4413      	add	r3, r2
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3301      	adds	r3, #1
 80026f2:	6839      	ldr	r1, [r7, #0]
 80026f4:	440b      	add	r3, r1
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3302      	adds	r3, #2
 8002708:	6839      	ldr	r1, [r7, #0]
 800270a:	440b      	add	r3, r1
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	041b      	lsls	r3, r3, #16
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3303      	adds	r3, #3
 800271e:	6839      	ldr	r1, [r7, #0]
 8002720:	440b      	add	r3, r1
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3304      	adds	r3, #4
 8002730:	60fb      	str	r3, [r7, #12]
     return offset;
 8002732:	68fb      	ldr	r3, [r7, #12]
    }
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	4b03      	ldr	r3, [pc, #12]	@ (8002758 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	0800b070 	.word	0x0800b070

0800275c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	4b03      	ldr	r3, [pc, #12]	@ (8002774 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002766:	4618      	mov	r0, r3
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	0800b080 	.word	0x0800b080

08002778 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fef8 	bl	8002578 <_ZN3ros3MsgC1Ev>
 8002788:	4a0b      	ldr	r2, [pc, #44]	@ (80027b8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a09      	ldr	r2, [pc, #36]	@ (80027bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002798:	609a      	str	r2, [r3, #8]
      message_type(""),
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a07      	ldr	r2, [pc, #28]	@ (80027bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800279e:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a06      	ldr	r2, [pc, #24]	@ (80027bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80027a4:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	615a      	str	r2, [r3, #20]
    {
    }
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	0800b310 	.word	0x0800b310
 80027bc:	0800b0a4 	.word	0x0800b0a4

080027c0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	8899      	ldrh	r1, [r3, #4]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	4413      	add	r3, r2
 80027d8:	b2ca      	uxtb	r2, r1
 80027da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	889b      	ldrh	r3, [r3, #4]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	b299      	uxth	r1, r3
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	3301      	adds	r3, #1
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	b2ca      	uxtb	r2, r1
 80027ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3302      	adds	r3, #2
 80027f4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fd fd04 	bl	8000208 <strlen>
 8002800:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	4413      	add	r3, r2
 8002808:	69b9      	ldr	r1, [r7, #24]
 800280a:	4618      	mov	r0, r3
 800280c:	f001 fae4 	bl	8003dd8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	3304      	adds	r3, #4
 8002814:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	18d0      	adds	r0, r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4619      	mov	r1, r3
 8002824:	f008 fafa 	bl	800ae1c <memcpy>
      offset += length_topic_name;
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	4413      	add	r3, r2
 800282e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd fce7 	bl	8000208 <strlen>
 800283a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	4413      	add	r3, r2
 8002842:	6979      	ldr	r1, [r7, #20]
 8002844:	4618      	mov	r0, r3
 8002846:	f001 fac7 	bl	8003dd8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3304      	adds	r3, #4
 800284e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	18d0      	adds	r0, r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4619      	mov	r1, r3
 800285e:	f008 fadd 	bl	800ae1c <memcpy>
      offset += length_message_type;
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	4413      	add	r3, r2
 8002868:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fcca 	bl	8000208 <strlen>
 8002874:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	4413      	add	r3, r2
 800287c:	6939      	ldr	r1, [r7, #16]
 800287e:	4618      	mov	r0, r3
 8002880:	f001 faaa 	bl	8003dd8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	3304      	adds	r3, #4
 8002888:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	18d0      	adds	r0, r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4619      	mov	r1, r3
 8002898:	f008 fac0 	bl	800ae1c <memcpy>
      offset += length_md5sum;
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80028aa:	68f9      	ldr	r1, [r7, #12]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	4413      	add	r3, r2
 80028b2:	b2ca      	uxtb	r2, r1
 80028b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	0a19      	lsrs	r1, r3, #8
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3301      	adds	r3, #1
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	4413      	add	r3, r2
 80028c2:	b2ca      	uxtb	r2, r1
 80028c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	0c19      	lsrs	r1, r3, #16
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3302      	adds	r3, #2
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	b2ca      	uxtb	r2, r1
 80028d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	0e19      	lsrs	r1, r3, #24
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3303      	adds	r3, #3
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	4413      	add	r3, r2
 80028e2:	b2ca      	uxtb	r2, r1
 80028e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3304      	adds	r3, #4
 80028ea:	61fb      	str	r3, [r7, #28]
      return offset;
 80028ec:	69fb      	ldr	r3, [r7, #28]
    }
 80028ee:	4618      	mov	r0, r3
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b08a      	sub	sp, #40	@ 0x28
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	4413      	add	r3, r2
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	889b      	ldrh	r3, [r3, #4]
 8002916:	b21a      	sxth	r2, r3
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	3301      	adds	r3, #1
 800291c:	6839      	ldr	r1, [r7, #0]
 800291e:	440b      	add	r3, r1
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	b21b      	sxth	r3, r3
 8002926:	4313      	orrs	r3, r2
 8002928:	b21b      	sxth	r3, r3
 800292a:	b29a      	uxth	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	3302      	adds	r3, #2
 8002934:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	441a      	add	r2, r3
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f001 fa67 	bl	8003e16 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	3304      	adds	r3, #4
 800294c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
 8002952:	e00b      	b.n	800296c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	441a      	add	r2, r3
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	3b01      	subs	r3, #1
 800295e:	6839      	ldr	r1, [r7, #0]
 8002960:	440b      	add	r3, r1
 8002962:	7812      	ldrb	r2, [r2, #0]
 8002964:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	3301      	adds	r3, #1
 800296a:	627b      	str	r3, [r7, #36]	@ 0x24
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	4413      	add	r3, r2
 8002972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002974:	429a      	cmp	r2, r3
 8002976:	d3ed      	bcc.n	8002954 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	4413      	add	r3, r2
 800297e:	3b01      	subs	r3, #1
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	4413      	add	r3, r2
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	3b01      	subs	r3, #1
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	441a      	add	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	4413      	add	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	441a      	add	r2, r3
 80029a2:	f107 0310 	add.w	r3, r7, #16
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f001 fa34 	bl	8003e16 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	3304      	adds	r3, #4
 80029b2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	623b      	str	r3, [r7, #32]
 80029b8:	e00b      	b.n	80029d2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	441a      	add	r2, r3
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6839      	ldr	r1, [r7, #0]
 80029c6:	440b      	add	r3, r1
 80029c8:	7812      	ldrb	r2, [r2, #0]
 80029ca:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	3301      	adds	r3, #1
 80029d0:	623b      	str	r3, [r7, #32]
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4413      	add	r3, r2
 80029d8:	6a3a      	ldr	r2, [r7, #32]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d3ed      	bcc.n	80029ba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4413      	add	r3, r2
 80029e4:	3b01      	subs	r3, #1
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	3b01      	subs	r3, #1
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	441a      	add	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4413      	add	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	441a      	add	r2, r3
 8002a08:	f107 030c 	add.w	r3, r7, #12
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f001 fa01 	bl	8003e16 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	3304      	adds	r3, #4
 8002a18:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	e00b      	b.n	8002a38 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	441a      	add	r2, r3
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	6839      	ldr	r1, [r7, #0]
 8002a2c:	440b      	add	r3, r1
 8002a2e:	7812      	ldrb	r2, [r2, #0]
 8002a30:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d3ed      	bcc.n	8002a20 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4413      	add	r3, r2
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	4413      	add	r3, r2
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	441a      	add	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4413      	add	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	6839      	ldr	r1, [r7, #0]
 8002a72:	440a      	add	r2, r1
 8002a74:	7812      	ldrb	r2, [r2, #0]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	6839      	ldr	r1, [r7, #0]
 8002a82:	440b      	add	r3, r1
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	3302      	adds	r3, #2
 8002a92:	6839      	ldr	r1, [r7, #0]
 8002a94:	440b      	add	r3, r1
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	3303      	adds	r3, #3
 8002aa4:	6839      	ldr	r1, [r7, #0]
 8002aa6:	440b      	add	r3, r1
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	061b      	lsls	r3, r3, #24
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	61bb      	str	r3, [r7, #24]
     return offset;
 8002abc:	69bb      	ldr	r3, [r7, #24]
    }
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3728      	adds	r7, #40	@ 0x28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	4b03      	ldr	r3, [pc, #12]	@ (8002ae0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	0800b0a8 	.word	0x0800b0a8

08002ae4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	4b03      	ldr	r3, [pc, #12]	@ (8002afc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	0800b0c4 	.word	0x0800b0c4

08002b00 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fd34 	bl	8002578 <_ZN3ros3MsgC1Ev>
 8002b10:	4a06      	ldr	r2, [pc, #24]	@ (8002b2c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	601a      	str	r2, [r3, #0]
      level(0),
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	711a      	strb	r2, [r3, #4]
      msg("")
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a04      	ldr	r2, [pc, #16]	@ (8002b30 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002b20:	609a      	str	r2, [r3, #8]
    {
    }
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	0800b2f8 	.word	0x0800b2f8
 8002b30:	0800b0a4 	.word	0x0800b0a4

08002b34 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	4413      	add	r3, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	7912      	ldrb	r2, [r2, #4]
 8002b4c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3301      	adds	r3, #1
 8002b52:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fd fb55 	bl	8000208 <strlen>
 8002b5e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	4413      	add	r3, r2
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f001 f935 	bl	8003dd8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3304      	adds	r3, #4
 8002b72:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	18d0      	adds	r0, r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	4619      	mov	r1, r3
 8002b82:	f008 f94b 	bl	800ae1c <memcpy>
      offset += length_msg;
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
      return offset;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
    }
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	781a      	ldrb	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	441a      	add	r2, r3
 8002bbe:	f107 030c 	add.w	r3, r7, #12
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f001 f926 	bl	8003e16 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e00b      	b.n	8002bee <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	441a      	add	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	6839      	ldr	r1, [r7, #0]
 8002be2:	440b      	add	r3, r1
 8002be4:	7812      	ldrb	r2, [r2, #0]
 8002be6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	3301      	adds	r3, #1
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d3ed      	bcc.n	8002bd6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	3b01      	subs	r3, #1
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	4413      	add	r3, r2
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	441a      	add	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
     return offset;
 8002c1e:	693b      	ldr	r3, [r7, #16]
    }
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	4b03      	ldr	r3, [pc, #12]	@ (8002c40 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	0800b0e8 	.word	0x0800b0e8

08002c44 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	4b03      	ldr	r3, [pc, #12]	@ (8002c5c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	0800b0fc 	.word	0x0800b0fc

08002c60 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fc84 	bl	8002578 <_ZN3ros3MsgC1Ev>
 8002c70:	4a11      	ldr	r2, [pc, #68]	@ (8002cb8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	605a      	str	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	611a      	str	r2, [r3, #16]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	615a      	str	r2, [r3, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	61da      	str	r2, [r3, #28]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	621a      	str	r2, [r3, #32]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	0800b2e0 	.word	0x0800b2e0

08002cbc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	@ 0x28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	b2ca      	uxtb	r2, r1
 8002cd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	0a19      	lsrs	r1, r3, #8
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	b2ca      	uxtb	r2, r1
 8002ce8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	0c19      	lsrs	r1, r3, #16
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf2:	3302      	adds	r3, #2
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	b2ca      	uxtb	r2, r1
 8002cfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	0e19      	lsrs	r1, r3, #24
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	3303      	adds	r3, #3
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	4413      	add	r3, r2
 8002d0a:	b2ca      	uxtb	r2, r1
 8002d0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	3304      	adds	r3, #4
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002d14:	2300      	movs	r3, #0
 8002d16:	623b      	str	r3, [r7, #32]
 8002d18:	e02a      	b.n	8002d70 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002d28:	6939      	ldr	r1, [r7, #16]
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	4413      	add	r3, r2
 8002d30:	b2ca      	uxtb	r2, r1
 8002d32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	0a19      	lsrs	r1, r3, #8
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	b2ca      	uxtb	r2, r1
 8002d42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	0c19      	lsrs	r1, r3, #16
 8002d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4a:	3302      	adds	r3, #2
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	b2ca      	uxtb	r2, r1
 8002d52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	0e19      	lsrs	r1, r3, #24
 8002d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5a:	3303      	adds	r3, #3
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	4413      	add	r3, r2
 8002d60:	b2ca      	uxtb	r2, r1
 8002d62:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d66:	3304      	adds	r3, #4
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	623b      	str	r3, [r7, #32]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d3cf      	bcc.n	8002d1a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6919      	ldr	r1, [r3, #16]
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	b2ca      	uxtb	r2, r1
 8002d86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	0a19      	lsrs	r1, r3, #8
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	3301      	adds	r3, #1
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	4413      	add	r3, r2
 8002d96:	b2ca      	uxtb	r2, r1
 8002d98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	0c19      	lsrs	r1, r3, #16
 8002da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da2:	3302      	adds	r3, #2
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	b2ca      	uxtb	r2, r1
 8002daa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	0e19      	lsrs	r1, r3, #24
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	3303      	adds	r3, #3
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	4413      	add	r3, r2
 8002dba:	b2ca      	uxtb	r2, r1
 8002dbc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	e02a      	b.n	8002e20 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002dd8:	68f9      	ldr	r1, [r7, #12]
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	4413      	add	r3, r2
 8002de0:	b2ca      	uxtb	r2, r1
 8002de2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	0a19      	lsrs	r1, r3, #8
 8002de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dea:	3301      	adds	r3, #1
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	4413      	add	r3, r2
 8002df0:	b2ca      	uxtb	r2, r1
 8002df2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	0c19      	lsrs	r1, r3, #16
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	b2ca      	uxtb	r2, r1
 8002e02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	0e19      	lsrs	r1, r3, #24
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	3303      	adds	r3, #3
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	4413      	add	r3, r2
 8002e10:	b2ca      	uxtb	r2, r1
 8002e12:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	3304      	adds	r3, #4
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	61fb      	str	r3, [r7, #28]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d3cf      	bcc.n	8002dca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69d9      	ldr	r1, [r3, #28]
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	b2ca      	uxtb	r2, r1
 8002e36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	0a19      	lsrs	r1, r3, #8
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	3301      	adds	r3, #1
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	4413      	add	r3, r2
 8002e46:	b2ca      	uxtb	r2, r1
 8002e48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	0c19      	lsrs	r1, r3, #16
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	3302      	adds	r3, #2
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	4413      	add	r3, r2
 8002e58:	b2ca      	uxtb	r2, r1
 8002e5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	0e19      	lsrs	r1, r3, #24
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	3303      	adds	r3, #3
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	4413      	add	r3, r2
 8002e6a:	b2ca      	uxtb	r2, r1
 8002e6c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	3304      	adds	r3, #4
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002e74:	2300      	movs	r3, #0
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	e027      	b.n	8002eca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd f9be 	bl	8000208 <strlen>
 8002e8c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	6979      	ldr	r1, [r7, #20]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 ff9e 	bl	8003dd8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	18d0      	adds	r0, r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f007 ffb0 	bl	800ae1c <memcpy>
      offset += length_stringsi;
 8002ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d3d2      	bcc.n	8002e7a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3728      	adds	r7, #40	@ 0x28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b08e      	sub	sp, #56	@ 0x38
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef8:	3301      	adds	r3, #1
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	6a3a      	ldr	r2, [r7, #32]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	4413      	add	r3, r2
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	041b      	lsls	r3, r3, #16
 8002f14:	6a3a      	ldr	r2, [r7, #32]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f1c:	3303      	adds	r3, #3
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	4413      	add	r3, r2
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	061b      	lsls	r3, r3, #24
 8002f26:	6a3a      	ldr	r2, [r7, #32]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2e:	3304      	adds	r3, #4
 8002f30:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	6a3a      	ldr	r2, [r7, #32]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d90a      	bls.n	8002f52 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f007 fefe 	bl	800ad48 <realloc>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002f58:	2300      	movs	r3, #0
 8002f5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f5c:	e035      	b.n	8002fca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f66:	6839      	ldr	r1, [r7, #0]
 8002f68:	440a      	add	r2, r1
 8002f6a:	7812      	ldrb	r2, [r2, #0]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f74:	3301      	adds	r3, #1
 8002f76:	6839      	ldr	r1, [r7, #0]
 8002f78:	440b      	add	r3, r1
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f86:	3302      	adds	r3, #2
 8002f88:	6839      	ldr	r1, [r7, #0]
 8002f8a:	440b      	add	r3, r1
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	041b      	lsls	r3, r3, #16
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f98:	3303      	adds	r3, #3
 8002f9a:	6839      	ldr	r1, [r7, #0]
 8002f9c:	440b      	add	r3, r1
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	061b      	lsls	r3, r3, #24
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fae:	3304      	adds	r3, #4
 8002fb0:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	3208      	adds	r2, #8
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d3c4      	bcc.n	8002f5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	4413      	add	r3, r2
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	021b      	lsls	r3, r3, #8
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	041b      	lsls	r3, r3, #16
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003004:	3303      	adds	r3, #3
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	4413      	add	r3, r2
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	061b      	lsls	r3, r3, #24
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	4313      	orrs	r3, r2
 8003012:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003016:	3304      	adds	r3, #4
 8003018:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	429a      	cmp	r2, r3
 8003022:	d90a      	bls.n	800303a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699a      	ldr	r2, [r3, #24]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4619      	mov	r1, r3
 800302e:	4610      	mov	r0, r2
 8003030:	f007 fe8a 	bl	800ad48 <realloc>
 8003034:	4602      	mov	r2, r0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003040:	2300      	movs	r3, #0
 8003042:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003044:	e035      	b.n	80030b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800304e:	6839      	ldr	r1, [r7, #0]
 8003050:	440a      	add	r2, r1
 8003052:	7812      	ldrb	r2, [r2, #0]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305c:	3301      	adds	r3, #1
 800305e:	6839      	ldr	r1, [r7, #0]
 8003060:	440b      	add	r3, r1
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800306e:	3302      	adds	r3, #2
 8003070:	6839      	ldr	r1, [r7, #0]
 8003072:	440b      	add	r3, r1
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003080:	3303      	adds	r3, #3
 8003082:	6839      	ldr	r1, [r7, #0]
 8003084:	440b      	add	r3, r1
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	061b      	lsls	r3, r3, #24
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003096:	3304      	adds	r3, #4
 8003098:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	3214      	adds	r2, #20
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80030ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ae:	3301      	adds	r3, #1
 80030b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d3c4      	bcc.n	8003046 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80030bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	4413      	add	r3, r2
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80030c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c8:	3301      	adds	r3, #1
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	4413      	add	r3, r2
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80030d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030da:	3302      	adds	r3, #2
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	4413      	add	r3, r2
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	041b      	lsls	r3, r3, #16
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80030ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ec:	3303      	adds	r3, #3
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	4413      	add	r3, r2
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80030fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fe:	3304      	adds	r3, #4
 8003100:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	429a      	cmp	r2, r3
 800310a:	d90a      	bls.n	8003122 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4619      	mov	r1, r3
 8003116:	4610      	mov	r0, r2
 8003118:	f007 fe16 	bl	800ad48 <realloc>
 800311c:	4602      	mov	r2, r0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8003128:	2300      	movs	r3, #0
 800312a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800312c:	e03e      	b.n	80031ac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800312e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	441a      	add	r2, r3
 8003134:	f107 030c 	add.w	r3, r7, #12
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fe6b 	bl	8003e16 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003142:	3304      	adds	r3, #4
 8003144:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003148:	627b      	str	r3, [r7, #36]	@ 0x24
 800314a:	e00b      	b.n	8003164 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	441a      	add	r2, r3
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003154:	3b01      	subs	r3, #1
 8003156:	6839      	ldr	r1, [r7, #0]
 8003158:	440b      	add	r3, r1
 800315a:	7812      	ldrb	r2, [r2, #0]
 800315c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003160:	3301      	adds	r3, #1
 8003162:	627b      	str	r3, [r7, #36]	@ 0x24
 8003164:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4413      	add	r3, r2
 800316a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800316c:	429a      	cmp	r2, r3
 800316e:	d3ed      	bcc.n	800314c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003170:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4413      	add	r3, r2
 8003176:	3b01      	subs	r3, #1
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	4413      	add	r3, r2
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003182:	3b01      	subs	r3, #1
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	441a      	add	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800318c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4413      	add	r3, r2
 8003192:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	3220      	adds	r2, #32
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80031a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a8:	3301      	adds	r3, #1
 80031aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d3bb      	bcc.n	800312e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80031b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80031b8:	4618      	mov	r0, r3
 80031ba:	3738      	adds	r7, #56	@ 0x38
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	4b03      	ldr	r3, [pc, #12]	@ (80031d8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	0800b24c 	.word	0x0800b24c

080031dc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	4b03      	ldr	r3, [pc, #12]	@ (80031f4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	0800b120 	.word	0x0800b120

080031f8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	601a      	str	r2, [r3, #0]
    msg_(msg),
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	611a      	str	r2, [r3, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68d8      	ldr	r0, [r3, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6891      	ldr	r1, [r2, #8]
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	4798      	blx	r3
 8003244:	4603      	mov	r3, r0
  };
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
  }
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>:
	uint16_t tx_head = 0;
	uint16_t tx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	6039      	str	r1, [r7, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003276:	2201      	movs	r2, #1
 8003278:	701a      	strb	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003280:	2200      	movs	r2, #0
 8003282:	805a      	strh	r2, [r3, #2]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800328a:	2200      	movs	r2, #0
 800328c:	809a      	strh	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003294:	2200      	movs	r2, #0
 8003296:	80da      	strh	r2, [r3, #6]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800329e:	461a      	mov	r2, r3
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	6093      	str	r3, [r2, #8]
	{
		//this->huart = huart;
	}
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <_ZN11SerialClass10get_handleEv>:

	inline UART_HandleTypeDef * const get_handle(void)
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
	{
		return &huart;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032c0:	689b      	ldr	r3, [r3, #8]
	}
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <_ZN11SerialClass9start_dmaEv>:

	inline void start_dma(void)
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
		rx_tail = 0;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032e6:	2200      	movs	r2, #0
 80032e8:	805a      	strh	r2, [r3, #2]
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032f0:	6898      	ldr	r0, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032fc:	4619      	mov	r1, r3
 80032fe:	f005 f9f7 	bl	80086f0 <HAL_UART_Receive_DMA>
	}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <_ZN11SerialClass4readEv>:



	inline int read(void)
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
	{
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->NDTR)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	b29b      	uxth	r3, r3
 8003322:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8003326:	b29b      	uxth	r3, r3
				& buf_mask;
 8003328:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800332c:	81fb      	strh	r3, [r7, #14]
		if (rx_tail == rx_head)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003334:	885b      	ldrh	r3, [r3, #2]
 8003336:	89fa      	ldrh	r2, [r7, #14]
 8003338:	429a      	cmp	r2, r3
 800333a:	d102      	bne.n	8003342 <_ZN11SerialClass4readEv+0x38>
		{
			return -1;
 800333c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003340:	e01b      	b.n	800337a <_ZN11SerialClass4readEv+0x70>
		}

		int c = (int) rx_buf[rx_tail++];
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003348:	885b      	ldrh	r3, [r3, #2]
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	b291      	uxth	r1, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003354:	8051      	strh	r1, [r2, #2]
 8003356:	461a      	mov	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4413      	add	r3, r2
 800335c:	f893 3800 	ldrb.w	r3, [r3, #2048]	@ 0x800
 8003360:	60bb      	str	r3, [r7, #8]
		rx_tail &= buf_mask;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003368:	885b      	ldrh	r3, [r3, #2]
 800336a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800336e:	b29a      	uxth	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003376:	805a      	strh	r2, [r3, #2]
		return c;
 8003378:	68bb      	ldr	r3, [r7, #8]
	}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <_ZN11SerialClass5writeEPKhi>:

	inline void write(const uint8_t * const c, const int length)
 8003386:	b580      	push	{r7, lr}
 8003388:	b086      	sub	sp, #24
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
	{
		if (length > BUF_SIZE || length < 1)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003398:	dc35      	bgt.n	8003406 <_ZN11SerialClass5writeEPKhi+0x80>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	dd32      	ble.n	8003406 <_ZN11SerialClass5writeEPKhi+0x80>
		{
			return;
		}

		while(!tx_cplt)
 80033a0:	bf00      	nop
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	f083 0301 	eor.w	r3, r3, #1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f6      	bne.n	80033a2 <_ZN11SerialClass5writeEPKhi+0x1c>
		{

		}

		for (int i = 0; i < length; i++)
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	e00b      	b.n	80033d2 <_ZN11SerialClass5writeEPKhi+0x4c>
		{
			tx_buf[i] = c[i];
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	4413      	add	r3, r2
 80033c0:	7819      	ldrb	r1, [r3, #0]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	4413      	add	r3, r2
 80033c8:	460a      	mov	r2, r1
 80033ca:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < length; i++)
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	3301      	adds	r3, #1
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	dbef      	blt.n	80033ba <_ZN11SerialClass5writeEPKhi+0x34>
		}

		if(tx_cplt)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d010      	beq.n	8003408 <_ZN11SerialClass5writeEPKhi+0x82>
		{
			tx_cplt = false;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033ec:	2200      	movs	r2, #0
 80033ee:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	68f9      	ldr	r1, [r7, #12]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	b292      	uxth	r2, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f005 f906 	bl	8008610 <HAL_UART_Transmit_DMA>
 8003404:	e000      	b.n	8003408 <_ZN11SerialClass5writeEPKhi+0x82>
			return;
 8003406:	bf00      	nop
		}
	}
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <_ZN11SerialClass16tx_cplt_callbackEv>:

	inline void tx_cplt_callback(void)
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
	}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <_ZN11SerialClass10reset_rbufEv>:

    inline void reset_rbuf(void){
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800343a:	6898      	ldr	r0, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003442:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003446:	4619      	mov	r1, r3
 8003448:	f005 f952 	bl	80086f0 <HAL_UART_Receive_DMA>
    }
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_UART_TxCpltCallback>:
SerialClass serial(huart2);
//SerialClass serial(huart2);
//SerialClass serial(huart3);

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681c      	ldr	r4, [r3, #0]
 8003460:	4809      	ldr	r0, [pc, #36]	@ (8003488 <HAL_UART_TxCpltCallback+0x34>)
 8003462:	f7ff ff26 	bl	80032b2 <_ZN11SerialClass10get_handleEv>
 8003466:	4603      	mov	r3, r0
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	429c      	cmp	r4, r3
 800346c:	bf0c      	ite	eq
 800346e:	2301      	moveq	r3, #1
 8003470:	2300      	movne	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_UART_TxCpltCallback+0x2a>
	{
		serial.tx_cplt_callback();
 8003478:	4803      	ldr	r0, [pc, #12]	@ (8003488 <HAL_UART_TxCpltCallback+0x34>)
 800347a:	f7ff ffc8 	bl	800340e <_ZN11SerialClass16tx_cplt_callbackEv>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bd90      	pop	{r4, r7, pc}
 8003486:	bf00      	nop
 8003488:	20000564 	.word	0x20000564

0800348c <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	serial.reset_rbuf();
 8003494:	4803      	ldr	r0, [pc, #12]	@ (80034a4 <HAL_UART_RxCpltCallback+0x18>)
 8003496:	f7ff ffc9 	bl	800342c <_ZN11SerialClass10reset_rbufEv>
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000564 	.word	0x20000564

080034a8 <_ZN13STM32HardwareC1Ev>:
#include "SerialClass.h"

class STM32Hardware
{
public:
	STM32Hardware() :
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
			com(&serial)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a04      	ldr	r2, [pc, #16]	@ (80034c4 <_ZN13STM32HardwareC1Ev+0x1c>)
 80034b4:	601a      	str	r2, [r3, #0]
	{

	}
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	20000564 	.word	0x20000564

080034c8 <_ZN13STM32Hardware4initEv>:

	void init()
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	{
		com->start_dma();
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fefa 	bl	80032ce <_ZN11SerialClass9start_dmaEv>
	}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <_ZN13STM32Hardware4readEv>:

	int read()
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
	{
		return com->read();
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff ff0b 	bl	800330a <_ZN11SerialClass4readEv>
 80034f4:	4603      	mov	r3, r0
	}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t* data, int length)
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
	{
		com->write(data, length);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff ff37 	bl	8003386 <_ZN11SerialClass5writeEPKhi>
	}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <_ZN13STM32Hardware4timeEv>:

	unsigned long time()
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 8003528:	f001 fd28 	bl	8004f7c <HAL_GetTick>
 800352c:	4603      	mov	r3, r0
	}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff f818 	bl	8002578 <_ZN3ros3MsgC1Ev>
 8003548:	4a08      	ldr	r2, [pc, #32]	@ (800356c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	601a      	str	r2, [r3, #0]
      label(""),
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a07      	ldr	r2, [pc, #28]	@ (8003570 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8003552:	605a      	str	r2, [r3, #4]
      size(0),
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	609a      	str	r2, [r3, #8]
      stride(0)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	60da      	str	r2, [r3, #12]
    {
    }
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	0800b2b4 	.word	0x0800b2b4
 8003570:	0800b0a4 	.word	0x0800b0a4

08003574 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fc fe3e 	bl	8000208 <strlen>
 800358c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	4413      	add	r3, r2
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fc1e 	bl	8003dd8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	3304      	adds	r3, #4
 80035a0:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	18d0      	adds	r0, r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	4619      	mov	r1, r3
 80035b0:	f007 fc34 	bl	800ae1c <memcpy>
      offset += length_label;
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	4413      	add	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6899      	ldr	r1, [r3, #8]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	4413      	add	r3, r2
 80035c6:	b2ca      	uxtb	r2, r1
 80035c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	0a19      	lsrs	r1, r3, #8
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3301      	adds	r3, #1
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	4413      	add	r3, r2
 80035d8:	b2ca      	uxtb	r2, r1
 80035da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	0c19      	lsrs	r1, r3, #16
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3302      	adds	r3, #2
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	4413      	add	r3, r2
 80035ea:	b2ca      	uxtb	r2, r1
 80035ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	0e19      	lsrs	r1, r3, #24
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	3303      	adds	r3, #3
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	4413      	add	r3, r2
 80035fc:	b2ca      	uxtb	r2, r1
 80035fe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3304      	adds	r3, #4
 8003604:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68d9      	ldr	r1, [r3, #12]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	4413      	add	r3, r2
 8003610:	b2ca      	uxtb	r2, r1
 8003612:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	0a19      	lsrs	r1, r3, #8
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	3301      	adds	r3, #1
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	4413      	add	r3, r2
 8003622:	b2ca      	uxtb	r2, r1
 8003624:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	0c19      	lsrs	r1, r3, #16
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	3302      	adds	r3, #2
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	4413      	add	r3, r2
 8003634:	b2ca      	uxtb	r2, r1
 8003636:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	0e19      	lsrs	r1, r3, #24
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3303      	adds	r3, #3
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	4413      	add	r3, r2
 8003646:	b2ca      	uxtb	r2, r1
 8003648:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	3304      	adds	r3, #4
 800364e:	60fb      	str	r3, [r7, #12]
      return offset;
 8003650:	68fb      	ldr	r3, [r7, #12]
    }
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800365a:	b580      	push	{r7, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003664:	2300      	movs	r3, #0
 8003666:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	441a      	add	r2, r3
 800366e:	f107 030c 	add.w	r3, r7, #12
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fbce 	bl	8003e16 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	3304      	adds	r3, #4
 800367e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	e00b      	b.n	800369e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	441a      	add	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	3b01      	subs	r3, #1
 8003690:	6839      	ldr	r1, [r7, #0]
 8003692:	440b      	add	r3, r1
 8003694:	7812      	ldrb	r2, [r2, #0]
 8003696:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	3301      	adds	r3, #1
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d3ed      	bcc.n	8003686 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	3b01      	subs	r3, #1
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	4413      	add	r3, r2
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	3b01      	subs	r3, #1
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	441a      	add	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	605a      	str	r2, [r3, #4]
      offset += length_label;
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	4413      	add	r3, r2
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	3301      	adds	r3, #1
 80036e4:	6839      	ldr	r1, [r7, #0]
 80036e6:	440b      	add	r3, r1
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	3302      	adds	r3, #2
 80036fa:	6839      	ldr	r1, [r7, #0]
 80036fc:	440b      	add	r3, r1
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	3303      	adds	r3, #3
 8003710:	6839      	ldr	r1, [r7, #0]
 8003712:	440b      	add	r3, r1
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	061b      	lsls	r3, r3, #24
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	3304      	adds	r3, #4
 8003722:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	4413      	add	r3, r2
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	3301      	adds	r3, #1
 800373a:	6839      	ldr	r1, [r7, #0]
 800373c:	440b      	add	r3, r1
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	3302      	adds	r3, #2
 8003750:	6839      	ldr	r1, [r7, #0]
 8003752:	440b      	add	r3, r1
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	041b      	lsls	r3, r3, #16
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	3303      	adds	r3, #3
 8003766:	6839      	ldr	r1, [r7, #0]
 8003768:	440b      	add	r3, r1
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	061b      	lsls	r3, r3, #24
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	3304      	adds	r3, #4
 8003778:	613b      	str	r3, [r7, #16]
     return offset;
 800377a:	693b      	ldr	r3, [r7, #16]
    }
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	4b03      	ldr	r3, [pc, #12]	@ (800379c <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	0800b144 	.word	0x0800b144

080037a0 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	4b03      	ldr	r3, [pc, #12]	@ (80037b8 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	0800b164 	.word	0x0800b164

080037bc <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fe fed6 	bl	8002578 <_ZN3ros3MsgC1Ev>
 80037cc:	4a0a      	ldr	r2, [pc, #40]	@ (80037f8 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	605a      	str	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3308      	adds	r3, #8
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff feab 	bl	8003538 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	619a      	str	r2, [r3, #24]
      data_offset(0)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	61da      	str	r2, [r3, #28]
    {
    }
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	0800b29c 	.word	0x0800b29c

080037fc <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6859      	ldr	r1, [r3, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	4413      	add	r3, r2
 8003814:	b2ca      	uxtb	r2, r1
 8003816:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	0a19      	lsrs	r1, r3, #8
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3301      	adds	r3, #1
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	4413      	add	r3, r2
 8003826:	b2ca      	uxtb	r2, r1
 8003828:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	0c19      	lsrs	r1, r3, #16
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3302      	adds	r3, #2
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	4413      	add	r3, r2
 8003838:	b2ca      	uxtb	r2, r1
 800383a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	0e19      	lsrs	r1, r3, #24
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3303      	adds	r3, #3
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	4413      	add	r3, r2
 800384a:	b2ca      	uxtb	r2, r1
 800384c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3304      	adds	r3, #4
 8003852:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003854:	2300      	movs	r3, #0
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	e017      	b.n	800388a <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	18d0      	adds	r0, r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	4413      	add	r3, r2
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	6839      	ldr	r1, [r7, #0]
 8003876:	440a      	add	r2, r1
 8003878:	4611      	mov	r1, r2
 800387a:	4798      	blx	r3
 800387c:	4602      	mov	r2, r0
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	3301      	adds	r3, #1
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	429a      	cmp	r2, r3
 8003892:	d3e2      	bcc.n	800385a <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69d9      	ldr	r1, [r3, #28]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	4413      	add	r3, r2
 800389e:	b2ca      	uxtb	r2, r1
 80038a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	0a19      	lsrs	r1, r3, #8
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	3301      	adds	r3, #1
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	4413      	add	r3, r2
 80038b0:	b2ca      	uxtb	r2, r1
 80038b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	0c19      	lsrs	r1, r3, #16
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3302      	adds	r3, #2
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	4413      	add	r3, r2
 80038c2:	b2ca      	uxtb	r2, r1
 80038c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	0e19      	lsrs	r1, r3, #24
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3303      	adds	r3, #3
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	4413      	add	r3, r2
 80038d4:	b2ca      	uxtb	r2, r1
 80038d6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3304      	adds	r3, #4
 80038dc:	60fb      	str	r3, [r7, #12]
      return offset;
 80038de:	68fb      	ldr	r3, [r7, #12]
    }
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	4413      	add	r3, r2
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	3301      	adds	r3, #1
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	4413      	add	r3, r2
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	021b      	lsls	r3, r3, #8
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	3302      	adds	r3, #2
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	4413      	add	r3, r2
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	041b      	lsls	r3, r3, #16
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	3303      	adds	r3, #3
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	4413      	add	r3, r2
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	061b      	lsls	r3, r3, #24
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	3304      	adds	r3, #4
 800393a:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	429a      	cmp	r2, r3
 8003944:	d90a      	bls.n	800395c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f007 f9f9 	bl	800ad48 <realloc>
 8003956:	4602      	mov	r2, r0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	e01a      	b.n	800399e <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f103 0008 	add.w	r0, r3, #8
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	4413      	add	r3, r2
 8003974:	4619      	mov	r1, r3
 8003976:	f7ff fe70 	bl	800365a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 800397a:	4602      	mov	r2, r0
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	4413      	add	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699a      	ldr	r2, [r3, #24]
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	18d0      	adds	r0, r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3308      	adds	r3, #8
 8003990:	2210      	movs	r2, #16
 8003992:	4619      	mov	r1, r3
 8003994:	f007 fa42 	bl	800ae1c <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	3301      	adds	r3, #1
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d3df      	bcc.n	8003968 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	4413      	add	r3, r2
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	3301      	adds	r3, #1
 80039be:	6839      	ldr	r1, [r7, #0]
 80039c0:	440b      	add	r3, r1
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	3302      	adds	r3, #2
 80039d4:	6839      	ldr	r1, [r7, #0]
 80039d6:	440b      	add	r3, r1
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	041b      	lsls	r3, r3, #16
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69da      	ldr	r2, [r3, #28]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	3303      	adds	r3, #3
 80039ea:	6839      	ldr	r1, [r7, #0]
 80039ec:	440b      	add	r3, r1
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	3304      	adds	r3, #4
 80039fc:	617b      	str	r3, [r7, #20]
     return offset;
 80039fe:	697b      	ldr	r3, [r7, #20]
    }
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	4b03      	ldr	r3, [pc, #12]	@ (8003a20 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8003a12:	4618      	mov	r0, r3
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	0800b188 	.word	0x0800b188

08003a24 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	4b03      	ldr	r3, [pc, #12]	@ (8003a3c <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	0800b1a4 	.word	0x0800b1a4

08003a40 <_ZN8std_msgs15Int16MultiArrayC1Ev>:
      uint32_t data_length;
      typedef int16_t _data_type;
      _data_type st_data;
      _data_type * data;

    Int16MultiArray():
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe fd94 	bl	8002578 <_ZN3ros3MsgC1Ev>
 8003a50:	4a0a      	ldr	r2, [pc, #40]	@ (8003a7c <_ZN8std_msgs15Int16MultiArrayC1Ev+0x3c>)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	601a      	str	r2, [r3, #0]
      layout(),
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff feae 	bl	80037bc <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
    }
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	0800b284 	.word	0x0800b284

08003a80 <_ZNK8std_msgs15Int16MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	1d18      	adds	r0, r3, #4
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	4413      	add	r3, r2
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f7ff feaf 	bl	80037fc <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	4413      	add	r3, r2
 8003ab0:	b2ca      	uxtb	r2, r1
 8003ab2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	0a19      	lsrs	r1, r3, #8
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	3301      	adds	r3, #1
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	b2ca      	uxtb	r2, r1
 8003ac4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	0c19      	lsrs	r1, r3, #16
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	3302      	adds	r3, #2
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	b2ca      	uxtb	r2, r1
 8003ad6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	0e19      	lsrs	r1, r3, #24
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	3303      	adds	r3, #3
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	b2ca      	uxtb	r2, r1
 8003ae8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	3304      	adds	r3, #4
 8003aee:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003af0:	2300      	movs	r3, #0
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	e01c      	b.n	8003b30 <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0xb0>
      union {
        int16_t real;
        uint16_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	4413      	add	r3, r2
 8003b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b04:	81bb      	strh	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8003b06:	89b9      	ldrh	r1, [r7, #12]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	b2ca      	uxtb	r2, r1
 8003b10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8003b12:	89bb      	ldrh	r3, [r7, #12]
 8003b14:	0a1b      	lsrs	r3, r3, #8
 8003b16:	b299      	uxth	r1, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	4413      	add	r3, r2
 8003b20:	b2ca      	uxtb	r2, r1
 8003b22:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	3302      	adds	r3, #2
 8003b28:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d3dd      	bcc.n	8003af6 <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0x76>
      }
      return offset;
 8003b3a:	697b      	ldr	r3, [r7, #20]
    }
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <_ZN8std_msgs15Int16MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	1d18      	adds	r0, r3, #4
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f7ff fec3 	bl	80038e8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8003b62:	4602      	mov	r2, r0
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	4413      	add	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	4413      	add	r3, r2
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	3301      	adds	r3, #1
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	3302      	adds	r3, #2
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	041b      	lsls	r3, r3, #16
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	3303      	adds	r3, #3
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	061b      	lsls	r3, r3, #24
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	3304      	adds	r3, #4
 8003bae:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d90a      	bls.n	8003bd0 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x8c>
        this->data = (int16_t*)realloc(this->data, data_lengthT * sizeof(int16_t));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	f007 f8bf 	bl	800ad48 <realloc>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	62da      	str	r2, [r3, #44]	@ 0x2c
      data_length = data_lengthT;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	625a      	str	r2, [r3, #36]	@ 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	e02a      	b.n	8003c32 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0xee>
      union {
        int16_t real;
        uint16_t base;
      } u_st_data;
      u_st_data.base = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003be0:	893b      	ldrh	r3, [r7, #8]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	6839      	ldr	r1, [r7, #0]
 8003be6:	440a      	add	r2, r1
 8003be8:	7812      	ldrb	r2, [r2, #0]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003bf0:	893b      	ldrh	r3, [r7, #8]
 8003bf2:	b21a      	sxth	r2, r3
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	6839      	ldr	r1, [r7, #0]
 8003bfa:	440b      	add	r3, r1
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21b      	sxth	r3, r3
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	813b      	strh	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8003c0a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	851a      	strh	r2, [r3, #40]	@ 0x28
      offset += sizeof(this->st_data);
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	3302      	adds	r3, #2
 8003c16:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int16_t));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	4413      	add	r3, r2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	3228      	adds	r2, #40	@ 0x28
 8003c26:	8812      	ldrh	r2, [r2, #0]
 8003c28:	b292      	uxth	r2, r2
 8003c2a:	801a      	strh	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d3cf      	bcc.n	8003bdc <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8003c3c:	697b      	ldr	r3, [r7, #20]
    }
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <_ZN8std_msgs15Int16MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int16MultiArray"; };
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	4b03      	ldr	r3, [pc, #12]	@ (8003c60 <_ZN8std_msgs15Int16MultiArray7getTypeEv+0x18>)
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	0800b1c8 	.word	0x0800b1c8

08003c64 <_ZN8std_msgs15Int16MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "d9338d7f523fcb692fae9d0a0e9f067c"; };
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	4b03      	ldr	r3, [pc, #12]	@ (8003c7c <_ZN8std_msgs15Int16MultiArray6getMD5Ev+0x18>)
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	0800b1e4 	.word	0x0800b1e4

08003c80 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	4a04      	ldr	r2, [pc, #16]	@ (8003c9c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	0800b2cc 	.word	0x0800b2cc

08003ca0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff ffe8 	bl	8003c80 <_ZN3ros15NodeHandleBase_C1Ev>
 8003cb0:	4a33      	ldr	r2, [pc, #204]	@ (8003d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fbf4 	bl	80034a8 <_ZN13STM32HardwareC1Ev>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	609a      	str	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	60da      	str	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	611a      	str	r2, [r3, #16]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	615a      	str	r2, [r3, #20]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3318      	adds	r3, #24
 8003cdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f007 f866 	bl	800adb4 <memset>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8003cee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f007 f85d 	bl	800adb4 <memset>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8003d00:	2264      	movs	r2, #100	@ 0x64
 8003d02:	2100      	movs	r1, #0
 8003d04:	4618      	mov	r0, r3
 8003d06:	f007 f855 	bl	800adb4 <memset>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 8003d10:	2264      	movs	r2, #100	@ 0x64
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f007 f84d 	bl	800adb4 <memset>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fe ff75 	bl	8002c60 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	0800b270 	.word	0x0800b270

08003d84 <setup>:
//extern int16_t sensor_buff[5];
//extern int16_t sensor_buff[5];
//ros::Publisher chatter("chatter", &str_msg);
ros::Publisher encoder("encoder", &Encoder_data);

void setup(void){
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
	nh.initNode();
 8003d88:	4804      	ldr	r0, [pc, #16]	@ (8003d9c <setup+0x18>)
 8003d8a:	f000 f86a 	bl	8003e62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
//	nh.advertise(chatter);
	nh.advertise(encoder);
 8003d8e:	4904      	ldr	r1, [pc, #16]	@ (8003da0 <setup+0x1c>)
 8003d90:	4802      	ldr	r0, [pc, #8]	@ (8003d9c <setup+0x18>)
 8003d92:	f000 f883 	bl	8003e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20001570 	.word	0x20001570
 8003da0:	20001ad0 	.word	0x20001ad0

08003da4 <loop>:

void loop(void){
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0

//	str_msg.data = hello;
//	chatter.publish(&str_msg);
//	nh.spinOnce();
//	HAL_Delay(1);
	    Encoder_data.data_length =5;
 8003da8:	4b07      	ldr	r3, [pc, #28]	@ (8003dc8 <loop+0x24>)
 8003daa:	2205      	movs	r2, #5
 8003dac:	625a      	str	r2, [r3, #36]	@ 0x24
		Encoder_data.data= buffer;
 8003dae:	4b06      	ldr	r3, [pc, #24]	@ (8003dc8 <loop+0x24>)
 8003db0:	4a06      	ldr	r2, [pc, #24]	@ (8003dcc <loop+0x28>)
 8003db2:	62da      	str	r2, [r3, #44]	@ 0x2c
		encoder.publish(&Encoder_data);
 8003db4:	4904      	ldr	r1, [pc, #16]	@ (8003dc8 <loop+0x24>)
 8003db6:	4806      	ldr	r0, [pc, #24]	@ (8003dd0 <loop+0x2c>)
 8003db8:	f7ff fa35 	bl	8003226 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 8003dbc:	4805      	ldr	r0, [pc, #20]	@ (8003dd4 <loop+0x30>)
 8003dbe:	f000 f89b 	bl	8003ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20001aa0 	.word	0x20001aa0
 8003dcc:	2000048c 	.word	0x2000048c
 8003dd0:	20001ad0 	.word	0x20001ad0
 8003dd4:	20001570 	.word	0x20001570

08003dd8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	e00c      	b.n	8003e02 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	fa22 f103 	lsr.w	r1, r2, r3
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	b2ca      	uxtb	r2, r1
 8003dfa:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d9ef      	bls.n	8003de8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003e16:	b480      	push	{r7}
 8003e18:	b085      	sub	sp, #20
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	e010      	b.n	8003e4e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6839      	ldr	r1, [r7, #0]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	440a      	add	r2, r1
 8003e36:	7812      	ldrb	r2, [r2, #0]
 8003e38:	4611      	mov	r1, r2
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	00d2      	lsls	r2, r2, #3
 8003e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d9eb      	bls.n	8003e2c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fb2a 	bl	80034c8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    bytes_ = 0;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
    index_ = 0;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
    topic_ = 0;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
  };
 8003e94:	bf00      	nop
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	e01b      	b.n	8003ee4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8003eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d110      	bne.n	8003ede <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8003ec4:	6839      	ldr	r1, [r7, #0]
 8003ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	60da      	str	r2, [r3, #12]
        return true;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e006      	b.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b18      	cmp	r3, #24
 8003ee8:	dde0      	ble.n	8003eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8003eea:	2300      	movs	r3, #0
  }
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3304      	adds	r3, #4
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff fb0b 	bl	8003520 <_ZN13STM32Hardware4timeEv>
 8003f0a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d903      	bls.n	8003f26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d009      	beq.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d903      	bls.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
      if (spin_timeout_ > 0)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d013      	beq.n	8003f74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff fae5 	bl	8003520 <_ZN13STM32Hardware4timeEv>
 8003f56:	4602      	mov	r2, r0
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1ad2      	subs	r2, r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	bf8c      	ite	hi
 8003f64:	2301      	movhi	r3, #1
 8003f66:	2300      	movls	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8003f6e:	f06f 0301 	mvn.w	r3, #1
 8003f72:	e190      	b.n	8004296 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3304      	adds	r3, #4
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff fab2 	bl	80034e2 <_ZN13STM32Hardware4readEv>
 8003f7e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f2c0 8170 	blt.w	8004268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	@ 0x4f0
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	441a      	add	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8003f9e:	2b07      	cmp	r3, #7
 8003fa0:	d11d      	bne.n	8003fde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003fa8:	1c59      	adds	r1, r3, #1
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	f8c2 14ec 	str.w	r1, [r2, #1260]	@ 0x4ec
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	b2d1      	uxtb	r1, r2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	460a      	mov	r2, r1
 8003fba:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8003fc2:	1e5a      	subs	r2, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1b7      	bne.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2208      	movs	r2, #8
 8003fd8:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8003fdc:	e7b2      	b.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d128      	bne.n	800403a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2bff      	cmp	r3, #255	@ 0xff
 8003fec:	d10d      	bne.n	800400a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f103 0214 	add.w	r2, r3, #20
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
 8004008:	e79c      	b.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3304      	adds	r3, #4
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fa86 	bl	8003520 <_ZN13STM32Hardware4timeEv>
 8004014:	4602      	mov	r2, r0
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800401e:	4293      	cmp	r3, r2
 8004020:	bf8c      	ite	hi
 8004022:	2301      	movhi	r3, #1
 8004024:	2300      	movls	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d08b      	beq.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
          return SPIN_TIMEOUT;
 8004034:	f06f 0301 	mvn.w	r3, #1
 8004038:	e12d      	b.n	8004296 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004040:	2b01      	cmp	r3, #1
 8004042:	d118      	bne.n	8004076 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2bfe      	cmp	r3, #254	@ 0xfe
 8004048:	d107      	bne.n	800405a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8004058:	e774      	b.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
          if (configured_ == false)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004068:	2b00      	cmp	r3, #0
 800406a:	f47f af6b 	bne.w	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f915 	bl	800429e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004074:	e766      	b.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800407c:	2b02      	cmp	r3, #2
 800407e:	d113      	bne.n	80040a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        index_ = 0;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
        mode_++;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 80040a6:	e74d      	b.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d110      	bne.n	80040d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	@ 0x4e4
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	441a      	add	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        mode_++;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 80040d2:	e737      	b.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d116      	bne.n	800410c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80040e4:	425a      	negs	r2, r3
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	bf58      	it	pl
 80040ec:	4253      	negpl	r3, r2
 80040ee:	2bff      	cmp	r3, #255	@ 0xff
 80040f0:	d107      	bne.n	8004102 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8004100:	e720      	b.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 800410a:	e71b      	b.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004112:	2b05      	cmp	r3, #5
 8004114:	d10f      	bne.n	8004136 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
        mode_++;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 8004134:	e706      	b.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800413c:	2b06      	cmp	r3, #6
 800413e:	d117      	bne.n	8004170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	441a      	add	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
        mode_ = MODE_MESSAGE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2207      	movs	r2, #7
 8004156:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        if (bytes_ == 0)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8004160:	2b00      	cmp	r3, #0
 8004162:	f47f aeef 	bne.w	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2208      	movs	r2, #8
 800416a:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 800416e:	e6e9      	b.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004176:	2b08      	cmp	r3, #8
 8004178:	f47f aee4 	bne.w	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        if ((checksum_ % 256) == 255)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 800418a:	425a      	negs	r2, r3
 800418c:	b2db      	uxtb	r3, r3
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	bf58      	it	pl
 8004192:	4253      	negpl	r3, r2
 8004194:	2bff      	cmp	r3, #255	@ 0xff
 8004196:	f47f aed5 	bne.w	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d110      	bne.n	80041c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f87a 	bl	800429e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f894 	bl	80042d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
            last_sync_receive_time = c_time;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
            return SPIN_ERR;
 80041c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041c4:	e067      	b.n	8004296 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80041cc:	2b0a      	cmp	r3, #10
 80041ce:	d106      	bne.n	80041de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3318      	adds	r3, #24
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f95e 	bl	8004498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80041dc:	e6b2      	b.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80041e4:	2b06      	cmp	r3, #6
 80041e6:	d10d      	bne.n	8004204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f503 62a1 	add.w	r2, r3, #1288	@ 0x508
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3318      	adds	r3, #24
 80041f2:	4619      	mov	r1, r3
 80041f4:	4610      	mov	r0, r2
 80041f6:	f7fe fe72 	bl	8002ede <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
 8004202:	e69f      	b.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800420a:	2b0b      	cmp	r3, #11
 800420c:	d104      	bne.n	8004218 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
 8004216:	e695      	b.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800421e:	3b64      	subs	r3, #100	@ 0x64
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f43f ae89 	beq.w	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8004238:	3b64      	subs	r3, #100	@ 0x64
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	6858      	ldr	r0, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800424c:	3b64      	subs	r3, #100	@ 0x64
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	3218      	adds	r2, #24
 8004262:	4611      	mov	r1, r2
 8004264:	4798      	blx	r3
    while (true)
 8004266:	e66d      	b.n	8003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004268:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00f      	beq.n	8004294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8004282:	4293      	cmp	r3, r2
 8004284:	d906      	bls.n	8004294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f809 	bl	800429e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
    return SPIN_OK;
 8004294:	2300      	movs	r3, #0
  }
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800429e:	b580      	push	{r7, lr}
 80042a0:	b086      	sub	sp, #24
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80042a6:	f107 030c 	add.w	r3, r7, #12
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe f974 	bl	8002598 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f107 020c 	add.w	r2, r7, #12
 80042ba:	210a      	movs	r1, #10
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	4798      	blx	r3
    rt_time = hardware_.time();
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff f92b 	bl	8003520 <_ZN13STM32Hardware4timeEv>
 80042ca:	4602      	mov	r2, r0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	609a      	str	r2, [r3, #8]
  }
 80042d0:	bf00      	nop
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80042d8:	b590      	push	{r4, r7, lr}
 80042da:	b08b      	sub	sp, #44	@ 0x2c
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80042e0:	f107 030c 	add.w	r3, r7, #12
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fe fa47 	bl	8002778 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80042ea:	2300      	movs	r3, #0
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ee:	e05a      	b.n	80043a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f4:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 80042f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d04f      	beq.n	80043a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004304:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	b29b      	uxth	r3, r3
 8004310:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004316:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 800431a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004326:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 800432a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800432e:	6859      	ldr	r1, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004334:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3308      	adds	r3, #8
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4608      	mov	r0, r1
 8004346:	4798      	blx	r3
 8004348:	4603      	mov	r3, r0
 800434a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004350:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004358:	6859      	ldr	r1, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800435e:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	330c      	adds	r3, #12
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4608      	mov	r0, r1
 8004370:	4798      	blx	r3
 8004372:	4603      	mov	r3, r0
 8004374:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004376:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800437a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681c      	ldr	r4, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004386:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 800438a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe ff5d 	bl	800324e <_ZN3ros9Publisher15getEndpointTypeEv>
 8004394:	4601      	mov	r1, r0
 8004396:	f107 030c 	add.w	r3, r7, #12
 800439a:	461a      	mov	r2, r3
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80043a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a2:	3301      	adds	r3, #1
 80043a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	2b18      	cmp	r3, #24
 80043aa:	dda1      	ble.n	80042f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80043ac:	2300      	movs	r3, #0
 80043ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80043b0:	e067      	b.n	8004482 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d05b      	beq.n	800447c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	6859      	ldr	r1, [r3, #4]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3308      	adds	r3, #8
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4608      	mov	r0, r1
 800440e:	4798      	blx	r3
 8004410:	4603      	mov	r3, r0
 8004412:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	6859      	ldr	r1, [r3, #4]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4608      	mov	r0, r1
 8004438:	4798      	blx	r3
 800443a:	4603      	mov	r3, r0
 800443c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800443e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004442:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681c      	ldr	r4, [r3, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444e:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	6859      	ldr	r1, [r3, #4]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3304      	adds	r3, #4
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4608      	mov	r0, r1
 800446e:	4798      	blx	r3
 8004470:	4601      	mov	r1, r0
 8004472:	f107 030c 	add.w	r3, r7, #12
 8004476:	461a      	mov	r2, r3
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800447c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447e:	3301      	adds	r3, #1
 8004480:	627b      	str	r3, [r7, #36]	@ 0x24
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	2b18      	cmp	r3, #24
 8004486:	dd94      	ble.n	80043b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  }
 8004490:	bf00      	nop
 8004492:	372c      	adds	r7, #44	@ 0x2c
 8004494:	46bd      	mov	sp, r7
 8004496:	bd90      	pop	{r4, r7, pc}

08004498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80044a2:	f107 0308 	add.w	r3, r7, #8
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fe f876 	bl	8002598 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff f835 	bl	8003520 <_ZN13STM32Hardware4timeEv>
 80044b6:	4602      	mov	r2, r0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80044c0:	f107 0308 	add.w	r3, r7, #8
 80044c4:	6839      	ldr	r1, [r7, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fe f8d6 	bl	8002678 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	4914      	ldr	r1, [pc, #80]	@ (8004524 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80044d2:	fba1 1303 	umull	r1, r3, r1, r3
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	4413      	add	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80044dc:	6939      	ldr	r1, [r7, #16]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4b10      	ldr	r3, [pc, #64]	@ (8004524 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80044e2:	fba3 0302 	umull	r0, r3, r3, r2
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80044ec:	fb00 f303 	mul.w	r3, r0, r3
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	4a0d      	ldr	r2, [pc, #52]	@ (8004528 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80044f4:	fb02 f303 	mul.w	r3, r2, r3
 80044f8:	440b      	add	r3, r1
 80044fa:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80044fc:	f107 0308 	add.w	r3, r7, #8
 8004500:	3304      	adds	r3, #4
 8004502:	4619      	mov	r1, r3
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f8a5 	bl	8004654 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3304      	adds	r3, #4
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff f806 	bl	8003520 <_ZN13STM32Hardware4timeEv>
 8004514:	4602      	mov	r2, r0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
  }
 800451c:	bf00      	nop
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	10624dd3 	.word	0x10624dd3
 8004528:	000f4240 	.word	0x000f4240

0800452c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b63      	cmp	r3, #99	@ 0x63
 800453c:	dd09      	ble.n	8004552 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004544:	f083 0301 	eor.w	r3, r3, #1
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800454e:	2300      	movs	r3, #0
 8004550:	e079      	b.n	8004646 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	f502 7206 	add.w	r2, r2, #536	@ 0x218
 800455e:	3207      	adds	r2, #7
 8004560:	4611      	mov	r1, r2
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4798      	blx	r3
 8004566:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	22ff      	movs	r2, #255	@ 0xff
 800456c:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
    message_out[1] = PROTOCOL_VER;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	22fe      	movs	r2, #254	@ 0xfe
 8004574:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	b2da      	uxtb	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	b29b      	uxth	r3, r3
 8004586:	0a1b      	lsrs	r3, r3, #8
 8004588:	b29b      	uxth	r3, r3
 800458a:	b2da      	uxtb	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 221a 	ldrb.w	r2, [r3, #538]	@ 0x21a
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 800459e:	4413      	add	r3, r2
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	b21b      	sxth	r3, r3
 80045ba:	121b      	asrs	r3, r3, #8
 80045bc:	b21b      	sxth	r3, r3
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e

    /* calculate checksum */
    int chk = 0;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80045ca:	2305      	movs	r3, #5
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	e00c      	b.n	80045ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	3301      	adds	r3, #1
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	3306      	adds	r3, #6
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	dded      	ble.n	80045d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	3307      	adds	r3, #7
 80045f8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	425a      	negs	r2, r3
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	bf58      	it	pl
 8004604:	4253      	negpl	r3, r2
 8004606:	b2da      	uxtb	r2, r3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	1c59      	adds	r1, r3, #1
 800460c:	6179      	str	r1, [r7, #20]
 800460e:	43d2      	mvns	r2, r2
 8004610:	b2d1      	uxtb	r1, r2
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	460a      	mov	r2, r1
 8004618:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

    if (l <= OUTPUT_SIZE)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004622:	dc0a      	bgt.n	800463a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1d18      	adds	r0, r3, #4
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4619      	mov	r1, r3
 8004632:	f7fe ff64 	bl	80034fe <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	e005      	b.n	8004646 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800463a:	4905      	ldr	r1, [pc, #20]	@ (8004650 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f847 	bl	80046d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004642:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 8004646:	4618      	mov	r0, r3
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	0800b208 	.word	0x0800b208

08004654 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3304      	adds	r3, #4
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe ff5c 	bl	8003520 <_ZN13STM32Hardware4timeEv>
 8004668:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4914      	ldr	r1, [pc, #80]	@ (80046c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8004672:	fba1 1303 	umull	r1, r3, r1, r3
 8004676:	099b      	lsrs	r3, r3, #6
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	1e5a      	subs	r2, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	6859      	ldr	r1, [r3, #4]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4b0f      	ldr	r3, [pc, #60]	@ (80046c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8004688:	fba3 0302 	umull	r0, r3, r3, r2
 800468c:	099b      	lsrs	r3, r3, #6
 800468e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004692:	fb00 f303 	mul.w	r3, r0, r3
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	4a0b      	ldr	r2, [pc, #44]	@ (80046c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	1aca      	subs	r2, r1, r3
 80046a0:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80046a2:	4413      	add	r3, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f103 020c 	add.w	r2, r3, #12
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3310      	adds	r3, #16
 80046b2:	4619      	mov	r1, r3
 80046b4:	4610      	mov	r0, r2
 80046b6:	f000 fba5 	bl	8004e04 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	10624dd3 	.word	0x10624dd3
 80046c8:	000f4240 	.word	0x000f4240
 80046cc:	3b9aca00 	.word	0x3b9aca00

080046d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	2103      	movs	r1, #3
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f804 	bl	80046ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	460b      	mov	r3, r1
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80046fa:	f107 0314 	add.w	r3, r7, #20
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fe f9fe 	bl	8002b00 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004704:	7afb      	ldrb	r3, [r7, #11]
 8004706:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f107 0214 	add.w	r2, r7, #20
 8004716:	2107      	movs	r1, #7
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	4798      	blx	r3
  }
 800471c:	bf00      	nop
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <_Z41__static_initialization_and_destruction_0ii>:
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d114      	bne.n	800475e <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800473a:	4293      	cmp	r3, r2
 800473c:	d10f      	bne.n	800475e <_Z41__static_initialization_and_destruction_0ii+0x3a>
SerialClass serial(huart2);
 800473e:	490a      	ldr	r1, [pc, #40]	@ (8004768 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004740:	480a      	ldr	r0, [pc, #40]	@ (800476c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004742:	f7fe fd90 	bl	8003266 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>
ros::NodeHandle nh;
 8004746:	480a      	ldr	r0, [pc, #40]	@ (8004770 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004748:	f7ff faaa 	bl	8003ca0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int16MultiArray Encoder_data;
 800474c:	4809      	ldr	r0, [pc, #36]	@ (8004774 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800474e:	f7ff f977 	bl	8003a40 <_ZN8std_msgs15Int16MultiArrayC1Ev>
ros::Publisher encoder("encoder", &Encoder_data);
 8004752:	2300      	movs	r3, #0
 8004754:	4a07      	ldr	r2, [pc, #28]	@ (8004774 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004756:	4908      	ldr	r1, [pc, #32]	@ (8004778 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004758:	4808      	ldr	r0, [pc, #32]	@ (800477c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800475a:	f7fe fd4d 	bl	80031f8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000280 	.word	0x20000280
 800476c:	20000564 	.word	0x20000564
 8004770:	20001570 	.word	0x20001570
 8004774:	20001aa0 	.word	0x20001aa0
 8004778:	0800b244 	.word	0x0800b244
 800477c:	20001ad0 	.word	0x20001ad0

08004780 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
    return configured_;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
  };
 800478e:	4618      	mov	r0, r3
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <_GLOBAL__sub_I_serial>:
 800479a:	b580      	push	{r7, lr}
 800479c:	af00      	add	r7, sp, #0
 800479e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80047a2:	2001      	movs	r0, #1
 80047a4:	f7ff ffbe 	bl	8004724 <_Z41__static_initialization_and_destruction_0ii>
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b2:	2300      	movs	r3, #0
 80047b4:	607b      	str	r3, [r7, #4]
 80047b6:	4b10      	ldr	r3, [pc, #64]	@ (80047f8 <HAL_MspInit+0x4c>)
 80047b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ba:	4a0f      	ldr	r2, [pc, #60]	@ (80047f8 <HAL_MspInit+0x4c>)
 80047bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80047c2:	4b0d      	ldr	r3, [pc, #52]	@ (80047f8 <HAL_MspInit+0x4c>)
 80047c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047ca:	607b      	str	r3, [r7, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	4b09      	ldr	r3, [pc, #36]	@ (80047f8 <HAL_MspInit+0x4c>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d6:	4a08      	ldr	r2, [pc, #32]	@ (80047f8 <HAL_MspInit+0x4c>)
 80047d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80047de:	4b06      	ldr	r3, [pc, #24]	@ (80047f8 <HAL_MspInit+0x4c>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80047ea:	2007      	movs	r0, #7
 80047ec:	f000 fca2 	bl	8005134 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047f0:	bf00      	nop
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40023800 	.word	0x40023800

080047fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08a      	sub	sp, #40	@ 0x28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004804:	f107 0314 	add.w	r3, r7, #20
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	605a      	str	r2, [r3, #4]
 800480e:	609a      	str	r2, [r3, #8]
 8004810:	60da      	str	r2, [r3, #12]
 8004812:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a29      	ldr	r2, [pc, #164]	@ (80048c0 <HAL_I2C_MspInit+0xc4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d14b      	bne.n	80048b6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	4b28      	ldr	r3, [pc, #160]	@ (80048c4 <HAL_I2C_MspInit+0xc8>)
 8004824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004826:	4a27      	ldr	r2, [pc, #156]	@ (80048c4 <HAL_I2C_MspInit+0xc8>)
 8004828:	f043 0304 	orr.w	r3, r3, #4
 800482c:	6313      	str	r3, [r2, #48]	@ 0x30
 800482e:	4b25      	ldr	r3, [pc, #148]	@ (80048c4 <HAL_I2C_MspInit+0xc8>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	4b21      	ldr	r3, [pc, #132]	@ (80048c4 <HAL_I2C_MspInit+0xc8>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004842:	4a20      	ldr	r2, [pc, #128]	@ (80048c4 <HAL_I2C_MspInit+0xc8>)
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	6313      	str	r3, [r2, #48]	@ 0x30
 800484a:	4b1e      	ldr	r3, [pc, #120]	@ (80048c4 <HAL_I2C_MspInit+0xc8>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004856:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800485a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800485c:	2312      	movs	r3, #18
 800485e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004860:	2300      	movs	r3, #0
 8004862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004864:	2303      	movs	r3, #3
 8004866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004868:	2304      	movs	r3, #4
 800486a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800486c:	f107 0314 	add.w	r3, r7, #20
 8004870:	4619      	mov	r1, r3
 8004872:	4815      	ldr	r0, [pc, #84]	@ (80048c8 <HAL_I2C_MspInit+0xcc>)
 8004874:	f001 f8a2 	bl	80059bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004878:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800487c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800487e:	2312      	movs	r3, #18
 8004880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004882:	2300      	movs	r3, #0
 8004884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004886:	2303      	movs	r3, #3
 8004888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800488a:	2304      	movs	r3, #4
 800488c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800488e:	f107 0314 	add.w	r3, r7, #20
 8004892:	4619      	mov	r1, r3
 8004894:	480d      	ldr	r0, [pc, #52]	@ (80048cc <HAL_I2C_MspInit+0xd0>)
 8004896:	f001 f891 	bl	80059bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800489a:	2300      	movs	r3, #0
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	4b09      	ldr	r3, [pc, #36]	@ (80048c4 <HAL_I2C_MspInit+0xc8>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a2:	4a08      	ldr	r2, [pc, #32]	@ (80048c4 <HAL_I2C_MspInit+0xc8>)
 80048a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80048aa:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <HAL_I2C_MspInit+0xc8>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80048b6:	bf00      	nop
 80048b8:	3728      	adds	r7, #40	@ 0x28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40005c00 	.word	0x40005c00
 80048c4:	40023800 	.word	0x40023800
 80048c8:	40020800 	.word	0x40020800
 80048cc:	40020000 	.word	0x40020000

080048d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b090      	sub	sp, #64	@ 0x40
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f0:	d12c      	bne.n	800494c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048f2:	2300      	movs	r3, #0
 80048f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048f6:	4b66      	ldr	r3, [pc, #408]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	4a65      	ldr	r2, [pc, #404]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	6413      	str	r3, [r2, #64]	@ 0x40
 8004902:	4b63      	ldr	r3, [pc, #396]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800490c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800490e:	2300      	movs	r3, #0
 8004910:	627b      	str	r3, [r7, #36]	@ 0x24
 8004912:	4b5f      	ldr	r3, [pc, #380]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004916:	4a5e      	ldr	r2, [pc, #376]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	6313      	str	r3, [r2, #48]	@ 0x30
 800491e:	4b5c      	ldr	r3, [pc, #368]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	627b      	str	r3, [r7, #36]	@ 0x24
 8004928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800492a:	2303      	movs	r3, #3
 800492c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800492e:	2302      	movs	r3, #2
 8004930:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004932:	2300      	movs	r3, #0
 8004934:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004936:	2300      	movs	r3, #0
 8004938:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800493a:	2301      	movs	r3, #1
 800493c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800493e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004942:	4619      	mov	r1, r3
 8004944:	4853      	ldr	r0, [pc, #332]	@ (8004a94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004946:	f001 f839 	bl	80059bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800494a:	e09c      	b.n	8004a86 <HAL_TIM_Encoder_MspInit+0x1b6>
  else if(htim_encoder->Instance==TIM3)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a51      	ldr	r2, [pc, #324]	@ (8004a98 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d12c      	bne.n	80049b0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004956:	2300      	movs	r3, #0
 8004958:	623b      	str	r3, [r7, #32]
 800495a:	4b4d      	ldr	r3, [pc, #308]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495e:	4a4c      	ldr	r2, [pc, #304]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004960:	f043 0302 	orr.w	r3, r3, #2
 8004964:	6413      	str	r3, [r2, #64]	@ 0x40
 8004966:	4b4a      	ldr	r3, [pc, #296]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	623b      	str	r3, [r7, #32]
 8004970:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	4b46      	ldr	r3, [pc, #280]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497a:	4a45      	ldr	r2, [pc, #276]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	6313      	str	r3, [r2, #48]	@ 0x30
 8004982:	4b43      	ldr	r3, [pc, #268]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	61fb      	str	r3, [r7, #28]
 800498c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800498e:	23c0      	movs	r3, #192	@ 0xc0
 8004990:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004992:	2302      	movs	r3, #2
 8004994:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004996:	2300      	movs	r3, #0
 8004998:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800499a:	2300      	movs	r3, #0
 800499c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800499e:	2302      	movs	r3, #2
 80049a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80049a6:	4619      	mov	r1, r3
 80049a8:	483a      	ldr	r0, [pc, #232]	@ (8004a94 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80049aa:	f001 f807 	bl	80059bc <HAL_GPIO_Init>
}
 80049ae:	e06a      	b.n	8004a86 <HAL_TIM_Encoder_MspInit+0x1b6>
  else if(htim_encoder->Instance==TIM4)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a39      	ldr	r2, [pc, #228]	@ (8004a9c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d12c      	bne.n	8004a14 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	4b34      	ldr	r3, [pc, #208]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80049c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c2:	4a33      	ldr	r2, [pc, #204]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80049c4:	f043 0304 	orr.w	r3, r3, #4
 80049c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80049ca:	4b31      	ldr	r3, [pc, #196]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	4b2d      	ldr	r3, [pc, #180]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049de:	4a2c      	ldr	r2, [pc, #176]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80049e0:	f043 0302 	orr.w	r3, r3, #2
 80049e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80049e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80049e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80049f2:	23c0      	movs	r3, #192	@ 0xc0
 80049f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f6:	2302      	movs	r3, #2
 80049f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049fe:	2300      	movs	r3, #0
 8004a00:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004a02:	2302      	movs	r3, #2
 8004a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4824      	ldr	r0, [pc, #144]	@ (8004aa0 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004a0e:	f000 ffd5 	bl	80059bc <HAL_GPIO_Init>
}
 8004a12:	e038      	b.n	8004a86 <HAL_TIM_Encoder_MspInit+0x1b6>
  else if(htim_encoder->Instance==TIM8)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a22      	ldr	r2, [pc, #136]	@ (8004aa4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d133      	bne.n	8004a86 <HAL_TIM_Encoder_MspInit+0x1b6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	4b1b      	ldr	r3, [pc, #108]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a26:	4a1a      	ldr	r2, [pc, #104]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004a28:	f043 0302 	orr.w	r3, r3, #2
 8004a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a2e:	4b18      	ldr	r3, [pc, #96]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	4b14      	ldr	r3, [pc, #80]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a42:	4a13      	ldr	r2, [pc, #76]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004a44:	f043 0304 	orr.w	r3, r3, #4
 8004a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a4a:	4b11      	ldr	r3, [pc, #68]	@ (8004a90 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a56:	23c0      	movs	r3, #192	@ 0xc0
 8004a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a62:	2300      	movs	r3, #0
 8004a64:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004a66:	2303      	movs	r3, #3
 8004a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004a6e:	4619      	mov	r1, r3
 8004a70:	480d      	ldr	r0, [pc, #52]	@ (8004aa8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8004a72:	f000 ffa3 	bl	80059bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004a76:	2200      	movs	r2, #0
 8004a78:	2100      	movs	r1, #0
 8004a7a:	202b      	movs	r0, #43	@ 0x2b
 8004a7c:	f000 fb65 	bl	800514a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004a80:	202b      	movs	r0, #43	@ 0x2b
 8004a82:	f000 fb7e 	bl	8005182 <HAL_NVIC_EnableIRQ>
}
 8004a86:	bf00      	nop
 8004a88:	3740      	adds	r7, #64	@ 0x40
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40023800 	.word	0x40023800
 8004a94:	40020000 	.word	0x40020000
 8004a98:	40000400 	.word	0x40000400
 8004a9c:	40000800 	.word	0x40000800
 8004aa0:	40020400 	.word	0x40020400
 8004aa4:	40010400 	.word	0x40010400
 8004aa8:	40020800 	.word	0x40020800

08004aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b2c <HAL_TIM_Base_MspInit+0x80>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d116      	bne.n	8004aec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8004b30 <HAL_TIM_Base_MspInit+0x84>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8004b30 <HAL_TIM_Base_MspInit+0x84>)
 8004ac8:	f043 0308 	orr.w	r3, r3, #8
 8004acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ace:	4b18      	ldr	r3, [pc, #96]	@ (8004b30 <HAL_TIM_Base_MspInit+0x84>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004ada:	2200      	movs	r2, #0
 8004adc:	2100      	movs	r1, #0
 8004ade:	2032      	movs	r0, #50	@ 0x32
 8004ae0:	f000 fb33 	bl	800514a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004ae4:	2032      	movs	r0, #50	@ 0x32
 8004ae6:	f000 fb4c 	bl	8005182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8004aea:	e01a      	b.n	8004b22 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM12)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a10      	ldr	r2, [pc, #64]	@ (8004b34 <HAL_TIM_Base_MspInit+0x88>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d115      	bne.n	8004b22 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	4b0d      	ldr	r3, [pc, #52]	@ (8004b30 <HAL_TIM_Base_MspInit+0x84>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	4a0c      	ldr	r2, [pc, #48]	@ (8004b30 <HAL_TIM_Base_MspInit+0x84>)
 8004b00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b06:	4b0a      	ldr	r3, [pc, #40]	@ (8004b30 <HAL_TIM_Base_MspInit+0x84>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0e:	60bb      	str	r3, [r7, #8]
 8004b10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004b12:	2200      	movs	r2, #0
 8004b14:	2100      	movs	r1, #0
 8004b16:	202b      	movs	r0, #43	@ 0x2b
 8004b18:	f000 fb17 	bl	800514a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004b1c:	202b      	movs	r0, #43	@ 0x2b
 8004b1e:	f000 fb30 	bl	8005182 <HAL_NVIC_EnableIRQ>
}
 8004b22:	bf00      	nop
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40000c00 	.word	0x40000c00
 8004b30:	40023800 	.word	0x40023800
 8004b34:	40001800 	.word	0x40001800

08004b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08a      	sub	sp, #40	@ 0x28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b40:	f107 0314 	add.w	r3, r7, #20
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	605a      	str	r2, [r3, #4]
 8004b4a:	609a      	str	r2, [r3, #8]
 8004b4c:	60da      	str	r2, [r3, #12]
 8004b4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a4d      	ldr	r2, [pc, #308]	@ (8004c8c <HAL_UART_MspInit+0x154>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	f040 8093 	bne.w	8004c82 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	4b4b      	ldr	r3, [pc, #300]	@ (8004c90 <HAL_UART_MspInit+0x158>)
 8004b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b64:	4a4a      	ldr	r2, [pc, #296]	@ (8004c90 <HAL_UART_MspInit+0x158>)
 8004b66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b6c:	4b48      	ldr	r3, [pc, #288]	@ (8004c90 <HAL_UART_MspInit+0x158>)
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	4b44      	ldr	r3, [pc, #272]	@ (8004c90 <HAL_UART_MspInit+0x158>)
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b80:	4a43      	ldr	r2, [pc, #268]	@ (8004c90 <HAL_UART_MspInit+0x158>)
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b88:	4b41      	ldr	r3, [pc, #260]	@ (8004c90 <HAL_UART_MspInit+0x158>)
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004b94:	230c      	movs	r3, #12
 8004b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ba4:	2307      	movs	r3, #7
 8004ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba8:	f107 0314 	add.w	r3, r7, #20
 8004bac:	4619      	mov	r1, r3
 8004bae:	4839      	ldr	r0, [pc, #228]	@ (8004c94 <HAL_UART_MspInit+0x15c>)
 8004bb0:	f000 ff04 	bl	80059bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004bb4:	4b38      	ldr	r3, [pc, #224]	@ (8004c98 <HAL_UART_MspInit+0x160>)
 8004bb6:	4a39      	ldr	r2, [pc, #228]	@ (8004c9c <HAL_UART_MspInit+0x164>)
 8004bb8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004bba:	4b37      	ldr	r3, [pc, #220]	@ (8004c98 <HAL_UART_MspInit+0x160>)
 8004bbc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004bc0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bc2:	4b35      	ldr	r3, [pc, #212]	@ (8004c98 <HAL_UART_MspInit+0x160>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bc8:	4b33      	ldr	r3, [pc, #204]	@ (8004c98 <HAL_UART_MspInit+0x160>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bce:	4b32      	ldr	r3, [pc, #200]	@ (8004c98 <HAL_UART_MspInit+0x160>)
 8004bd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004bd4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bd6:	4b30      	ldr	r3, [pc, #192]	@ (8004c98 <HAL_UART_MspInit+0x160>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8004c98 <HAL_UART_MspInit+0x160>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004be2:	4b2d      	ldr	r3, [pc, #180]	@ (8004c98 <HAL_UART_MspInit+0x160>)
 8004be4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004be8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004bea:	4b2b      	ldr	r3, [pc, #172]	@ (8004c98 <HAL_UART_MspInit+0x160>)
 8004bec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004bf0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bf2:	4b29      	ldr	r3, [pc, #164]	@ (8004c98 <HAL_UART_MspInit+0x160>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004bf8:	4827      	ldr	r0, [pc, #156]	@ (8004c98 <HAL_UART_MspInit+0x160>)
 8004bfa:	f000 fadd 	bl	80051b8 <HAL_DMA_Init>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8004c04:	f7fd fca0 	bl	8002548 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a23      	ldr	r2, [pc, #140]	@ (8004c98 <HAL_UART_MspInit+0x160>)
 8004c0c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004c0e:	4a22      	ldr	r2, [pc, #136]	@ (8004c98 <HAL_UART_MspInit+0x160>)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004c14:	4b22      	ldr	r3, [pc, #136]	@ (8004ca0 <HAL_UART_MspInit+0x168>)
 8004c16:	4a23      	ldr	r2, [pc, #140]	@ (8004ca4 <HAL_UART_MspInit+0x16c>)
 8004c18:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004c1a:	4b21      	ldr	r3, [pc, #132]	@ (8004ca0 <HAL_UART_MspInit+0x168>)
 8004c1c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004c20:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c22:	4b1f      	ldr	r3, [pc, #124]	@ (8004ca0 <HAL_UART_MspInit+0x168>)
 8004c24:	2240      	movs	r2, #64	@ 0x40
 8004c26:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c28:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca0 <HAL_UART_MspInit+0x168>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ca0 <HAL_UART_MspInit+0x168>)
 8004c30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c34:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c36:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca0 <HAL_UART_MspInit+0x168>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c3c:	4b18      	ldr	r3, [pc, #96]	@ (8004ca0 <HAL_UART_MspInit+0x168>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004c42:	4b17      	ldr	r3, [pc, #92]	@ (8004ca0 <HAL_UART_MspInit+0x168>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004c48:	4b15      	ldr	r3, [pc, #84]	@ (8004ca0 <HAL_UART_MspInit+0x168>)
 8004c4a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004c4e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c50:	4b13      	ldr	r3, [pc, #76]	@ (8004ca0 <HAL_UART_MspInit+0x168>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004c56:	4812      	ldr	r0, [pc, #72]	@ (8004ca0 <HAL_UART_MspInit+0x168>)
 8004c58:	f000 faae 	bl	80051b8 <HAL_DMA_Init>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8004c62:	f7fd fc71 	bl	8002548 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a0d      	ldr	r2, [pc, #52]	@ (8004ca0 <HAL_UART_MspInit+0x168>)
 8004c6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8004ca0 <HAL_UART_MspInit+0x168>)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004c72:	2200      	movs	r2, #0
 8004c74:	2100      	movs	r1, #0
 8004c76:	2026      	movs	r0, #38	@ 0x26
 8004c78:	f000 fa67 	bl	800514a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004c7c:	2026      	movs	r0, #38	@ 0x26
 8004c7e:	f000 fa80 	bl	8005182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004c82:	bf00      	nop
 8004c84:	3728      	adds	r7, #40	@ 0x28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40004400 	.word	0x40004400
 8004c90:	40023800 	.word	0x40023800
 8004c94:	40020000 	.word	0x40020000
 8004c98:	200002c8 	.word	0x200002c8
 8004c9c:	40026088 	.word	0x40026088
 8004ca0:	20000328 	.word	0x20000328
 8004ca4:	400260a0 	.word	0x400260a0

08004ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004cac:	bf00      	nop
 8004cae:	e7fd      	b.n	8004cac <NMI_Handler+0x4>

08004cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cb4:	bf00      	nop
 8004cb6:	e7fd      	b.n	8004cb4 <HardFault_Handler+0x4>

08004cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004cbc:	bf00      	nop
 8004cbe:	e7fd      	b.n	8004cbc <MemManage_Handler+0x4>

08004cc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cc4:	bf00      	nop
 8004cc6:	e7fd      	b.n	8004cc4 <BusFault_Handler+0x4>

08004cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ccc:	bf00      	nop
 8004cce:	e7fd      	b.n	8004ccc <UsageFault_Handler+0x4>

08004cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ce2:	bf00      	nop
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004cf0:	bf00      	nop
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cfe:	f000 f929 	bl	8004f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d02:	bf00      	nop
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004d0c:	4802      	ldr	r0, [pc, #8]	@ (8004d18 <DMA1_Stream5_IRQHandler+0x10>)
 8004d0e:	f000 fbeb 	bl	80054e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004d12:	bf00      	nop
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	200002c8 	.word	0x200002c8

08004d1c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004d20:	4802      	ldr	r0, [pc, #8]	@ (8004d2c <DMA1_Stream6_IRQHandler+0x10>)
 8004d22:	f000 fbe1 	bl	80054e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004d26:	bf00      	nop
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000328 	.word	0x20000328

08004d30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004d34:	4802      	ldr	r0, [pc, #8]	@ (8004d40 <USART2_IRQHandler+0x10>)
 8004d36:	f003 fd01 	bl	800873c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004d3a:	bf00      	nop
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000280 	.word	0x20000280

08004d44 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004d48:	4803      	ldr	r0, [pc, #12]	@ (8004d58 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8004d4a:	f003 f835 	bl	8007db8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8004d4e:	4803      	ldr	r0, [pc, #12]	@ (8004d5c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8004d50:	f003 f832 	bl	8007db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004d54:	bf00      	nop
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	200001f0 	.word	0x200001f0
 8004d5c:	20000238 	.word	0x20000238

08004d60 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004d64:	4802      	ldr	r0, [pc, #8]	@ (8004d70 <TIM5_IRQHandler+0x10>)
 8004d66:	f003 f827 	bl	8007db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004d6a:	bf00      	nop
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	200001a8 	.word	0x200001a8

08004d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d7c:	4a14      	ldr	r2, [pc, #80]	@ (8004dd0 <_sbrk+0x5c>)
 8004d7e:	4b15      	ldr	r3, [pc, #84]	@ (8004dd4 <_sbrk+0x60>)
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d88:	4b13      	ldr	r3, [pc, #76]	@ (8004dd8 <_sbrk+0x64>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d90:	4b11      	ldr	r3, [pc, #68]	@ (8004dd8 <_sbrk+0x64>)
 8004d92:	4a12      	ldr	r2, [pc, #72]	@ (8004ddc <_sbrk+0x68>)
 8004d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d96:	4b10      	ldr	r3, [pc, #64]	@ (8004dd8 <_sbrk+0x64>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d207      	bcs.n	8004db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004da4:	f006 f80e 	bl	800adc4 <__errno>
 8004da8:	4603      	mov	r3, r0
 8004daa:	220c      	movs	r2, #12
 8004dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004dae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004db2:	e009      	b.n	8004dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004db4:	4b08      	ldr	r3, [pc, #32]	@ (8004dd8 <_sbrk+0x64>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dba:	4b07      	ldr	r3, [pc, #28]	@ (8004dd8 <_sbrk+0x64>)
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	4a05      	ldr	r2, [pc, #20]	@ (8004dd8 <_sbrk+0x64>)
 8004dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20020000 	.word	0x20020000
 8004dd4:	00000400 	.word	0x00000400
 8004dd8:	20001ae4 	.word	0x20001ae4
 8004ddc:	20001c38 	.word	0x20001c38

08004de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004de4:	4b06      	ldr	r3, [pc, #24]	@ (8004e00 <SystemInit+0x20>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dea:	4a05      	ldr	r2, [pc, #20]	@ (8004e00 <SystemInit+0x20>)
 8004dec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004df0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004df4:	bf00      	nop
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	e000ed00 	.word	0xe000ed00

08004e04 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	0a5a      	lsrs	r2, r3, #9
 8004e14:	490f      	ldr	r1, [pc, #60]	@ (8004e54 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004e16:	fba1 1202 	umull	r1, r2, r1, r2
 8004e1a:	09d2      	lsrs	r2, r2, #7
 8004e1c:	490e      	ldr	r1, [pc, #56]	@ (8004e58 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8004e1e:	fb01 f202 	mul.w	r2, r1, r2
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	0a5b      	lsrs	r3, r3, #9
 8004e2c:	4a09      	ldr	r2, [pc, #36]	@ (8004e54 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e32:	09db      	lsrs	r3, r3, #7
 8004e34:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	441a      	add	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	601a      	str	r2, [r3, #0]
}
 8004e48:	bf00      	nop
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	00044b83 	.word	0x00044b83
 8004e58:	3b9aca00 	.word	0x3b9aca00

08004e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004e5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004e94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004e60:	f7ff ffbe 	bl	8004de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e64:	480c      	ldr	r0, [pc, #48]	@ (8004e98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004e66:	490d      	ldr	r1, [pc, #52]	@ (8004e9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e68:	4a0d      	ldr	r2, [pc, #52]	@ (8004ea0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e6c:	e002      	b.n	8004e74 <LoopCopyDataInit>

08004e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e72:	3304      	adds	r3, #4

08004e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e78:	d3f9      	bcc.n	8004e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ea4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8004ea8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e80:	e001      	b.n	8004e86 <LoopFillZerobss>

08004e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e84:	3204      	adds	r2, #4

08004e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e88:	d3fb      	bcc.n	8004e82 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004e8a:	f005 ffa1 	bl	800add0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e8e:	f7fc fa3b 	bl	8001308 <main>
  bx  lr    
 8004e92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e9c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8004ea0:	0800b59c 	.word	0x0800b59c
  ldr r2, =_sbss
 8004ea4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8004ea8:	20001c34 	.word	0x20001c34

08004eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004eac:	e7fe      	b.n	8004eac <ADC_IRQHandler>
	...

08004eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef0 <HAL_Init+0x40>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8004ef0 <HAL_Init+0x40>)
 8004eba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ebe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef0 <HAL_Init+0x40>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8004ef0 <HAL_Init+0x40>)
 8004ec6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004eca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ecc:	4b08      	ldr	r3, [pc, #32]	@ (8004ef0 <HAL_Init+0x40>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a07      	ldr	r2, [pc, #28]	@ (8004ef0 <HAL_Init+0x40>)
 8004ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ed8:	2003      	movs	r0, #3
 8004eda:	f000 f92b 	bl	8005134 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ede:	2000      	movs	r0, #0
 8004ee0:	f000 f808 	bl	8004ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ee4:	f7ff fc62 	bl	80047ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40023c00 	.word	0x40023c00

08004ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004efc:	4b12      	ldr	r3, [pc, #72]	@ (8004f48 <HAL_InitTick+0x54>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	4b12      	ldr	r3, [pc, #72]	@ (8004f4c <HAL_InitTick+0x58>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	4619      	mov	r1, r3
 8004f06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 f943 	bl	800519e <HAL_SYSTICK_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e00e      	b.n	8004f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b0f      	cmp	r3, #15
 8004f26:	d80a      	bhi.n	8004f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f28:	2200      	movs	r2, #0
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f30:	f000 f90b 	bl	800514a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f34:	4a06      	ldr	r2, [pc, #24]	@ (8004f50 <HAL_InitTick+0x5c>)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e000      	b.n	8004f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	20000000 	.word	0x20000000
 8004f4c:	20000008 	.word	0x20000008
 8004f50:	20000004 	.word	0x20000004

08004f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f58:	4b06      	ldr	r3, [pc, #24]	@ (8004f74 <HAL_IncTick+0x20>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	4b06      	ldr	r3, [pc, #24]	@ (8004f78 <HAL_IncTick+0x24>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4413      	add	r3, r2
 8004f64:	4a04      	ldr	r2, [pc, #16]	@ (8004f78 <HAL_IncTick+0x24>)
 8004f66:	6013      	str	r3, [r2, #0]
}
 8004f68:	bf00      	nop
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	20000008 	.word	0x20000008
 8004f78:	20001ae8 	.word	0x20001ae8

08004f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8004f80:	4b03      	ldr	r3, [pc, #12]	@ (8004f90 <HAL_GetTick+0x14>)
 8004f82:	681b      	ldr	r3, [r3, #0]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	20001ae8 	.word	0x20001ae8

08004f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fc6:	4a04      	ldr	r2, [pc, #16]	@ (8004fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	60d3      	str	r3, [r2, #12]
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	e000ed00 	.word	0xe000ed00

08004fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fe0:	4b04      	ldr	r3, [pc, #16]	@ (8004ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	0a1b      	lsrs	r3, r3, #8
 8004fe6:	f003 0307 	and.w	r3, r3, #7
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	e000ed00 	.word	0xe000ed00

08004ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005006:	2b00      	cmp	r3, #0
 8005008:	db0b      	blt.n	8005022 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	f003 021f 	and.w	r2, r3, #31
 8005010:	4907      	ldr	r1, [pc, #28]	@ (8005030 <__NVIC_EnableIRQ+0x38>)
 8005012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	2001      	movs	r0, #1
 800501a:	fa00 f202 	lsl.w	r2, r0, r2
 800501e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	e000e100 	.word	0xe000e100

08005034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	4603      	mov	r3, r0
 800503c:	6039      	str	r1, [r7, #0]
 800503e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005044:	2b00      	cmp	r3, #0
 8005046:	db0a      	blt.n	800505e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	b2da      	uxtb	r2, r3
 800504c:	490c      	ldr	r1, [pc, #48]	@ (8005080 <__NVIC_SetPriority+0x4c>)
 800504e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005052:	0112      	lsls	r2, r2, #4
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	440b      	add	r3, r1
 8005058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800505c:	e00a      	b.n	8005074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	b2da      	uxtb	r2, r3
 8005062:	4908      	ldr	r1, [pc, #32]	@ (8005084 <__NVIC_SetPriority+0x50>)
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	3b04      	subs	r3, #4
 800506c:	0112      	lsls	r2, r2, #4
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	440b      	add	r3, r1
 8005072:	761a      	strb	r2, [r3, #24]
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	e000e100 	.word	0xe000e100
 8005084:	e000ed00 	.word	0xe000ed00

08005088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005088:	b480      	push	{r7}
 800508a:	b089      	sub	sp, #36	@ 0x24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f1c3 0307 	rsb	r3, r3, #7
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	bf28      	it	cs
 80050a6:	2304      	movcs	r3, #4
 80050a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	3304      	adds	r3, #4
 80050ae:	2b06      	cmp	r3, #6
 80050b0:	d902      	bls.n	80050b8 <NVIC_EncodePriority+0x30>
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	3b03      	subs	r3, #3
 80050b6:	e000      	b.n	80050ba <NVIC_EncodePriority+0x32>
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	43da      	mvns	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	401a      	ands	r2, r3
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	fa01 f303 	lsl.w	r3, r1, r3
 80050da:	43d9      	mvns	r1, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050e0:	4313      	orrs	r3, r2
         );
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3724      	adds	r7, #36	@ 0x24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005100:	d301      	bcc.n	8005106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005102:	2301      	movs	r3, #1
 8005104:	e00f      	b.n	8005126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005106:	4a0a      	ldr	r2, [pc, #40]	@ (8005130 <SysTick_Config+0x40>)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3b01      	subs	r3, #1
 800510c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800510e:	210f      	movs	r1, #15
 8005110:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005114:	f7ff ff8e 	bl	8005034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005118:	4b05      	ldr	r3, [pc, #20]	@ (8005130 <SysTick_Config+0x40>)
 800511a:	2200      	movs	r2, #0
 800511c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800511e:	4b04      	ldr	r3, [pc, #16]	@ (8005130 <SysTick_Config+0x40>)
 8005120:	2207      	movs	r2, #7
 8005122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	e000e010 	.word	0xe000e010

08005134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff ff29 	bl	8004f94 <__NVIC_SetPriorityGrouping>
}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800514a:	b580      	push	{r7, lr}
 800514c:	b086      	sub	sp, #24
 800514e:	af00      	add	r7, sp, #0
 8005150:	4603      	mov	r3, r0
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	607a      	str	r2, [r7, #4]
 8005156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800515c:	f7ff ff3e 	bl	8004fdc <__NVIC_GetPriorityGrouping>
 8005160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	6978      	ldr	r0, [r7, #20]
 8005168:	f7ff ff8e 	bl	8005088 <NVIC_EncodePriority>
 800516c:	4602      	mov	r2, r0
 800516e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005172:	4611      	mov	r1, r2
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff ff5d 	bl	8005034 <__NVIC_SetPriority>
}
 800517a:	bf00      	nop
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
 8005188:	4603      	mov	r3, r0
 800518a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800518c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff ff31 	bl	8004ff8 <__NVIC_EnableIRQ>
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7ff ffa2 	bl	80050f0 <SysTick_Config>
 80051ac:	4603      	mov	r3, r0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80051c4:	f7ff feda 	bl	8004f7c <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e099      	b.n	8005308 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0201 	bic.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051f4:	e00f      	b.n	8005216 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051f6:	f7ff fec1 	bl	8004f7c <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b05      	cmp	r3, #5
 8005202:	d908      	bls.n	8005216 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2203      	movs	r2, #3
 800520e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e078      	b.n	8005308 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e8      	bne.n	80051f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4b38      	ldr	r3, [pc, #224]	@ (8005310 <HAL_DMA_Init+0x158>)
 8005230:	4013      	ands	r3, r2
 8005232:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005242:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800524e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800525a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526c:	2b04      	cmp	r3, #4
 800526e:	d107      	bne.n	8005280 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005278:	4313      	orrs	r3, r2
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f023 0307 	bic.w	r3, r3, #7
 8005296:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d117      	bne.n	80052da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00e      	beq.n	80052da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fb01 	bl	80058c4 <DMA_CheckFifoParam>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2240      	movs	r2, #64	@ 0x40
 80052cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80052d6:	2301      	movs	r3, #1
 80052d8:	e016      	b.n	8005308 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fab8 	bl	8005858 <DMA_CalcBaseAndBitshift>
 80052e8:	4603      	mov	r3, r0
 80052ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052f0:	223f      	movs	r2, #63	@ 0x3f
 80052f2:	409a      	lsls	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	f010803f 	.word	0xf010803f

08005314 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_DMA_Start_IT+0x26>
 8005336:	2302      	movs	r3, #2
 8005338:	e040      	b.n	80053bc <HAL_DMA_Start_IT+0xa8>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b01      	cmp	r3, #1
 800534c:	d12f      	bne.n	80053ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 fa4a 	bl	80057fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800536c:	223f      	movs	r2, #63	@ 0x3f
 800536e:	409a      	lsls	r2, r3
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0216 	orr.w	r2, r2, #22
 8005382:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0208 	orr.w	r2, r2, #8
 800539a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	e005      	b.n	80053ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80053b6:	2302      	movs	r3, #2
 80053b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80053ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80053d2:	f7ff fdd3 	bl	8004f7c <HAL_GetTick>
 80053d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d008      	beq.n	80053f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2280      	movs	r2, #128	@ 0x80
 80053e8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e052      	b.n	800549c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0216 	bic.w	r2, r2, #22
 8005404:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695a      	ldr	r2, [r3, #20]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005414:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d103      	bne.n	8005426 <HAL_DMA_Abort+0x62>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0208 	bic.w	r2, r2, #8
 8005434:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0201 	bic.w	r2, r2, #1
 8005444:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005446:	e013      	b.n	8005470 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005448:	f7ff fd98 	bl	8004f7c <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b05      	cmp	r3, #5
 8005454:	d90c      	bls.n	8005470 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2203      	movs	r2, #3
 8005460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e015      	b.n	800549c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1e4      	bne.n	8005448 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005482:	223f      	movs	r2, #63	@ 0x3f
 8005484:	409a      	lsls	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d004      	beq.n	80054c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2280      	movs	r2, #128	@ 0x80
 80054bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e00c      	b.n	80054dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2205      	movs	r2, #5
 80054c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0201 	bic.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054f4:	4b8e      	ldr	r3, [pc, #568]	@ (8005730 <HAL_DMA_IRQHandler+0x248>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a8e      	ldr	r2, [pc, #568]	@ (8005734 <HAL_DMA_IRQHandler+0x24c>)
 80054fa:	fba2 2303 	umull	r2, r3, r2, r3
 80054fe:	0a9b      	lsrs	r3, r3, #10
 8005500:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005506:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005512:	2208      	movs	r2, #8
 8005514:	409a      	lsls	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4013      	ands	r3, r2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d01a      	beq.n	8005554 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d013      	beq.n	8005554 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0204 	bic.w	r2, r2, #4
 800553a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005540:	2208      	movs	r2, #8
 8005542:	409a      	lsls	r2, r3
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554c:	f043 0201 	orr.w	r2, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005558:	2201      	movs	r2, #1
 800555a:	409a      	lsls	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4013      	ands	r3, r2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d012      	beq.n	800558a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00b      	beq.n	800558a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005576:	2201      	movs	r2, #1
 8005578:	409a      	lsls	r2, r3
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005582:	f043 0202 	orr.w	r2, r3, #2
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800558e:	2204      	movs	r2, #4
 8005590:	409a      	lsls	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4013      	ands	r3, r2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d012      	beq.n	80055c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00b      	beq.n	80055c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ac:	2204      	movs	r2, #4
 80055ae:	409a      	lsls	r2, r3
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b8:	f043 0204 	orr.w	r2, r3, #4
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c4:	2210      	movs	r2, #16
 80055c6:	409a      	lsls	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4013      	ands	r3, r2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d043      	beq.n	8005658 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d03c      	beq.n	8005658 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e2:	2210      	movs	r2, #16
 80055e4:	409a      	lsls	r2, r3
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d018      	beq.n	800562a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d108      	bne.n	8005618 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d024      	beq.n	8005658 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
 8005616:	e01f      	b.n	8005658 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01b      	beq.n	8005658 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	4798      	blx	r3
 8005628:	e016      	b.n	8005658 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005634:	2b00      	cmp	r3, #0
 8005636:	d107      	bne.n	8005648 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0208 	bic.w	r2, r2, #8
 8005646:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800565c:	2220      	movs	r2, #32
 800565e:	409a      	lsls	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4013      	ands	r3, r2
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 808f 	beq.w	8005788 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8087 	beq.w	8005788 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800567e:	2220      	movs	r2, #32
 8005680:	409a      	lsls	r2, r3
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b05      	cmp	r3, #5
 8005690:	d136      	bne.n	8005700 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0216 	bic.w	r2, r2, #22
 80056a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695a      	ldr	r2, [r3, #20]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d103      	bne.n	80056c2 <HAL_DMA_IRQHandler+0x1da>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0208 	bic.w	r2, r2, #8
 80056d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d6:	223f      	movs	r2, #63	@ 0x3f
 80056d8:	409a      	lsls	r2, r3
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d07e      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	4798      	blx	r3
        }
        return;
 80056fe:	e079      	b.n	80057f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01d      	beq.n	800574a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10d      	bne.n	8005738 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005720:	2b00      	cmp	r3, #0
 8005722:	d031      	beq.n	8005788 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	4798      	blx	r3
 800572c:	e02c      	b.n	8005788 <HAL_DMA_IRQHandler+0x2a0>
 800572e:	bf00      	nop
 8005730:	20000000 	.word	0x20000000
 8005734:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573c:	2b00      	cmp	r3, #0
 800573e:	d023      	beq.n	8005788 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	4798      	blx	r3
 8005748:	e01e      	b.n	8005788 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10f      	bne.n	8005778 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0210 	bic.w	r2, r2, #16
 8005766:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578c:	2b00      	cmp	r3, #0
 800578e:	d032      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d022      	beq.n	80057e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2205      	movs	r2, #5
 80057a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0201 	bic.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	3301      	adds	r3, #1
 80057b8:	60bb      	str	r3, [r7, #8]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d307      	bcc.n	80057d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f2      	bne.n	80057b4 <HAL_DMA_IRQHandler+0x2cc>
 80057ce:	e000      	b.n	80057d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80057d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d005      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	4798      	blx	r3
 80057f2:	e000      	b.n	80057f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80057f4:	bf00      	nop
    }
  }
}
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005818:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	2b40      	cmp	r3, #64	@ 0x40
 8005828:	d108      	bne.n	800583c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800583a:	e007      	b.n	800584c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	60da      	str	r2, [r3, #12]
}
 800584c:	bf00      	nop
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	b2db      	uxtb	r3, r3
 8005866:	3b10      	subs	r3, #16
 8005868:	4a14      	ldr	r2, [pc, #80]	@ (80058bc <DMA_CalcBaseAndBitshift+0x64>)
 800586a:	fba2 2303 	umull	r2, r3, r2, r3
 800586e:	091b      	lsrs	r3, r3, #4
 8005870:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005872:	4a13      	ldr	r2, [pc, #76]	@ (80058c0 <DMA_CalcBaseAndBitshift+0x68>)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b03      	cmp	r3, #3
 8005884:	d909      	bls.n	800589a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800588e:	f023 0303 	bic.w	r3, r3, #3
 8005892:	1d1a      	adds	r2, r3, #4
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	659a      	str	r2, [r3, #88]	@ 0x58
 8005898:	e007      	b.n	80058aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80058a2:	f023 0303 	bic.w	r3, r3, #3
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	aaaaaaab 	.word	0xaaaaaaab
 80058c0:	0800b368 	.word	0x0800b368

080058c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d11f      	bne.n	800591e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d856      	bhi.n	8005992 <DMA_CheckFifoParam+0xce>
 80058e4:	a201      	add	r2, pc, #4	@ (adr r2, 80058ec <DMA_CheckFifoParam+0x28>)
 80058e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ea:	bf00      	nop
 80058ec:	080058fd 	.word	0x080058fd
 80058f0:	0800590f 	.word	0x0800590f
 80058f4:	080058fd 	.word	0x080058fd
 80058f8:	08005993 	.word	0x08005993
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d046      	beq.n	8005996 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800590c:	e043      	b.n	8005996 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005912:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005916:	d140      	bne.n	800599a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800591c:	e03d      	b.n	800599a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005926:	d121      	bne.n	800596c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b03      	cmp	r3, #3
 800592c:	d837      	bhi.n	800599e <DMA_CheckFifoParam+0xda>
 800592e:	a201      	add	r2, pc, #4	@ (adr r2, 8005934 <DMA_CheckFifoParam+0x70>)
 8005930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005934:	08005945 	.word	0x08005945
 8005938:	0800594b 	.word	0x0800594b
 800593c:	08005945 	.word	0x08005945
 8005940:	0800595d 	.word	0x0800595d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	73fb      	strb	r3, [r7, #15]
      break;
 8005948:	e030      	b.n	80059ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d025      	beq.n	80059a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800595a:	e022      	b.n	80059a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005960:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005964:	d11f      	bne.n	80059a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800596a:	e01c      	b.n	80059a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d903      	bls.n	800597a <DMA_CheckFifoParam+0xb6>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b03      	cmp	r3, #3
 8005976:	d003      	beq.n	8005980 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005978:	e018      	b.n	80059ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	73fb      	strb	r3, [r7, #15]
      break;
 800597e:	e015      	b.n	80059ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005984:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00e      	beq.n	80059aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]
      break;
 8005990:	e00b      	b.n	80059aa <DMA_CheckFifoParam+0xe6>
      break;
 8005992:	bf00      	nop
 8005994:	e00a      	b.n	80059ac <DMA_CheckFifoParam+0xe8>
      break;
 8005996:	bf00      	nop
 8005998:	e008      	b.n	80059ac <DMA_CheckFifoParam+0xe8>
      break;
 800599a:	bf00      	nop
 800599c:	e006      	b.n	80059ac <DMA_CheckFifoParam+0xe8>
      break;
 800599e:	bf00      	nop
 80059a0:	e004      	b.n	80059ac <DMA_CheckFifoParam+0xe8>
      break;
 80059a2:	bf00      	nop
 80059a4:	e002      	b.n	80059ac <DMA_CheckFifoParam+0xe8>
      break;   
 80059a6:	bf00      	nop
 80059a8:	e000      	b.n	80059ac <DMA_CheckFifoParam+0xe8>
      break;
 80059aa:	bf00      	nop
    }
  } 
  
  return status; 
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop

080059bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059bc:	b480      	push	{r7}
 80059be:	b089      	sub	sp, #36	@ 0x24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059d2:	2300      	movs	r3, #0
 80059d4:	61fb      	str	r3, [r7, #28]
 80059d6:	e165      	b.n	8005ca4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059d8:	2201      	movs	r2, #1
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4013      	ands	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	f040 8154 	bne.w	8005c9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d005      	beq.n	8005a0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d130      	bne.n	8005a70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	2203      	movs	r2, #3
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4013      	ands	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68da      	ldr	r2, [r3, #12]
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a44:	2201      	movs	r2, #1
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	4013      	ands	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	091b      	lsrs	r3, r3, #4
 8005a5a:	f003 0201 	and.w	r2, r3, #1
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	d017      	beq.n	8005aac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	2203      	movs	r2, #3
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	4013      	ands	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f003 0303 	and.w	r3, r3, #3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d123      	bne.n	8005b00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	08da      	lsrs	r2, r3, #3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3208      	adds	r2, #8
 8005ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	220f      	movs	r2, #15
 8005ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	691a      	ldr	r2, [r3, #16]
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f003 0307 	and.w	r3, r3, #7
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	08da      	lsrs	r2, r3, #3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3208      	adds	r2, #8
 8005afa:	69b9      	ldr	r1, [r7, #24]
 8005afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	43db      	mvns	r3, r3
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	4013      	ands	r3, r2
 8005b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f003 0203 	and.w	r2, r3, #3
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 80ae 	beq.w	8005c9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	4b5d      	ldr	r3, [pc, #372]	@ (8005cbc <HAL_GPIO_Init+0x300>)
 8005b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b4a:	4a5c      	ldr	r2, [pc, #368]	@ (8005cbc <HAL_GPIO_Init+0x300>)
 8005b4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b52:	4b5a      	ldr	r3, [pc, #360]	@ (8005cbc <HAL_GPIO_Init+0x300>)
 8005b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b5e:	4a58      	ldr	r2, [pc, #352]	@ (8005cc0 <HAL_GPIO_Init+0x304>)
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	089b      	lsrs	r3, r3, #2
 8005b64:	3302      	adds	r3, #2
 8005b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	220f      	movs	r2, #15
 8005b76:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7a:	43db      	mvns	r3, r3
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a4f      	ldr	r2, [pc, #316]	@ (8005cc4 <HAL_GPIO_Init+0x308>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d025      	beq.n	8005bd6 <HAL_GPIO_Init+0x21a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a4e      	ldr	r2, [pc, #312]	@ (8005cc8 <HAL_GPIO_Init+0x30c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d01f      	beq.n	8005bd2 <HAL_GPIO_Init+0x216>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a4d      	ldr	r2, [pc, #308]	@ (8005ccc <HAL_GPIO_Init+0x310>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d019      	beq.n	8005bce <HAL_GPIO_Init+0x212>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a4c      	ldr	r2, [pc, #304]	@ (8005cd0 <HAL_GPIO_Init+0x314>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d013      	beq.n	8005bca <HAL_GPIO_Init+0x20e>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a4b      	ldr	r2, [pc, #300]	@ (8005cd4 <HAL_GPIO_Init+0x318>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d00d      	beq.n	8005bc6 <HAL_GPIO_Init+0x20a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a4a      	ldr	r2, [pc, #296]	@ (8005cd8 <HAL_GPIO_Init+0x31c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d007      	beq.n	8005bc2 <HAL_GPIO_Init+0x206>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a49      	ldr	r2, [pc, #292]	@ (8005cdc <HAL_GPIO_Init+0x320>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d101      	bne.n	8005bbe <HAL_GPIO_Init+0x202>
 8005bba:	2306      	movs	r3, #6
 8005bbc:	e00c      	b.n	8005bd8 <HAL_GPIO_Init+0x21c>
 8005bbe:	2307      	movs	r3, #7
 8005bc0:	e00a      	b.n	8005bd8 <HAL_GPIO_Init+0x21c>
 8005bc2:	2305      	movs	r3, #5
 8005bc4:	e008      	b.n	8005bd8 <HAL_GPIO_Init+0x21c>
 8005bc6:	2304      	movs	r3, #4
 8005bc8:	e006      	b.n	8005bd8 <HAL_GPIO_Init+0x21c>
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e004      	b.n	8005bd8 <HAL_GPIO_Init+0x21c>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e002      	b.n	8005bd8 <HAL_GPIO_Init+0x21c>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <HAL_GPIO_Init+0x21c>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	f002 0203 	and.w	r2, r2, #3
 8005bde:	0092      	lsls	r2, r2, #2
 8005be0:	4093      	lsls	r3, r2
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005be8:	4935      	ldr	r1, [pc, #212]	@ (8005cc0 <HAL_GPIO_Init+0x304>)
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	089b      	lsrs	r3, r3, #2
 8005bee:	3302      	adds	r3, #2
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8005ce0 <HAL_GPIO_Init+0x324>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	4013      	ands	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c1a:	4a31      	ldr	r2, [pc, #196]	@ (8005ce0 <HAL_GPIO_Init+0x324>)
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c20:	4b2f      	ldr	r3, [pc, #188]	@ (8005ce0 <HAL_GPIO_Init+0x324>)
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c44:	4a26      	ldr	r2, [pc, #152]	@ (8005ce0 <HAL_GPIO_Init+0x324>)
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c4a:	4b25      	ldr	r3, [pc, #148]	@ (8005ce0 <HAL_GPIO_Init+0x324>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	43db      	mvns	r3, r3
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	4013      	ands	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ce0 <HAL_GPIO_Init+0x324>)
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c74:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce0 <HAL_GPIO_Init+0x324>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	4013      	ands	r3, r2
 8005c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c98:	4a11      	ldr	r2, [pc, #68]	@ (8005ce0 <HAL_GPIO_Init+0x324>)
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	61fb      	str	r3, [r7, #28]
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	2b0f      	cmp	r3, #15
 8005ca8:	f67f ae96 	bls.w	80059d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005cac:	bf00      	nop
 8005cae:	bf00      	nop
 8005cb0:	3724      	adds	r7, #36	@ 0x24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	40013800 	.word	0x40013800
 8005cc4:	40020000 	.word	0x40020000
 8005cc8:	40020400 	.word	0x40020400
 8005ccc:	40020800 	.word	0x40020800
 8005cd0:	40020c00 	.word	0x40020c00
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	40021400 	.word	0x40021400
 8005cdc:	40021800 	.word	0x40021800
 8005ce0:	40013c00 	.word	0x40013c00

08005ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	460b      	mov	r3, r1
 8005cee:	807b      	strh	r3, [r7, #2]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005cf4:	787b      	ldrb	r3, [r7, #1]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cfa:	887a      	ldrh	r2, [r7, #2]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d00:	e003      	b.n	8005d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d02:	887b      	ldrh	r3, [r7, #2]
 8005d04:	041a      	lsls	r2, r3, #16
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	619a      	str	r2, [r3, #24]
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e12b      	b.n	8005f82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fe fd5c 	bl	80047fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2224      	movs	r2, #36	@ 0x24
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0201 	bic.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d7c:	f001 f932 	bl	8006fe4 <HAL_RCC_GetPCLK1Freq>
 8005d80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	4a81      	ldr	r2, [pc, #516]	@ (8005f8c <HAL_I2C_Init+0x274>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d807      	bhi.n	8005d9c <HAL_I2C_Init+0x84>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4a80      	ldr	r2, [pc, #512]	@ (8005f90 <HAL_I2C_Init+0x278>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	bf94      	ite	ls
 8005d94:	2301      	movls	r3, #1
 8005d96:	2300      	movhi	r3, #0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	e006      	b.n	8005daa <HAL_I2C_Init+0x92>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4a7d      	ldr	r2, [pc, #500]	@ (8005f94 <HAL_I2C_Init+0x27c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	bf94      	ite	ls
 8005da4:	2301      	movls	r3, #1
 8005da6:	2300      	movhi	r3, #0
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e0e7      	b.n	8005f82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4a78      	ldr	r2, [pc, #480]	@ (8005f98 <HAL_I2C_Init+0x280>)
 8005db6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dba:	0c9b      	lsrs	r3, r3, #18
 8005dbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	4a6a      	ldr	r2, [pc, #424]	@ (8005f8c <HAL_I2C_Init+0x274>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d802      	bhi.n	8005dec <HAL_I2C_Init+0xd4>
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	3301      	adds	r3, #1
 8005dea:	e009      	b.n	8005e00 <HAL_I2C_Init+0xe8>
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005df2:	fb02 f303 	mul.w	r3, r2, r3
 8005df6:	4a69      	ldr	r2, [pc, #420]	@ (8005f9c <HAL_I2C_Init+0x284>)
 8005df8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfc:	099b      	lsrs	r3, r3, #6
 8005dfe:	3301      	adds	r3, #1
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6812      	ldr	r2, [r2, #0]
 8005e04:	430b      	orrs	r3, r1
 8005e06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005e12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	495c      	ldr	r1, [pc, #368]	@ (8005f8c <HAL_I2C_Init+0x274>)
 8005e1c:	428b      	cmp	r3, r1
 8005e1e:	d819      	bhi.n	8005e54 <HAL_I2C_Init+0x13c>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	1e59      	subs	r1, r3, #1
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e2e:	1c59      	adds	r1, r3, #1
 8005e30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005e34:	400b      	ands	r3, r1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <HAL_I2C_Init+0x138>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	1e59      	subs	r1, r3, #1
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e48:	3301      	adds	r3, #1
 8005e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e4e:	e051      	b.n	8005ef4 <HAL_I2C_Init+0x1dc>
 8005e50:	2304      	movs	r3, #4
 8005e52:	e04f      	b.n	8005ef4 <HAL_I2C_Init+0x1dc>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d111      	bne.n	8005e80 <HAL_I2C_Init+0x168>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	1e58      	subs	r0, r3, #1
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6859      	ldr	r1, [r3, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	440b      	add	r3, r1
 8005e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e6e:	3301      	adds	r3, #1
 8005e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	bf0c      	ite	eq
 8005e78:	2301      	moveq	r3, #1
 8005e7a:	2300      	movne	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	e012      	b.n	8005ea6 <HAL_I2C_Init+0x18e>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	1e58      	subs	r0, r3, #1
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6859      	ldr	r1, [r3, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	440b      	add	r3, r1
 8005e8e:	0099      	lsls	r1, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e96:	3301      	adds	r3, #1
 8005e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	bf0c      	ite	eq
 8005ea0:	2301      	moveq	r3, #1
 8005ea2:	2300      	movne	r3, #0
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <HAL_I2C_Init+0x196>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e022      	b.n	8005ef4 <HAL_I2C_Init+0x1dc>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10e      	bne.n	8005ed4 <HAL_I2C_Init+0x1bc>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	1e58      	subs	r0, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6859      	ldr	r1, [r3, #4]
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	440b      	add	r3, r1
 8005ec4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ec8:	3301      	adds	r3, #1
 8005eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ece:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ed2:	e00f      	b.n	8005ef4 <HAL_I2C_Init+0x1dc>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	1e58      	subs	r0, r3, #1
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6859      	ldr	r1, [r3, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	0099      	lsls	r1, r3, #2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eea:	3301      	adds	r3, #1
 8005eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	6809      	ldr	r1, [r1, #0]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69da      	ldr	r2, [r3, #28]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005f22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6911      	ldr	r1, [r2, #16]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	68d2      	ldr	r2, [r2, #12]
 8005f2e:	4311      	orrs	r1, r2
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	430b      	orrs	r3, r1
 8005f36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695a      	ldr	r2, [r3, #20]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	000186a0 	.word	0x000186a0
 8005f90:	001e847f 	.word	0x001e847f
 8005f94:	003d08ff 	.word	0x003d08ff
 8005f98:	431bde83 	.word	0x431bde83
 8005f9c:	10624dd3 	.word	0x10624dd3

08005fa0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	4608      	mov	r0, r1
 8005faa:	4611      	mov	r1, r2
 8005fac:	461a      	mov	r2, r3
 8005fae:	4603      	mov	r3, r0
 8005fb0:	817b      	strh	r3, [r7, #10]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	813b      	strh	r3, [r7, #8]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fba:	f7fe ffdf 	bl	8004f7c <HAL_GetTick>
 8005fbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	f040 80d9 	bne.w	8006180 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	2319      	movs	r3, #25
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	496d      	ldr	r1, [pc, #436]	@ (800618c <HAL_I2C_Mem_Write+0x1ec>)
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 fc8b 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e0cc      	b.n	8006182 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_I2C_Mem_Write+0x56>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	e0c5      	b.n	8006182 <HAL_I2C_Mem_Write+0x1e2>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b01      	cmp	r3, #1
 800600a:	d007      	beq.n	800601c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800602a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2221      	movs	r2, #33	@ 0x21
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2240      	movs	r2, #64	@ 0x40
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a3a      	ldr	r2, [r7, #32]
 8006046:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800604c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4a4d      	ldr	r2, [pc, #308]	@ (8006190 <HAL_I2C_Mem_Write+0x1f0>)
 800605c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800605e:	88f8      	ldrh	r0, [r7, #6]
 8006060:	893a      	ldrh	r2, [r7, #8]
 8006062:	8979      	ldrh	r1, [r7, #10]
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	9301      	str	r3, [sp, #4]
 8006068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	4603      	mov	r3, r0
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fac2 	bl	80065f8 <I2C_RequestMemoryWrite>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d052      	beq.n	8006120 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e081      	b.n	8006182 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 fd50 	bl	8006b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00d      	beq.n	80060aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006092:	2b04      	cmp	r3, #4
 8006094:	d107      	bne.n	80060a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e06b      	b.n	8006182 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ae:	781a      	ldrb	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b04      	cmp	r3, #4
 80060e6:	d11b      	bne.n	8006120 <HAL_I2C_Mem_Write+0x180>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d017      	beq.n	8006120 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f4:	781a      	ldrb	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1aa      	bne.n	800607e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 fd43 	bl	8006bb8 <I2C_WaitOnBTFFlagUntilTimeout>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00d      	beq.n	8006154 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613c:	2b04      	cmp	r3, #4
 800613e:	d107      	bne.n	8006150 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800614e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e016      	b.n	8006182 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800617c:	2300      	movs	r3, #0
 800617e:	e000      	b.n	8006182 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006180:	2302      	movs	r3, #2
  }
}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	00100002 	.word	0x00100002
 8006190:	ffff0000 	.word	0xffff0000

08006194 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08c      	sub	sp, #48	@ 0x30
 8006198:	af02      	add	r7, sp, #8
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	4608      	mov	r0, r1
 800619e:	4611      	mov	r1, r2
 80061a0:	461a      	mov	r2, r3
 80061a2:	4603      	mov	r3, r0
 80061a4:	817b      	strh	r3, [r7, #10]
 80061a6:	460b      	mov	r3, r1
 80061a8:	813b      	strh	r3, [r7, #8]
 80061aa:	4613      	mov	r3, r2
 80061ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061ae:	f7fe fee5 	bl	8004f7c <HAL_GetTick>
 80061b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b20      	cmp	r3, #32
 80061be:	f040 8214 	bne.w	80065ea <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	2319      	movs	r3, #25
 80061c8:	2201      	movs	r2, #1
 80061ca:	497b      	ldr	r1, [pc, #492]	@ (80063b8 <HAL_I2C_Mem_Read+0x224>)
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 fb91 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80061d8:	2302      	movs	r3, #2
 80061da:	e207      	b.n	80065ec <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d101      	bne.n	80061ea <HAL_I2C_Mem_Read+0x56>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e200      	b.n	80065ec <HAL_I2C_Mem_Read+0x458>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d007      	beq.n	8006210 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800621e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2222      	movs	r2, #34	@ 0x22
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2240      	movs	r2, #64	@ 0x40
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800623a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006240:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4a5b      	ldr	r2, [pc, #364]	@ (80063bc <HAL_I2C_Mem_Read+0x228>)
 8006250:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006252:	88f8      	ldrh	r0, [r7, #6]
 8006254:	893a      	ldrh	r2, [r7, #8]
 8006256:	8979      	ldrh	r1, [r7, #10]
 8006258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	4603      	mov	r3, r0
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f000 fa5e 	bl	8006724 <I2C_RequestMemoryRead>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e1bc      	b.n	80065ec <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006276:	2b00      	cmp	r3, #0
 8006278:	d113      	bne.n	80062a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800627a:	2300      	movs	r3, #0
 800627c:	623b      	str	r3, [r7, #32]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	623b      	str	r3, [r7, #32]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	623b      	str	r3, [r7, #32]
 800628e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	e190      	b.n	80065c4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d11b      	bne.n	80062e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ba:	2300      	movs	r3, #0
 80062bc:	61fb      	str	r3, [r7, #28]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	61fb      	str	r3, [r7, #28]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	61fb      	str	r3, [r7, #28]
 80062ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	e170      	b.n	80065c4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d11b      	bne.n	8006322 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006308:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800630a:	2300      	movs	r3, #0
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	61bb      	str	r3, [r7, #24]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	61bb      	str	r3, [r7, #24]
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	e150      	b.n	80065c4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	617b      	str	r3, [r7, #20]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006338:	e144      	b.n	80065c4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800633e:	2b03      	cmp	r3, #3
 8006340:	f200 80f1 	bhi.w	8006526 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006348:	2b01      	cmp	r3, #1
 800634a:	d123      	bne.n	8006394 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800634c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800634e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 fc79 	bl	8006c48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e145      	b.n	80065ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691a      	ldr	r2, [r3, #16]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800637c:	3b01      	subs	r3, #1
 800637e:	b29a      	uxth	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006392:	e117      	b.n	80065c4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006398:	2b02      	cmp	r3, #2
 800639a:	d14e      	bne.n	800643a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800639c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a2:	2200      	movs	r2, #0
 80063a4:	4906      	ldr	r1, [pc, #24]	@ (80063c0 <HAL_I2C_Mem_Read+0x22c>)
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 faa4 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d008      	beq.n	80063c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e11a      	b.n	80065ec <HAL_I2C_Mem_Read+0x458>
 80063b6:	bf00      	nop
 80063b8:	00100002 	.word	0x00100002
 80063bc:	ffff0000 	.word	0xffff0000
 80063c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691a      	ldr	r2, [r3, #16]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006422:	3b01      	subs	r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800642e:	b29b      	uxth	r3, r3
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006438:	e0c4      	b.n	80065c4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800643a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006440:	2200      	movs	r2, #0
 8006442:	496c      	ldr	r1, [pc, #432]	@ (80065f4 <HAL_I2C_Mem_Read+0x460>)
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 fa55 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e0cb      	b.n	80065ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006462:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691a      	ldr	r2, [r3, #16]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649c:	2200      	movs	r2, #0
 800649e:	4955      	ldr	r1, [pc, #340]	@ (80065f4 <HAL_I2C_Mem_Read+0x460>)
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 fa27 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e09d      	b.n	80065ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691a      	ldr	r2, [r3, #16]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	691a      	ldr	r2, [r3, #16]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fc:	b2d2      	uxtb	r2, r2
 80064fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006524:	e04e      	b.n	80065c4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006528:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 fb8c 	bl	8006c48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e058      	b.n	80065ec <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	691a      	ldr	r2, [r3, #16]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006556:	3b01      	subs	r3, #1
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006562:	b29b      	uxth	r3, r3
 8006564:	3b01      	subs	r3, #1
 8006566:	b29a      	uxth	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b04      	cmp	r3, #4
 8006578:	d124      	bne.n	80065c4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800657e:	2b03      	cmp	r3, #3
 8006580:	d107      	bne.n	8006592 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006590:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659c:	b2d2      	uxtb	r2, r2
 800659e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ae:	3b01      	subs	r3, #1
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f47f aeb6 	bne.w	800633a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	e000      	b.n	80065ec <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80065ea:	2302      	movs	r3, #2
  }
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3728      	adds	r7, #40	@ 0x28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	00010004 	.word	0x00010004

080065f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	4608      	mov	r0, r1
 8006602:	4611      	mov	r1, r2
 8006604:	461a      	mov	r2, r3
 8006606:	4603      	mov	r3, r0
 8006608:	817b      	strh	r3, [r7, #10]
 800660a:	460b      	mov	r3, r1
 800660c:	813b      	strh	r3, [r7, #8]
 800660e:	4613      	mov	r3, r2
 8006610:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006620:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	2200      	movs	r2, #0
 800662a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 f960 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00d      	beq.n	8006656 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006648:	d103      	bne.n	8006652 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006650:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e05f      	b.n	8006716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006656:	897b      	ldrh	r3, [r7, #10]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	461a      	mov	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006664:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	6a3a      	ldr	r2, [r7, #32]
 800666a:	492d      	ldr	r1, [pc, #180]	@ (8006720 <I2C_RequestMemoryWrite+0x128>)
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 f9bb 	bl	80069e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e04c      	b.n	8006716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006694:	6a39      	ldr	r1, [r7, #32]
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 fa46 	bl	8006b28 <I2C_WaitOnTXEFlagUntilTimeout>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00d      	beq.n	80066be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	d107      	bne.n	80066ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e02b      	b.n	8006716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d105      	bne.n	80066d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066c4:	893b      	ldrh	r3, [r7, #8]
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	611a      	str	r2, [r3, #16]
 80066ce:	e021      	b.n	8006714 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066d0:	893b      	ldrh	r3, [r7, #8]
 80066d2:	0a1b      	lsrs	r3, r3, #8
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066e0:	6a39      	ldr	r1, [r7, #32]
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 fa20 	bl	8006b28 <I2C_WaitOnTXEFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00d      	beq.n	800670a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	d107      	bne.n	8006706 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006704:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e005      	b.n	8006716 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800670a:	893b      	ldrh	r3, [r7, #8]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	00010002 	.word	0x00010002

08006724 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af02      	add	r7, sp, #8
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	4608      	mov	r0, r1
 800672e:	4611      	mov	r1, r2
 8006730:	461a      	mov	r2, r3
 8006732:	4603      	mov	r3, r0
 8006734:	817b      	strh	r3, [r7, #10]
 8006736:	460b      	mov	r3, r1
 8006738:	813b      	strh	r3, [r7, #8]
 800673a:	4613      	mov	r3, r2
 800673c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800674c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800675c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	2200      	movs	r2, #0
 8006766:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 f8c2 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00d      	beq.n	8006792 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006780:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006784:	d103      	bne.n	800678e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800678c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e0aa      	b.n	80068e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006792:	897b      	ldrh	r3, [r7, #10]
 8006794:	b2db      	uxtb	r3, r3
 8006796:	461a      	mov	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80067a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a4:	6a3a      	ldr	r2, [r7, #32]
 80067a6:	4952      	ldr	r1, [pc, #328]	@ (80068f0 <I2C_RequestMemoryRead+0x1cc>)
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 f91d 	bl	80069e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e097      	b.n	80068e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067b8:	2300      	movs	r3, #0
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	617b      	str	r3, [r7, #20]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d0:	6a39      	ldr	r1, [r7, #32]
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f9a8 	bl	8006b28 <I2C_WaitOnTXEFlagUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00d      	beq.n	80067fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d107      	bne.n	80067f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e076      	b.n	80068e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067fa:	88fb      	ldrh	r3, [r7, #6]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d105      	bne.n	800680c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006800:	893b      	ldrh	r3, [r7, #8]
 8006802:	b2da      	uxtb	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	611a      	str	r2, [r3, #16]
 800680a:	e021      	b.n	8006850 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800680c:	893b      	ldrh	r3, [r7, #8]
 800680e:	0a1b      	lsrs	r3, r3, #8
 8006810:	b29b      	uxth	r3, r3
 8006812:	b2da      	uxtb	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800681a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800681c:	6a39      	ldr	r1, [r7, #32]
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 f982 	bl	8006b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00d      	beq.n	8006846 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682e:	2b04      	cmp	r3, #4
 8006830:	d107      	bne.n	8006842 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006840:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e050      	b.n	80068e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006846:	893b      	ldrh	r3, [r7, #8]
 8006848:	b2da      	uxtb	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006852:	6a39      	ldr	r1, [r7, #32]
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f967 	bl	8006b28 <I2C_WaitOnTXEFlagUntilTimeout>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00d      	beq.n	800687c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006864:	2b04      	cmp	r3, #4
 8006866:	d107      	bne.n	8006878 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006876:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e035      	b.n	80068e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800688a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800688c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	2200      	movs	r2, #0
 8006894:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f82b 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00d      	beq.n	80068c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068b2:	d103      	bne.n	80068bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e013      	b.n	80068e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80068c0:	897b      	ldrh	r3, [r7, #10]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	f043 0301 	orr.w	r3, r3, #1
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d2:	6a3a      	ldr	r2, [r7, #32]
 80068d4:	4906      	ldr	r1, [pc, #24]	@ (80068f0 <I2C_RequestMemoryRead+0x1cc>)
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 f886 	bl	80069e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e000      	b.n	80068e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	00010002 	.word	0x00010002

080068f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	603b      	str	r3, [r7, #0]
 8006900:	4613      	mov	r3, r2
 8006902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006904:	e048      	b.n	8006998 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800690c:	d044      	beq.n	8006998 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690e:	f7fe fb35 	bl	8004f7c <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	429a      	cmp	r2, r3
 800691c:	d302      	bcc.n	8006924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d139      	bne.n	8006998 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	0c1b      	lsrs	r3, r3, #16
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b01      	cmp	r3, #1
 800692c:	d10d      	bne.n	800694a <I2C_WaitOnFlagUntilTimeout+0x56>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	43da      	mvns	r2, r3
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	4013      	ands	r3, r2
 800693a:	b29b      	uxth	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	bf0c      	ite	eq
 8006940:	2301      	moveq	r3, #1
 8006942:	2300      	movne	r3, #0
 8006944:	b2db      	uxtb	r3, r3
 8006946:	461a      	mov	r2, r3
 8006948:	e00c      	b.n	8006964 <I2C_WaitOnFlagUntilTimeout+0x70>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	43da      	mvns	r2, r3
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	4013      	ands	r3, r2
 8006956:	b29b      	uxth	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	bf0c      	ite	eq
 800695c:	2301      	moveq	r3, #1
 800695e:	2300      	movne	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	461a      	mov	r2, r3
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	429a      	cmp	r2, r3
 8006968:	d116      	bne.n	8006998 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2220      	movs	r2, #32
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006984:	f043 0220 	orr.w	r2, r3, #32
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e023      	b.n	80069e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	0c1b      	lsrs	r3, r3, #16
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d10d      	bne.n	80069be <I2C_WaitOnFlagUntilTimeout+0xca>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	43da      	mvns	r2, r3
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	4013      	ands	r3, r2
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bf0c      	ite	eq
 80069b4:	2301      	moveq	r3, #1
 80069b6:	2300      	movne	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	461a      	mov	r2, r3
 80069bc:	e00c      	b.n	80069d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	43da      	mvns	r2, r3
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	4013      	ands	r3, r2
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	bf0c      	ite	eq
 80069d0:	2301      	moveq	r3, #1
 80069d2:	2300      	movne	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	461a      	mov	r2, r3
 80069d8:	79fb      	ldrb	r3, [r7, #7]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d093      	beq.n	8006906 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069f6:	e071      	b.n	8006adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a06:	d123      	bne.n	8006a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3c:	f043 0204 	orr.w	r2, r3, #4
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e067      	b.n	8006b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a56:	d041      	beq.n	8006adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a58:	f7fe fa90 	bl	8004f7c <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d302      	bcc.n	8006a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d136      	bne.n	8006adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	0c1b      	lsrs	r3, r3, #16
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d10c      	bne.n	8006a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	43da      	mvns	r2, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4013      	ands	r3, r2
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	bf14      	ite	ne
 8006a8a:	2301      	movne	r3, #1
 8006a8c:	2300      	moveq	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	e00b      	b.n	8006aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	43da      	mvns	r2, r3
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	bf14      	ite	ne
 8006aa4:	2301      	movne	r3, #1
 8006aa6:	2300      	moveq	r3, #0
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d016      	beq.n	8006adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac8:	f043 0220 	orr.w	r2, r3, #32
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e021      	b.n	8006b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	0c1b      	lsrs	r3, r3, #16
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d10c      	bne.n	8006b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	43da      	mvns	r2, r3
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	4013      	ands	r3, r2
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	bf14      	ite	ne
 8006af8:	2301      	movne	r3, #1
 8006afa:	2300      	moveq	r3, #0
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	e00b      	b.n	8006b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	43da      	mvns	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	bf14      	ite	ne
 8006b12:	2301      	movne	r3, #1
 8006b14:	2300      	moveq	r3, #0
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f47f af6d 	bne.w	80069f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b34:	e034      	b.n	8006ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 f8e3 	bl	8006d02 <I2C_IsAcknowledgeFailed>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e034      	b.n	8006bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b4c:	d028      	beq.n	8006ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b4e:	f7fe fa15 	bl	8004f7c <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d302      	bcc.n	8006b64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d11d      	bne.n	8006ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b6e:	2b80      	cmp	r3, #128	@ 0x80
 8006b70:	d016      	beq.n	8006ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8c:	f043 0220 	orr.w	r2, r3, #32
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e007      	b.n	8006bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006baa:	2b80      	cmp	r3, #128	@ 0x80
 8006bac:	d1c3      	bne.n	8006b36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bc4:	e034      	b.n	8006c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 f89b 	bl	8006d02 <I2C_IsAcknowledgeFailed>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e034      	b.n	8006c40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bdc:	d028      	beq.n	8006c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bde:	f7fe f9cd 	bl	8004f7c <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d302      	bcc.n	8006bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d11d      	bne.n	8006c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	f003 0304 	and.w	r3, r3, #4
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d016      	beq.n	8006c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1c:	f043 0220 	orr.w	r2, r3, #32
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e007      	b.n	8006c40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d1c3      	bne.n	8006bc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c54:	e049      	b.n	8006cea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	f003 0310 	and.w	r3, r3, #16
 8006c60:	2b10      	cmp	r3, #16
 8006c62:	d119      	bne.n	8006c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f06f 0210 	mvn.w	r2, #16
 8006c6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e030      	b.n	8006cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c98:	f7fe f970 	bl	8004f7c <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d302      	bcc.n	8006cae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d11d      	bne.n	8006cea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb8:	2b40      	cmp	r3, #64	@ 0x40
 8006cba:	d016      	beq.n	8006cea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd6:	f043 0220 	orr.w	r2, r3, #32
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e007      	b.n	8006cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cf4:	2b40      	cmp	r3, #64	@ 0x40
 8006cf6:	d1ae      	bne.n	8006c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d18:	d11b      	bne.n	8006d52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3e:	f043 0204 	orr.w	r2, r3, #4
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	603b      	str	r3, [r7, #0]
 8006d6e:	4b20      	ldr	r3, [pc, #128]	@ (8006df0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d72:	4a1f      	ldr	r2, [pc, #124]	@ (8006df0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8006df0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006d86:	4b1b      	ldr	r3, [pc, #108]	@ (8006df4 <HAL_PWREx_EnableOverDrive+0x94>)
 8006d88:	2201      	movs	r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d8c:	f7fe f8f6 	bl	8004f7c <HAL_GetTick>
 8006d90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d92:	e009      	b.n	8006da8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d94:	f7fe f8f2 	bl	8004f7c <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006da2:	d901      	bls.n	8006da8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e01f      	b.n	8006de8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006da8:	4b13      	ldr	r3, [pc, #76]	@ (8006df8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006db4:	d1ee      	bne.n	8006d94 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006db6:	4b11      	ldr	r3, [pc, #68]	@ (8006dfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006db8:	2201      	movs	r2, #1
 8006dba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006dbc:	f7fe f8de 	bl	8004f7c <HAL_GetTick>
 8006dc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006dc2:	e009      	b.n	8006dd8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006dc4:	f7fe f8da 	bl	8004f7c <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006dd2:	d901      	bls.n	8006dd8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e007      	b.n	8006de8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006dd8:	4b07      	ldr	r3, [pc, #28]	@ (8006df8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006de0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006de4:	d1ee      	bne.n	8006dc4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	40023800 	.word	0x40023800
 8006df4:	420e0040 	.word	0x420e0040
 8006df8:	40007000 	.word	0x40007000
 8006dfc:	420e0044 	.word	0x420e0044

08006e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e0cc      	b.n	8006fae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e14:	4b68      	ldr	r3, [pc, #416]	@ (8006fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 030f 	and.w	r3, r3, #15
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d90c      	bls.n	8006e3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e22:	4b65      	ldr	r3, [pc, #404]	@ (8006fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e2a:	4b63      	ldr	r3, [pc, #396]	@ (8006fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 030f 	and.w	r3, r3, #15
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d001      	beq.n	8006e3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e0b8      	b.n	8006fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0302 	and.w	r3, r3, #2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d020      	beq.n	8006e8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0304 	and.w	r3, r3, #4
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e54:	4b59      	ldr	r3, [pc, #356]	@ (8006fbc <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	4a58      	ldr	r2, [pc, #352]	@ (8006fbc <HAL_RCC_ClockConfig+0x1bc>)
 8006e5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006e5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0308 	and.w	r3, r3, #8
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d005      	beq.n	8006e78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e6c:	4b53      	ldr	r3, [pc, #332]	@ (8006fbc <HAL_RCC_ClockConfig+0x1bc>)
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	4a52      	ldr	r2, [pc, #328]	@ (8006fbc <HAL_RCC_ClockConfig+0x1bc>)
 8006e72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006e76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e78:	4b50      	ldr	r3, [pc, #320]	@ (8006fbc <HAL_RCC_ClockConfig+0x1bc>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	494d      	ldr	r1, [pc, #308]	@ (8006fbc <HAL_RCC_ClockConfig+0x1bc>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d044      	beq.n	8006f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d107      	bne.n	8006eae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e9e:	4b47      	ldr	r3, [pc, #284]	@ (8006fbc <HAL_RCC_ClockConfig+0x1bc>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d119      	bne.n	8006ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e07f      	b.n	8006fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d003      	beq.n	8006ebe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	d107      	bne.n	8006ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8006fbc <HAL_RCC_ClockConfig+0x1bc>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d109      	bne.n	8006ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e06f      	b.n	8006fae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ece:	4b3b      	ldr	r3, [pc, #236]	@ (8006fbc <HAL_RCC_ClockConfig+0x1bc>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e067      	b.n	8006fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ede:	4b37      	ldr	r3, [pc, #220]	@ (8006fbc <HAL_RCC_ClockConfig+0x1bc>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f023 0203 	bic.w	r2, r3, #3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	4934      	ldr	r1, [pc, #208]	@ (8006fbc <HAL_RCC_ClockConfig+0x1bc>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ef0:	f7fe f844 	bl	8004f7c <HAL_GetTick>
 8006ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ef6:	e00a      	b.n	8006f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ef8:	f7fe f840 	bl	8004f7c <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d901      	bls.n	8006f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e04f      	b.n	8006fae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8006fbc <HAL_RCC_ClockConfig+0x1bc>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f003 020c 	and.w	r2, r3, #12
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d1eb      	bne.n	8006ef8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f20:	4b25      	ldr	r3, [pc, #148]	@ (8006fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 030f 	and.w	r3, r3, #15
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d20c      	bcs.n	8006f48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f2e:	4b22      	ldr	r3, [pc, #136]	@ (8006fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f36:	4b20      	ldr	r3, [pc, #128]	@ (8006fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 030f 	and.w	r3, r3, #15
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d001      	beq.n	8006f48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e032      	b.n	8006fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d008      	beq.n	8006f66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f54:	4b19      	ldr	r3, [pc, #100]	@ (8006fbc <HAL_RCC_ClockConfig+0x1bc>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	4916      	ldr	r1, [pc, #88]	@ (8006fbc <HAL_RCC_ClockConfig+0x1bc>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0308 	and.w	r3, r3, #8
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d009      	beq.n	8006f86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f72:	4b12      	ldr	r3, [pc, #72]	@ (8006fbc <HAL_RCC_ClockConfig+0x1bc>)
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	490e      	ldr	r1, [pc, #56]	@ (8006fbc <HAL_RCC_ClockConfig+0x1bc>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f86:	f000 f855 	bl	8007034 <HAL_RCC_GetSysClockFreq>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006fbc <HAL_RCC_ClockConfig+0x1bc>)
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	091b      	lsrs	r3, r3, #4
 8006f92:	f003 030f 	and.w	r3, r3, #15
 8006f96:	490a      	ldr	r1, [pc, #40]	@ (8006fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f98:	5ccb      	ldrb	r3, [r1, r3]
 8006f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f9e:	4a09      	ldr	r2, [pc, #36]	@ (8006fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006fa2:	4b09      	ldr	r3, [pc, #36]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fd ffa4 	bl	8004ef4 <HAL_InitTick>

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40023c00 	.word	0x40023c00
 8006fbc:	40023800 	.word	0x40023800
 8006fc0:	0800b350 	.word	0x0800b350
 8006fc4:	20000000 	.word	0x20000000
 8006fc8:	20000004 	.word	0x20000004

08006fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fd0:	4b03      	ldr	r3, [pc, #12]	@ (8006fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	20000000 	.word	0x20000000

08006fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006fe8:	f7ff fff0 	bl	8006fcc <HAL_RCC_GetHCLKFreq>
 8006fec:	4602      	mov	r2, r0
 8006fee:	4b05      	ldr	r3, [pc, #20]	@ (8007004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	0a9b      	lsrs	r3, r3, #10
 8006ff4:	f003 0307 	and.w	r3, r3, #7
 8006ff8:	4903      	ldr	r1, [pc, #12]	@ (8007008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ffa:	5ccb      	ldrb	r3, [r1, r3]
 8006ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007000:	4618      	mov	r0, r3
 8007002:	bd80      	pop	{r7, pc}
 8007004:	40023800 	.word	0x40023800
 8007008:	0800b360 	.word	0x0800b360

0800700c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007010:	f7ff ffdc 	bl	8006fcc <HAL_RCC_GetHCLKFreq>
 8007014:	4602      	mov	r2, r0
 8007016:	4b05      	ldr	r3, [pc, #20]	@ (800702c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	0b5b      	lsrs	r3, r3, #13
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	4903      	ldr	r1, [pc, #12]	@ (8007030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007022:	5ccb      	ldrb	r3, [r1, r3]
 8007024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007028:	4618      	mov	r0, r3
 800702a:	bd80      	pop	{r7, pc}
 800702c:	40023800 	.word	0x40023800
 8007030:	0800b360 	.word	0x0800b360

08007034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007038:	b0ae      	sub	sp, #184	@ 0xb8
 800703a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800705a:	4bcb      	ldr	r3, [pc, #812]	@ (8007388 <HAL_RCC_GetSysClockFreq+0x354>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f003 030c 	and.w	r3, r3, #12
 8007062:	2b0c      	cmp	r3, #12
 8007064:	f200 8206 	bhi.w	8007474 <HAL_RCC_GetSysClockFreq+0x440>
 8007068:	a201      	add	r2, pc, #4	@ (adr r2, 8007070 <HAL_RCC_GetSysClockFreq+0x3c>)
 800706a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706e:	bf00      	nop
 8007070:	080070a5 	.word	0x080070a5
 8007074:	08007475 	.word	0x08007475
 8007078:	08007475 	.word	0x08007475
 800707c:	08007475 	.word	0x08007475
 8007080:	080070ad 	.word	0x080070ad
 8007084:	08007475 	.word	0x08007475
 8007088:	08007475 	.word	0x08007475
 800708c:	08007475 	.word	0x08007475
 8007090:	080070b5 	.word	0x080070b5
 8007094:	08007475 	.word	0x08007475
 8007098:	08007475 	.word	0x08007475
 800709c:	08007475 	.word	0x08007475
 80070a0:	080072a5 	.word	0x080072a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070a4:	4bb9      	ldr	r3, [pc, #740]	@ (800738c <HAL_RCC_GetSysClockFreq+0x358>)
 80070a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80070aa:	e1e7      	b.n	800747c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070ac:	4bb8      	ldr	r3, [pc, #736]	@ (8007390 <HAL_RCC_GetSysClockFreq+0x35c>)
 80070ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80070b2:	e1e3      	b.n	800747c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070b4:	4bb4      	ldr	r3, [pc, #720]	@ (8007388 <HAL_RCC_GetSysClockFreq+0x354>)
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070c0:	4bb1      	ldr	r3, [pc, #708]	@ (8007388 <HAL_RCC_GetSysClockFreq+0x354>)
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d071      	beq.n	80071b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070cc:	4bae      	ldr	r3, [pc, #696]	@ (8007388 <HAL_RCC_GetSysClockFreq+0x354>)
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	099b      	lsrs	r3, r3, #6
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070d8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80070dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070e8:	2300      	movs	r3, #0
 80070ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80070ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80070f2:	4622      	mov	r2, r4
 80070f4:	462b      	mov	r3, r5
 80070f6:	f04f 0000 	mov.w	r0, #0
 80070fa:	f04f 0100 	mov.w	r1, #0
 80070fe:	0159      	lsls	r1, r3, #5
 8007100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007104:	0150      	lsls	r0, r2, #5
 8007106:	4602      	mov	r2, r0
 8007108:	460b      	mov	r3, r1
 800710a:	4621      	mov	r1, r4
 800710c:	1a51      	subs	r1, r2, r1
 800710e:	6439      	str	r1, [r7, #64]	@ 0x40
 8007110:	4629      	mov	r1, r5
 8007112:	eb63 0301 	sbc.w	r3, r3, r1
 8007116:	647b      	str	r3, [r7, #68]	@ 0x44
 8007118:	f04f 0200 	mov.w	r2, #0
 800711c:	f04f 0300 	mov.w	r3, #0
 8007120:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007124:	4649      	mov	r1, r9
 8007126:	018b      	lsls	r3, r1, #6
 8007128:	4641      	mov	r1, r8
 800712a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800712e:	4641      	mov	r1, r8
 8007130:	018a      	lsls	r2, r1, #6
 8007132:	4641      	mov	r1, r8
 8007134:	1a51      	subs	r1, r2, r1
 8007136:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007138:	4649      	mov	r1, r9
 800713a:	eb63 0301 	sbc.w	r3, r3, r1
 800713e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007140:	f04f 0200 	mov.w	r2, #0
 8007144:	f04f 0300 	mov.w	r3, #0
 8007148:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800714c:	4649      	mov	r1, r9
 800714e:	00cb      	lsls	r3, r1, #3
 8007150:	4641      	mov	r1, r8
 8007152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007156:	4641      	mov	r1, r8
 8007158:	00ca      	lsls	r2, r1, #3
 800715a:	4610      	mov	r0, r2
 800715c:	4619      	mov	r1, r3
 800715e:	4603      	mov	r3, r0
 8007160:	4622      	mov	r2, r4
 8007162:	189b      	adds	r3, r3, r2
 8007164:	633b      	str	r3, [r7, #48]	@ 0x30
 8007166:	462b      	mov	r3, r5
 8007168:	460a      	mov	r2, r1
 800716a:	eb42 0303 	adc.w	r3, r2, r3
 800716e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007170:	f04f 0200 	mov.w	r2, #0
 8007174:	f04f 0300 	mov.w	r3, #0
 8007178:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800717c:	4629      	mov	r1, r5
 800717e:	024b      	lsls	r3, r1, #9
 8007180:	4621      	mov	r1, r4
 8007182:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007186:	4621      	mov	r1, r4
 8007188:	024a      	lsls	r2, r1, #9
 800718a:	4610      	mov	r0, r2
 800718c:	4619      	mov	r1, r3
 800718e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007192:	2200      	movs	r2, #0
 8007194:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007198:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800719c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80071a0:	f7f9 fd08 	bl	8000bb4 <__aeabi_uldivmod>
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	4613      	mov	r3, r2
 80071aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071ae:	e067      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071b0:	4b75      	ldr	r3, [pc, #468]	@ (8007388 <HAL_RCC_GetSysClockFreq+0x354>)
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	099b      	lsrs	r3, r3, #6
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80071bc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80071c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80071c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071ca:	2300      	movs	r3, #0
 80071cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80071ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80071d2:	4622      	mov	r2, r4
 80071d4:	462b      	mov	r3, r5
 80071d6:	f04f 0000 	mov.w	r0, #0
 80071da:	f04f 0100 	mov.w	r1, #0
 80071de:	0159      	lsls	r1, r3, #5
 80071e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071e4:	0150      	lsls	r0, r2, #5
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	4621      	mov	r1, r4
 80071ec:	1a51      	subs	r1, r2, r1
 80071ee:	62b9      	str	r1, [r7, #40]	@ 0x28
 80071f0:	4629      	mov	r1, r5
 80071f2:	eb63 0301 	sbc.w	r3, r3, r1
 80071f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071f8:	f04f 0200 	mov.w	r2, #0
 80071fc:	f04f 0300 	mov.w	r3, #0
 8007200:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007204:	4649      	mov	r1, r9
 8007206:	018b      	lsls	r3, r1, #6
 8007208:	4641      	mov	r1, r8
 800720a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800720e:	4641      	mov	r1, r8
 8007210:	018a      	lsls	r2, r1, #6
 8007212:	4641      	mov	r1, r8
 8007214:	ebb2 0a01 	subs.w	sl, r2, r1
 8007218:	4649      	mov	r1, r9
 800721a:	eb63 0b01 	sbc.w	fp, r3, r1
 800721e:	f04f 0200 	mov.w	r2, #0
 8007222:	f04f 0300 	mov.w	r3, #0
 8007226:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800722a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800722e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007232:	4692      	mov	sl, r2
 8007234:	469b      	mov	fp, r3
 8007236:	4623      	mov	r3, r4
 8007238:	eb1a 0303 	adds.w	r3, sl, r3
 800723c:	623b      	str	r3, [r7, #32]
 800723e:	462b      	mov	r3, r5
 8007240:	eb4b 0303 	adc.w	r3, fp, r3
 8007244:	627b      	str	r3, [r7, #36]	@ 0x24
 8007246:	f04f 0200 	mov.w	r2, #0
 800724a:	f04f 0300 	mov.w	r3, #0
 800724e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007252:	4629      	mov	r1, r5
 8007254:	028b      	lsls	r3, r1, #10
 8007256:	4621      	mov	r1, r4
 8007258:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800725c:	4621      	mov	r1, r4
 800725e:	028a      	lsls	r2, r1, #10
 8007260:	4610      	mov	r0, r2
 8007262:	4619      	mov	r1, r3
 8007264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007268:	2200      	movs	r2, #0
 800726a:	673b      	str	r3, [r7, #112]	@ 0x70
 800726c:	677a      	str	r2, [r7, #116]	@ 0x74
 800726e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007272:	f7f9 fc9f 	bl	8000bb4 <__aeabi_uldivmod>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	4613      	mov	r3, r2
 800727c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007280:	4b41      	ldr	r3, [pc, #260]	@ (8007388 <HAL_RCC_GetSysClockFreq+0x354>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	0c1b      	lsrs	r3, r3, #16
 8007286:	f003 0303 	and.w	r3, r3, #3
 800728a:	3301      	adds	r3, #1
 800728c:	005b      	lsls	r3, r3, #1
 800728e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8007292:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007296:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800729a:	fbb2 f3f3 	udiv	r3, r2, r3
 800729e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80072a2:	e0eb      	b.n	800747c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072a4:	4b38      	ldr	r3, [pc, #224]	@ (8007388 <HAL_RCC_GetSysClockFreq+0x354>)
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072b0:	4b35      	ldr	r3, [pc, #212]	@ (8007388 <HAL_RCC_GetSysClockFreq+0x354>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d06b      	beq.n	8007394 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072bc:	4b32      	ldr	r3, [pc, #200]	@ (8007388 <HAL_RCC_GetSysClockFreq+0x354>)
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	099b      	lsrs	r3, r3, #6
 80072c2:	2200      	movs	r2, #0
 80072c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80072c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80072d0:	2300      	movs	r3, #0
 80072d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80072d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80072d8:	4622      	mov	r2, r4
 80072da:	462b      	mov	r3, r5
 80072dc:	f04f 0000 	mov.w	r0, #0
 80072e0:	f04f 0100 	mov.w	r1, #0
 80072e4:	0159      	lsls	r1, r3, #5
 80072e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072ea:	0150      	lsls	r0, r2, #5
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4621      	mov	r1, r4
 80072f2:	1a51      	subs	r1, r2, r1
 80072f4:	61b9      	str	r1, [r7, #24]
 80072f6:	4629      	mov	r1, r5
 80072f8:	eb63 0301 	sbc.w	r3, r3, r1
 80072fc:	61fb      	str	r3, [r7, #28]
 80072fe:	f04f 0200 	mov.w	r2, #0
 8007302:	f04f 0300 	mov.w	r3, #0
 8007306:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800730a:	4659      	mov	r1, fp
 800730c:	018b      	lsls	r3, r1, #6
 800730e:	4651      	mov	r1, sl
 8007310:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007314:	4651      	mov	r1, sl
 8007316:	018a      	lsls	r2, r1, #6
 8007318:	4651      	mov	r1, sl
 800731a:	ebb2 0801 	subs.w	r8, r2, r1
 800731e:	4659      	mov	r1, fp
 8007320:	eb63 0901 	sbc.w	r9, r3, r1
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	f04f 0300 	mov.w	r3, #0
 800732c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007330:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007334:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007338:	4690      	mov	r8, r2
 800733a:	4699      	mov	r9, r3
 800733c:	4623      	mov	r3, r4
 800733e:	eb18 0303 	adds.w	r3, r8, r3
 8007342:	613b      	str	r3, [r7, #16]
 8007344:	462b      	mov	r3, r5
 8007346:	eb49 0303 	adc.w	r3, r9, r3
 800734a:	617b      	str	r3, [r7, #20]
 800734c:	f04f 0200 	mov.w	r2, #0
 8007350:	f04f 0300 	mov.w	r3, #0
 8007354:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007358:	4629      	mov	r1, r5
 800735a:	024b      	lsls	r3, r1, #9
 800735c:	4621      	mov	r1, r4
 800735e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007362:	4621      	mov	r1, r4
 8007364:	024a      	lsls	r2, r1, #9
 8007366:	4610      	mov	r0, r2
 8007368:	4619      	mov	r1, r3
 800736a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800736e:	2200      	movs	r2, #0
 8007370:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007372:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007374:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007378:	f7f9 fc1c 	bl	8000bb4 <__aeabi_uldivmod>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	4613      	mov	r3, r2
 8007382:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007386:	e065      	b.n	8007454 <HAL_RCC_GetSysClockFreq+0x420>
 8007388:	40023800 	.word	0x40023800
 800738c:	00f42400 	.word	0x00f42400
 8007390:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007394:	4b3d      	ldr	r3, [pc, #244]	@ (800748c <HAL_RCC_GetSysClockFreq+0x458>)
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	099b      	lsrs	r3, r3, #6
 800739a:	2200      	movs	r2, #0
 800739c:	4618      	mov	r0, r3
 800739e:	4611      	mov	r1, r2
 80073a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80073a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80073a6:	2300      	movs	r3, #0
 80073a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80073aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80073ae:	4642      	mov	r2, r8
 80073b0:	464b      	mov	r3, r9
 80073b2:	f04f 0000 	mov.w	r0, #0
 80073b6:	f04f 0100 	mov.w	r1, #0
 80073ba:	0159      	lsls	r1, r3, #5
 80073bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073c0:	0150      	lsls	r0, r2, #5
 80073c2:	4602      	mov	r2, r0
 80073c4:	460b      	mov	r3, r1
 80073c6:	4641      	mov	r1, r8
 80073c8:	1a51      	subs	r1, r2, r1
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	4649      	mov	r1, r9
 80073ce:	eb63 0301 	sbc.w	r3, r3, r1
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	f04f 0200 	mov.w	r2, #0
 80073d8:	f04f 0300 	mov.w	r3, #0
 80073dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80073e0:	4659      	mov	r1, fp
 80073e2:	018b      	lsls	r3, r1, #6
 80073e4:	4651      	mov	r1, sl
 80073e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80073ea:	4651      	mov	r1, sl
 80073ec:	018a      	lsls	r2, r1, #6
 80073ee:	4651      	mov	r1, sl
 80073f0:	1a54      	subs	r4, r2, r1
 80073f2:	4659      	mov	r1, fp
 80073f4:	eb63 0501 	sbc.w	r5, r3, r1
 80073f8:	f04f 0200 	mov.w	r2, #0
 80073fc:	f04f 0300 	mov.w	r3, #0
 8007400:	00eb      	lsls	r3, r5, #3
 8007402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007406:	00e2      	lsls	r2, r4, #3
 8007408:	4614      	mov	r4, r2
 800740a:	461d      	mov	r5, r3
 800740c:	4643      	mov	r3, r8
 800740e:	18e3      	adds	r3, r4, r3
 8007410:	603b      	str	r3, [r7, #0]
 8007412:	464b      	mov	r3, r9
 8007414:	eb45 0303 	adc.w	r3, r5, r3
 8007418:	607b      	str	r3, [r7, #4]
 800741a:	f04f 0200 	mov.w	r2, #0
 800741e:	f04f 0300 	mov.w	r3, #0
 8007422:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007426:	4629      	mov	r1, r5
 8007428:	028b      	lsls	r3, r1, #10
 800742a:	4621      	mov	r1, r4
 800742c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007430:	4621      	mov	r1, r4
 8007432:	028a      	lsls	r2, r1, #10
 8007434:	4610      	mov	r0, r2
 8007436:	4619      	mov	r1, r3
 8007438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800743c:	2200      	movs	r2, #0
 800743e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007440:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007442:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007446:	f7f9 fbb5 	bl	8000bb4 <__aeabi_uldivmod>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	4613      	mov	r3, r2
 8007450:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007454:	4b0d      	ldr	r3, [pc, #52]	@ (800748c <HAL_RCC_GetSysClockFreq+0x458>)
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	0f1b      	lsrs	r3, r3, #28
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8007462:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007466:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800746a:	fbb2 f3f3 	udiv	r3, r2, r3
 800746e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007472:	e003      	b.n	800747c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007474:	4b06      	ldr	r3, [pc, #24]	@ (8007490 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007476:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800747a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800747c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007480:	4618      	mov	r0, r3
 8007482:	37b8      	adds	r7, #184	@ 0xb8
 8007484:	46bd      	mov	sp, r7
 8007486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800748a:	bf00      	nop
 800748c:	40023800 	.word	0x40023800
 8007490:	00f42400 	.word	0x00f42400

08007494 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e28d      	b.n	80079c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 8083 	beq.w	80075ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80074b4:	4b94      	ldr	r3, [pc, #592]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f003 030c 	and.w	r3, r3, #12
 80074bc:	2b04      	cmp	r3, #4
 80074be:	d019      	beq.n	80074f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80074c0:	4b91      	ldr	r3, [pc, #580]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80074c8:	2b08      	cmp	r3, #8
 80074ca:	d106      	bne.n	80074da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80074cc:	4b8e      	ldr	r3, [pc, #568]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074d8:	d00c      	beq.n	80074f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074da:	4b8b      	ldr	r3, [pc, #556]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80074e2:	2b0c      	cmp	r3, #12
 80074e4:	d112      	bne.n	800750c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074e6:	4b88      	ldr	r3, [pc, #544]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074f2:	d10b      	bne.n	800750c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074f4:	4b84      	ldr	r3, [pc, #528]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d05b      	beq.n	80075b8 <HAL_RCC_OscConfig+0x124>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d157      	bne.n	80075b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e25a      	b.n	80079c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007514:	d106      	bne.n	8007524 <HAL_RCC_OscConfig+0x90>
 8007516:	4b7c      	ldr	r3, [pc, #496]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a7b      	ldr	r2, [pc, #492]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 800751c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007520:	6013      	str	r3, [r2, #0]
 8007522:	e01d      	b.n	8007560 <HAL_RCC_OscConfig+0xcc>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800752c:	d10c      	bne.n	8007548 <HAL_RCC_OscConfig+0xb4>
 800752e:	4b76      	ldr	r3, [pc, #472]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a75      	ldr	r2, [pc, #468]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 8007534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	4b73      	ldr	r3, [pc, #460]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a72      	ldr	r2, [pc, #456]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 8007540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	e00b      	b.n	8007560 <HAL_RCC_OscConfig+0xcc>
 8007548:	4b6f      	ldr	r3, [pc, #444]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a6e      	ldr	r2, [pc, #440]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 800754e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	4b6c      	ldr	r3, [pc, #432]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a6b      	ldr	r2, [pc, #428]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 800755a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800755e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d013      	beq.n	8007590 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007568:	f7fd fd08 	bl	8004f7c <HAL_GetTick>
 800756c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800756e:	e008      	b.n	8007582 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007570:	f7fd fd04 	bl	8004f7c <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b64      	cmp	r3, #100	@ 0x64
 800757c:	d901      	bls.n	8007582 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e21f      	b.n	80079c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007582:	4b61      	ldr	r3, [pc, #388]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d0f0      	beq.n	8007570 <HAL_RCC_OscConfig+0xdc>
 800758e:	e014      	b.n	80075ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007590:	f7fd fcf4 	bl	8004f7c <HAL_GetTick>
 8007594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007596:	e008      	b.n	80075aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007598:	f7fd fcf0 	bl	8004f7c <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b64      	cmp	r3, #100	@ 0x64
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e20b      	b.n	80079c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075aa:	4b57      	ldr	r3, [pc, #348]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1f0      	bne.n	8007598 <HAL_RCC_OscConfig+0x104>
 80075b6:	e000      	b.n	80075ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d06f      	beq.n	80076a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80075c6:	4b50      	ldr	r3, [pc, #320]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f003 030c 	and.w	r3, r3, #12
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d017      	beq.n	8007602 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80075d2:	4b4d      	ldr	r3, [pc, #308]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80075da:	2b08      	cmp	r3, #8
 80075dc:	d105      	bne.n	80075ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80075de:	4b4a      	ldr	r3, [pc, #296]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00b      	beq.n	8007602 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075ea:	4b47      	ldr	r3, [pc, #284]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80075f2:	2b0c      	cmp	r3, #12
 80075f4:	d11c      	bne.n	8007630 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075f6:	4b44      	ldr	r3, [pc, #272]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d116      	bne.n	8007630 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007602:	4b41      	ldr	r3, [pc, #260]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d005      	beq.n	800761a <HAL_RCC_OscConfig+0x186>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d001      	beq.n	800761a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e1d3      	b.n	80079c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800761a:	4b3b      	ldr	r3, [pc, #236]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	4937      	ldr	r1, [pc, #220]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 800762a:	4313      	orrs	r3, r2
 800762c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800762e:	e03a      	b.n	80076a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d020      	beq.n	800767a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007638:	4b34      	ldr	r3, [pc, #208]	@ (800770c <HAL_RCC_OscConfig+0x278>)
 800763a:	2201      	movs	r2, #1
 800763c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800763e:	f7fd fc9d 	bl	8004f7c <HAL_GetTick>
 8007642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007644:	e008      	b.n	8007658 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007646:	f7fd fc99 	bl	8004f7c <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	2b02      	cmp	r3, #2
 8007652:	d901      	bls.n	8007658 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e1b4      	b.n	80079c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007658:	4b2b      	ldr	r3, [pc, #172]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0302 	and.w	r3, r3, #2
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0f0      	beq.n	8007646 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007664:	4b28      	ldr	r3, [pc, #160]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	4925      	ldr	r1, [pc, #148]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 8007674:	4313      	orrs	r3, r2
 8007676:	600b      	str	r3, [r1, #0]
 8007678:	e015      	b.n	80076a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800767a:	4b24      	ldr	r3, [pc, #144]	@ (800770c <HAL_RCC_OscConfig+0x278>)
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007680:	f7fd fc7c 	bl	8004f7c <HAL_GetTick>
 8007684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007686:	e008      	b.n	800769a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007688:	f7fd fc78 	bl	8004f7c <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	2b02      	cmp	r3, #2
 8007694:	d901      	bls.n	800769a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e193      	b.n	80079c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800769a:	4b1b      	ldr	r3, [pc, #108]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1f0      	bne.n	8007688 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0308 	and.w	r3, r3, #8
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d036      	beq.n	8007720 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d016      	beq.n	80076e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076ba:	4b15      	ldr	r3, [pc, #84]	@ (8007710 <HAL_RCC_OscConfig+0x27c>)
 80076bc:	2201      	movs	r2, #1
 80076be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c0:	f7fd fc5c 	bl	8004f7c <HAL_GetTick>
 80076c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076c6:	e008      	b.n	80076da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076c8:	f7fd fc58 	bl	8004f7c <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d901      	bls.n	80076da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e173      	b.n	80079c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076da:	4b0b      	ldr	r3, [pc, #44]	@ (8007708 <HAL_RCC_OscConfig+0x274>)
 80076dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0f0      	beq.n	80076c8 <HAL_RCC_OscConfig+0x234>
 80076e6:	e01b      	b.n	8007720 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076e8:	4b09      	ldr	r3, [pc, #36]	@ (8007710 <HAL_RCC_OscConfig+0x27c>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076ee:	f7fd fc45 	bl	8004f7c <HAL_GetTick>
 80076f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076f4:	e00e      	b.n	8007714 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076f6:	f7fd fc41 	bl	8004f7c <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	2b02      	cmp	r3, #2
 8007702:	d907      	bls.n	8007714 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e15c      	b.n	80079c2 <HAL_RCC_OscConfig+0x52e>
 8007708:	40023800 	.word	0x40023800
 800770c:	42470000 	.word	0x42470000
 8007710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007714:	4b8a      	ldr	r3, [pc, #552]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 8007716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007718:	f003 0302 	and.w	r3, r3, #2
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1ea      	bne.n	80076f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 8097 	beq.w	800785c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800772e:	2300      	movs	r3, #0
 8007730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007732:	4b83      	ldr	r3, [pc, #524]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 8007734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10f      	bne.n	800775e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800773e:	2300      	movs	r3, #0
 8007740:	60bb      	str	r3, [r7, #8]
 8007742:	4b7f      	ldr	r3, [pc, #508]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 8007744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007746:	4a7e      	ldr	r2, [pc, #504]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 8007748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800774c:	6413      	str	r3, [r2, #64]	@ 0x40
 800774e:	4b7c      	ldr	r3, [pc, #496]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 8007750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007756:	60bb      	str	r3, [r7, #8]
 8007758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800775a:	2301      	movs	r3, #1
 800775c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800775e:	4b79      	ldr	r3, [pc, #484]	@ (8007944 <HAL_RCC_OscConfig+0x4b0>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007766:	2b00      	cmp	r3, #0
 8007768:	d118      	bne.n	800779c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800776a:	4b76      	ldr	r3, [pc, #472]	@ (8007944 <HAL_RCC_OscConfig+0x4b0>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a75      	ldr	r2, [pc, #468]	@ (8007944 <HAL_RCC_OscConfig+0x4b0>)
 8007770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007776:	f7fd fc01 	bl	8004f7c <HAL_GetTick>
 800777a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800777c:	e008      	b.n	8007790 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800777e:	f7fd fbfd 	bl	8004f7c <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d901      	bls.n	8007790 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e118      	b.n	80079c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007790:	4b6c      	ldr	r3, [pc, #432]	@ (8007944 <HAL_RCC_OscConfig+0x4b0>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0f0      	beq.n	800777e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d106      	bne.n	80077b2 <HAL_RCC_OscConfig+0x31e>
 80077a4:	4b66      	ldr	r3, [pc, #408]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 80077a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077a8:	4a65      	ldr	r2, [pc, #404]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 80077aa:	f043 0301 	orr.w	r3, r3, #1
 80077ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80077b0:	e01c      	b.n	80077ec <HAL_RCC_OscConfig+0x358>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2b05      	cmp	r3, #5
 80077b8:	d10c      	bne.n	80077d4 <HAL_RCC_OscConfig+0x340>
 80077ba:	4b61      	ldr	r3, [pc, #388]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 80077bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077be:	4a60      	ldr	r2, [pc, #384]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 80077c0:	f043 0304 	orr.w	r3, r3, #4
 80077c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80077c6:	4b5e      	ldr	r3, [pc, #376]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 80077c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ca:	4a5d      	ldr	r2, [pc, #372]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 80077cc:	f043 0301 	orr.w	r3, r3, #1
 80077d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80077d2:	e00b      	b.n	80077ec <HAL_RCC_OscConfig+0x358>
 80077d4:	4b5a      	ldr	r3, [pc, #360]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 80077d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d8:	4a59      	ldr	r2, [pc, #356]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 80077da:	f023 0301 	bic.w	r3, r3, #1
 80077de:	6713      	str	r3, [r2, #112]	@ 0x70
 80077e0:	4b57      	ldr	r3, [pc, #348]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 80077e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e4:	4a56      	ldr	r2, [pc, #344]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 80077e6:	f023 0304 	bic.w	r3, r3, #4
 80077ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d015      	beq.n	8007820 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f4:	f7fd fbc2 	bl	8004f7c <HAL_GetTick>
 80077f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077fa:	e00a      	b.n	8007812 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077fc:	f7fd fbbe 	bl	8004f7c <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800780a:	4293      	cmp	r3, r2
 800780c:	d901      	bls.n	8007812 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e0d7      	b.n	80079c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007812:	4b4b      	ldr	r3, [pc, #300]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 8007814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0ee      	beq.n	80077fc <HAL_RCC_OscConfig+0x368>
 800781e:	e014      	b.n	800784a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007820:	f7fd fbac 	bl	8004f7c <HAL_GetTick>
 8007824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007826:	e00a      	b.n	800783e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007828:	f7fd fba8 	bl	8004f7c <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007836:	4293      	cmp	r3, r2
 8007838:	d901      	bls.n	800783e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e0c1      	b.n	80079c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800783e:	4b40      	ldr	r3, [pc, #256]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 8007840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007842:	f003 0302 	and.w	r3, r3, #2
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1ee      	bne.n	8007828 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800784a:	7dfb      	ldrb	r3, [r7, #23]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d105      	bne.n	800785c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007850:	4b3b      	ldr	r3, [pc, #236]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 8007852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007854:	4a3a      	ldr	r2, [pc, #232]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 8007856:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800785a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 80ad 	beq.w	80079c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007866:	4b36      	ldr	r3, [pc, #216]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 030c 	and.w	r3, r3, #12
 800786e:	2b08      	cmp	r3, #8
 8007870:	d060      	beq.n	8007934 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	2b02      	cmp	r3, #2
 8007878:	d145      	bne.n	8007906 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800787a:	4b33      	ldr	r3, [pc, #204]	@ (8007948 <HAL_RCC_OscConfig+0x4b4>)
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007880:	f7fd fb7c 	bl	8004f7c <HAL_GetTick>
 8007884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007886:	e008      	b.n	800789a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007888:	f7fd fb78 	bl	8004f7c <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e093      	b.n	80079c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800789a:	4b29      	ldr	r3, [pc, #164]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1f0      	bne.n	8007888 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	69da      	ldr	r2, [r3, #28]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	431a      	orrs	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b4:	019b      	lsls	r3, r3, #6
 80078b6:	431a      	orrs	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078bc:	085b      	lsrs	r3, r3, #1
 80078be:	3b01      	subs	r3, #1
 80078c0:	041b      	lsls	r3, r3, #16
 80078c2:	431a      	orrs	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c8:	061b      	lsls	r3, r3, #24
 80078ca:	431a      	orrs	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078d0:	071b      	lsls	r3, r3, #28
 80078d2:	491b      	ldr	r1, [pc, #108]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007948 <HAL_RCC_OscConfig+0x4b4>)
 80078da:	2201      	movs	r2, #1
 80078dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078de:	f7fd fb4d 	bl	8004f7c <HAL_GetTick>
 80078e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078e4:	e008      	b.n	80078f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078e6:	f7fd fb49 	bl	8004f7c <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d901      	bls.n	80078f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e064      	b.n	80079c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078f8:	4b11      	ldr	r3, [pc, #68]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d0f0      	beq.n	80078e6 <HAL_RCC_OscConfig+0x452>
 8007904:	e05c      	b.n	80079c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007906:	4b10      	ldr	r3, [pc, #64]	@ (8007948 <HAL_RCC_OscConfig+0x4b4>)
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800790c:	f7fd fb36 	bl	8004f7c <HAL_GetTick>
 8007910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007912:	e008      	b.n	8007926 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007914:	f7fd fb32 	bl	8004f7c <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b02      	cmp	r3, #2
 8007920:	d901      	bls.n	8007926 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e04d      	b.n	80079c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007926:	4b06      	ldr	r3, [pc, #24]	@ (8007940 <HAL_RCC_OscConfig+0x4ac>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1f0      	bne.n	8007914 <HAL_RCC_OscConfig+0x480>
 8007932:	e045      	b.n	80079c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d107      	bne.n	800794c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e040      	b.n	80079c2 <HAL_RCC_OscConfig+0x52e>
 8007940:	40023800 	.word	0x40023800
 8007944:	40007000 	.word	0x40007000
 8007948:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800794c:	4b1f      	ldr	r3, [pc, #124]	@ (80079cc <HAL_RCC_OscConfig+0x538>)
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d030      	beq.n	80079bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007964:	429a      	cmp	r2, r3
 8007966:	d129      	bne.n	80079bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007972:	429a      	cmp	r2, r3
 8007974:	d122      	bne.n	80079bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800797c:	4013      	ands	r3, r2
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007982:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007984:	4293      	cmp	r3, r2
 8007986:	d119      	bne.n	80079bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007992:	085b      	lsrs	r3, r3, #1
 8007994:	3b01      	subs	r3, #1
 8007996:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007998:	429a      	cmp	r2, r3
 800799a:	d10f      	bne.n	80079bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d107      	bne.n	80079bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d001      	beq.n	80079c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e000      	b.n	80079c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	40023800 	.word	0x40023800

080079d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e041      	b.n	8007a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d106      	bne.n	80079fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7fd f858 	bl	8004aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2202      	movs	r2, #2
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4610      	mov	r0, r2
 8007a10:	f000 fbb2 	bl	8008178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d001      	beq.n	8007a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e04e      	b.n	8007b26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68da      	ldr	r2, [r3, #12]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f042 0201 	orr.w	r2, r2, #1
 8007a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a23      	ldr	r2, [pc, #140]	@ (8007b34 <HAL_TIM_Base_Start_IT+0xc4>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d022      	beq.n	8007af0 <HAL_TIM_Base_Start_IT+0x80>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ab2:	d01d      	beq.n	8007af0 <HAL_TIM_Base_Start_IT+0x80>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a1f      	ldr	r2, [pc, #124]	@ (8007b38 <HAL_TIM_Base_Start_IT+0xc8>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d018      	beq.n	8007af0 <HAL_TIM_Base_Start_IT+0x80>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8007b3c <HAL_TIM_Base_Start_IT+0xcc>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d013      	beq.n	8007af0 <HAL_TIM_Base_Start_IT+0x80>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a1c      	ldr	r2, [pc, #112]	@ (8007b40 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d00e      	beq.n	8007af0 <HAL_TIM_Base_Start_IT+0x80>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8007b44 <HAL_TIM_Base_Start_IT+0xd4>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d009      	beq.n	8007af0 <HAL_TIM_Base_Start_IT+0x80>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a19      	ldr	r2, [pc, #100]	@ (8007b48 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d004      	beq.n	8007af0 <HAL_TIM_Base_Start_IT+0x80>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a18      	ldr	r2, [pc, #96]	@ (8007b4c <HAL_TIM_Base_Start_IT+0xdc>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d111      	bne.n	8007b14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b06      	cmp	r3, #6
 8007b00:	d010      	beq.n	8007b24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f042 0201 	orr.w	r2, r2, #1
 8007b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b12:	e007      	b.n	8007b24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0201 	orr.w	r2, r2, #1
 8007b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	40010000 	.word	0x40010000
 8007b38:	40000400 	.word	0x40000400
 8007b3c:	40000800 	.word	0x40000800
 8007b40:	40000c00 	.word	0x40000c00
 8007b44:	40010400 	.word	0x40010400
 8007b48:	40014000 	.word	0x40014000
 8007b4c:	40001800 	.word	0x40001800

08007b50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e097      	b.n	8007c94 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d106      	bne.n	8007b7e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7fc fea9 	bl	80048d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2202      	movs	r2, #2
 8007b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6812      	ldr	r2, [r2, #0]
 8007b90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b94:	f023 0307 	bic.w	r3, r3, #7
 8007b98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	f000 fae7 	bl	8008178 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bd2:	f023 0303 	bic.w	r3, r3, #3
 8007bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	021b      	lsls	r3, r3, #8
 8007be2:	4313      	orrs	r3, r2
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007bf0:	f023 030c 	bic.w	r3, r3, #12
 8007bf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007bfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	69db      	ldr	r3, [r3, #28]
 8007c0a:	021b      	lsls	r3, r3, #8
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	011a      	lsls	r2, r3, #4
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	031b      	lsls	r3, r3, #12
 8007c20:	4313      	orrs	r3, r2
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007c2e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007c36:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	011b      	lsls	r3, r3, #4
 8007c42:	4313      	orrs	r3, r2
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3718      	adds	r7, #24
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007cac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007cb4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007cbc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007cc4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d110      	bne.n	8007cee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d102      	bne.n	8007cd8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007cd2:	7b7b      	ldrb	r3, [r7, #13]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d001      	beq.n	8007cdc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e069      	b.n	8007db0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cec:	e031      	b.n	8007d52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b04      	cmp	r3, #4
 8007cf2:	d110      	bne.n	8007d16 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cf4:	7bbb      	ldrb	r3, [r7, #14]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d102      	bne.n	8007d00 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007cfa:	7b3b      	ldrb	r3, [r7, #12]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d001      	beq.n	8007d04 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e055      	b.n	8007db0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d14:	e01d      	b.n	8007d52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d108      	bne.n	8007d2e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d105      	bne.n	8007d2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d22:	7b7b      	ldrb	r3, [r7, #13]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d102      	bne.n	8007d2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d28:	7b3b      	ldrb	r3, [r7, #12]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d001      	beq.n	8007d32 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e03e      	b.n	8007db0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2202      	movs	r2, #2
 8007d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <HAL_TIM_Encoder_Start+0xc4>
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	d008      	beq.n	8007d70 <HAL_TIM_Encoder_Start+0xd4>
 8007d5e:	e00f      	b.n	8007d80 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2201      	movs	r2, #1
 8007d66:	2100      	movs	r1, #0
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 fb4b 	bl	8008404 <TIM_CCxChannelCmd>
      break;
 8007d6e:	e016      	b.n	8007d9e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2201      	movs	r2, #1
 8007d76:	2104      	movs	r1, #4
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 fb43 	bl	8008404 <TIM_CCxChannelCmd>
      break;
 8007d7e:	e00e      	b.n	8007d9e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2201      	movs	r2, #1
 8007d86:	2100      	movs	r1, #0
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 fb3b 	bl	8008404 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2201      	movs	r2, #1
 8007d94:	2104      	movs	r1, #4
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 fb34 	bl	8008404 <TIM_CCxChannelCmd>
      break;
 8007d9c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f042 0201 	orr.w	r2, r2, #1
 8007dac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d020      	beq.n	8007e1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f003 0302 	and.w	r3, r3, #2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d01b      	beq.n	8007e1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f06f 0202 	mvn.w	r2, #2
 8007dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	f003 0303 	and.w	r3, r3, #3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f999 	bl	800813a <HAL_TIM_IC_CaptureCallback>
 8007e08:	e005      	b.n	8007e16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f98b 	bl	8008126 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f99c 	bl	800814e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f003 0304 	and.w	r3, r3, #4
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d020      	beq.n	8007e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f003 0304 	and.w	r3, r3, #4
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d01b      	beq.n	8007e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f06f 0204 	mvn.w	r2, #4
 8007e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f973 	bl	800813a <HAL_TIM_IC_CaptureCallback>
 8007e54:	e005      	b.n	8007e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f965 	bl	8008126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f976 	bl	800814e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	f003 0308 	and.w	r3, r3, #8
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d020      	beq.n	8007eb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f003 0308 	and.w	r3, r3, #8
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d01b      	beq.n	8007eb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f06f 0208 	mvn.w	r2, #8
 8007e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2204      	movs	r2, #4
 8007e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	f003 0303 	and.w	r3, r3, #3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f94d 	bl	800813a <HAL_TIM_IC_CaptureCallback>
 8007ea0:	e005      	b.n	8007eae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f93f 	bl	8008126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f950 	bl	800814e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	f003 0310 	and.w	r3, r3, #16
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d020      	beq.n	8007f00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f003 0310 	and.w	r3, r3, #16
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d01b      	beq.n	8007f00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f06f 0210 	mvn.w	r2, #16
 8007ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2208      	movs	r2, #8
 8007ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	69db      	ldr	r3, [r3, #28]
 8007ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d003      	beq.n	8007eee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f927 	bl	800813a <HAL_TIM_IC_CaptureCallback>
 8007eec:	e005      	b.n	8007efa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f919 	bl	8008126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f92a 	bl	800814e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00c      	beq.n	8007f24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d007      	beq.n	8007f24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f06f 0201 	mvn.w	r2, #1
 8007f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7f8 ffc2 	bl	8000ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00c      	beq.n	8007f48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d007      	beq.n	8007f48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fb0a 	bl	800855c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00c      	beq.n	8007f6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d007      	beq.n	8007f6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f8fb 	bl	8008162 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f003 0320 	and.w	r3, r3, #32
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00c      	beq.n	8007f90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f003 0320 	and.w	r3, r3, #32
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d007      	beq.n	8007f90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f06f 0220 	mvn.w	r2, #32
 8007f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fadc 	bl	8008548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f90:	bf00      	nop
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d101      	bne.n	8007fb4 <HAL_TIM_ConfigClockSource+0x1c>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e0b4      	b.n	800811e <HAL_TIM_ConfigClockSource+0x186>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fec:	d03e      	beq.n	800806c <HAL_TIM_ConfigClockSource+0xd4>
 8007fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ff2:	f200 8087 	bhi.w	8008104 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ffa:	f000 8086 	beq.w	800810a <HAL_TIM_ConfigClockSource+0x172>
 8007ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008002:	d87f      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x16c>
 8008004:	2b70      	cmp	r3, #112	@ 0x70
 8008006:	d01a      	beq.n	800803e <HAL_TIM_ConfigClockSource+0xa6>
 8008008:	2b70      	cmp	r3, #112	@ 0x70
 800800a:	d87b      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x16c>
 800800c:	2b60      	cmp	r3, #96	@ 0x60
 800800e:	d050      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x11a>
 8008010:	2b60      	cmp	r3, #96	@ 0x60
 8008012:	d877      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x16c>
 8008014:	2b50      	cmp	r3, #80	@ 0x50
 8008016:	d03c      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0xfa>
 8008018:	2b50      	cmp	r3, #80	@ 0x50
 800801a:	d873      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x16c>
 800801c:	2b40      	cmp	r3, #64	@ 0x40
 800801e:	d058      	beq.n	80080d2 <HAL_TIM_ConfigClockSource+0x13a>
 8008020:	2b40      	cmp	r3, #64	@ 0x40
 8008022:	d86f      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x16c>
 8008024:	2b30      	cmp	r3, #48	@ 0x30
 8008026:	d064      	beq.n	80080f2 <HAL_TIM_ConfigClockSource+0x15a>
 8008028:	2b30      	cmp	r3, #48	@ 0x30
 800802a:	d86b      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x16c>
 800802c:	2b20      	cmp	r3, #32
 800802e:	d060      	beq.n	80080f2 <HAL_TIM_ConfigClockSource+0x15a>
 8008030:	2b20      	cmp	r3, #32
 8008032:	d867      	bhi.n	8008104 <HAL_TIM_ConfigClockSource+0x16c>
 8008034:	2b00      	cmp	r3, #0
 8008036:	d05c      	beq.n	80080f2 <HAL_TIM_ConfigClockSource+0x15a>
 8008038:	2b10      	cmp	r3, #16
 800803a:	d05a      	beq.n	80080f2 <HAL_TIM_ConfigClockSource+0x15a>
 800803c:	e062      	b.n	8008104 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800804e:	f000 f9b9 	bl	80083c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008060:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	609a      	str	r2, [r3, #8]
      break;
 800806a:	e04f      	b.n	800810c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800807c:	f000 f9a2 	bl	80083c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800808e:	609a      	str	r2, [r3, #8]
      break;
 8008090:	e03c      	b.n	800810c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800809e:	461a      	mov	r2, r3
 80080a0:	f000 f916 	bl	80082d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2150      	movs	r1, #80	@ 0x50
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 f96f 	bl	800838e <TIM_ITRx_SetConfig>
      break;
 80080b0:	e02c      	b.n	800810c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080be:	461a      	mov	r2, r3
 80080c0:	f000 f935 	bl	800832e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2160      	movs	r1, #96	@ 0x60
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 f95f 	bl	800838e <TIM_ITRx_SetConfig>
      break;
 80080d0:	e01c      	b.n	800810c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080de:	461a      	mov	r2, r3
 80080e0:	f000 f8f6 	bl	80082d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2140      	movs	r1, #64	@ 0x40
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 f94f 	bl	800838e <TIM_ITRx_SetConfig>
      break;
 80080f0:	e00c      	b.n	800810c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4619      	mov	r1, r3
 80080fc:	4610      	mov	r0, r2
 80080fe:	f000 f946 	bl	800838e <TIM_ITRx_SetConfig>
      break;
 8008102:	e003      	b.n	800810c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	73fb      	strb	r3, [r7, #15]
      break;
 8008108:	e000      	b.n	800810c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800810a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800812e:	bf00      	nop
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008142:	bf00      	nop
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008156:	bf00      	nop
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008162:	b480      	push	{r7}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800816a:	bf00      	nop
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
	...

08008178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a46      	ldr	r2, [pc, #280]	@ (80082a4 <TIM_Base_SetConfig+0x12c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d013      	beq.n	80081b8 <TIM_Base_SetConfig+0x40>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008196:	d00f      	beq.n	80081b8 <TIM_Base_SetConfig+0x40>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a43      	ldr	r2, [pc, #268]	@ (80082a8 <TIM_Base_SetConfig+0x130>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00b      	beq.n	80081b8 <TIM_Base_SetConfig+0x40>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a42      	ldr	r2, [pc, #264]	@ (80082ac <TIM_Base_SetConfig+0x134>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d007      	beq.n	80081b8 <TIM_Base_SetConfig+0x40>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a41      	ldr	r2, [pc, #260]	@ (80082b0 <TIM_Base_SetConfig+0x138>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d003      	beq.n	80081b8 <TIM_Base_SetConfig+0x40>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a40      	ldr	r2, [pc, #256]	@ (80082b4 <TIM_Base_SetConfig+0x13c>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d108      	bne.n	80081ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a35      	ldr	r2, [pc, #212]	@ (80082a4 <TIM_Base_SetConfig+0x12c>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d02b      	beq.n	800822a <TIM_Base_SetConfig+0xb2>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081d8:	d027      	beq.n	800822a <TIM_Base_SetConfig+0xb2>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a32      	ldr	r2, [pc, #200]	@ (80082a8 <TIM_Base_SetConfig+0x130>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d023      	beq.n	800822a <TIM_Base_SetConfig+0xb2>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a31      	ldr	r2, [pc, #196]	@ (80082ac <TIM_Base_SetConfig+0x134>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d01f      	beq.n	800822a <TIM_Base_SetConfig+0xb2>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a30      	ldr	r2, [pc, #192]	@ (80082b0 <TIM_Base_SetConfig+0x138>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d01b      	beq.n	800822a <TIM_Base_SetConfig+0xb2>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a2f      	ldr	r2, [pc, #188]	@ (80082b4 <TIM_Base_SetConfig+0x13c>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d017      	beq.n	800822a <TIM_Base_SetConfig+0xb2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a2e      	ldr	r2, [pc, #184]	@ (80082b8 <TIM_Base_SetConfig+0x140>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d013      	beq.n	800822a <TIM_Base_SetConfig+0xb2>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a2d      	ldr	r2, [pc, #180]	@ (80082bc <TIM_Base_SetConfig+0x144>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d00f      	beq.n	800822a <TIM_Base_SetConfig+0xb2>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a2c      	ldr	r2, [pc, #176]	@ (80082c0 <TIM_Base_SetConfig+0x148>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d00b      	beq.n	800822a <TIM_Base_SetConfig+0xb2>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a2b      	ldr	r2, [pc, #172]	@ (80082c4 <TIM_Base_SetConfig+0x14c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d007      	beq.n	800822a <TIM_Base_SetConfig+0xb2>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a2a      	ldr	r2, [pc, #168]	@ (80082c8 <TIM_Base_SetConfig+0x150>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d003      	beq.n	800822a <TIM_Base_SetConfig+0xb2>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a29      	ldr	r2, [pc, #164]	@ (80082cc <TIM_Base_SetConfig+0x154>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d108      	bne.n	800823c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	4313      	orrs	r3, r2
 800823a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	4313      	orrs	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a10      	ldr	r2, [pc, #64]	@ (80082a4 <TIM_Base_SetConfig+0x12c>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d003      	beq.n	8008270 <TIM_Base_SetConfig+0xf8>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a12      	ldr	r2, [pc, #72]	@ (80082b4 <TIM_Base_SetConfig+0x13c>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d103      	bne.n	8008278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	691a      	ldr	r2, [r3, #16]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	2b01      	cmp	r3, #1
 8008288:	d105      	bne.n	8008296 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	f023 0201 	bic.w	r2, r3, #1
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	611a      	str	r2, [r3, #16]
  }
}
 8008296:	bf00      	nop
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	40010000 	.word	0x40010000
 80082a8:	40000400 	.word	0x40000400
 80082ac:	40000800 	.word	0x40000800
 80082b0:	40000c00 	.word	0x40000c00
 80082b4:	40010400 	.word	0x40010400
 80082b8:	40014000 	.word	0x40014000
 80082bc:	40014400 	.word	0x40014400
 80082c0:	40014800 	.word	0x40014800
 80082c4:	40001800 	.word	0x40001800
 80082c8:	40001c00 	.word	0x40001c00
 80082cc:	40002000 	.word	0x40002000

080082d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6a1b      	ldr	r3, [r3, #32]
 80082e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	f023 0201 	bic.w	r2, r3, #1
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80082fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	011b      	lsls	r3, r3, #4
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	4313      	orrs	r3, r2
 8008304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	f023 030a 	bic.w	r3, r3, #10
 800830c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	4313      	orrs	r3, r2
 8008314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	621a      	str	r2, [r3, #32]
}
 8008322:	bf00      	nop
 8008324:	371c      	adds	r7, #28
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800832e:	b480      	push	{r7}
 8008330:	b087      	sub	sp, #28
 8008332:	af00      	add	r7, sp, #0
 8008334:	60f8      	str	r0, [r7, #12]
 8008336:	60b9      	str	r1, [r7, #8]
 8008338:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	f023 0210 	bic.w	r2, r3, #16
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	031b      	lsls	r3, r3, #12
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	4313      	orrs	r3, r2
 8008362:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800836a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	011b      	lsls	r3, r3, #4
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	4313      	orrs	r3, r2
 8008374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	621a      	str	r2, [r3, #32]
}
 8008382:	bf00      	nop
 8008384:	371c      	adds	r7, #28
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800838e:	b480      	push	{r7}
 8008390:	b085      	sub	sp, #20
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	f043 0307 	orr.w	r3, r3, #7
 80083b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	609a      	str	r2, [r3, #8]
}
 80083b8:	bf00      	nop
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
 80083d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	021a      	lsls	r2, r3, #8
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	431a      	orrs	r2, r3
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	609a      	str	r2, [r3, #8]
}
 80083f8:	bf00      	nop
 80083fa:	371c      	adds	r7, #28
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f003 031f 	and.w	r3, r3, #31
 8008416:	2201      	movs	r2, #1
 8008418:	fa02 f303 	lsl.w	r3, r2, r3
 800841c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6a1a      	ldr	r2, [r3, #32]
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	43db      	mvns	r3, r3
 8008426:	401a      	ands	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6a1a      	ldr	r2, [r3, #32]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	f003 031f 	and.w	r3, r3, #31
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	fa01 f303 	lsl.w	r3, r1, r3
 800843c:	431a      	orrs	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	621a      	str	r2, [r3, #32]
}
 8008442:	bf00      	nop
 8008444:	371c      	adds	r7, #28
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
	...

08008450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008460:	2b01      	cmp	r3, #1
 8008462:	d101      	bne.n	8008468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008464:	2302      	movs	r3, #2
 8008466:	e05a      	b.n	800851e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800848e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	4313      	orrs	r3, r2
 8008498:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a21      	ldr	r2, [pc, #132]	@ (800852c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d022      	beq.n	80084f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084b4:	d01d      	beq.n	80084f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a1d      	ldr	r2, [pc, #116]	@ (8008530 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d018      	beq.n	80084f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008534 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d013      	beq.n	80084f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008538 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d00e      	beq.n	80084f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a18      	ldr	r2, [pc, #96]	@ (800853c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d009      	beq.n	80084f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a17      	ldr	r2, [pc, #92]	@ (8008540 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d004      	beq.n	80084f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a15      	ldr	r2, [pc, #84]	@ (8008544 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d10c      	bne.n	800850c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	4313      	orrs	r3, r2
 8008502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	40010000 	.word	0x40010000
 8008530:	40000400 	.word	0x40000400
 8008534:	40000800 	.word	0x40000800
 8008538:	40000c00 	.word	0x40000c00
 800853c:	40010400 	.word	0x40010400
 8008540:	40014000 	.word	0x40014000
 8008544:	40001800 	.word	0x40001800

08008548 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e042      	b.n	8008608 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d106      	bne.n	800859c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7fc face 	bl	8004b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2224      	movs	r2, #36	@ 0x24
 80085a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68da      	ldr	r2, [r3, #12]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 ff37 	bl	8009428 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	691a      	ldr	r2, [r3, #16]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	695a      	ldr	r2, [r3, #20]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68da      	ldr	r2, [r3, #12]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80085e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2220      	movs	r2, #32
 80085fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b08c      	sub	sp, #48	@ 0x30
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	4613      	mov	r3, r2
 800861c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b20      	cmp	r3, #32
 8008628:	d156      	bne.n	80086d8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <HAL_UART_Transmit_DMA+0x26>
 8008630:	88fb      	ldrh	r3, [r7, #6]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d101      	bne.n	800863a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e04f      	b.n	80086da <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	88fa      	ldrh	r2, [r7, #6]
 8008644:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	88fa      	ldrh	r2, [r7, #6]
 800864a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2221      	movs	r2, #33	@ 0x21
 8008656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800865e:	4a21      	ldr	r2, [pc, #132]	@ (80086e4 <HAL_UART_Transmit_DMA+0xd4>)
 8008660:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008666:	4a20      	ldr	r2, [pc, #128]	@ (80086e8 <HAL_UART_Transmit_DMA+0xd8>)
 8008668:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800866e:	4a1f      	ldr	r2, [pc, #124]	@ (80086ec <HAL_UART_Transmit_DMA+0xdc>)
 8008670:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008676:	2200      	movs	r2, #0
 8008678:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800867a:	f107 0308 	add.w	r3, r7, #8
 800867e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008686:	6819      	ldr	r1, [r3, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3304      	adds	r3, #4
 800868e:	461a      	mov	r2, r3
 8008690:	88fb      	ldrh	r3, [r7, #6]
 8008692:	f7fc fe3f 	bl	8005314 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800869e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3314      	adds	r3, #20
 80086a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	e853 3f00 	ldrex	r3, [r3]
 80086ae:	617b      	str	r3, [r7, #20]
   return(result);
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3314      	adds	r3, #20
 80086be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80086c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	6a39      	ldr	r1, [r7, #32]
 80086c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086c8:	e841 2300 	strex	r3, r2, [r1]
 80086cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e5      	bne.n	80086a0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80086d4:	2300      	movs	r3, #0
 80086d6:	e000      	b.n	80086da <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80086d8:	2302      	movs	r3, #2
  }
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3730      	adds	r7, #48	@ 0x30
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	08008cb5 	.word	0x08008cb5
 80086e8:	08008d4f 	.word	0x08008d4f
 80086ec:	08008ed3 	.word	0x08008ed3

080086f0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	4613      	mov	r3, r2
 80086fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b20      	cmp	r3, #32
 8008708:	d112      	bne.n	8008730 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <HAL_UART_Receive_DMA+0x26>
 8008710:	88fb      	ldrh	r3, [r7, #6]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e00b      	b.n	8008732 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008720:	88fb      	ldrh	r3, [r7, #6]
 8008722:	461a      	mov	r2, r3
 8008724:	68b9      	ldr	r1, [r7, #8]
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 fc1e 	bl	8008f68 <UART_Start_Receive_DMA>
 800872c:	4603      	mov	r3, r0
 800872e:	e000      	b.n	8008732 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008730:	2302      	movs	r3, #2
  }
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b0ba      	sub	sp, #232	@ 0xe8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008762:	2300      	movs	r3, #0
 8008764:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008768:	2300      	movs	r3, #0
 800876a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800876e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008772:	f003 030f 	and.w	r3, r3, #15
 8008776:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800877a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10f      	bne.n	80087a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008786:	f003 0320 	and.w	r3, r3, #32
 800878a:	2b00      	cmp	r3, #0
 800878c:	d009      	beq.n	80087a2 <HAL_UART_IRQHandler+0x66>
 800878e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008792:	f003 0320 	and.w	r3, r3, #32
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fd85 	bl	80092aa <UART_Receive_IT>
      return;
 80087a0:	e25b      	b.n	8008c5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80087a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f000 80de 	beq.w	8008968 <HAL_UART_IRQHandler+0x22c>
 80087ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d106      	bne.n	80087c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 80d1 	beq.w	8008968 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00b      	beq.n	80087ea <HAL_UART_IRQHandler+0xae>
 80087d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d005      	beq.n	80087ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087e2:	f043 0201 	orr.w	r2, r3, #1
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ee:	f003 0304 	and.w	r3, r3, #4
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00b      	beq.n	800880e <HAL_UART_IRQHandler+0xd2>
 80087f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d005      	beq.n	800880e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008806:	f043 0202 	orr.w	r2, r3, #2
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800880e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008812:	f003 0302 	and.w	r3, r3, #2
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00b      	beq.n	8008832 <HAL_UART_IRQHandler+0xf6>
 800881a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d005      	beq.n	8008832 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800882a:	f043 0204 	orr.w	r2, r3, #4
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008836:	f003 0308 	and.w	r3, r3, #8
 800883a:	2b00      	cmp	r3, #0
 800883c:	d011      	beq.n	8008862 <HAL_UART_IRQHandler+0x126>
 800883e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008842:	f003 0320 	and.w	r3, r3, #32
 8008846:	2b00      	cmp	r3, #0
 8008848:	d105      	bne.n	8008856 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800884a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b00      	cmp	r3, #0
 8008854:	d005      	beq.n	8008862 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800885a:	f043 0208 	orr.w	r2, r3, #8
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008866:	2b00      	cmp	r3, #0
 8008868:	f000 81f2 	beq.w	8008c50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800886c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008870:	f003 0320 	and.w	r3, r3, #32
 8008874:	2b00      	cmp	r3, #0
 8008876:	d008      	beq.n	800888a <HAL_UART_IRQHandler+0x14e>
 8008878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800887c:	f003 0320 	and.w	r3, r3, #32
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fd10 	bl	80092aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	695b      	ldr	r3, [r3, #20]
 8008890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008894:	2b40      	cmp	r3, #64	@ 0x40
 8008896:	bf0c      	ite	eq
 8008898:	2301      	moveq	r3, #1
 800889a:	2300      	movne	r3, #0
 800889c:	b2db      	uxtb	r3, r3
 800889e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088a6:	f003 0308 	and.w	r3, r3, #8
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d103      	bne.n	80088b6 <HAL_UART_IRQHandler+0x17a>
 80088ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d04f      	beq.n	8008956 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fc18 	bl	80090ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088c6:	2b40      	cmp	r3, #64	@ 0x40
 80088c8:	d141      	bne.n	800894e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	3314      	adds	r3, #20
 80088d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088d8:	e853 3f00 	ldrex	r3, [r3]
 80088dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80088e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3314      	adds	r3, #20
 80088f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80088f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80088fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008906:	e841 2300 	strex	r3, r2, [r1]
 800890a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800890e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1d9      	bne.n	80088ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d013      	beq.n	8008946 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008922:	4a7e      	ldr	r2, [pc, #504]	@ (8008b1c <HAL_UART_IRQHandler+0x3e0>)
 8008924:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800892a:	4618      	mov	r0, r3
 800892c:	f7fc fdba 	bl	80054a4 <HAL_DMA_Abort_IT>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d016      	beq.n	8008964 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800893a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008940:	4610      	mov	r0, r2
 8008942:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008944:	e00e      	b.n	8008964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f99e 	bl	8008c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800894c:	e00a      	b.n	8008964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f99a 	bl	8008c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008954:	e006      	b.n	8008964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f996 	bl	8008c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008962:	e175      	b.n	8008c50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008964:	bf00      	nop
    return;
 8008966:	e173      	b.n	8008c50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800896c:	2b01      	cmp	r3, #1
 800896e:	f040 814f 	bne.w	8008c10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008976:	f003 0310 	and.w	r3, r3, #16
 800897a:	2b00      	cmp	r3, #0
 800897c:	f000 8148 	beq.w	8008c10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008984:	f003 0310 	and.w	r3, r3, #16
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 8141 	beq.w	8008c10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800898e:	2300      	movs	r3, #0
 8008990:	60bb      	str	r3, [r7, #8]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	60bb      	str	r3, [r7, #8]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	60bb      	str	r3, [r7, #8]
 80089a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ae:	2b40      	cmp	r3, #64	@ 0x40
 80089b0:	f040 80b6 	bne.w	8008b20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 8145 	beq.w	8008c54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80089ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089d2:	429a      	cmp	r2, r3
 80089d4:	f080 813e 	bcs.w	8008c54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089ea:	f000 8088 	beq.w	8008afe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	330c      	adds	r3, #12
 80089f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	330c      	adds	r3, #12
 8008a16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008a1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008a1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008a2a:	e841 2300 	strex	r3, r2, [r1]
 8008a2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1d9      	bne.n	80089ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3314      	adds	r3, #20
 8008a40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a44:	e853 3f00 	ldrex	r3, [r3]
 8008a48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a4c:	f023 0301 	bic.w	r3, r3, #1
 8008a50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	3314      	adds	r3, #20
 8008a5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008a5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008a62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008a66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008a6a:	e841 2300 	strex	r3, r2, [r1]
 8008a6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008a70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1e1      	bne.n	8008a3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3314      	adds	r3, #20
 8008a7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008a86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3314      	adds	r3, #20
 8008a96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008a9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008aa0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008aa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e3      	bne.n	8008a76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	330c      	adds	r3, #12
 8008ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ac6:	e853 3f00 	ldrex	r3, [r3]
 8008aca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ace:	f023 0310 	bic.w	r3, r3, #16
 8008ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	330c      	adds	r3, #12
 8008adc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008ae0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008ae2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ae6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ae8:	e841 2300 	strex	r3, r2, [r1]
 8008aec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1e3      	bne.n	8008abc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fc fc63 	bl	80053c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2202      	movs	r2, #2
 8008b02:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f8c1 	bl	8008c9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b1a:	e09b      	b.n	8008c54 <HAL_UART_IRQHandler+0x518>
 8008b1c:	080091b3 	.word	0x080091b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f000 808e 	beq.w	8008c58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 8089 	beq.w	8008c58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	330c      	adds	r3, #12
 8008b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b50:	e853 3f00 	ldrex	r3, [r3]
 8008b54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	330c      	adds	r3, #12
 8008b66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008b6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b72:	e841 2300 	strex	r3, r2, [r1]
 8008b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1e3      	bne.n	8008b46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3314      	adds	r3, #20
 8008b84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b88:	e853 3f00 	ldrex	r3, [r3]
 8008b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	f023 0301 	bic.w	r3, r3, #1
 8008b94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3314      	adds	r3, #20
 8008b9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008ba2:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e3      	bne.n	8008b7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2220      	movs	r2, #32
 8008bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	330c      	adds	r3, #12
 8008bca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	e853 3f00 	ldrex	r3, [r3]
 8008bd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f023 0310 	bic.w	r3, r3, #16
 8008bda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	330c      	adds	r3, #12
 8008be4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008be8:	61fa      	str	r2, [r7, #28]
 8008bea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bec:	69b9      	ldr	r1, [r7, #24]
 8008bee:	69fa      	ldr	r2, [r7, #28]
 8008bf0:	e841 2300 	strex	r3, r2, [r1]
 8008bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e3      	bne.n	8008bc4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c06:	4619      	mov	r1, r3
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f847 	bl	8008c9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c0e:	e023      	b.n	8008c58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d009      	beq.n	8008c30 <HAL_UART_IRQHandler+0x4f4>
 8008c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d003      	beq.n	8008c30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fad6 	bl	80091da <UART_Transmit_IT>
    return;
 8008c2e:	e014      	b.n	8008c5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00e      	beq.n	8008c5a <HAL_UART_IRQHandler+0x51e>
 8008c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d008      	beq.n	8008c5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fb16 	bl	800927a <UART_EndTransmit_IT>
    return;
 8008c4e:	e004      	b.n	8008c5a <HAL_UART_IRQHandler+0x51e>
    return;
 8008c50:	bf00      	nop
 8008c52:	e002      	b.n	8008c5a <HAL_UART_IRQHandler+0x51e>
      return;
 8008c54:	bf00      	nop
 8008c56:	e000      	b.n	8008c5a <HAL_UART_IRQHandler+0x51e>
      return;
 8008c58:	bf00      	nop
  }
}
 8008c5a:	37e8      	adds	r7, #232	@ 0xe8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b090      	sub	sp, #64	@ 0x40
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d137      	bne.n	8008d40 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	3314      	adds	r3, #20
 8008cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce0:	e853 3f00 	ldrex	r3, [r3]
 8008ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3314      	adds	r3, #20
 8008cf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cf6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cfe:	e841 2300 	strex	r3, r2, [r1]
 8008d02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1e5      	bne.n	8008cd6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	330c      	adds	r3, #12
 8008d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	e853 3f00 	ldrex	r3, [r3]
 8008d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	330c      	adds	r3, #12
 8008d28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d2a:	61fa      	str	r2, [r7, #28]
 8008d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2e:	69b9      	ldr	r1, [r7, #24]
 8008d30:	69fa      	ldr	r2, [r7, #28]
 8008d32:	e841 2300 	strex	r3, r2, [r1]
 8008d36:	617b      	str	r3, [r7, #20]
   return(result);
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1e5      	bne.n	8008d0a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d3e:	e002      	b.n	8008d46 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008d40:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008d42:	f7fa fb87 	bl	8003454 <HAL_UART_TxCpltCallback>
}
 8008d46:	bf00      	nop
 8008d48:	3740      	adds	r7, #64	@ 0x40
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f7ff ff7f 	bl	8008c60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d62:	bf00      	nop
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b09c      	sub	sp, #112	@ 0x70
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d76:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d172      	bne.n	8008e6c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008d86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d88:	2200      	movs	r2, #0
 8008d8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	330c      	adds	r3, #12
 8008d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d96:	e853 3f00 	ldrex	r3, [r3]
 8008d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008da2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008da4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	330c      	adds	r3, #12
 8008daa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008dac:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008dae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008db2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008dba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e5      	bne.n	8008d8c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3314      	adds	r3, #20
 8008dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dca:	e853 3f00 	ldrex	r3, [r3]
 8008dce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dd2:	f023 0301 	bic.w	r3, r3, #1
 8008dd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8008dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3314      	adds	r3, #20
 8008dde:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008de0:	647a      	str	r2, [r7, #68]	@ 0x44
 8008de2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008de6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008de8:	e841 2300 	strex	r3, r2, [r1]
 8008dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1e5      	bne.n	8008dc0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008df4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3314      	adds	r3, #20
 8008dfa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfe:	e853 3f00 	ldrex	r3, [r3]
 8008e02:	623b      	str	r3, [r7, #32]
   return(result);
 8008e04:	6a3b      	ldr	r3, [r7, #32]
 8008e06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	3314      	adds	r3, #20
 8008e12:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e14:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e1c:	e841 2300 	strex	r3, r2, [r1]
 8008e20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1e5      	bne.n	8008df4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d119      	bne.n	8008e6c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	330c      	adds	r3, #12
 8008e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	e853 3f00 	ldrex	r3, [r3]
 8008e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f023 0310 	bic.w	r3, r3, #16
 8008e4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	330c      	adds	r3, #12
 8008e56:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e58:	61fa      	str	r2, [r7, #28]
 8008e5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5c:	69b9      	ldr	r1, [r7, #24]
 8008e5e:	69fa      	ldr	r2, [r7, #28]
 8008e60:	e841 2300 	strex	r3, r2, [r1]
 8008e64:	617b      	str	r3, [r7, #20]
   return(result);
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1e5      	bne.n	8008e38 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e6e:	2200      	movs	r2, #0
 8008e70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d106      	bne.n	8008e88 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008e82:	f7ff ff0b 	bl	8008c9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e86:	e002      	b.n	8008e8e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008e88:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008e8a:	f7fa faff 	bl	800348c <HAL_UART_RxCpltCallback>
}
 8008e8e:	bf00      	nop
 8008e90:	3770      	adds	r7, #112	@ 0x70
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b084      	sub	sp, #16
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d108      	bne.n	8008ec4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008eb6:	085b      	lsrs	r3, r3, #1
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	4619      	mov	r1, r3
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f7ff feed 	bl	8008c9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ec2:	e002      	b.n	8008eca <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f7ff fed5 	bl	8008c74 <HAL_UART_RxHalfCpltCallback>
}
 8008eca:	bf00      	nop
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008eda:	2300      	movs	r3, #0
 8008edc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eee:	2b80      	cmp	r3, #128	@ 0x80
 8008ef0:	bf0c      	ite	eq
 8008ef2:	2301      	moveq	r3, #1
 8008ef4:	2300      	movne	r3, #0
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b21      	cmp	r3, #33	@ 0x21
 8008f04:	d108      	bne.n	8008f18 <UART_DMAError+0x46>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d005      	beq.n	8008f18 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008f12:	68b8      	ldr	r0, [r7, #8]
 8008f14:	f000 f8c2 	bl	800909c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f22:	2b40      	cmp	r3, #64	@ 0x40
 8008f24:	bf0c      	ite	eq
 8008f26:	2301      	moveq	r3, #1
 8008f28:	2300      	movne	r3, #0
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b22      	cmp	r3, #34	@ 0x22
 8008f38:	d108      	bne.n	8008f4c <UART_DMAError+0x7a>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d005      	beq.n	8008f4c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2200      	movs	r2, #0
 8008f44:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008f46:	68b8      	ldr	r0, [r7, #8]
 8008f48:	f000 f8d0 	bl	80090ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f50:	f043 0210 	orr.w	r2, r3, #16
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f58:	68b8      	ldr	r0, [r7, #8]
 8008f5a:	f7ff fe95 	bl	8008c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f5e:	bf00      	nop
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b098      	sub	sp, #96	@ 0x60
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	4613      	mov	r3, r2
 8008f74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	88fa      	ldrh	r2, [r7, #6]
 8008f80:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2222      	movs	r2, #34	@ 0x22
 8008f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f94:	4a3e      	ldr	r2, [pc, #248]	@ (8009090 <UART_Start_Receive_DMA+0x128>)
 8008f96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f9c:	4a3d      	ldr	r2, [pc, #244]	@ (8009094 <UART_Start_Receive_DMA+0x12c>)
 8008f9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fa4:	4a3c      	ldr	r2, [pc, #240]	@ (8009098 <UART_Start_Receive_DMA+0x130>)
 8008fa6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fac:	2200      	movs	r2, #0
 8008fae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008fb0:	f107 0308 	add.w	r3, r7, #8
 8008fb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	88fb      	ldrh	r3, [r7, #6]
 8008fc8:	f7fc f9a4 	bl	8005314 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008fcc:	2300      	movs	r3, #0
 8008fce:	613b      	str	r3, [r7, #16]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	613b      	str	r3, [r7, #16]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	613b      	str	r3, [r7, #16]
 8008fe0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d019      	beq.n	800901e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	330c      	adds	r3, #12
 8008ff0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ff4:	e853 3f00 	ldrex	r3, [r3]
 8008ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009000:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	330c      	adds	r3, #12
 8009008:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800900a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800900c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009010:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009012:	e841 2300 	strex	r3, r2, [r1]
 8009016:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1e5      	bne.n	8008fea <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3314      	adds	r3, #20
 8009024:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009028:	e853 3f00 	ldrex	r3, [r3]
 800902c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800902e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009030:	f043 0301 	orr.w	r3, r3, #1
 8009034:	657b      	str	r3, [r7, #84]	@ 0x54
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3314      	adds	r3, #20
 800903c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800903e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009040:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009042:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009044:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009046:	e841 2300 	strex	r3, r2, [r1]
 800904a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800904c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1e5      	bne.n	800901e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3314      	adds	r3, #20
 8009058:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	e853 3f00 	ldrex	r3, [r3]
 8009060:	617b      	str	r3, [r7, #20]
   return(result);
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009068:	653b      	str	r3, [r7, #80]	@ 0x50
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3314      	adds	r3, #20
 8009070:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009072:	627a      	str	r2, [r7, #36]	@ 0x24
 8009074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009076:	6a39      	ldr	r1, [r7, #32]
 8009078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1e5      	bne.n	8009052 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3760      	adds	r7, #96	@ 0x60
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	08008d6b 	.word	0x08008d6b
 8009094:	08008e97 	.word	0x08008e97
 8009098:	08008ed3 	.word	0x08008ed3

0800909c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800909c:	b480      	push	{r7}
 800909e:	b089      	sub	sp, #36	@ 0x24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	330c      	adds	r3, #12
 80090aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	e853 3f00 	ldrex	r3, [r3]
 80090b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80090ba:	61fb      	str	r3, [r7, #28]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	330c      	adds	r3, #12
 80090c2:	69fa      	ldr	r2, [r7, #28]
 80090c4:	61ba      	str	r2, [r7, #24]
 80090c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	6979      	ldr	r1, [r7, #20]
 80090ca:	69ba      	ldr	r2, [r7, #24]
 80090cc:	e841 2300 	strex	r3, r2, [r1]
 80090d0:	613b      	str	r3, [r7, #16]
   return(result);
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1e5      	bne.n	80090a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2220      	movs	r2, #32
 80090dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80090e0:	bf00      	nop
 80090e2:	3724      	adds	r7, #36	@ 0x24
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b095      	sub	sp, #84	@ 0x54
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	330c      	adds	r3, #12
 80090fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090fe:	e853 3f00 	ldrex	r3, [r3]
 8009102:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009106:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800910a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	330c      	adds	r3, #12
 8009112:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009114:	643a      	str	r2, [r7, #64]	@ 0x40
 8009116:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009118:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800911a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800911c:	e841 2300 	strex	r3, r2, [r1]
 8009120:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1e5      	bne.n	80090f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	3314      	adds	r3, #20
 800912e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	e853 3f00 	ldrex	r3, [r3]
 8009136:	61fb      	str	r3, [r7, #28]
   return(result);
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	f023 0301 	bic.w	r3, r3, #1
 800913e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3314      	adds	r3, #20
 8009146:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009148:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800914a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800914e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009150:	e841 2300 	strex	r3, r2, [r1]
 8009154:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1e5      	bne.n	8009128 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009160:	2b01      	cmp	r3, #1
 8009162:	d119      	bne.n	8009198 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	330c      	adds	r3, #12
 800916a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	e853 3f00 	ldrex	r3, [r3]
 8009172:	60bb      	str	r3, [r7, #8]
   return(result);
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	f023 0310 	bic.w	r3, r3, #16
 800917a:	647b      	str	r3, [r7, #68]	@ 0x44
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	330c      	adds	r3, #12
 8009182:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009184:	61ba      	str	r2, [r7, #24]
 8009186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009188:	6979      	ldr	r1, [r7, #20]
 800918a:	69ba      	ldr	r2, [r7, #24]
 800918c:	e841 2300 	strex	r3, r2, [r1]
 8009190:	613b      	str	r3, [r7, #16]
   return(result);
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1e5      	bne.n	8009164 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2220      	movs	r2, #32
 800919c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80091a6:	bf00      	nop
 80091a8:	3754      	adds	r7, #84	@ 0x54
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f7ff fd5b 	bl	8008c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091d2:	bf00      	nop
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80091da:	b480      	push	{r7}
 80091dc:	b085      	sub	sp, #20
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b21      	cmp	r3, #33	@ 0x21
 80091ec:	d13e      	bne.n	800926c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091f6:	d114      	bne.n	8009222 <UART_Transmit_IT+0x48>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d110      	bne.n	8009222 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a1b      	ldr	r3, [r3, #32]
 8009204:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009214:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	1c9a      	adds	r2, r3, #2
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	621a      	str	r2, [r3, #32]
 8009220:	e008      	b.n	8009234 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	1c59      	adds	r1, r3, #1
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	6211      	str	r1, [r2, #32]
 800922c:	781a      	ldrb	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009238:	b29b      	uxth	r3, r3
 800923a:	3b01      	subs	r3, #1
 800923c:	b29b      	uxth	r3, r3
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	4619      	mov	r1, r3
 8009242:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10f      	bne.n	8009268 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68da      	ldr	r2, [r3, #12]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009256:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68da      	ldr	r2, [r3, #12]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009266:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	e000      	b.n	800926e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800926c:	2302      	movs	r3, #2
  }
}
 800926e:	4618      	mov	r0, r3
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b082      	sub	sp, #8
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68da      	ldr	r2, [r3, #12]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009290:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2220      	movs	r2, #32
 8009296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7fa f8da 	bl	8003454 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b08c      	sub	sp, #48	@ 0x30
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b22      	cmp	r3, #34	@ 0x22
 80092bc:	f040 80ae 	bne.w	800941c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092c8:	d117      	bne.n	80092fa <UART_Receive_IT+0x50>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d113      	bne.n	80092fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092da:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f2:	1c9a      	adds	r2, r3, #2
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80092f8:	e026      	b.n	8009348 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009300:	2300      	movs	r3, #0
 8009302:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800930c:	d007      	beq.n	800931e <UART_Receive_IT+0x74>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10a      	bne.n	800932c <UART_Receive_IT+0x82>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d106      	bne.n	800932c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	b2da      	uxtb	r2, r3
 8009326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009328:	701a      	strb	r2, [r3, #0]
 800932a:	e008      	b.n	800933e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009338:	b2da      	uxtb	r2, r3
 800933a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800933c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800934c:	b29b      	uxth	r3, r3
 800934e:	3b01      	subs	r3, #1
 8009350:	b29b      	uxth	r3, r3
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	4619      	mov	r1, r3
 8009356:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009358:	2b00      	cmp	r3, #0
 800935a:	d15d      	bne.n	8009418 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68da      	ldr	r2, [r3, #12]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f022 0220 	bic.w	r2, r2, #32
 800936a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68da      	ldr	r2, [r3, #12]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800937a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	695a      	ldr	r2, [r3, #20]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f022 0201 	bic.w	r2, r2, #1
 800938a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2220      	movs	r2, #32
 8009390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d135      	bne.n	800940e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	330c      	adds	r3, #12
 80093ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	e853 3f00 	ldrex	r3, [r3]
 80093b6:	613b      	str	r3, [r7, #16]
   return(result);
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	f023 0310 	bic.w	r3, r3, #16
 80093be:	627b      	str	r3, [r7, #36]	@ 0x24
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	330c      	adds	r3, #12
 80093c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093c8:	623a      	str	r2, [r7, #32]
 80093ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093cc:	69f9      	ldr	r1, [r7, #28]
 80093ce:	6a3a      	ldr	r2, [r7, #32]
 80093d0:	e841 2300 	strex	r3, r2, [r1]
 80093d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1e5      	bne.n	80093a8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 0310 	and.w	r3, r3, #16
 80093e6:	2b10      	cmp	r3, #16
 80093e8:	d10a      	bne.n	8009400 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093ea:	2300      	movs	r3, #0
 80093ec:	60fb      	str	r3, [r7, #12]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	60fb      	str	r3, [r7, #12]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	60fb      	str	r3, [r7, #12]
 80093fe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7ff fc48 	bl	8008c9c <HAL_UARTEx_RxEventCallback>
 800940c:	e002      	b.n	8009414 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7fa f83c 	bl	800348c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	e002      	b.n	800941e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	e000      	b.n	800941e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800941c:	2302      	movs	r3, #2
  }
}
 800941e:	4618      	mov	r0, r3
 8009420:	3730      	adds	r7, #48	@ 0x30
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
	...

08009428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800942c:	b0c0      	sub	sp, #256	@ 0x100
 800942e:	af00      	add	r7, sp, #0
 8009430:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009444:	68d9      	ldr	r1, [r3, #12]
 8009446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	ea40 0301 	orr.w	r3, r0, r1
 8009450:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009456:	689a      	ldr	r2, [r3, #8]
 8009458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	431a      	orrs	r2, r3
 8009460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	431a      	orrs	r2, r3
 8009468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	4313      	orrs	r3, r2
 8009470:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009480:	f021 010c 	bic.w	r1, r1, #12
 8009484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800948e:	430b      	orrs	r3, r1
 8009490:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800949e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094a2:	6999      	ldr	r1, [r3, #24]
 80094a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	ea40 0301 	orr.w	r3, r0, r1
 80094ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80094b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	4b8f      	ldr	r3, [pc, #572]	@ (80096f4 <UART_SetConfig+0x2cc>)
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d005      	beq.n	80094c8 <UART_SetConfig+0xa0>
 80094bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	4b8d      	ldr	r3, [pc, #564]	@ (80096f8 <UART_SetConfig+0x2d0>)
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d104      	bne.n	80094d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80094c8:	f7fd fda0 	bl	800700c <HAL_RCC_GetPCLK2Freq>
 80094cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80094d0:	e003      	b.n	80094da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80094d2:	f7fd fd87 	bl	8006fe4 <HAL_RCC_GetPCLK1Freq>
 80094d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094de:	69db      	ldr	r3, [r3, #28]
 80094e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094e4:	f040 810c 	bne.w	8009700 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094ec:	2200      	movs	r2, #0
 80094ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80094f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80094f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80094fa:	4622      	mov	r2, r4
 80094fc:	462b      	mov	r3, r5
 80094fe:	1891      	adds	r1, r2, r2
 8009500:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009502:	415b      	adcs	r3, r3
 8009504:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009506:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800950a:	4621      	mov	r1, r4
 800950c:	eb12 0801 	adds.w	r8, r2, r1
 8009510:	4629      	mov	r1, r5
 8009512:	eb43 0901 	adc.w	r9, r3, r1
 8009516:	f04f 0200 	mov.w	r2, #0
 800951a:	f04f 0300 	mov.w	r3, #0
 800951e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800952a:	4690      	mov	r8, r2
 800952c:	4699      	mov	r9, r3
 800952e:	4623      	mov	r3, r4
 8009530:	eb18 0303 	adds.w	r3, r8, r3
 8009534:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009538:	462b      	mov	r3, r5
 800953a:	eb49 0303 	adc.w	r3, r9, r3
 800953e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800954e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009552:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009556:	460b      	mov	r3, r1
 8009558:	18db      	adds	r3, r3, r3
 800955a:	653b      	str	r3, [r7, #80]	@ 0x50
 800955c:	4613      	mov	r3, r2
 800955e:	eb42 0303 	adc.w	r3, r2, r3
 8009562:	657b      	str	r3, [r7, #84]	@ 0x54
 8009564:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009568:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800956c:	f7f7 fb22 	bl	8000bb4 <__aeabi_uldivmod>
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	4b61      	ldr	r3, [pc, #388]	@ (80096fc <UART_SetConfig+0x2d4>)
 8009576:	fba3 2302 	umull	r2, r3, r3, r2
 800957a:	095b      	lsrs	r3, r3, #5
 800957c:	011c      	lsls	r4, r3, #4
 800957e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009582:	2200      	movs	r2, #0
 8009584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009588:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800958c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009590:	4642      	mov	r2, r8
 8009592:	464b      	mov	r3, r9
 8009594:	1891      	adds	r1, r2, r2
 8009596:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009598:	415b      	adcs	r3, r3
 800959a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800959c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80095a0:	4641      	mov	r1, r8
 80095a2:	eb12 0a01 	adds.w	sl, r2, r1
 80095a6:	4649      	mov	r1, r9
 80095a8:	eb43 0b01 	adc.w	fp, r3, r1
 80095ac:	f04f 0200 	mov.w	r2, #0
 80095b0:	f04f 0300 	mov.w	r3, #0
 80095b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80095b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80095bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095c0:	4692      	mov	sl, r2
 80095c2:	469b      	mov	fp, r3
 80095c4:	4643      	mov	r3, r8
 80095c6:	eb1a 0303 	adds.w	r3, sl, r3
 80095ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095ce:	464b      	mov	r3, r9
 80095d0:	eb4b 0303 	adc.w	r3, fp, r3
 80095d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80095d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80095e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80095ec:	460b      	mov	r3, r1
 80095ee:	18db      	adds	r3, r3, r3
 80095f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80095f2:	4613      	mov	r3, r2
 80095f4:	eb42 0303 	adc.w	r3, r2, r3
 80095f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80095fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80095fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009602:	f7f7 fad7 	bl	8000bb4 <__aeabi_uldivmod>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	4611      	mov	r1, r2
 800960c:	4b3b      	ldr	r3, [pc, #236]	@ (80096fc <UART_SetConfig+0x2d4>)
 800960e:	fba3 2301 	umull	r2, r3, r3, r1
 8009612:	095b      	lsrs	r3, r3, #5
 8009614:	2264      	movs	r2, #100	@ 0x64
 8009616:	fb02 f303 	mul.w	r3, r2, r3
 800961a:	1acb      	subs	r3, r1, r3
 800961c:	00db      	lsls	r3, r3, #3
 800961e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009622:	4b36      	ldr	r3, [pc, #216]	@ (80096fc <UART_SetConfig+0x2d4>)
 8009624:	fba3 2302 	umull	r2, r3, r3, r2
 8009628:	095b      	lsrs	r3, r3, #5
 800962a:	005b      	lsls	r3, r3, #1
 800962c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009630:	441c      	add	r4, r3
 8009632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009636:	2200      	movs	r2, #0
 8009638:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800963c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009640:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009644:	4642      	mov	r2, r8
 8009646:	464b      	mov	r3, r9
 8009648:	1891      	adds	r1, r2, r2
 800964a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800964c:	415b      	adcs	r3, r3
 800964e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009650:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009654:	4641      	mov	r1, r8
 8009656:	1851      	adds	r1, r2, r1
 8009658:	6339      	str	r1, [r7, #48]	@ 0x30
 800965a:	4649      	mov	r1, r9
 800965c:	414b      	adcs	r3, r1
 800965e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009660:	f04f 0200 	mov.w	r2, #0
 8009664:	f04f 0300 	mov.w	r3, #0
 8009668:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800966c:	4659      	mov	r1, fp
 800966e:	00cb      	lsls	r3, r1, #3
 8009670:	4651      	mov	r1, sl
 8009672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009676:	4651      	mov	r1, sl
 8009678:	00ca      	lsls	r2, r1, #3
 800967a:	4610      	mov	r0, r2
 800967c:	4619      	mov	r1, r3
 800967e:	4603      	mov	r3, r0
 8009680:	4642      	mov	r2, r8
 8009682:	189b      	adds	r3, r3, r2
 8009684:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009688:	464b      	mov	r3, r9
 800968a:	460a      	mov	r2, r1
 800968c:	eb42 0303 	adc.w	r3, r2, r3
 8009690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80096a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80096a8:	460b      	mov	r3, r1
 80096aa:	18db      	adds	r3, r3, r3
 80096ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096ae:	4613      	mov	r3, r2
 80096b0:	eb42 0303 	adc.w	r3, r2, r3
 80096b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80096ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80096be:	f7f7 fa79 	bl	8000bb4 <__aeabi_uldivmod>
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	4b0d      	ldr	r3, [pc, #52]	@ (80096fc <UART_SetConfig+0x2d4>)
 80096c8:	fba3 1302 	umull	r1, r3, r3, r2
 80096cc:	095b      	lsrs	r3, r3, #5
 80096ce:	2164      	movs	r1, #100	@ 0x64
 80096d0:	fb01 f303 	mul.w	r3, r1, r3
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	00db      	lsls	r3, r3, #3
 80096d8:	3332      	adds	r3, #50	@ 0x32
 80096da:	4a08      	ldr	r2, [pc, #32]	@ (80096fc <UART_SetConfig+0x2d4>)
 80096dc:	fba2 2303 	umull	r2, r3, r2, r3
 80096e0:	095b      	lsrs	r3, r3, #5
 80096e2:	f003 0207 	and.w	r2, r3, #7
 80096e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4422      	add	r2, r4
 80096ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80096f0:	e106      	b.n	8009900 <UART_SetConfig+0x4d8>
 80096f2:	bf00      	nop
 80096f4:	40011000 	.word	0x40011000
 80096f8:	40011400 	.word	0x40011400
 80096fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009704:	2200      	movs	r2, #0
 8009706:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800970a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800970e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009712:	4642      	mov	r2, r8
 8009714:	464b      	mov	r3, r9
 8009716:	1891      	adds	r1, r2, r2
 8009718:	6239      	str	r1, [r7, #32]
 800971a:	415b      	adcs	r3, r3
 800971c:	627b      	str	r3, [r7, #36]	@ 0x24
 800971e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009722:	4641      	mov	r1, r8
 8009724:	1854      	adds	r4, r2, r1
 8009726:	4649      	mov	r1, r9
 8009728:	eb43 0501 	adc.w	r5, r3, r1
 800972c:	f04f 0200 	mov.w	r2, #0
 8009730:	f04f 0300 	mov.w	r3, #0
 8009734:	00eb      	lsls	r3, r5, #3
 8009736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800973a:	00e2      	lsls	r2, r4, #3
 800973c:	4614      	mov	r4, r2
 800973e:	461d      	mov	r5, r3
 8009740:	4643      	mov	r3, r8
 8009742:	18e3      	adds	r3, r4, r3
 8009744:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009748:	464b      	mov	r3, r9
 800974a:	eb45 0303 	adc.w	r3, r5, r3
 800974e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800975e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009762:	f04f 0200 	mov.w	r2, #0
 8009766:	f04f 0300 	mov.w	r3, #0
 800976a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800976e:	4629      	mov	r1, r5
 8009770:	008b      	lsls	r3, r1, #2
 8009772:	4621      	mov	r1, r4
 8009774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009778:	4621      	mov	r1, r4
 800977a:	008a      	lsls	r2, r1, #2
 800977c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009780:	f7f7 fa18 	bl	8000bb4 <__aeabi_uldivmod>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	4b60      	ldr	r3, [pc, #384]	@ (800990c <UART_SetConfig+0x4e4>)
 800978a:	fba3 2302 	umull	r2, r3, r3, r2
 800978e:	095b      	lsrs	r3, r3, #5
 8009790:	011c      	lsls	r4, r3, #4
 8009792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009796:	2200      	movs	r2, #0
 8009798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800979c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80097a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80097a4:	4642      	mov	r2, r8
 80097a6:	464b      	mov	r3, r9
 80097a8:	1891      	adds	r1, r2, r2
 80097aa:	61b9      	str	r1, [r7, #24]
 80097ac:	415b      	adcs	r3, r3
 80097ae:	61fb      	str	r3, [r7, #28]
 80097b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097b4:	4641      	mov	r1, r8
 80097b6:	1851      	adds	r1, r2, r1
 80097b8:	6139      	str	r1, [r7, #16]
 80097ba:	4649      	mov	r1, r9
 80097bc:	414b      	adcs	r3, r1
 80097be:	617b      	str	r3, [r7, #20]
 80097c0:	f04f 0200 	mov.w	r2, #0
 80097c4:	f04f 0300 	mov.w	r3, #0
 80097c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80097cc:	4659      	mov	r1, fp
 80097ce:	00cb      	lsls	r3, r1, #3
 80097d0:	4651      	mov	r1, sl
 80097d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097d6:	4651      	mov	r1, sl
 80097d8:	00ca      	lsls	r2, r1, #3
 80097da:	4610      	mov	r0, r2
 80097dc:	4619      	mov	r1, r3
 80097de:	4603      	mov	r3, r0
 80097e0:	4642      	mov	r2, r8
 80097e2:	189b      	adds	r3, r3, r2
 80097e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80097e8:	464b      	mov	r3, r9
 80097ea:	460a      	mov	r2, r1
 80097ec:	eb42 0303 	adc.w	r3, r2, r3
 80097f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80097f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80097fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009800:	f04f 0200 	mov.w	r2, #0
 8009804:	f04f 0300 	mov.w	r3, #0
 8009808:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800980c:	4649      	mov	r1, r9
 800980e:	008b      	lsls	r3, r1, #2
 8009810:	4641      	mov	r1, r8
 8009812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009816:	4641      	mov	r1, r8
 8009818:	008a      	lsls	r2, r1, #2
 800981a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800981e:	f7f7 f9c9 	bl	8000bb4 <__aeabi_uldivmod>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	4611      	mov	r1, r2
 8009828:	4b38      	ldr	r3, [pc, #224]	@ (800990c <UART_SetConfig+0x4e4>)
 800982a:	fba3 2301 	umull	r2, r3, r3, r1
 800982e:	095b      	lsrs	r3, r3, #5
 8009830:	2264      	movs	r2, #100	@ 0x64
 8009832:	fb02 f303 	mul.w	r3, r2, r3
 8009836:	1acb      	subs	r3, r1, r3
 8009838:	011b      	lsls	r3, r3, #4
 800983a:	3332      	adds	r3, #50	@ 0x32
 800983c:	4a33      	ldr	r2, [pc, #204]	@ (800990c <UART_SetConfig+0x4e4>)
 800983e:	fba2 2303 	umull	r2, r3, r2, r3
 8009842:	095b      	lsrs	r3, r3, #5
 8009844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009848:	441c      	add	r4, r3
 800984a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800984e:	2200      	movs	r2, #0
 8009850:	673b      	str	r3, [r7, #112]	@ 0x70
 8009852:	677a      	str	r2, [r7, #116]	@ 0x74
 8009854:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009858:	4642      	mov	r2, r8
 800985a:	464b      	mov	r3, r9
 800985c:	1891      	adds	r1, r2, r2
 800985e:	60b9      	str	r1, [r7, #8]
 8009860:	415b      	adcs	r3, r3
 8009862:	60fb      	str	r3, [r7, #12]
 8009864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009868:	4641      	mov	r1, r8
 800986a:	1851      	adds	r1, r2, r1
 800986c:	6039      	str	r1, [r7, #0]
 800986e:	4649      	mov	r1, r9
 8009870:	414b      	adcs	r3, r1
 8009872:	607b      	str	r3, [r7, #4]
 8009874:	f04f 0200 	mov.w	r2, #0
 8009878:	f04f 0300 	mov.w	r3, #0
 800987c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009880:	4659      	mov	r1, fp
 8009882:	00cb      	lsls	r3, r1, #3
 8009884:	4651      	mov	r1, sl
 8009886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800988a:	4651      	mov	r1, sl
 800988c:	00ca      	lsls	r2, r1, #3
 800988e:	4610      	mov	r0, r2
 8009890:	4619      	mov	r1, r3
 8009892:	4603      	mov	r3, r0
 8009894:	4642      	mov	r2, r8
 8009896:	189b      	adds	r3, r3, r2
 8009898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800989a:	464b      	mov	r3, r9
 800989c:	460a      	mov	r2, r1
 800989e:	eb42 0303 	adc.w	r3, r2, r3
 80098a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80098a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80098ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80098b0:	f04f 0200 	mov.w	r2, #0
 80098b4:	f04f 0300 	mov.w	r3, #0
 80098b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80098bc:	4649      	mov	r1, r9
 80098be:	008b      	lsls	r3, r1, #2
 80098c0:	4641      	mov	r1, r8
 80098c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098c6:	4641      	mov	r1, r8
 80098c8:	008a      	lsls	r2, r1, #2
 80098ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80098ce:	f7f7 f971 	bl	8000bb4 <__aeabi_uldivmod>
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	4b0d      	ldr	r3, [pc, #52]	@ (800990c <UART_SetConfig+0x4e4>)
 80098d8:	fba3 1302 	umull	r1, r3, r3, r2
 80098dc:	095b      	lsrs	r3, r3, #5
 80098de:	2164      	movs	r1, #100	@ 0x64
 80098e0:	fb01 f303 	mul.w	r3, r1, r3
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	011b      	lsls	r3, r3, #4
 80098e8:	3332      	adds	r3, #50	@ 0x32
 80098ea:	4a08      	ldr	r2, [pc, #32]	@ (800990c <UART_SetConfig+0x4e4>)
 80098ec:	fba2 2303 	umull	r2, r3, r2, r3
 80098f0:	095b      	lsrs	r3, r3, #5
 80098f2:	f003 020f 	and.w	r2, r3, #15
 80098f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4422      	add	r2, r4
 80098fe:	609a      	str	r2, [r3, #8]
}
 8009900:	bf00      	nop
 8009902:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009906:	46bd      	mov	sp, r7
 8009908:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800990c:	51eb851f 	.word	0x51eb851f

08009910 <atan>:
 8009910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	ec55 4b10 	vmov	r4, r5, d0
 8009918:	4bbf      	ldr	r3, [pc, #764]	@ (8009c18 <atan+0x308>)
 800991a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800991e:	429e      	cmp	r6, r3
 8009920:	46ab      	mov	fp, r5
 8009922:	d918      	bls.n	8009956 <atan+0x46>
 8009924:	4bbd      	ldr	r3, [pc, #756]	@ (8009c1c <atan+0x30c>)
 8009926:	429e      	cmp	r6, r3
 8009928:	d801      	bhi.n	800992e <atan+0x1e>
 800992a:	d109      	bne.n	8009940 <atan+0x30>
 800992c:	b144      	cbz	r4, 8009940 <atan+0x30>
 800992e:	4622      	mov	r2, r4
 8009930:	462b      	mov	r3, r5
 8009932:	4620      	mov	r0, r4
 8009934:	4629      	mov	r1, r5
 8009936:	f7f6 fc75 	bl	8000224 <__adddf3>
 800993a:	4604      	mov	r4, r0
 800993c:	460d      	mov	r5, r1
 800993e:	e006      	b.n	800994e <atan+0x3e>
 8009940:	f1bb 0f00 	cmp.w	fp, #0
 8009944:	f340 812b 	ble.w	8009b9e <atan+0x28e>
 8009948:	a597      	add	r5, pc, #604	@ (adr r5, 8009ba8 <atan+0x298>)
 800994a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800994e:	ec45 4b10 	vmov	d0, r4, r5
 8009952:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009956:	4bb2      	ldr	r3, [pc, #712]	@ (8009c20 <atan+0x310>)
 8009958:	429e      	cmp	r6, r3
 800995a:	d813      	bhi.n	8009984 <atan+0x74>
 800995c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009960:	429e      	cmp	r6, r3
 8009962:	d80c      	bhi.n	800997e <atan+0x6e>
 8009964:	a392      	add	r3, pc, #584	@ (adr r3, 8009bb0 <atan+0x2a0>)
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	4620      	mov	r0, r4
 800996c:	4629      	mov	r1, r5
 800996e:	f7f6 fc59 	bl	8000224 <__adddf3>
 8009972:	4bac      	ldr	r3, [pc, #688]	@ (8009c24 <atan+0x314>)
 8009974:	2200      	movs	r2, #0
 8009976:	f7f7 f89b 	bl	8000ab0 <__aeabi_dcmpgt>
 800997a:	2800      	cmp	r0, #0
 800997c:	d1e7      	bne.n	800994e <atan+0x3e>
 800997e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009982:	e029      	b.n	80099d8 <atan+0xc8>
 8009984:	f000 f9b0 	bl	8009ce8 <fabs>
 8009988:	4ba7      	ldr	r3, [pc, #668]	@ (8009c28 <atan+0x318>)
 800998a:	429e      	cmp	r6, r3
 800998c:	ec55 4b10 	vmov	r4, r5, d0
 8009990:	f200 80bc 	bhi.w	8009b0c <atan+0x1fc>
 8009994:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8009998:	429e      	cmp	r6, r3
 800999a:	f200 809e 	bhi.w	8009ada <atan+0x1ca>
 800999e:	4622      	mov	r2, r4
 80099a0:	462b      	mov	r3, r5
 80099a2:	4620      	mov	r0, r4
 80099a4:	4629      	mov	r1, r5
 80099a6:	f7f6 fc3d 	bl	8000224 <__adddf3>
 80099aa:	4b9e      	ldr	r3, [pc, #632]	@ (8009c24 <atan+0x314>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	f7f6 fc37 	bl	8000220 <__aeabi_dsub>
 80099b2:	2200      	movs	r2, #0
 80099b4:	4606      	mov	r6, r0
 80099b6:	460f      	mov	r7, r1
 80099b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80099bc:	4620      	mov	r0, r4
 80099be:	4629      	mov	r1, r5
 80099c0:	f7f6 fc30 	bl	8000224 <__adddf3>
 80099c4:	4602      	mov	r2, r0
 80099c6:	460b      	mov	r3, r1
 80099c8:	4630      	mov	r0, r6
 80099ca:	4639      	mov	r1, r7
 80099cc:	f7f6 ff0a 	bl	80007e4 <__aeabi_ddiv>
 80099d0:	f04f 0a00 	mov.w	sl, #0
 80099d4:	4604      	mov	r4, r0
 80099d6:	460d      	mov	r5, r1
 80099d8:	4622      	mov	r2, r4
 80099da:	462b      	mov	r3, r5
 80099dc:	4620      	mov	r0, r4
 80099de:	4629      	mov	r1, r5
 80099e0:	f7f6 fdd6 	bl	8000590 <__aeabi_dmul>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	4680      	mov	r8, r0
 80099ea:	4689      	mov	r9, r1
 80099ec:	f7f6 fdd0 	bl	8000590 <__aeabi_dmul>
 80099f0:	a371      	add	r3, pc, #452	@ (adr r3, 8009bb8 <atan+0x2a8>)
 80099f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f6:	4606      	mov	r6, r0
 80099f8:	460f      	mov	r7, r1
 80099fa:	f7f6 fdc9 	bl	8000590 <__aeabi_dmul>
 80099fe:	a370      	add	r3, pc, #448	@ (adr r3, 8009bc0 <atan+0x2b0>)
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	f7f6 fc0e 	bl	8000224 <__adddf3>
 8009a08:	4632      	mov	r2, r6
 8009a0a:	463b      	mov	r3, r7
 8009a0c:	f7f6 fdc0 	bl	8000590 <__aeabi_dmul>
 8009a10:	a36d      	add	r3, pc, #436	@ (adr r3, 8009bc8 <atan+0x2b8>)
 8009a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a16:	f7f6 fc05 	bl	8000224 <__adddf3>
 8009a1a:	4632      	mov	r2, r6
 8009a1c:	463b      	mov	r3, r7
 8009a1e:	f7f6 fdb7 	bl	8000590 <__aeabi_dmul>
 8009a22:	a36b      	add	r3, pc, #428	@ (adr r3, 8009bd0 <atan+0x2c0>)
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	f7f6 fbfc 	bl	8000224 <__adddf3>
 8009a2c:	4632      	mov	r2, r6
 8009a2e:	463b      	mov	r3, r7
 8009a30:	f7f6 fdae 	bl	8000590 <__aeabi_dmul>
 8009a34:	a368      	add	r3, pc, #416	@ (adr r3, 8009bd8 <atan+0x2c8>)
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	f7f6 fbf3 	bl	8000224 <__adddf3>
 8009a3e:	4632      	mov	r2, r6
 8009a40:	463b      	mov	r3, r7
 8009a42:	f7f6 fda5 	bl	8000590 <__aeabi_dmul>
 8009a46:	a366      	add	r3, pc, #408	@ (adr r3, 8009be0 <atan+0x2d0>)
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	f7f6 fbea 	bl	8000224 <__adddf3>
 8009a50:	4642      	mov	r2, r8
 8009a52:	464b      	mov	r3, r9
 8009a54:	f7f6 fd9c 	bl	8000590 <__aeabi_dmul>
 8009a58:	a363      	add	r3, pc, #396	@ (adr r3, 8009be8 <atan+0x2d8>)
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	4680      	mov	r8, r0
 8009a60:	4689      	mov	r9, r1
 8009a62:	4630      	mov	r0, r6
 8009a64:	4639      	mov	r1, r7
 8009a66:	f7f6 fd93 	bl	8000590 <__aeabi_dmul>
 8009a6a:	a361      	add	r3, pc, #388	@ (adr r3, 8009bf0 <atan+0x2e0>)
 8009a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a70:	f7f6 fbd6 	bl	8000220 <__aeabi_dsub>
 8009a74:	4632      	mov	r2, r6
 8009a76:	463b      	mov	r3, r7
 8009a78:	f7f6 fd8a 	bl	8000590 <__aeabi_dmul>
 8009a7c:	a35e      	add	r3, pc, #376	@ (adr r3, 8009bf8 <atan+0x2e8>)
 8009a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a82:	f7f6 fbcd 	bl	8000220 <__aeabi_dsub>
 8009a86:	4632      	mov	r2, r6
 8009a88:	463b      	mov	r3, r7
 8009a8a:	f7f6 fd81 	bl	8000590 <__aeabi_dmul>
 8009a8e:	a35c      	add	r3, pc, #368	@ (adr r3, 8009c00 <atan+0x2f0>)
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	f7f6 fbc4 	bl	8000220 <__aeabi_dsub>
 8009a98:	4632      	mov	r2, r6
 8009a9a:	463b      	mov	r3, r7
 8009a9c:	f7f6 fd78 	bl	8000590 <__aeabi_dmul>
 8009aa0:	a359      	add	r3, pc, #356	@ (adr r3, 8009c08 <atan+0x2f8>)
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	f7f6 fbbb 	bl	8000220 <__aeabi_dsub>
 8009aaa:	4632      	mov	r2, r6
 8009aac:	463b      	mov	r3, r7
 8009aae:	f7f6 fd6f 	bl	8000590 <__aeabi_dmul>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	4649      	mov	r1, r9
 8009aba:	f7f6 fbb3 	bl	8000224 <__adddf3>
 8009abe:	4622      	mov	r2, r4
 8009ac0:	462b      	mov	r3, r5
 8009ac2:	f7f6 fd65 	bl	8000590 <__aeabi_dmul>
 8009ac6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8009aca:	4602      	mov	r2, r0
 8009acc:	460b      	mov	r3, r1
 8009ace:	d148      	bne.n	8009b62 <atan+0x252>
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	4629      	mov	r1, r5
 8009ad4:	f7f6 fba4 	bl	8000220 <__aeabi_dsub>
 8009ad8:	e72f      	b.n	800993a <atan+0x2a>
 8009ada:	4b52      	ldr	r3, [pc, #328]	@ (8009c24 <atan+0x314>)
 8009adc:	2200      	movs	r2, #0
 8009ade:	4620      	mov	r0, r4
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	f7f6 fb9d 	bl	8000220 <__aeabi_dsub>
 8009ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8009c24 <atan+0x314>)
 8009ae8:	4606      	mov	r6, r0
 8009aea:	460f      	mov	r7, r1
 8009aec:	2200      	movs	r2, #0
 8009aee:	4620      	mov	r0, r4
 8009af0:	4629      	mov	r1, r5
 8009af2:	f7f6 fb97 	bl	8000224 <__adddf3>
 8009af6:	4602      	mov	r2, r0
 8009af8:	460b      	mov	r3, r1
 8009afa:	4630      	mov	r0, r6
 8009afc:	4639      	mov	r1, r7
 8009afe:	f7f6 fe71 	bl	80007e4 <__aeabi_ddiv>
 8009b02:	f04f 0a01 	mov.w	sl, #1
 8009b06:	4604      	mov	r4, r0
 8009b08:	460d      	mov	r5, r1
 8009b0a:	e765      	b.n	80099d8 <atan+0xc8>
 8009b0c:	4b47      	ldr	r3, [pc, #284]	@ (8009c2c <atan+0x31c>)
 8009b0e:	429e      	cmp	r6, r3
 8009b10:	d21c      	bcs.n	8009b4c <atan+0x23c>
 8009b12:	4b47      	ldr	r3, [pc, #284]	@ (8009c30 <atan+0x320>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	4620      	mov	r0, r4
 8009b18:	4629      	mov	r1, r5
 8009b1a:	f7f6 fb81 	bl	8000220 <__aeabi_dsub>
 8009b1e:	4b44      	ldr	r3, [pc, #272]	@ (8009c30 <atan+0x320>)
 8009b20:	4606      	mov	r6, r0
 8009b22:	460f      	mov	r7, r1
 8009b24:	2200      	movs	r2, #0
 8009b26:	4620      	mov	r0, r4
 8009b28:	4629      	mov	r1, r5
 8009b2a:	f7f6 fd31 	bl	8000590 <__aeabi_dmul>
 8009b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8009c24 <atan+0x314>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	f7f6 fb77 	bl	8000224 <__adddf3>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	4639      	mov	r1, r7
 8009b3e:	f7f6 fe51 	bl	80007e4 <__aeabi_ddiv>
 8009b42:	f04f 0a02 	mov.w	sl, #2
 8009b46:	4604      	mov	r4, r0
 8009b48:	460d      	mov	r5, r1
 8009b4a:	e745      	b.n	80099d8 <atan+0xc8>
 8009b4c:	4622      	mov	r2, r4
 8009b4e:	462b      	mov	r3, r5
 8009b50:	4938      	ldr	r1, [pc, #224]	@ (8009c34 <atan+0x324>)
 8009b52:	2000      	movs	r0, #0
 8009b54:	f7f6 fe46 	bl	80007e4 <__aeabi_ddiv>
 8009b58:	f04f 0a03 	mov.w	sl, #3
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	460d      	mov	r5, r1
 8009b60:	e73a      	b.n	80099d8 <atan+0xc8>
 8009b62:	4b35      	ldr	r3, [pc, #212]	@ (8009c38 <atan+0x328>)
 8009b64:	4e35      	ldr	r6, [pc, #212]	@ (8009c3c <atan+0x32c>)
 8009b66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6e:	f7f6 fb57 	bl	8000220 <__aeabi_dsub>
 8009b72:	4622      	mov	r2, r4
 8009b74:	462b      	mov	r3, r5
 8009b76:	f7f6 fb53 	bl	8000220 <__aeabi_dsub>
 8009b7a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009b86:	f7f6 fb4b 	bl	8000220 <__aeabi_dsub>
 8009b8a:	f1bb 0f00 	cmp.w	fp, #0
 8009b8e:	4604      	mov	r4, r0
 8009b90:	460d      	mov	r5, r1
 8009b92:	f6bf aedc 	bge.w	800994e <atan+0x3e>
 8009b96:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b9a:	461d      	mov	r5, r3
 8009b9c:	e6d7      	b.n	800994e <atan+0x3e>
 8009b9e:	a51c      	add	r5, pc, #112	@ (adr r5, 8009c10 <atan+0x300>)
 8009ba0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009ba4:	e6d3      	b.n	800994e <atan+0x3e>
 8009ba6:	bf00      	nop
 8009ba8:	54442d18 	.word	0x54442d18
 8009bac:	3ff921fb 	.word	0x3ff921fb
 8009bb0:	8800759c 	.word	0x8800759c
 8009bb4:	7e37e43c 	.word	0x7e37e43c
 8009bb8:	e322da11 	.word	0xe322da11
 8009bbc:	3f90ad3a 	.word	0x3f90ad3a
 8009bc0:	24760deb 	.word	0x24760deb
 8009bc4:	3fa97b4b 	.word	0x3fa97b4b
 8009bc8:	a0d03d51 	.word	0xa0d03d51
 8009bcc:	3fb10d66 	.word	0x3fb10d66
 8009bd0:	c54c206e 	.word	0xc54c206e
 8009bd4:	3fb745cd 	.word	0x3fb745cd
 8009bd8:	920083ff 	.word	0x920083ff
 8009bdc:	3fc24924 	.word	0x3fc24924
 8009be0:	5555550d 	.word	0x5555550d
 8009be4:	3fd55555 	.word	0x3fd55555
 8009be8:	2c6a6c2f 	.word	0x2c6a6c2f
 8009bec:	bfa2b444 	.word	0xbfa2b444
 8009bf0:	52defd9a 	.word	0x52defd9a
 8009bf4:	3fadde2d 	.word	0x3fadde2d
 8009bf8:	af749a6d 	.word	0xaf749a6d
 8009bfc:	3fb3b0f2 	.word	0x3fb3b0f2
 8009c00:	fe231671 	.word	0xfe231671
 8009c04:	3fbc71c6 	.word	0x3fbc71c6
 8009c08:	9998ebc4 	.word	0x9998ebc4
 8009c0c:	3fc99999 	.word	0x3fc99999
 8009c10:	54442d18 	.word	0x54442d18
 8009c14:	bff921fb 	.word	0xbff921fb
 8009c18:	440fffff 	.word	0x440fffff
 8009c1c:	7ff00000 	.word	0x7ff00000
 8009c20:	3fdbffff 	.word	0x3fdbffff
 8009c24:	3ff00000 	.word	0x3ff00000
 8009c28:	3ff2ffff 	.word	0x3ff2ffff
 8009c2c:	40038000 	.word	0x40038000
 8009c30:	3ff80000 	.word	0x3ff80000
 8009c34:	bff00000 	.word	0xbff00000
 8009c38:	0800b370 	.word	0x0800b370
 8009c3c:	0800b390 	.word	0x0800b390

08009c40 <cos>:
 8009c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c42:	ec53 2b10 	vmov	r2, r3, d0
 8009c46:	4826      	ldr	r0, [pc, #152]	@ (8009ce0 <cos+0xa0>)
 8009c48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009c4c:	4281      	cmp	r1, r0
 8009c4e:	d806      	bhi.n	8009c5e <cos+0x1e>
 8009c50:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009cd8 <cos+0x98>
 8009c54:	b005      	add	sp, #20
 8009c56:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c5a:	f000 b8a1 	b.w	8009da0 <__kernel_cos>
 8009c5e:	4821      	ldr	r0, [pc, #132]	@ (8009ce4 <cos+0xa4>)
 8009c60:	4281      	cmp	r1, r0
 8009c62:	d908      	bls.n	8009c76 <cos+0x36>
 8009c64:	4610      	mov	r0, r2
 8009c66:	4619      	mov	r1, r3
 8009c68:	f7f6 fada 	bl	8000220 <__aeabi_dsub>
 8009c6c:	ec41 0b10 	vmov	d0, r0, r1
 8009c70:	b005      	add	sp, #20
 8009c72:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c76:	4668      	mov	r0, sp
 8009c78:	f000 fa16 	bl	800a0a8 <__ieee754_rem_pio2>
 8009c7c:	f000 0003 	and.w	r0, r0, #3
 8009c80:	2801      	cmp	r0, #1
 8009c82:	d00b      	beq.n	8009c9c <cos+0x5c>
 8009c84:	2802      	cmp	r0, #2
 8009c86:	d015      	beq.n	8009cb4 <cos+0x74>
 8009c88:	b9d8      	cbnz	r0, 8009cc2 <cos+0x82>
 8009c8a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c8e:	ed9d 0b00 	vldr	d0, [sp]
 8009c92:	f000 f885 	bl	8009da0 <__kernel_cos>
 8009c96:	ec51 0b10 	vmov	r0, r1, d0
 8009c9a:	e7e7      	b.n	8009c6c <cos+0x2c>
 8009c9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ca0:	ed9d 0b00 	vldr	d0, [sp]
 8009ca4:	f000 f944 	bl	8009f30 <__kernel_sin>
 8009ca8:	ec53 2b10 	vmov	r2, r3, d0
 8009cac:	4610      	mov	r0, r2
 8009cae:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009cb2:	e7db      	b.n	8009c6c <cos+0x2c>
 8009cb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cb8:	ed9d 0b00 	vldr	d0, [sp]
 8009cbc:	f000 f870 	bl	8009da0 <__kernel_cos>
 8009cc0:	e7f2      	b.n	8009ca8 <cos+0x68>
 8009cc2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cc6:	ed9d 0b00 	vldr	d0, [sp]
 8009cca:	2001      	movs	r0, #1
 8009ccc:	f000 f930 	bl	8009f30 <__kernel_sin>
 8009cd0:	e7e1      	b.n	8009c96 <cos+0x56>
 8009cd2:	bf00      	nop
 8009cd4:	f3af 8000 	nop.w
	...
 8009ce0:	3fe921fb 	.word	0x3fe921fb
 8009ce4:	7fefffff 	.word	0x7fefffff

08009ce8 <fabs>:
 8009ce8:	ec51 0b10 	vmov	r0, r1, d0
 8009cec:	4602      	mov	r2, r0
 8009cee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009cf2:	ec43 2b10 	vmov	d0, r2, r3
 8009cf6:	4770      	bx	lr

08009cf8 <sin>:
 8009cf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cfa:	ec53 2b10 	vmov	r2, r3, d0
 8009cfe:	4826      	ldr	r0, [pc, #152]	@ (8009d98 <sin+0xa0>)
 8009d00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009d04:	4281      	cmp	r1, r0
 8009d06:	d807      	bhi.n	8009d18 <sin+0x20>
 8009d08:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009d90 <sin+0x98>
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	b005      	add	sp, #20
 8009d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d14:	f000 b90c 	b.w	8009f30 <__kernel_sin>
 8009d18:	4820      	ldr	r0, [pc, #128]	@ (8009d9c <sin+0xa4>)
 8009d1a:	4281      	cmp	r1, r0
 8009d1c:	d908      	bls.n	8009d30 <sin+0x38>
 8009d1e:	4610      	mov	r0, r2
 8009d20:	4619      	mov	r1, r3
 8009d22:	f7f6 fa7d 	bl	8000220 <__aeabi_dsub>
 8009d26:	ec41 0b10 	vmov	d0, r0, r1
 8009d2a:	b005      	add	sp, #20
 8009d2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d30:	4668      	mov	r0, sp
 8009d32:	f000 f9b9 	bl	800a0a8 <__ieee754_rem_pio2>
 8009d36:	f000 0003 	and.w	r0, r0, #3
 8009d3a:	2801      	cmp	r0, #1
 8009d3c:	d00c      	beq.n	8009d58 <sin+0x60>
 8009d3e:	2802      	cmp	r0, #2
 8009d40:	d011      	beq.n	8009d66 <sin+0x6e>
 8009d42:	b9e8      	cbnz	r0, 8009d80 <sin+0x88>
 8009d44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d48:	ed9d 0b00 	vldr	d0, [sp]
 8009d4c:	2001      	movs	r0, #1
 8009d4e:	f000 f8ef 	bl	8009f30 <__kernel_sin>
 8009d52:	ec51 0b10 	vmov	r0, r1, d0
 8009d56:	e7e6      	b.n	8009d26 <sin+0x2e>
 8009d58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d5c:	ed9d 0b00 	vldr	d0, [sp]
 8009d60:	f000 f81e 	bl	8009da0 <__kernel_cos>
 8009d64:	e7f5      	b.n	8009d52 <sin+0x5a>
 8009d66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d6a:	ed9d 0b00 	vldr	d0, [sp]
 8009d6e:	2001      	movs	r0, #1
 8009d70:	f000 f8de 	bl	8009f30 <__kernel_sin>
 8009d74:	ec53 2b10 	vmov	r2, r3, d0
 8009d78:	4610      	mov	r0, r2
 8009d7a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009d7e:	e7d2      	b.n	8009d26 <sin+0x2e>
 8009d80:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d84:	ed9d 0b00 	vldr	d0, [sp]
 8009d88:	f000 f80a 	bl	8009da0 <__kernel_cos>
 8009d8c:	e7f2      	b.n	8009d74 <sin+0x7c>
 8009d8e:	bf00      	nop
	...
 8009d98:	3fe921fb 	.word	0x3fe921fb
 8009d9c:	7fefffff 	.word	0x7fefffff

08009da0 <__kernel_cos>:
 8009da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da4:	ec57 6b10 	vmov	r6, r7, d0
 8009da8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009dac:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8009db0:	ed8d 1b00 	vstr	d1, [sp]
 8009db4:	d206      	bcs.n	8009dc4 <__kernel_cos+0x24>
 8009db6:	4630      	mov	r0, r6
 8009db8:	4639      	mov	r1, r7
 8009dba:	f7f6 fe83 	bl	8000ac4 <__aeabi_d2iz>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	f000 8088 	beq.w	8009ed4 <__kernel_cos+0x134>
 8009dc4:	4632      	mov	r2, r6
 8009dc6:	463b      	mov	r3, r7
 8009dc8:	4630      	mov	r0, r6
 8009dca:	4639      	mov	r1, r7
 8009dcc:	f7f6 fbe0 	bl	8000590 <__aeabi_dmul>
 8009dd0:	4b51      	ldr	r3, [pc, #324]	@ (8009f18 <__kernel_cos+0x178>)
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	460d      	mov	r5, r1
 8009dd8:	f7f6 fbda 	bl	8000590 <__aeabi_dmul>
 8009ddc:	a340      	add	r3, pc, #256	@ (adr r3, 8009ee0 <__kernel_cos+0x140>)
 8009dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de2:	4682      	mov	sl, r0
 8009de4:	468b      	mov	fp, r1
 8009de6:	4620      	mov	r0, r4
 8009de8:	4629      	mov	r1, r5
 8009dea:	f7f6 fbd1 	bl	8000590 <__aeabi_dmul>
 8009dee:	a33e      	add	r3, pc, #248	@ (adr r3, 8009ee8 <__kernel_cos+0x148>)
 8009df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df4:	f7f6 fa16 	bl	8000224 <__adddf3>
 8009df8:	4622      	mov	r2, r4
 8009dfa:	462b      	mov	r3, r5
 8009dfc:	f7f6 fbc8 	bl	8000590 <__aeabi_dmul>
 8009e00:	a33b      	add	r3, pc, #236	@ (adr r3, 8009ef0 <__kernel_cos+0x150>)
 8009e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e06:	f7f6 fa0b 	bl	8000220 <__aeabi_dsub>
 8009e0a:	4622      	mov	r2, r4
 8009e0c:	462b      	mov	r3, r5
 8009e0e:	f7f6 fbbf 	bl	8000590 <__aeabi_dmul>
 8009e12:	a339      	add	r3, pc, #228	@ (adr r3, 8009ef8 <__kernel_cos+0x158>)
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	f7f6 fa04 	bl	8000224 <__adddf3>
 8009e1c:	4622      	mov	r2, r4
 8009e1e:	462b      	mov	r3, r5
 8009e20:	f7f6 fbb6 	bl	8000590 <__aeabi_dmul>
 8009e24:	a336      	add	r3, pc, #216	@ (adr r3, 8009f00 <__kernel_cos+0x160>)
 8009e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2a:	f7f6 f9f9 	bl	8000220 <__aeabi_dsub>
 8009e2e:	4622      	mov	r2, r4
 8009e30:	462b      	mov	r3, r5
 8009e32:	f7f6 fbad 	bl	8000590 <__aeabi_dmul>
 8009e36:	a334      	add	r3, pc, #208	@ (adr r3, 8009f08 <__kernel_cos+0x168>)
 8009e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3c:	f7f6 f9f2 	bl	8000224 <__adddf3>
 8009e40:	4622      	mov	r2, r4
 8009e42:	462b      	mov	r3, r5
 8009e44:	f7f6 fba4 	bl	8000590 <__aeabi_dmul>
 8009e48:	4622      	mov	r2, r4
 8009e4a:	462b      	mov	r3, r5
 8009e4c:	f7f6 fba0 	bl	8000590 <__aeabi_dmul>
 8009e50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e54:	4604      	mov	r4, r0
 8009e56:	460d      	mov	r5, r1
 8009e58:	4630      	mov	r0, r6
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	f7f6 fb98 	bl	8000590 <__aeabi_dmul>
 8009e60:	460b      	mov	r3, r1
 8009e62:	4602      	mov	r2, r0
 8009e64:	4629      	mov	r1, r5
 8009e66:	4620      	mov	r0, r4
 8009e68:	f7f6 f9da 	bl	8000220 <__aeabi_dsub>
 8009e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8009f1c <__kernel_cos+0x17c>)
 8009e6e:	4598      	cmp	r8, r3
 8009e70:	4606      	mov	r6, r0
 8009e72:	460f      	mov	r7, r1
 8009e74:	d810      	bhi.n	8009e98 <__kernel_cos+0xf8>
 8009e76:	4602      	mov	r2, r0
 8009e78:	460b      	mov	r3, r1
 8009e7a:	4650      	mov	r0, sl
 8009e7c:	4659      	mov	r1, fp
 8009e7e:	f7f6 f9cf 	bl	8000220 <__aeabi_dsub>
 8009e82:	460b      	mov	r3, r1
 8009e84:	4926      	ldr	r1, [pc, #152]	@ (8009f20 <__kernel_cos+0x180>)
 8009e86:	4602      	mov	r2, r0
 8009e88:	2000      	movs	r0, #0
 8009e8a:	f7f6 f9c9 	bl	8000220 <__aeabi_dsub>
 8009e8e:	ec41 0b10 	vmov	d0, r0, r1
 8009e92:	b003      	add	sp, #12
 8009e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e98:	4b22      	ldr	r3, [pc, #136]	@ (8009f24 <__kernel_cos+0x184>)
 8009e9a:	4921      	ldr	r1, [pc, #132]	@ (8009f20 <__kernel_cos+0x180>)
 8009e9c:	4598      	cmp	r8, r3
 8009e9e:	bf8c      	ite	hi
 8009ea0:	4d21      	ldrhi	r5, [pc, #132]	@ (8009f28 <__kernel_cos+0x188>)
 8009ea2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8009ea6:	2400      	movs	r4, #0
 8009ea8:	4622      	mov	r2, r4
 8009eaa:	462b      	mov	r3, r5
 8009eac:	2000      	movs	r0, #0
 8009eae:	f7f6 f9b7 	bl	8000220 <__aeabi_dsub>
 8009eb2:	4622      	mov	r2, r4
 8009eb4:	4680      	mov	r8, r0
 8009eb6:	4689      	mov	r9, r1
 8009eb8:	462b      	mov	r3, r5
 8009eba:	4650      	mov	r0, sl
 8009ebc:	4659      	mov	r1, fp
 8009ebe:	f7f6 f9af 	bl	8000220 <__aeabi_dsub>
 8009ec2:	4632      	mov	r2, r6
 8009ec4:	463b      	mov	r3, r7
 8009ec6:	f7f6 f9ab 	bl	8000220 <__aeabi_dsub>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	4640      	mov	r0, r8
 8009ed0:	4649      	mov	r1, r9
 8009ed2:	e7da      	b.n	8009e8a <__kernel_cos+0xea>
 8009ed4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009f10 <__kernel_cos+0x170>
 8009ed8:	e7db      	b.n	8009e92 <__kernel_cos+0xf2>
 8009eda:	bf00      	nop
 8009edc:	f3af 8000 	nop.w
 8009ee0:	be8838d4 	.word	0xbe8838d4
 8009ee4:	bda8fae9 	.word	0xbda8fae9
 8009ee8:	bdb4b1c4 	.word	0xbdb4b1c4
 8009eec:	3e21ee9e 	.word	0x3e21ee9e
 8009ef0:	809c52ad 	.word	0x809c52ad
 8009ef4:	3e927e4f 	.word	0x3e927e4f
 8009ef8:	19cb1590 	.word	0x19cb1590
 8009efc:	3efa01a0 	.word	0x3efa01a0
 8009f00:	16c15177 	.word	0x16c15177
 8009f04:	3f56c16c 	.word	0x3f56c16c
 8009f08:	5555554c 	.word	0x5555554c
 8009f0c:	3fa55555 	.word	0x3fa55555
 8009f10:	00000000 	.word	0x00000000
 8009f14:	3ff00000 	.word	0x3ff00000
 8009f18:	3fe00000 	.word	0x3fe00000
 8009f1c:	3fd33332 	.word	0x3fd33332
 8009f20:	3ff00000 	.word	0x3ff00000
 8009f24:	3fe90000 	.word	0x3fe90000
 8009f28:	3fd20000 	.word	0x3fd20000
 8009f2c:	00000000 	.word	0x00000000

08009f30 <__kernel_sin>:
 8009f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f34:	ec55 4b10 	vmov	r4, r5, d0
 8009f38:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009f3c:	b085      	sub	sp, #20
 8009f3e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009f42:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009f46:	4680      	mov	r8, r0
 8009f48:	d205      	bcs.n	8009f56 <__kernel_sin+0x26>
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	f7f6 fdb9 	bl	8000ac4 <__aeabi_d2iz>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d052      	beq.n	8009ffc <__kernel_sin+0xcc>
 8009f56:	4622      	mov	r2, r4
 8009f58:	462b      	mov	r3, r5
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	f7f6 fb17 	bl	8000590 <__aeabi_dmul>
 8009f62:	4682      	mov	sl, r0
 8009f64:	468b      	mov	fp, r1
 8009f66:	4602      	mov	r2, r0
 8009f68:	460b      	mov	r3, r1
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	f7f6 fb0f 	bl	8000590 <__aeabi_dmul>
 8009f72:	a342      	add	r3, pc, #264	@ (adr r3, 800a07c <__kernel_sin+0x14c>)
 8009f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f78:	e9cd 0100 	strd	r0, r1, [sp]
 8009f7c:	4650      	mov	r0, sl
 8009f7e:	4659      	mov	r1, fp
 8009f80:	f7f6 fb06 	bl	8000590 <__aeabi_dmul>
 8009f84:	a33f      	add	r3, pc, #252	@ (adr r3, 800a084 <__kernel_sin+0x154>)
 8009f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8a:	f7f6 f949 	bl	8000220 <__aeabi_dsub>
 8009f8e:	4652      	mov	r2, sl
 8009f90:	465b      	mov	r3, fp
 8009f92:	f7f6 fafd 	bl	8000590 <__aeabi_dmul>
 8009f96:	a33d      	add	r3, pc, #244	@ (adr r3, 800a08c <__kernel_sin+0x15c>)
 8009f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9c:	f7f6 f942 	bl	8000224 <__adddf3>
 8009fa0:	4652      	mov	r2, sl
 8009fa2:	465b      	mov	r3, fp
 8009fa4:	f7f6 faf4 	bl	8000590 <__aeabi_dmul>
 8009fa8:	a33a      	add	r3, pc, #232	@ (adr r3, 800a094 <__kernel_sin+0x164>)
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	f7f6 f937 	bl	8000220 <__aeabi_dsub>
 8009fb2:	4652      	mov	r2, sl
 8009fb4:	465b      	mov	r3, fp
 8009fb6:	f7f6 faeb 	bl	8000590 <__aeabi_dmul>
 8009fba:	a338      	add	r3, pc, #224	@ (adr r3, 800a09c <__kernel_sin+0x16c>)
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	f7f6 f930 	bl	8000224 <__adddf3>
 8009fc4:	4606      	mov	r6, r0
 8009fc6:	460f      	mov	r7, r1
 8009fc8:	f1b8 0f00 	cmp.w	r8, #0
 8009fcc:	d11b      	bne.n	800a006 <__kernel_sin+0xd6>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	4650      	mov	r0, sl
 8009fd4:	4659      	mov	r1, fp
 8009fd6:	f7f6 fadb 	bl	8000590 <__aeabi_dmul>
 8009fda:	a325      	add	r3, pc, #148	@ (adr r3, 800a070 <__kernel_sin+0x140>)
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	f7f6 f91e 	bl	8000220 <__aeabi_dsub>
 8009fe4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fe8:	f7f6 fad2 	bl	8000590 <__aeabi_dmul>
 8009fec:	4602      	mov	r2, r0
 8009fee:	460b      	mov	r3, r1
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	f7f6 f916 	bl	8000224 <__adddf3>
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	460d      	mov	r5, r1
 8009ffc:	ec45 4b10 	vmov	d0, r4, r5
 800a000:	b005      	add	sp, #20
 800a002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a00a:	4b1b      	ldr	r3, [pc, #108]	@ (800a078 <__kernel_sin+0x148>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	f7f6 fabf 	bl	8000590 <__aeabi_dmul>
 800a012:	4632      	mov	r2, r6
 800a014:	4680      	mov	r8, r0
 800a016:	4689      	mov	r9, r1
 800a018:	463b      	mov	r3, r7
 800a01a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a01e:	f7f6 fab7 	bl	8000590 <__aeabi_dmul>
 800a022:	4602      	mov	r2, r0
 800a024:	460b      	mov	r3, r1
 800a026:	4640      	mov	r0, r8
 800a028:	4649      	mov	r1, r9
 800a02a:	f7f6 f8f9 	bl	8000220 <__aeabi_dsub>
 800a02e:	4652      	mov	r2, sl
 800a030:	465b      	mov	r3, fp
 800a032:	f7f6 faad 	bl	8000590 <__aeabi_dmul>
 800a036:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a03a:	f7f6 f8f1 	bl	8000220 <__aeabi_dsub>
 800a03e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a070 <__kernel_sin+0x140>)
 800a040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a044:	4606      	mov	r6, r0
 800a046:	460f      	mov	r7, r1
 800a048:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a04c:	f7f6 faa0 	bl	8000590 <__aeabi_dmul>
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	4630      	mov	r0, r6
 800a056:	4639      	mov	r1, r7
 800a058:	f7f6 f8e4 	bl	8000224 <__adddf3>
 800a05c:	4602      	mov	r2, r0
 800a05e:	460b      	mov	r3, r1
 800a060:	4620      	mov	r0, r4
 800a062:	4629      	mov	r1, r5
 800a064:	f7f6 f8dc 	bl	8000220 <__aeabi_dsub>
 800a068:	e7c6      	b.n	8009ff8 <__kernel_sin+0xc8>
 800a06a:	bf00      	nop
 800a06c:	f3af 8000 	nop.w
 800a070:	55555549 	.word	0x55555549
 800a074:	3fc55555 	.word	0x3fc55555
 800a078:	3fe00000 	.word	0x3fe00000
 800a07c:	5acfd57c 	.word	0x5acfd57c
 800a080:	3de5d93a 	.word	0x3de5d93a
 800a084:	8a2b9ceb 	.word	0x8a2b9ceb
 800a088:	3e5ae5e6 	.word	0x3e5ae5e6
 800a08c:	57b1fe7d 	.word	0x57b1fe7d
 800a090:	3ec71de3 	.word	0x3ec71de3
 800a094:	19c161d5 	.word	0x19c161d5
 800a098:	3f2a01a0 	.word	0x3f2a01a0
 800a09c:	1110f8a6 	.word	0x1110f8a6
 800a0a0:	3f811111 	.word	0x3f811111
 800a0a4:	00000000 	.word	0x00000000

0800a0a8 <__ieee754_rem_pio2>:
 800a0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ac:	ec57 6b10 	vmov	r6, r7, d0
 800a0b0:	4bc5      	ldr	r3, [pc, #788]	@ (800a3c8 <__ieee754_rem_pio2+0x320>)
 800a0b2:	b08d      	sub	sp, #52	@ 0x34
 800a0b4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a0b8:	4598      	cmp	r8, r3
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	9704      	str	r7, [sp, #16]
 800a0be:	d807      	bhi.n	800a0d0 <__ieee754_rem_pio2+0x28>
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	ed80 0b00 	vstr	d0, [r0]
 800a0c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a0cc:	2500      	movs	r5, #0
 800a0ce:	e028      	b.n	800a122 <__ieee754_rem_pio2+0x7a>
 800a0d0:	4bbe      	ldr	r3, [pc, #760]	@ (800a3cc <__ieee754_rem_pio2+0x324>)
 800a0d2:	4598      	cmp	r8, r3
 800a0d4:	d878      	bhi.n	800a1c8 <__ieee754_rem_pio2+0x120>
 800a0d6:	9b04      	ldr	r3, [sp, #16]
 800a0d8:	4dbd      	ldr	r5, [pc, #756]	@ (800a3d0 <__ieee754_rem_pio2+0x328>)
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	4630      	mov	r0, r6
 800a0de:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a390 <__ieee754_rem_pio2+0x2e8>)
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	4639      	mov	r1, r7
 800a0e6:	dd38      	ble.n	800a15a <__ieee754_rem_pio2+0xb2>
 800a0e8:	f7f6 f89a 	bl	8000220 <__aeabi_dsub>
 800a0ec:	45a8      	cmp	r8, r5
 800a0ee:	4606      	mov	r6, r0
 800a0f0:	460f      	mov	r7, r1
 800a0f2:	d01a      	beq.n	800a12a <__ieee754_rem_pio2+0x82>
 800a0f4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a398 <__ieee754_rem_pio2+0x2f0>)
 800a0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fa:	f7f6 f891 	bl	8000220 <__aeabi_dsub>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	4680      	mov	r8, r0
 800a104:	4689      	mov	r9, r1
 800a106:	4630      	mov	r0, r6
 800a108:	4639      	mov	r1, r7
 800a10a:	f7f6 f889 	bl	8000220 <__aeabi_dsub>
 800a10e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a398 <__ieee754_rem_pio2+0x2f0>)
 800a110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a114:	f7f6 f884 	bl	8000220 <__aeabi_dsub>
 800a118:	e9c4 8900 	strd	r8, r9, [r4]
 800a11c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a120:	2501      	movs	r5, #1
 800a122:	4628      	mov	r0, r5
 800a124:	b00d      	add	sp, #52	@ 0x34
 800a126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12a:	a39d      	add	r3, pc, #628	@ (adr r3, 800a3a0 <__ieee754_rem_pio2+0x2f8>)
 800a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a130:	f7f6 f876 	bl	8000220 <__aeabi_dsub>
 800a134:	a39c      	add	r3, pc, #624	@ (adr r3, 800a3a8 <__ieee754_rem_pio2+0x300>)
 800a136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13a:	4606      	mov	r6, r0
 800a13c:	460f      	mov	r7, r1
 800a13e:	f7f6 f86f 	bl	8000220 <__aeabi_dsub>
 800a142:	4602      	mov	r2, r0
 800a144:	460b      	mov	r3, r1
 800a146:	4680      	mov	r8, r0
 800a148:	4689      	mov	r9, r1
 800a14a:	4630      	mov	r0, r6
 800a14c:	4639      	mov	r1, r7
 800a14e:	f7f6 f867 	bl	8000220 <__aeabi_dsub>
 800a152:	a395      	add	r3, pc, #596	@ (adr r3, 800a3a8 <__ieee754_rem_pio2+0x300>)
 800a154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a158:	e7dc      	b.n	800a114 <__ieee754_rem_pio2+0x6c>
 800a15a:	f7f6 f863 	bl	8000224 <__adddf3>
 800a15e:	45a8      	cmp	r8, r5
 800a160:	4606      	mov	r6, r0
 800a162:	460f      	mov	r7, r1
 800a164:	d018      	beq.n	800a198 <__ieee754_rem_pio2+0xf0>
 800a166:	a38c      	add	r3, pc, #560	@ (adr r3, 800a398 <__ieee754_rem_pio2+0x2f0>)
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	f7f6 f85a 	bl	8000224 <__adddf3>
 800a170:	4602      	mov	r2, r0
 800a172:	460b      	mov	r3, r1
 800a174:	4680      	mov	r8, r0
 800a176:	4689      	mov	r9, r1
 800a178:	4630      	mov	r0, r6
 800a17a:	4639      	mov	r1, r7
 800a17c:	f7f6 f850 	bl	8000220 <__aeabi_dsub>
 800a180:	a385      	add	r3, pc, #532	@ (adr r3, 800a398 <__ieee754_rem_pio2+0x2f0>)
 800a182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a186:	f7f6 f84d 	bl	8000224 <__adddf3>
 800a18a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a18e:	e9c4 8900 	strd	r8, r9, [r4]
 800a192:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a196:	e7c4      	b.n	800a122 <__ieee754_rem_pio2+0x7a>
 800a198:	a381      	add	r3, pc, #516	@ (adr r3, 800a3a0 <__ieee754_rem_pio2+0x2f8>)
 800a19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19e:	f7f6 f841 	bl	8000224 <__adddf3>
 800a1a2:	a381      	add	r3, pc, #516	@ (adr r3, 800a3a8 <__ieee754_rem_pio2+0x300>)
 800a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a8:	4606      	mov	r6, r0
 800a1aa:	460f      	mov	r7, r1
 800a1ac:	f7f6 f83a 	bl	8000224 <__adddf3>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	4680      	mov	r8, r0
 800a1b6:	4689      	mov	r9, r1
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	4639      	mov	r1, r7
 800a1bc:	f7f6 f830 	bl	8000220 <__aeabi_dsub>
 800a1c0:	a379      	add	r3, pc, #484	@ (adr r3, 800a3a8 <__ieee754_rem_pio2+0x300>)
 800a1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c6:	e7de      	b.n	800a186 <__ieee754_rem_pio2+0xde>
 800a1c8:	4b82      	ldr	r3, [pc, #520]	@ (800a3d4 <__ieee754_rem_pio2+0x32c>)
 800a1ca:	4598      	cmp	r8, r3
 800a1cc:	f200 80d1 	bhi.w	800a372 <__ieee754_rem_pio2+0x2ca>
 800a1d0:	f7ff fd8a 	bl	8009ce8 <fabs>
 800a1d4:	ec57 6b10 	vmov	r6, r7, d0
 800a1d8:	a375      	add	r3, pc, #468	@ (adr r3, 800a3b0 <__ieee754_rem_pio2+0x308>)
 800a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1de:	4630      	mov	r0, r6
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	f7f6 f9d5 	bl	8000590 <__aeabi_dmul>
 800a1e6:	4b7c      	ldr	r3, [pc, #496]	@ (800a3d8 <__ieee754_rem_pio2+0x330>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f7f6 f81b 	bl	8000224 <__adddf3>
 800a1ee:	f7f6 fc69 	bl	8000ac4 <__aeabi_d2iz>
 800a1f2:	4605      	mov	r5, r0
 800a1f4:	f7f6 f962 	bl	80004bc <__aeabi_i2d>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a200:	a363      	add	r3, pc, #396	@ (adr r3, 800a390 <__ieee754_rem_pio2+0x2e8>)
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	f7f6 f9c3 	bl	8000590 <__aeabi_dmul>
 800a20a:	4602      	mov	r2, r0
 800a20c:	460b      	mov	r3, r1
 800a20e:	4630      	mov	r0, r6
 800a210:	4639      	mov	r1, r7
 800a212:	f7f6 f805 	bl	8000220 <__aeabi_dsub>
 800a216:	a360      	add	r3, pc, #384	@ (adr r3, 800a398 <__ieee754_rem_pio2+0x2f0>)
 800a218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21c:	4682      	mov	sl, r0
 800a21e:	468b      	mov	fp, r1
 800a220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a224:	f7f6 f9b4 	bl	8000590 <__aeabi_dmul>
 800a228:	2d1f      	cmp	r5, #31
 800a22a:	4606      	mov	r6, r0
 800a22c:	460f      	mov	r7, r1
 800a22e:	dc0c      	bgt.n	800a24a <__ieee754_rem_pio2+0x1a2>
 800a230:	4b6a      	ldr	r3, [pc, #424]	@ (800a3dc <__ieee754_rem_pio2+0x334>)
 800a232:	1e6a      	subs	r2, r5, #1
 800a234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a238:	4543      	cmp	r3, r8
 800a23a:	d006      	beq.n	800a24a <__ieee754_rem_pio2+0x1a2>
 800a23c:	4632      	mov	r2, r6
 800a23e:	463b      	mov	r3, r7
 800a240:	4650      	mov	r0, sl
 800a242:	4659      	mov	r1, fp
 800a244:	f7f5 ffec 	bl	8000220 <__aeabi_dsub>
 800a248:	e00e      	b.n	800a268 <__ieee754_rem_pio2+0x1c0>
 800a24a:	463b      	mov	r3, r7
 800a24c:	4632      	mov	r2, r6
 800a24e:	4650      	mov	r0, sl
 800a250:	4659      	mov	r1, fp
 800a252:	f7f5 ffe5 	bl	8000220 <__aeabi_dsub>
 800a256:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a25a:	9305      	str	r3, [sp, #20]
 800a25c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a260:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a264:	2b10      	cmp	r3, #16
 800a266:	dc02      	bgt.n	800a26e <__ieee754_rem_pio2+0x1c6>
 800a268:	e9c4 0100 	strd	r0, r1, [r4]
 800a26c:	e039      	b.n	800a2e2 <__ieee754_rem_pio2+0x23a>
 800a26e:	a34c      	add	r3, pc, #304	@ (adr r3, 800a3a0 <__ieee754_rem_pio2+0x2f8>)
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a278:	f7f6 f98a 	bl	8000590 <__aeabi_dmul>
 800a27c:	4606      	mov	r6, r0
 800a27e:	460f      	mov	r7, r1
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	4650      	mov	r0, sl
 800a286:	4659      	mov	r1, fp
 800a288:	f7f5 ffca 	bl	8000220 <__aeabi_dsub>
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	4680      	mov	r8, r0
 800a292:	4689      	mov	r9, r1
 800a294:	4650      	mov	r0, sl
 800a296:	4659      	mov	r1, fp
 800a298:	f7f5 ffc2 	bl	8000220 <__aeabi_dsub>
 800a29c:	4632      	mov	r2, r6
 800a29e:	463b      	mov	r3, r7
 800a2a0:	f7f5 ffbe 	bl	8000220 <__aeabi_dsub>
 800a2a4:	a340      	add	r3, pc, #256	@ (adr r3, 800a3a8 <__ieee754_rem_pio2+0x300>)
 800a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	460f      	mov	r7, r1
 800a2ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2b2:	f7f6 f96d 	bl	8000590 <__aeabi_dmul>
 800a2b6:	4632      	mov	r2, r6
 800a2b8:	463b      	mov	r3, r7
 800a2ba:	f7f5 ffb1 	bl	8000220 <__aeabi_dsub>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	460f      	mov	r7, r1
 800a2c6:	4640      	mov	r0, r8
 800a2c8:	4649      	mov	r1, r9
 800a2ca:	f7f5 ffa9 	bl	8000220 <__aeabi_dsub>
 800a2ce:	9a05      	ldr	r2, [sp, #20]
 800a2d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	2b31      	cmp	r3, #49	@ 0x31
 800a2d8:	dc20      	bgt.n	800a31c <__ieee754_rem_pio2+0x274>
 800a2da:	e9c4 0100 	strd	r0, r1, [r4]
 800a2de:	46c2      	mov	sl, r8
 800a2e0:	46cb      	mov	fp, r9
 800a2e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a2e6:	4650      	mov	r0, sl
 800a2e8:	4642      	mov	r2, r8
 800a2ea:	464b      	mov	r3, r9
 800a2ec:	4659      	mov	r1, fp
 800a2ee:	f7f5 ff97 	bl	8000220 <__aeabi_dsub>
 800a2f2:	463b      	mov	r3, r7
 800a2f4:	4632      	mov	r2, r6
 800a2f6:	f7f5 ff93 	bl	8000220 <__aeabi_dsub>
 800a2fa:	9b04      	ldr	r3, [sp, #16]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a302:	f6bf af0e 	bge.w	800a122 <__ieee754_rem_pio2+0x7a>
 800a306:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a30a:	6063      	str	r3, [r4, #4]
 800a30c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a310:	f8c4 8000 	str.w	r8, [r4]
 800a314:	60a0      	str	r0, [r4, #8]
 800a316:	60e3      	str	r3, [r4, #12]
 800a318:	426d      	negs	r5, r5
 800a31a:	e702      	b.n	800a122 <__ieee754_rem_pio2+0x7a>
 800a31c:	a326      	add	r3, pc, #152	@ (adr r3, 800a3b8 <__ieee754_rem_pio2+0x310>)
 800a31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a326:	f7f6 f933 	bl	8000590 <__aeabi_dmul>
 800a32a:	4606      	mov	r6, r0
 800a32c:	460f      	mov	r7, r1
 800a32e:	4602      	mov	r2, r0
 800a330:	460b      	mov	r3, r1
 800a332:	4640      	mov	r0, r8
 800a334:	4649      	mov	r1, r9
 800a336:	f7f5 ff73 	bl	8000220 <__aeabi_dsub>
 800a33a:	4602      	mov	r2, r0
 800a33c:	460b      	mov	r3, r1
 800a33e:	4682      	mov	sl, r0
 800a340:	468b      	mov	fp, r1
 800a342:	4640      	mov	r0, r8
 800a344:	4649      	mov	r1, r9
 800a346:	f7f5 ff6b 	bl	8000220 <__aeabi_dsub>
 800a34a:	4632      	mov	r2, r6
 800a34c:	463b      	mov	r3, r7
 800a34e:	f7f5 ff67 	bl	8000220 <__aeabi_dsub>
 800a352:	a31b      	add	r3, pc, #108	@ (adr r3, 800a3c0 <__ieee754_rem_pio2+0x318>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	4606      	mov	r6, r0
 800a35a:	460f      	mov	r7, r1
 800a35c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a360:	f7f6 f916 	bl	8000590 <__aeabi_dmul>
 800a364:	4632      	mov	r2, r6
 800a366:	463b      	mov	r3, r7
 800a368:	f7f5 ff5a 	bl	8000220 <__aeabi_dsub>
 800a36c:	4606      	mov	r6, r0
 800a36e:	460f      	mov	r7, r1
 800a370:	e764      	b.n	800a23c <__ieee754_rem_pio2+0x194>
 800a372:	4b1b      	ldr	r3, [pc, #108]	@ (800a3e0 <__ieee754_rem_pio2+0x338>)
 800a374:	4598      	cmp	r8, r3
 800a376:	d935      	bls.n	800a3e4 <__ieee754_rem_pio2+0x33c>
 800a378:	4632      	mov	r2, r6
 800a37a:	463b      	mov	r3, r7
 800a37c:	4630      	mov	r0, r6
 800a37e:	4639      	mov	r1, r7
 800a380:	f7f5 ff4e 	bl	8000220 <__aeabi_dsub>
 800a384:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a388:	e9c4 0100 	strd	r0, r1, [r4]
 800a38c:	e69e      	b.n	800a0cc <__ieee754_rem_pio2+0x24>
 800a38e:	bf00      	nop
 800a390:	54400000 	.word	0x54400000
 800a394:	3ff921fb 	.word	0x3ff921fb
 800a398:	1a626331 	.word	0x1a626331
 800a39c:	3dd0b461 	.word	0x3dd0b461
 800a3a0:	1a600000 	.word	0x1a600000
 800a3a4:	3dd0b461 	.word	0x3dd0b461
 800a3a8:	2e037073 	.word	0x2e037073
 800a3ac:	3ba3198a 	.word	0x3ba3198a
 800a3b0:	6dc9c883 	.word	0x6dc9c883
 800a3b4:	3fe45f30 	.word	0x3fe45f30
 800a3b8:	2e000000 	.word	0x2e000000
 800a3bc:	3ba3198a 	.word	0x3ba3198a
 800a3c0:	252049c1 	.word	0x252049c1
 800a3c4:	397b839a 	.word	0x397b839a
 800a3c8:	3fe921fb 	.word	0x3fe921fb
 800a3cc:	4002d97b 	.word	0x4002d97b
 800a3d0:	3ff921fb 	.word	0x3ff921fb
 800a3d4:	413921fb 	.word	0x413921fb
 800a3d8:	3fe00000 	.word	0x3fe00000
 800a3dc:	0800b3b0 	.word	0x0800b3b0
 800a3e0:	7fefffff 	.word	0x7fefffff
 800a3e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a3e8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a3ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	460f      	mov	r7, r1
 800a3f4:	f7f6 fb66 	bl	8000ac4 <__aeabi_d2iz>
 800a3f8:	f7f6 f860 	bl	80004bc <__aeabi_i2d>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	460b      	mov	r3, r1
 800a400:	4630      	mov	r0, r6
 800a402:	4639      	mov	r1, r7
 800a404:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a408:	f7f5 ff0a 	bl	8000220 <__aeabi_dsub>
 800a40c:	4b22      	ldr	r3, [pc, #136]	@ (800a498 <__ieee754_rem_pio2+0x3f0>)
 800a40e:	2200      	movs	r2, #0
 800a410:	f7f6 f8be 	bl	8000590 <__aeabi_dmul>
 800a414:	460f      	mov	r7, r1
 800a416:	4606      	mov	r6, r0
 800a418:	f7f6 fb54 	bl	8000ac4 <__aeabi_d2iz>
 800a41c:	f7f6 f84e 	bl	80004bc <__aeabi_i2d>
 800a420:	4602      	mov	r2, r0
 800a422:	460b      	mov	r3, r1
 800a424:	4630      	mov	r0, r6
 800a426:	4639      	mov	r1, r7
 800a428:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a42c:	f7f5 fef8 	bl	8000220 <__aeabi_dsub>
 800a430:	4b19      	ldr	r3, [pc, #100]	@ (800a498 <__ieee754_rem_pio2+0x3f0>)
 800a432:	2200      	movs	r2, #0
 800a434:	f7f6 f8ac 	bl	8000590 <__aeabi_dmul>
 800a438:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a43c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a440:	f04f 0803 	mov.w	r8, #3
 800a444:	2600      	movs	r6, #0
 800a446:	2700      	movs	r7, #0
 800a448:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a44c:	4632      	mov	r2, r6
 800a44e:	463b      	mov	r3, r7
 800a450:	46c2      	mov	sl, r8
 800a452:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a456:	f7f6 fb03 	bl	8000a60 <__aeabi_dcmpeq>
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d1f4      	bne.n	800a448 <__ieee754_rem_pio2+0x3a0>
 800a45e:	4b0f      	ldr	r3, [pc, #60]	@ (800a49c <__ieee754_rem_pio2+0x3f4>)
 800a460:	9301      	str	r3, [sp, #4]
 800a462:	2302      	movs	r3, #2
 800a464:	9300      	str	r3, [sp, #0]
 800a466:	462a      	mov	r2, r5
 800a468:	4653      	mov	r3, sl
 800a46a:	4621      	mov	r1, r4
 800a46c:	a806      	add	r0, sp, #24
 800a46e:	f000 f817 	bl	800a4a0 <__kernel_rem_pio2>
 800a472:	9b04      	ldr	r3, [sp, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	4605      	mov	r5, r0
 800a478:	f6bf ae53 	bge.w	800a122 <__ieee754_rem_pio2+0x7a>
 800a47c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a480:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a484:	e9c4 2300 	strd	r2, r3, [r4]
 800a488:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a48c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a490:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a494:	e740      	b.n	800a318 <__ieee754_rem_pio2+0x270>
 800a496:	bf00      	nop
 800a498:	41700000 	.word	0x41700000
 800a49c:	0800b430 	.word	0x0800b430

0800a4a0 <__kernel_rem_pio2>:
 800a4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a4:	ed2d 8b02 	vpush	{d8}
 800a4a8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a4ac:	f112 0f14 	cmn.w	r2, #20
 800a4b0:	9306      	str	r3, [sp, #24]
 800a4b2:	9104      	str	r1, [sp, #16]
 800a4b4:	4bbe      	ldr	r3, [pc, #760]	@ (800a7b0 <__kernel_rem_pio2+0x310>)
 800a4b6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800a4b8:	9008      	str	r0, [sp, #32]
 800a4ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	9b06      	ldr	r3, [sp, #24]
 800a4c2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a4c6:	bfa8      	it	ge
 800a4c8:	1ed4      	subge	r4, r2, #3
 800a4ca:	9305      	str	r3, [sp, #20]
 800a4cc:	bfb2      	itee	lt
 800a4ce:	2400      	movlt	r4, #0
 800a4d0:	2318      	movge	r3, #24
 800a4d2:	fb94 f4f3 	sdivge	r4, r4, r3
 800a4d6:	f06f 0317 	mvn.w	r3, #23
 800a4da:	fb04 3303 	mla	r3, r4, r3, r3
 800a4de:	eb03 0b02 	add.w	fp, r3, r2
 800a4e2:	9b00      	ldr	r3, [sp, #0]
 800a4e4:	9a05      	ldr	r2, [sp, #20]
 800a4e6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800a7a0 <__kernel_rem_pio2+0x300>
 800a4ea:	eb03 0802 	add.w	r8, r3, r2
 800a4ee:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a4f0:	1aa7      	subs	r7, r4, r2
 800a4f2:	ae20      	add	r6, sp, #128	@ 0x80
 800a4f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a4f8:	2500      	movs	r5, #0
 800a4fa:	4545      	cmp	r5, r8
 800a4fc:	dd13      	ble.n	800a526 <__kernel_rem_pio2+0x86>
 800a4fe:	9b06      	ldr	r3, [sp, #24]
 800a500:	aa20      	add	r2, sp, #128	@ 0x80
 800a502:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a506:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800a50a:	f04f 0800 	mov.w	r8, #0
 800a50e:	9b00      	ldr	r3, [sp, #0]
 800a510:	4598      	cmp	r8, r3
 800a512:	dc31      	bgt.n	800a578 <__kernel_rem_pio2+0xd8>
 800a514:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800a7a0 <__kernel_rem_pio2+0x300>
 800a518:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a51c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a520:	462f      	mov	r7, r5
 800a522:	2600      	movs	r6, #0
 800a524:	e01b      	b.n	800a55e <__kernel_rem_pio2+0xbe>
 800a526:	42ef      	cmn	r7, r5
 800a528:	d407      	bmi.n	800a53a <__kernel_rem_pio2+0x9a>
 800a52a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a52e:	f7f5 ffc5 	bl	80004bc <__aeabi_i2d>
 800a532:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a536:	3501      	adds	r5, #1
 800a538:	e7df      	b.n	800a4fa <__kernel_rem_pio2+0x5a>
 800a53a:	ec51 0b18 	vmov	r0, r1, d8
 800a53e:	e7f8      	b.n	800a532 <__kernel_rem_pio2+0x92>
 800a540:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a544:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a548:	f7f6 f822 	bl	8000590 <__aeabi_dmul>
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a554:	f7f5 fe66 	bl	8000224 <__adddf3>
 800a558:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a55c:	3601      	adds	r6, #1
 800a55e:	9b05      	ldr	r3, [sp, #20]
 800a560:	429e      	cmp	r6, r3
 800a562:	f1a7 0708 	sub.w	r7, r7, #8
 800a566:	ddeb      	ble.n	800a540 <__kernel_rem_pio2+0xa0>
 800a568:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a56c:	f108 0801 	add.w	r8, r8, #1
 800a570:	ecaa 7b02 	vstmia	sl!, {d7}
 800a574:	3508      	adds	r5, #8
 800a576:	e7ca      	b.n	800a50e <__kernel_rem_pio2+0x6e>
 800a578:	9b00      	ldr	r3, [sp, #0]
 800a57a:	f8dd 8000 	ldr.w	r8, [sp]
 800a57e:	aa0c      	add	r2, sp, #48	@ 0x30
 800a580:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a584:	930a      	str	r3, [sp, #40]	@ 0x28
 800a586:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a588:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a58c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a58e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800a592:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a594:	ab98      	add	r3, sp, #608	@ 0x260
 800a596:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a59a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800a59e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a5a2:	ac0c      	add	r4, sp, #48	@ 0x30
 800a5a4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a5a6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800a5aa:	46a1      	mov	r9, r4
 800a5ac:	46c2      	mov	sl, r8
 800a5ae:	f1ba 0f00 	cmp.w	sl, #0
 800a5b2:	f1a5 0508 	sub.w	r5, r5, #8
 800a5b6:	dc77      	bgt.n	800a6a8 <__kernel_rem_pio2+0x208>
 800a5b8:	4658      	mov	r0, fp
 800a5ba:	ed9d 0b02 	vldr	d0, [sp, #8]
 800a5be:	f000 fac7 	bl	800ab50 <scalbn>
 800a5c2:	ec57 6b10 	vmov	r6, r7, d0
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	4639      	mov	r1, r7
 800a5d0:	f7f5 ffde 	bl	8000590 <__aeabi_dmul>
 800a5d4:	ec41 0b10 	vmov	d0, r0, r1
 800a5d8:	f000 fb3a 	bl	800ac50 <floor>
 800a5dc:	4b75      	ldr	r3, [pc, #468]	@ (800a7b4 <__kernel_rem_pio2+0x314>)
 800a5de:	ec51 0b10 	vmov	r0, r1, d0
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f7f5 ffd4 	bl	8000590 <__aeabi_dmul>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	4639      	mov	r1, r7
 800a5f0:	f7f5 fe16 	bl	8000220 <__aeabi_dsub>
 800a5f4:	460f      	mov	r7, r1
 800a5f6:	4606      	mov	r6, r0
 800a5f8:	f7f6 fa64 	bl	8000ac4 <__aeabi_d2iz>
 800a5fc:	9002      	str	r0, [sp, #8]
 800a5fe:	f7f5 ff5d 	bl	80004bc <__aeabi_i2d>
 800a602:	4602      	mov	r2, r0
 800a604:	460b      	mov	r3, r1
 800a606:	4630      	mov	r0, r6
 800a608:	4639      	mov	r1, r7
 800a60a:	f7f5 fe09 	bl	8000220 <__aeabi_dsub>
 800a60e:	f1bb 0f00 	cmp.w	fp, #0
 800a612:	4606      	mov	r6, r0
 800a614:	460f      	mov	r7, r1
 800a616:	dd6c      	ble.n	800a6f2 <__kernel_rem_pio2+0x252>
 800a618:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800a61c:	ab0c      	add	r3, sp, #48	@ 0x30
 800a61e:	9d02      	ldr	r5, [sp, #8]
 800a620:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a624:	f1cb 0018 	rsb	r0, fp, #24
 800a628:	fa43 f200 	asr.w	r2, r3, r0
 800a62c:	4415      	add	r5, r2
 800a62e:	4082      	lsls	r2, r0
 800a630:	1a9b      	subs	r3, r3, r2
 800a632:	aa0c      	add	r2, sp, #48	@ 0x30
 800a634:	9502      	str	r5, [sp, #8]
 800a636:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a63a:	f1cb 0217 	rsb	r2, fp, #23
 800a63e:	fa43 f902 	asr.w	r9, r3, r2
 800a642:	f1b9 0f00 	cmp.w	r9, #0
 800a646:	dd64      	ble.n	800a712 <__kernel_rem_pio2+0x272>
 800a648:	9b02      	ldr	r3, [sp, #8]
 800a64a:	2200      	movs	r2, #0
 800a64c:	3301      	adds	r3, #1
 800a64e:	9302      	str	r3, [sp, #8]
 800a650:	4615      	mov	r5, r2
 800a652:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a656:	4590      	cmp	r8, r2
 800a658:	f300 80b8 	bgt.w	800a7cc <__kernel_rem_pio2+0x32c>
 800a65c:	f1bb 0f00 	cmp.w	fp, #0
 800a660:	dd07      	ble.n	800a672 <__kernel_rem_pio2+0x1d2>
 800a662:	f1bb 0f01 	cmp.w	fp, #1
 800a666:	f000 80bf 	beq.w	800a7e8 <__kernel_rem_pio2+0x348>
 800a66a:	f1bb 0f02 	cmp.w	fp, #2
 800a66e:	f000 80c6 	beq.w	800a7fe <__kernel_rem_pio2+0x35e>
 800a672:	f1b9 0f02 	cmp.w	r9, #2
 800a676:	d14c      	bne.n	800a712 <__kernel_rem_pio2+0x272>
 800a678:	4632      	mov	r2, r6
 800a67a:	463b      	mov	r3, r7
 800a67c:	494e      	ldr	r1, [pc, #312]	@ (800a7b8 <__kernel_rem_pio2+0x318>)
 800a67e:	2000      	movs	r0, #0
 800a680:	f7f5 fdce 	bl	8000220 <__aeabi_dsub>
 800a684:	4606      	mov	r6, r0
 800a686:	460f      	mov	r7, r1
 800a688:	2d00      	cmp	r5, #0
 800a68a:	d042      	beq.n	800a712 <__kernel_rem_pio2+0x272>
 800a68c:	4658      	mov	r0, fp
 800a68e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800a7a8 <__kernel_rem_pio2+0x308>
 800a692:	f000 fa5d 	bl	800ab50 <scalbn>
 800a696:	4630      	mov	r0, r6
 800a698:	4639      	mov	r1, r7
 800a69a:	ec53 2b10 	vmov	r2, r3, d0
 800a69e:	f7f5 fdbf 	bl	8000220 <__aeabi_dsub>
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	460f      	mov	r7, r1
 800a6a6:	e034      	b.n	800a712 <__kernel_rem_pio2+0x272>
 800a6a8:	4b44      	ldr	r3, [pc, #272]	@ (800a7bc <__kernel_rem_pio2+0x31c>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6b0:	f7f5 ff6e 	bl	8000590 <__aeabi_dmul>
 800a6b4:	f7f6 fa06 	bl	8000ac4 <__aeabi_d2iz>
 800a6b8:	f7f5 ff00 	bl	80004bc <__aeabi_i2d>
 800a6bc:	4b40      	ldr	r3, [pc, #256]	@ (800a7c0 <__kernel_rem_pio2+0x320>)
 800a6be:	2200      	movs	r2, #0
 800a6c0:	4606      	mov	r6, r0
 800a6c2:	460f      	mov	r7, r1
 800a6c4:	f7f5 ff64 	bl	8000590 <__aeabi_dmul>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6d0:	f7f5 fda6 	bl	8000220 <__aeabi_dsub>
 800a6d4:	f7f6 f9f6 	bl	8000ac4 <__aeabi_d2iz>
 800a6d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6dc:	f849 0b04 	str.w	r0, [r9], #4
 800a6e0:	4639      	mov	r1, r7
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	f7f5 fd9e 	bl	8000224 <__adddf3>
 800a6e8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a6ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6f0:	e75d      	b.n	800a5ae <__kernel_rem_pio2+0x10e>
 800a6f2:	d107      	bne.n	800a704 <__kernel_rem_pio2+0x264>
 800a6f4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800a6f8:	aa0c      	add	r2, sp, #48	@ 0x30
 800a6fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6fe:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800a702:	e79e      	b.n	800a642 <__kernel_rem_pio2+0x1a2>
 800a704:	4b2f      	ldr	r3, [pc, #188]	@ (800a7c4 <__kernel_rem_pio2+0x324>)
 800a706:	2200      	movs	r2, #0
 800a708:	f7f6 f9c8 	bl	8000a9c <__aeabi_dcmpge>
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d143      	bne.n	800a798 <__kernel_rem_pio2+0x2f8>
 800a710:	4681      	mov	r9, r0
 800a712:	2200      	movs	r2, #0
 800a714:	2300      	movs	r3, #0
 800a716:	4630      	mov	r0, r6
 800a718:	4639      	mov	r1, r7
 800a71a:	f7f6 f9a1 	bl	8000a60 <__aeabi_dcmpeq>
 800a71e:	2800      	cmp	r0, #0
 800a720:	f000 80bf 	beq.w	800a8a2 <__kernel_rem_pio2+0x402>
 800a724:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800a728:	2200      	movs	r2, #0
 800a72a:	9900      	ldr	r1, [sp, #0]
 800a72c:	428b      	cmp	r3, r1
 800a72e:	da6e      	bge.n	800a80e <__kernel_rem_pio2+0x36e>
 800a730:	2a00      	cmp	r2, #0
 800a732:	f000 8089 	beq.w	800a848 <__kernel_rem_pio2+0x3a8>
 800a736:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a73a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a73c:	f1ab 0b18 	sub.w	fp, fp, #24
 800a740:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d0f6      	beq.n	800a736 <__kernel_rem_pio2+0x296>
 800a748:	4658      	mov	r0, fp
 800a74a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800a7a8 <__kernel_rem_pio2+0x308>
 800a74e:	f000 f9ff 	bl	800ab50 <scalbn>
 800a752:	f108 0301 	add.w	r3, r8, #1
 800a756:	00da      	lsls	r2, r3, #3
 800a758:	9205      	str	r2, [sp, #20]
 800a75a:	ec55 4b10 	vmov	r4, r5, d0
 800a75e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800a760:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800a7bc <__kernel_rem_pio2+0x31c>
 800a764:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800a768:	4646      	mov	r6, r8
 800a76a:	f04f 0a00 	mov.w	sl, #0
 800a76e:	2e00      	cmp	r6, #0
 800a770:	f280 80cf 	bge.w	800a912 <__kernel_rem_pio2+0x472>
 800a774:	4644      	mov	r4, r8
 800a776:	2c00      	cmp	r4, #0
 800a778:	f2c0 80fd 	blt.w	800a976 <__kernel_rem_pio2+0x4d6>
 800a77c:	4b12      	ldr	r3, [pc, #72]	@ (800a7c8 <__kernel_rem_pio2+0x328>)
 800a77e:	461f      	mov	r7, r3
 800a780:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a782:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a786:	9306      	str	r3, [sp, #24]
 800a788:	f04f 0a00 	mov.w	sl, #0
 800a78c:	f04f 0b00 	mov.w	fp, #0
 800a790:	2600      	movs	r6, #0
 800a792:	eba8 0504 	sub.w	r5, r8, r4
 800a796:	e0e2      	b.n	800a95e <__kernel_rem_pio2+0x4be>
 800a798:	f04f 0902 	mov.w	r9, #2
 800a79c:	e754      	b.n	800a648 <__kernel_rem_pio2+0x1a8>
 800a79e:	bf00      	nop
	...
 800a7ac:	3ff00000 	.word	0x3ff00000
 800a7b0:	0800b578 	.word	0x0800b578
 800a7b4:	40200000 	.word	0x40200000
 800a7b8:	3ff00000 	.word	0x3ff00000
 800a7bc:	3e700000 	.word	0x3e700000
 800a7c0:	41700000 	.word	0x41700000
 800a7c4:	3fe00000 	.word	0x3fe00000
 800a7c8:	0800b538 	.word	0x0800b538
 800a7cc:	f854 3b04 	ldr.w	r3, [r4], #4
 800a7d0:	b945      	cbnz	r5, 800a7e4 <__kernel_rem_pio2+0x344>
 800a7d2:	b123      	cbz	r3, 800a7de <__kernel_rem_pio2+0x33e>
 800a7d4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a7d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a7dc:	2301      	movs	r3, #1
 800a7de:	3201      	adds	r2, #1
 800a7e0:	461d      	mov	r5, r3
 800a7e2:	e738      	b.n	800a656 <__kernel_rem_pio2+0x1b6>
 800a7e4:	1acb      	subs	r3, r1, r3
 800a7e6:	e7f7      	b.n	800a7d8 <__kernel_rem_pio2+0x338>
 800a7e8:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800a7ec:	ab0c      	add	r3, sp, #48	@ 0x30
 800a7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a7f6:	a90c      	add	r1, sp, #48	@ 0x30
 800a7f8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a7fc:	e739      	b.n	800a672 <__kernel_rem_pio2+0x1d2>
 800a7fe:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800a802:	ab0c      	add	r3, sp, #48	@ 0x30
 800a804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a808:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a80c:	e7f3      	b.n	800a7f6 <__kernel_rem_pio2+0x356>
 800a80e:	a90c      	add	r1, sp, #48	@ 0x30
 800a810:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a814:	3b01      	subs	r3, #1
 800a816:	430a      	orrs	r2, r1
 800a818:	e787      	b.n	800a72a <__kernel_rem_pio2+0x28a>
 800a81a:	3401      	adds	r4, #1
 800a81c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a820:	2a00      	cmp	r2, #0
 800a822:	d0fa      	beq.n	800a81a <__kernel_rem_pio2+0x37a>
 800a824:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a826:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a82a:	eb0d 0503 	add.w	r5, sp, r3
 800a82e:	9b06      	ldr	r3, [sp, #24]
 800a830:	aa20      	add	r2, sp, #128	@ 0x80
 800a832:	4443      	add	r3, r8
 800a834:	f108 0701 	add.w	r7, r8, #1
 800a838:	3d98      	subs	r5, #152	@ 0x98
 800a83a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800a83e:	4444      	add	r4, r8
 800a840:	42bc      	cmp	r4, r7
 800a842:	da04      	bge.n	800a84e <__kernel_rem_pio2+0x3ae>
 800a844:	46a0      	mov	r8, r4
 800a846:	e6a2      	b.n	800a58e <__kernel_rem_pio2+0xee>
 800a848:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a84a:	2401      	movs	r4, #1
 800a84c:	e7e6      	b.n	800a81c <__kernel_rem_pio2+0x37c>
 800a84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a850:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a854:	f7f5 fe32 	bl	80004bc <__aeabi_i2d>
 800a858:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800ab20 <__kernel_rem_pio2+0x680>
 800a85c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a860:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a864:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a868:	46b2      	mov	sl, r6
 800a86a:	f04f 0800 	mov.w	r8, #0
 800a86e:	9b05      	ldr	r3, [sp, #20]
 800a870:	4598      	cmp	r8, r3
 800a872:	dd05      	ble.n	800a880 <__kernel_rem_pio2+0x3e0>
 800a874:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a878:	3701      	adds	r7, #1
 800a87a:	eca5 7b02 	vstmia	r5!, {d7}
 800a87e:	e7df      	b.n	800a840 <__kernel_rem_pio2+0x3a0>
 800a880:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800a884:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a888:	f7f5 fe82 	bl	8000590 <__aeabi_dmul>
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a894:	f7f5 fcc6 	bl	8000224 <__adddf3>
 800a898:	f108 0801 	add.w	r8, r8, #1
 800a89c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8a0:	e7e5      	b.n	800a86e <__kernel_rem_pio2+0x3ce>
 800a8a2:	f1cb 0000 	rsb	r0, fp, #0
 800a8a6:	ec47 6b10 	vmov	d0, r6, r7
 800a8aa:	f000 f951 	bl	800ab50 <scalbn>
 800a8ae:	ec55 4b10 	vmov	r4, r5, d0
 800a8b2:	4b9d      	ldr	r3, [pc, #628]	@ (800ab28 <__kernel_rem_pio2+0x688>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	f7f6 f8ef 	bl	8000a9c <__aeabi_dcmpge>
 800a8be:	b300      	cbz	r0, 800a902 <__kernel_rem_pio2+0x462>
 800a8c0:	4b9a      	ldr	r3, [pc, #616]	@ (800ab2c <__kernel_rem_pio2+0x68c>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	f7f5 fe62 	bl	8000590 <__aeabi_dmul>
 800a8cc:	f7f6 f8fa 	bl	8000ac4 <__aeabi_d2iz>
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	f7f5 fdf3 	bl	80004bc <__aeabi_i2d>
 800a8d6:	4b94      	ldr	r3, [pc, #592]	@ (800ab28 <__kernel_rem_pio2+0x688>)
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f7f5 fe59 	bl	8000590 <__aeabi_dmul>
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f7f5 fc9b 	bl	8000220 <__aeabi_dsub>
 800a8ea:	f7f6 f8eb 	bl	8000ac4 <__aeabi_d2iz>
 800a8ee:	ab0c      	add	r3, sp, #48	@ 0x30
 800a8f0:	f10b 0b18 	add.w	fp, fp, #24
 800a8f4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a8f8:	f108 0801 	add.w	r8, r8, #1
 800a8fc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800a900:	e722      	b.n	800a748 <__kernel_rem_pio2+0x2a8>
 800a902:	4620      	mov	r0, r4
 800a904:	4629      	mov	r1, r5
 800a906:	f7f6 f8dd 	bl	8000ac4 <__aeabi_d2iz>
 800a90a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a90c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a910:	e71a      	b.n	800a748 <__kernel_rem_pio2+0x2a8>
 800a912:	ab0c      	add	r3, sp, #48	@ 0x30
 800a914:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a918:	f7f5 fdd0 	bl	80004bc <__aeabi_i2d>
 800a91c:	4622      	mov	r2, r4
 800a91e:	462b      	mov	r3, r5
 800a920:	f7f5 fe36 	bl	8000590 <__aeabi_dmul>
 800a924:	4652      	mov	r2, sl
 800a926:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800a92a:	465b      	mov	r3, fp
 800a92c:	4620      	mov	r0, r4
 800a92e:	4629      	mov	r1, r5
 800a930:	f7f5 fe2e 	bl	8000590 <__aeabi_dmul>
 800a934:	3e01      	subs	r6, #1
 800a936:	4604      	mov	r4, r0
 800a938:	460d      	mov	r5, r1
 800a93a:	e718      	b.n	800a76e <__kernel_rem_pio2+0x2ce>
 800a93c:	9906      	ldr	r1, [sp, #24]
 800a93e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800a942:	9106      	str	r1, [sp, #24]
 800a944:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800a948:	f7f5 fe22 	bl	8000590 <__aeabi_dmul>
 800a94c:	4602      	mov	r2, r0
 800a94e:	460b      	mov	r3, r1
 800a950:	4650      	mov	r0, sl
 800a952:	4659      	mov	r1, fp
 800a954:	f7f5 fc66 	bl	8000224 <__adddf3>
 800a958:	3601      	adds	r6, #1
 800a95a:	4682      	mov	sl, r0
 800a95c:	468b      	mov	fp, r1
 800a95e:	9b00      	ldr	r3, [sp, #0]
 800a960:	429e      	cmp	r6, r3
 800a962:	dc01      	bgt.n	800a968 <__kernel_rem_pio2+0x4c8>
 800a964:	42b5      	cmp	r5, r6
 800a966:	dae9      	bge.n	800a93c <__kernel_rem_pio2+0x49c>
 800a968:	ab48      	add	r3, sp, #288	@ 0x120
 800a96a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a96e:	e9c5 ab00 	strd	sl, fp, [r5]
 800a972:	3c01      	subs	r4, #1
 800a974:	e6ff      	b.n	800a776 <__kernel_rem_pio2+0x2d6>
 800a976:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a978:	2b02      	cmp	r3, #2
 800a97a:	dc0b      	bgt.n	800a994 <__kernel_rem_pio2+0x4f4>
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	dc39      	bgt.n	800a9f4 <__kernel_rem_pio2+0x554>
 800a980:	d05d      	beq.n	800aa3e <__kernel_rem_pio2+0x59e>
 800a982:	9b02      	ldr	r3, [sp, #8]
 800a984:	f003 0007 	and.w	r0, r3, #7
 800a988:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a98c:	ecbd 8b02 	vpop	{d8}
 800a990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a994:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a996:	2b03      	cmp	r3, #3
 800a998:	d1f3      	bne.n	800a982 <__kernel_rem_pio2+0x4e2>
 800a99a:	9b05      	ldr	r3, [sp, #20]
 800a99c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a9a0:	eb0d 0403 	add.w	r4, sp, r3
 800a9a4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800a9a8:	4625      	mov	r5, r4
 800a9aa:	46c2      	mov	sl, r8
 800a9ac:	f1ba 0f00 	cmp.w	sl, #0
 800a9b0:	f1a5 0508 	sub.w	r5, r5, #8
 800a9b4:	dc6b      	bgt.n	800aa8e <__kernel_rem_pio2+0x5ee>
 800a9b6:	4645      	mov	r5, r8
 800a9b8:	2d01      	cmp	r5, #1
 800a9ba:	f1a4 0408 	sub.w	r4, r4, #8
 800a9be:	f300 8087 	bgt.w	800aad0 <__kernel_rem_pio2+0x630>
 800a9c2:	9c05      	ldr	r4, [sp, #20]
 800a9c4:	ab48      	add	r3, sp, #288	@ 0x120
 800a9c6:	441c      	add	r4, r3
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	f1b8 0f01 	cmp.w	r8, #1
 800a9d0:	f300 809c 	bgt.w	800ab0c <__kernel_rem_pio2+0x66c>
 800a9d4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a9d8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a9dc:	f1b9 0f00 	cmp.w	r9, #0
 800a9e0:	f040 80a6 	bne.w	800ab30 <__kernel_rem_pio2+0x690>
 800a9e4:	9b04      	ldr	r3, [sp, #16]
 800a9e6:	e9c3 7800 	strd	r7, r8, [r3]
 800a9ea:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a9ee:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a9f2:	e7c6      	b.n	800a982 <__kernel_rem_pio2+0x4e2>
 800a9f4:	9d05      	ldr	r5, [sp, #20]
 800a9f6:	ab48      	add	r3, sp, #288	@ 0x120
 800a9f8:	441d      	add	r5, r3
 800a9fa:	4644      	mov	r4, r8
 800a9fc:	2000      	movs	r0, #0
 800a9fe:	2100      	movs	r1, #0
 800aa00:	2c00      	cmp	r4, #0
 800aa02:	da35      	bge.n	800aa70 <__kernel_rem_pio2+0x5d0>
 800aa04:	f1b9 0f00 	cmp.w	r9, #0
 800aa08:	d038      	beq.n	800aa7c <__kernel_rem_pio2+0x5dc>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa10:	9c04      	ldr	r4, [sp, #16]
 800aa12:	e9c4 2300 	strd	r2, r3, [r4]
 800aa16:	4602      	mov	r2, r0
 800aa18:	460b      	mov	r3, r1
 800aa1a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800aa1e:	f7f5 fbff 	bl	8000220 <__aeabi_dsub>
 800aa22:	ad4a      	add	r5, sp, #296	@ 0x128
 800aa24:	2401      	movs	r4, #1
 800aa26:	45a0      	cmp	r8, r4
 800aa28:	da2b      	bge.n	800aa82 <__kernel_rem_pio2+0x5e2>
 800aa2a:	f1b9 0f00 	cmp.w	r9, #0
 800aa2e:	d002      	beq.n	800aa36 <__kernel_rem_pio2+0x596>
 800aa30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa34:	4619      	mov	r1, r3
 800aa36:	9b04      	ldr	r3, [sp, #16]
 800aa38:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800aa3c:	e7a1      	b.n	800a982 <__kernel_rem_pio2+0x4e2>
 800aa3e:	9c05      	ldr	r4, [sp, #20]
 800aa40:	ab48      	add	r3, sp, #288	@ 0x120
 800aa42:	441c      	add	r4, r3
 800aa44:	2000      	movs	r0, #0
 800aa46:	2100      	movs	r1, #0
 800aa48:	f1b8 0f00 	cmp.w	r8, #0
 800aa4c:	da09      	bge.n	800aa62 <__kernel_rem_pio2+0x5c2>
 800aa4e:	f1b9 0f00 	cmp.w	r9, #0
 800aa52:	d002      	beq.n	800aa5a <__kernel_rem_pio2+0x5ba>
 800aa54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa58:	4619      	mov	r1, r3
 800aa5a:	9b04      	ldr	r3, [sp, #16]
 800aa5c:	e9c3 0100 	strd	r0, r1, [r3]
 800aa60:	e78f      	b.n	800a982 <__kernel_rem_pio2+0x4e2>
 800aa62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa66:	f7f5 fbdd 	bl	8000224 <__adddf3>
 800aa6a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800aa6e:	e7eb      	b.n	800aa48 <__kernel_rem_pio2+0x5a8>
 800aa70:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800aa74:	f7f5 fbd6 	bl	8000224 <__adddf3>
 800aa78:	3c01      	subs	r4, #1
 800aa7a:	e7c1      	b.n	800aa00 <__kernel_rem_pio2+0x560>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	460b      	mov	r3, r1
 800aa80:	e7c6      	b.n	800aa10 <__kernel_rem_pio2+0x570>
 800aa82:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800aa86:	f7f5 fbcd 	bl	8000224 <__adddf3>
 800aa8a:	3401      	adds	r4, #1
 800aa8c:	e7cb      	b.n	800aa26 <__kernel_rem_pio2+0x586>
 800aa8e:	ed95 7b00 	vldr	d7, [r5]
 800aa92:	ed8d 7b00 	vstr	d7, [sp]
 800aa96:	ed95 7b02 	vldr	d7, [r5, #8]
 800aa9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa9e:	ec53 2b17 	vmov	r2, r3, d7
 800aaa2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aaa6:	f7f5 fbbd 	bl	8000224 <__adddf3>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	460b      	mov	r3, r1
 800aaae:	4606      	mov	r6, r0
 800aab0:	460f      	mov	r7, r1
 800aab2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aab6:	f7f5 fbb3 	bl	8000220 <__aeabi_dsub>
 800aaba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aabe:	f7f5 fbb1 	bl	8000224 <__adddf3>
 800aac2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800aac6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800aaca:	e9c5 6700 	strd	r6, r7, [r5]
 800aace:	e76d      	b.n	800a9ac <__kernel_rem_pio2+0x50c>
 800aad0:	ed94 7b00 	vldr	d7, [r4]
 800aad4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800aad8:	ec51 0b17 	vmov	r0, r1, d7
 800aadc:	4652      	mov	r2, sl
 800aade:	465b      	mov	r3, fp
 800aae0:	ed8d 7b00 	vstr	d7, [sp]
 800aae4:	f7f5 fb9e 	bl	8000224 <__adddf3>
 800aae8:	4602      	mov	r2, r0
 800aaea:	460b      	mov	r3, r1
 800aaec:	4606      	mov	r6, r0
 800aaee:	460f      	mov	r7, r1
 800aaf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aaf4:	f7f5 fb94 	bl	8000220 <__aeabi_dsub>
 800aaf8:	4652      	mov	r2, sl
 800aafa:	465b      	mov	r3, fp
 800aafc:	f7f5 fb92 	bl	8000224 <__adddf3>
 800ab00:	3d01      	subs	r5, #1
 800ab02:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ab06:	e9c4 6700 	strd	r6, r7, [r4]
 800ab0a:	e755      	b.n	800a9b8 <__kernel_rem_pio2+0x518>
 800ab0c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ab10:	f7f5 fb88 	bl	8000224 <__adddf3>
 800ab14:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ab18:	e758      	b.n	800a9cc <__kernel_rem_pio2+0x52c>
 800ab1a:	bf00      	nop
 800ab1c:	f3af 8000 	nop.w
	...
 800ab28:	41700000 	.word	0x41700000
 800ab2c:	3e700000 	.word	0x3e700000
 800ab30:	9b04      	ldr	r3, [sp, #16]
 800ab32:	9a04      	ldr	r2, [sp, #16]
 800ab34:	601f      	str	r7, [r3, #0]
 800ab36:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800ab3a:	605c      	str	r4, [r3, #4]
 800ab3c:	609d      	str	r5, [r3, #8]
 800ab3e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ab42:	60d3      	str	r3, [r2, #12]
 800ab44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab48:	6110      	str	r0, [r2, #16]
 800ab4a:	6153      	str	r3, [r2, #20]
 800ab4c:	e719      	b.n	800a982 <__kernel_rem_pio2+0x4e2>
 800ab4e:	bf00      	nop

0800ab50 <scalbn>:
 800ab50:	b570      	push	{r4, r5, r6, lr}
 800ab52:	ec55 4b10 	vmov	r4, r5, d0
 800ab56:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ab5a:	4606      	mov	r6, r0
 800ab5c:	462b      	mov	r3, r5
 800ab5e:	b991      	cbnz	r1, 800ab86 <scalbn+0x36>
 800ab60:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ab64:	4323      	orrs	r3, r4
 800ab66:	d03d      	beq.n	800abe4 <scalbn+0x94>
 800ab68:	4b35      	ldr	r3, [pc, #212]	@ (800ac40 <scalbn+0xf0>)
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f7f5 fd0e 	bl	8000590 <__aeabi_dmul>
 800ab74:	4b33      	ldr	r3, [pc, #204]	@ (800ac44 <scalbn+0xf4>)
 800ab76:	429e      	cmp	r6, r3
 800ab78:	4604      	mov	r4, r0
 800ab7a:	460d      	mov	r5, r1
 800ab7c:	da0f      	bge.n	800ab9e <scalbn+0x4e>
 800ab7e:	a328      	add	r3, pc, #160	@ (adr r3, 800ac20 <scalbn+0xd0>)
 800ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab84:	e01e      	b.n	800abc4 <scalbn+0x74>
 800ab86:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ab8a:	4291      	cmp	r1, r2
 800ab8c:	d10b      	bne.n	800aba6 <scalbn+0x56>
 800ab8e:	4622      	mov	r2, r4
 800ab90:	4620      	mov	r0, r4
 800ab92:	4629      	mov	r1, r5
 800ab94:	f7f5 fb46 	bl	8000224 <__adddf3>
 800ab98:	4604      	mov	r4, r0
 800ab9a:	460d      	mov	r5, r1
 800ab9c:	e022      	b.n	800abe4 <scalbn+0x94>
 800ab9e:	460b      	mov	r3, r1
 800aba0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800aba4:	3936      	subs	r1, #54	@ 0x36
 800aba6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800abaa:	4296      	cmp	r6, r2
 800abac:	dd0d      	ble.n	800abca <scalbn+0x7a>
 800abae:	2d00      	cmp	r5, #0
 800abb0:	a11d      	add	r1, pc, #116	@ (adr r1, 800ac28 <scalbn+0xd8>)
 800abb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abb6:	da02      	bge.n	800abbe <scalbn+0x6e>
 800abb8:	a11d      	add	r1, pc, #116	@ (adr r1, 800ac30 <scalbn+0xe0>)
 800abba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abbe:	a31a      	add	r3, pc, #104	@ (adr r3, 800ac28 <scalbn+0xd8>)
 800abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc4:	f7f5 fce4 	bl	8000590 <__aeabi_dmul>
 800abc8:	e7e6      	b.n	800ab98 <scalbn+0x48>
 800abca:	1872      	adds	r2, r6, r1
 800abcc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800abd0:	428a      	cmp	r2, r1
 800abd2:	dcec      	bgt.n	800abae <scalbn+0x5e>
 800abd4:	2a00      	cmp	r2, #0
 800abd6:	dd08      	ble.n	800abea <scalbn+0x9a>
 800abd8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800abdc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800abe0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800abe4:	ec45 4b10 	vmov	d0, r4, r5
 800abe8:	bd70      	pop	{r4, r5, r6, pc}
 800abea:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800abee:	da08      	bge.n	800ac02 <scalbn+0xb2>
 800abf0:	2d00      	cmp	r5, #0
 800abf2:	a10b      	add	r1, pc, #44	@ (adr r1, 800ac20 <scalbn+0xd0>)
 800abf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abf8:	dac1      	bge.n	800ab7e <scalbn+0x2e>
 800abfa:	a10f      	add	r1, pc, #60	@ (adr r1, 800ac38 <scalbn+0xe8>)
 800abfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac00:	e7bd      	b.n	800ab7e <scalbn+0x2e>
 800ac02:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ac06:	3236      	adds	r2, #54	@ 0x36
 800ac08:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ac0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac10:	4620      	mov	r0, r4
 800ac12:	4b0d      	ldr	r3, [pc, #52]	@ (800ac48 <scalbn+0xf8>)
 800ac14:	4629      	mov	r1, r5
 800ac16:	2200      	movs	r2, #0
 800ac18:	e7d4      	b.n	800abc4 <scalbn+0x74>
 800ac1a:	bf00      	nop
 800ac1c:	f3af 8000 	nop.w
 800ac20:	c2f8f359 	.word	0xc2f8f359
 800ac24:	01a56e1f 	.word	0x01a56e1f
 800ac28:	8800759c 	.word	0x8800759c
 800ac2c:	7e37e43c 	.word	0x7e37e43c
 800ac30:	8800759c 	.word	0x8800759c
 800ac34:	fe37e43c 	.word	0xfe37e43c
 800ac38:	c2f8f359 	.word	0xc2f8f359
 800ac3c:	81a56e1f 	.word	0x81a56e1f
 800ac40:	43500000 	.word	0x43500000
 800ac44:	ffff3cb0 	.word	0xffff3cb0
 800ac48:	3c900000 	.word	0x3c900000
 800ac4c:	00000000 	.word	0x00000000

0800ac50 <floor>:
 800ac50:	ec51 0b10 	vmov	r0, r1, d0
 800ac54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ac58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800ac60:	2e13      	cmp	r6, #19
 800ac62:	460c      	mov	r4, r1
 800ac64:	4605      	mov	r5, r0
 800ac66:	4680      	mov	r8, r0
 800ac68:	dc34      	bgt.n	800acd4 <floor+0x84>
 800ac6a:	2e00      	cmp	r6, #0
 800ac6c:	da17      	bge.n	800ac9e <floor+0x4e>
 800ac6e:	a332      	add	r3, pc, #200	@ (adr r3, 800ad38 <floor+0xe8>)
 800ac70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac74:	f7f5 fad6 	bl	8000224 <__adddf3>
 800ac78:	2200      	movs	r2, #0
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	f7f5 ff18 	bl	8000ab0 <__aeabi_dcmpgt>
 800ac80:	b150      	cbz	r0, 800ac98 <floor+0x48>
 800ac82:	2c00      	cmp	r4, #0
 800ac84:	da55      	bge.n	800ad32 <floor+0xe2>
 800ac86:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ac8a:	432c      	orrs	r4, r5
 800ac8c:	2500      	movs	r5, #0
 800ac8e:	42ac      	cmp	r4, r5
 800ac90:	4c2b      	ldr	r4, [pc, #172]	@ (800ad40 <floor+0xf0>)
 800ac92:	bf08      	it	eq
 800ac94:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800ac98:	4621      	mov	r1, r4
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	e023      	b.n	800ace6 <floor+0x96>
 800ac9e:	4f29      	ldr	r7, [pc, #164]	@ (800ad44 <floor+0xf4>)
 800aca0:	4137      	asrs	r7, r6
 800aca2:	ea01 0307 	and.w	r3, r1, r7
 800aca6:	4303      	orrs	r3, r0
 800aca8:	d01d      	beq.n	800ace6 <floor+0x96>
 800acaa:	a323      	add	r3, pc, #140	@ (adr r3, 800ad38 <floor+0xe8>)
 800acac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb0:	f7f5 fab8 	bl	8000224 <__adddf3>
 800acb4:	2200      	movs	r2, #0
 800acb6:	2300      	movs	r3, #0
 800acb8:	f7f5 fefa 	bl	8000ab0 <__aeabi_dcmpgt>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d0eb      	beq.n	800ac98 <floor+0x48>
 800acc0:	2c00      	cmp	r4, #0
 800acc2:	bfbe      	ittt	lt
 800acc4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800acc8:	4133      	asrlt	r3, r6
 800acca:	18e4      	addlt	r4, r4, r3
 800accc:	ea24 0407 	bic.w	r4, r4, r7
 800acd0:	2500      	movs	r5, #0
 800acd2:	e7e1      	b.n	800ac98 <floor+0x48>
 800acd4:	2e33      	cmp	r6, #51	@ 0x33
 800acd6:	dd0a      	ble.n	800acee <floor+0x9e>
 800acd8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800acdc:	d103      	bne.n	800ace6 <floor+0x96>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	f7f5 fa9f 	bl	8000224 <__adddf3>
 800ace6:	ec41 0b10 	vmov	d0, r0, r1
 800acea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acee:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800acf2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800acf6:	40df      	lsrs	r7, r3
 800acf8:	4207      	tst	r7, r0
 800acfa:	d0f4      	beq.n	800ace6 <floor+0x96>
 800acfc:	a30e      	add	r3, pc, #56	@ (adr r3, 800ad38 <floor+0xe8>)
 800acfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad02:	f7f5 fa8f 	bl	8000224 <__adddf3>
 800ad06:	2200      	movs	r2, #0
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f7f5 fed1 	bl	8000ab0 <__aeabi_dcmpgt>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d0c2      	beq.n	800ac98 <floor+0x48>
 800ad12:	2c00      	cmp	r4, #0
 800ad14:	da0a      	bge.n	800ad2c <floor+0xdc>
 800ad16:	2e14      	cmp	r6, #20
 800ad18:	d101      	bne.n	800ad1e <floor+0xce>
 800ad1a:	3401      	adds	r4, #1
 800ad1c:	e006      	b.n	800ad2c <floor+0xdc>
 800ad1e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800ad22:	2301      	movs	r3, #1
 800ad24:	40b3      	lsls	r3, r6
 800ad26:	441d      	add	r5, r3
 800ad28:	4545      	cmp	r5, r8
 800ad2a:	d3f6      	bcc.n	800ad1a <floor+0xca>
 800ad2c:	ea25 0507 	bic.w	r5, r5, r7
 800ad30:	e7b2      	b.n	800ac98 <floor+0x48>
 800ad32:	2500      	movs	r5, #0
 800ad34:	462c      	mov	r4, r5
 800ad36:	e7af      	b.n	800ac98 <floor+0x48>
 800ad38:	8800759c 	.word	0x8800759c
 800ad3c:	7e37e43c 	.word	0x7e37e43c
 800ad40:	bff00000 	.word	0xbff00000
 800ad44:	000fffff 	.word	0x000fffff

0800ad48 <realloc>:
 800ad48:	4b02      	ldr	r3, [pc, #8]	@ (800ad54 <realloc+0xc>)
 800ad4a:	460a      	mov	r2, r1
 800ad4c:	4601      	mov	r1, r0
 800ad4e:	6818      	ldr	r0, [r3, #0]
 800ad50:	f000 b802 	b.w	800ad58 <_realloc_r>
 800ad54:	2000000c 	.word	0x2000000c

0800ad58 <_realloc_r>:
 800ad58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad5c:	4680      	mov	r8, r0
 800ad5e:	4615      	mov	r5, r2
 800ad60:	460c      	mov	r4, r1
 800ad62:	b921      	cbnz	r1, 800ad6e <_realloc_r+0x16>
 800ad64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad68:	4611      	mov	r1, r2
 800ad6a:	f000 b8d1 	b.w	800af10 <_malloc_r>
 800ad6e:	b92a      	cbnz	r2, 800ad7c <_realloc_r+0x24>
 800ad70:	f000 f862 	bl	800ae38 <_free_r>
 800ad74:	2400      	movs	r4, #0
 800ad76:	4620      	mov	r0, r4
 800ad78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad7c:	f000 f954 	bl	800b028 <_malloc_usable_size_r>
 800ad80:	4285      	cmp	r5, r0
 800ad82:	4606      	mov	r6, r0
 800ad84:	d802      	bhi.n	800ad8c <_realloc_r+0x34>
 800ad86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ad8a:	d8f4      	bhi.n	800ad76 <_realloc_r+0x1e>
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	4640      	mov	r0, r8
 800ad90:	f000 f8be 	bl	800af10 <_malloc_r>
 800ad94:	4607      	mov	r7, r0
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d0ec      	beq.n	800ad74 <_realloc_r+0x1c>
 800ad9a:	42b5      	cmp	r5, r6
 800ad9c:	462a      	mov	r2, r5
 800ad9e:	4621      	mov	r1, r4
 800ada0:	bf28      	it	cs
 800ada2:	4632      	movcs	r2, r6
 800ada4:	f000 f83a 	bl	800ae1c <memcpy>
 800ada8:	4621      	mov	r1, r4
 800adaa:	4640      	mov	r0, r8
 800adac:	f000 f844 	bl	800ae38 <_free_r>
 800adb0:	463c      	mov	r4, r7
 800adb2:	e7e0      	b.n	800ad76 <_realloc_r+0x1e>

0800adb4 <memset>:
 800adb4:	4402      	add	r2, r0
 800adb6:	4603      	mov	r3, r0
 800adb8:	4293      	cmp	r3, r2
 800adba:	d100      	bne.n	800adbe <memset+0xa>
 800adbc:	4770      	bx	lr
 800adbe:	f803 1b01 	strb.w	r1, [r3], #1
 800adc2:	e7f9      	b.n	800adb8 <memset+0x4>

0800adc4 <__errno>:
 800adc4:	4b01      	ldr	r3, [pc, #4]	@ (800adcc <__errno+0x8>)
 800adc6:	6818      	ldr	r0, [r3, #0]
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop
 800adcc:	2000000c 	.word	0x2000000c

0800add0 <__libc_init_array>:
 800add0:	b570      	push	{r4, r5, r6, lr}
 800add2:	4d0d      	ldr	r5, [pc, #52]	@ (800ae08 <__libc_init_array+0x38>)
 800add4:	4c0d      	ldr	r4, [pc, #52]	@ (800ae0c <__libc_init_array+0x3c>)
 800add6:	1b64      	subs	r4, r4, r5
 800add8:	10a4      	asrs	r4, r4, #2
 800adda:	2600      	movs	r6, #0
 800addc:	42a6      	cmp	r6, r4
 800adde:	d109      	bne.n	800adf4 <__libc_init_array+0x24>
 800ade0:	4d0b      	ldr	r5, [pc, #44]	@ (800ae10 <__libc_init_array+0x40>)
 800ade2:	4c0c      	ldr	r4, [pc, #48]	@ (800ae14 <__libc_init_array+0x44>)
 800ade4:	f000 f938 	bl	800b058 <_init>
 800ade8:	1b64      	subs	r4, r4, r5
 800adea:	10a4      	asrs	r4, r4, #2
 800adec:	2600      	movs	r6, #0
 800adee:	42a6      	cmp	r6, r4
 800adf0:	d105      	bne.n	800adfe <__libc_init_array+0x2e>
 800adf2:	bd70      	pop	{r4, r5, r6, pc}
 800adf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800adf8:	4798      	blx	r3
 800adfa:	3601      	adds	r6, #1
 800adfc:	e7ee      	b.n	800addc <__libc_init_array+0xc>
 800adfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae02:	4798      	blx	r3
 800ae04:	3601      	adds	r6, #1
 800ae06:	e7f2      	b.n	800adee <__libc_init_array+0x1e>
 800ae08:	0800b590 	.word	0x0800b590
 800ae0c:	0800b590 	.word	0x0800b590
 800ae10:	0800b590 	.word	0x0800b590
 800ae14:	0800b598 	.word	0x0800b598

0800ae18 <__retarget_lock_acquire_recursive>:
 800ae18:	4770      	bx	lr

0800ae1a <__retarget_lock_release_recursive>:
 800ae1a:	4770      	bx	lr

0800ae1c <memcpy>:
 800ae1c:	440a      	add	r2, r1
 800ae1e:	4291      	cmp	r1, r2
 800ae20:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ae24:	d100      	bne.n	800ae28 <memcpy+0xc>
 800ae26:	4770      	bx	lr
 800ae28:	b510      	push	{r4, lr}
 800ae2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae32:	4291      	cmp	r1, r2
 800ae34:	d1f9      	bne.n	800ae2a <memcpy+0xe>
 800ae36:	bd10      	pop	{r4, pc}

0800ae38 <_free_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	2900      	cmp	r1, #0
 800ae3e:	d041      	beq.n	800aec4 <_free_r+0x8c>
 800ae40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae44:	1f0c      	subs	r4, r1, #4
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	bfb8      	it	lt
 800ae4a:	18e4      	addlt	r4, r4, r3
 800ae4c:	f000 f8e0 	bl	800b010 <__malloc_lock>
 800ae50:	4a1d      	ldr	r2, [pc, #116]	@ (800aec8 <_free_r+0x90>)
 800ae52:	6813      	ldr	r3, [r2, #0]
 800ae54:	b933      	cbnz	r3, 800ae64 <_free_r+0x2c>
 800ae56:	6063      	str	r3, [r4, #4]
 800ae58:	6014      	str	r4, [r2, #0]
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae60:	f000 b8dc 	b.w	800b01c <__malloc_unlock>
 800ae64:	42a3      	cmp	r3, r4
 800ae66:	d908      	bls.n	800ae7a <_free_r+0x42>
 800ae68:	6820      	ldr	r0, [r4, #0]
 800ae6a:	1821      	adds	r1, r4, r0
 800ae6c:	428b      	cmp	r3, r1
 800ae6e:	bf01      	itttt	eq
 800ae70:	6819      	ldreq	r1, [r3, #0]
 800ae72:	685b      	ldreq	r3, [r3, #4]
 800ae74:	1809      	addeq	r1, r1, r0
 800ae76:	6021      	streq	r1, [r4, #0]
 800ae78:	e7ed      	b.n	800ae56 <_free_r+0x1e>
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	b10b      	cbz	r3, 800ae84 <_free_r+0x4c>
 800ae80:	42a3      	cmp	r3, r4
 800ae82:	d9fa      	bls.n	800ae7a <_free_r+0x42>
 800ae84:	6811      	ldr	r1, [r2, #0]
 800ae86:	1850      	adds	r0, r2, r1
 800ae88:	42a0      	cmp	r0, r4
 800ae8a:	d10b      	bne.n	800aea4 <_free_r+0x6c>
 800ae8c:	6820      	ldr	r0, [r4, #0]
 800ae8e:	4401      	add	r1, r0
 800ae90:	1850      	adds	r0, r2, r1
 800ae92:	4283      	cmp	r3, r0
 800ae94:	6011      	str	r1, [r2, #0]
 800ae96:	d1e0      	bne.n	800ae5a <_free_r+0x22>
 800ae98:	6818      	ldr	r0, [r3, #0]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	6053      	str	r3, [r2, #4]
 800ae9e:	4408      	add	r0, r1
 800aea0:	6010      	str	r0, [r2, #0]
 800aea2:	e7da      	b.n	800ae5a <_free_r+0x22>
 800aea4:	d902      	bls.n	800aeac <_free_r+0x74>
 800aea6:	230c      	movs	r3, #12
 800aea8:	602b      	str	r3, [r5, #0]
 800aeaa:	e7d6      	b.n	800ae5a <_free_r+0x22>
 800aeac:	6820      	ldr	r0, [r4, #0]
 800aeae:	1821      	adds	r1, r4, r0
 800aeb0:	428b      	cmp	r3, r1
 800aeb2:	bf04      	itt	eq
 800aeb4:	6819      	ldreq	r1, [r3, #0]
 800aeb6:	685b      	ldreq	r3, [r3, #4]
 800aeb8:	6063      	str	r3, [r4, #4]
 800aeba:	bf04      	itt	eq
 800aebc:	1809      	addeq	r1, r1, r0
 800aebe:	6021      	streq	r1, [r4, #0]
 800aec0:	6054      	str	r4, [r2, #4]
 800aec2:	e7ca      	b.n	800ae5a <_free_r+0x22>
 800aec4:	bd38      	pop	{r3, r4, r5, pc}
 800aec6:	bf00      	nop
 800aec8:	20001c30 	.word	0x20001c30

0800aecc <sbrk_aligned>:
 800aecc:	b570      	push	{r4, r5, r6, lr}
 800aece:	4e0f      	ldr	r6, [pc, #60]	@ (800af0c <sbrk_aligned+0x40>)
 800aed0:	460c      	mov	r4, r1
 800aed2:	6831      	ldr	r1, [r6, #0]
 800aed4:	4605      	mov	r5, r0
 800aed6:	b911      	cbnz	r1, 800aede <sbrk_aligned+0x12>
 800aed8:	f000 f8ae 	bl	800b038 <_sbrk_r>
 800aedc:	6030      	str	r0, [r6, #0]
 800aede:	4621      	mov	r1, r4
 800aee0:	4628      	mov	r0, r5
 800aee2:	f000 f8a9 	bl	800b038 <_sbrk_r>
 800aee6:	1c43      	adds	r3, r0, #1
 800aee8:	d103      	bne.n	800aef2 <sbrk_aligned+0x26>
 800aeea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800aeee:	4620      	mov	r0, r4
 800aef0:	bd70      	pop	{r4, r5, r6, pc}
 800aef2:	1cc4      	adds	r4, r0, #3
 800aef4:	f024 0403 	bic.w	r4, r4, #3
 800aef8:	42a0      	cmp	r0, r4
 800aefa:	d0f8      	beq.n	800aeee <sbrk_aligned+0x22>
 800aefc:	1a21      	subs	r1, r4, r0
 800aefe:	4628      	mov	r0, r5
 800af00:	f000 f89a 	bl	800b038 <_sbrk_r>
 800af04:	3001      	adds	r0, #1
 800af06:	d1f2      	bne.n	800aeee <sbrk_aligned+0x22>
 800af08:	e7ef      	b.n	800aeea <sbrk_aligned+0x1e>
 800af0a:	bf00      	nop
 800af0c:	20001c2c 	.word	0x20001c2c

0800af10 <_malloc_r>:
 800af10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af14:	1ccd      	adds	r5, r1, #3
 800af16:	f025 0503 	bic.w	r5, r5, #3
 800af1a:	3508      	adds	r5, #8
 800af1c:	2d0c      	cmp	r5, #12
 800af1e:	bf38      	it	cc
 800af20:	250c      	movcc	r5, #12
 800af22:	2d00      	cmp	r5, #0
 800af24:	4606      	mov	r6, r0
 800af26:	db01      	blt.n	800af2c <_malloc_r+0x1c>
 800af28:	42a9      	cmp	r1, r5
 800af2a:	d904      	bls.n	800af36 <_malloc_r+0x26>
 800af2c:	230c      	movs	r3, #12
 800af2e:	6033      	str	r3, [r6, #0]
 800af30:	2000      	movs	r0, #0
 800af32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b00c <_malloc_r+0xfc>
 800af3a:	f000 f869 	bl	800b010 <__malloc_lock>
 800af3e:	f8d8 3000 	ldr.w	r3, [r8]
 800af42:	461c      	mov	r4, r3
 800af44:	bb44      	cbnz	r4, 800af98 <_malloc_r+0x88>
 800af46:	4629      	mov	r1, r5
 800af48:	4630      	mov	r0, r6
 800af4a:	f7ff ffbf 	bl	800aecc <sbrk_aligned>
 800af4e:	1c43      	adds	r3, r0, #1
 800af50:	4604      	mov	r4, r0
 800af52:	d158      	bne.n	800b006 <_malloc_r+0xf6>
 800af54:	f8d8 4000 	ldr.w	r4, [r8]
 800af58:	4627      	mov	r7, r4
 800af5a:	2f00      	cmp	r7, #0
 800af5c:	d143      	bne.n	800afe6 <_malloc_r+0xd6>
 800af5e:	2c00      	cmp	r4, #0
 800af60:	d04b      	beq.n	800affa <_malloc_r+0xea>
 800af62:	6823      	ldr	r3, [r4, #0]
 800af64:	4639      	mov	r1, r7
 800af66:	4630      	mov	r0, r6
 800af68:	eb04 0903 	add.w	r9, r4, r3
 800af6c:	f000 f864 	bl	800b038 <_sbrk_r>
 800af70:	4581      	cmp	r9, r0
 800af72:	d142      	bne.n	800affa <_malloc_r+0xea>
 800af74:	6821      	ldr	r1, [r4, #0]
 800af76:	1a6d      	subs	r5, r5, r1
 800af78:	4629      	mov	r1, r5
 800af7a:	4630      	mov	r0, r6
 800af7c:	f7ff ffa6 	bl	800aecc <sbrk_aligned>
 800af80:	3001      	adds	r0, #1
 800af82:	d03a      	beq.n	800affa <_malloc_r+0xea>
 800af84:	6823      	ldr	r3, [r4, #0]
 800af86:	442b      	add	r3, r5
 800af88:	6023      	str	r3, [r4, #0]
 800af8a:	f8d8 3000 	ldr.w	r3, [r8]
 800af8e:	685a      	ldr	r2, [r3, #4]
 800af90:	bb62      	cbnz	r2, 800afec <_malloc_r+0xdc>
 800af92:	f8c8 7000 	str.w	r7, [r8]
 800af96:	e00f      	b.n	800afb8 <_malloc_r+0xa8>
 800af98:	6822      	ldr	r2, [r4, #0]
 800af9a:	1b52      	subs	r2, r2, r5
 800af9c:	d420      	bmi.n	800afe0 <_malloc_r+0xd0>
 800af9e:	2a0b      	cmp	r2, #11
 800afa0:	d917      	bls.n	800afd2 <_malloc_r+0xc2>
 800afa2:	1961      	adds	r1, r4, r5
 800afa4:	42a3      	cmp	r3, r4
 800afa6:	6025      	str	r5, [r4, #0]
 800afa8:	bf18      	it	ne
 800afaa:	6059      	strne	r1, [r3, #4]
 800afac:	6863      	ldr	r3, [r4, #4]
 800afae:	bf08      	it	eq
 800afb0:	f8c8 1000 	streq.w	r1, [r8]
 800afb4:	5162      	str	r2, [r4, r5]
 800afb6:	604b      	str	r3, [r1, #4]
 800afb8:	4630      	mov	r0, r6
 800afba:	f000 f82f 	bl	800b01c <__malloc_unlock>
 800afbe:	f104 000b 	add.w	r0, r4, #11
 800afc2:	1d23      	adds	r3, r4, #4
 800afc4:	f020 0007 	bic.w	r0, r0, #7
 800afc8:	1ac2      	subs	r2, r0, r3
 800afca:	bf1c      	itt	ne
 800afcc:	1a1b      	subne	r3, r3, r0
 800afce:	50a3      	strne	r3, [r4, r2]
 800afd0:	e7af      	b.n	800af32 <_malloc_r+0x22>
 800afd2:	6862      	ldr	r2, [r4, #4]
 800afd4:	42a3      	cmp	r3, r4
 800afd6:	bf0c      	ite	eq
 800afd8:	f8c8 2000 	streq.w	r2, [r8]
 800afdc:	605a      	strne	r2, [r3, #4]
 800afde:	e7eb      	b.n	800afb8 <_malloc_r+0xa8>
 800afe0:	4623      	mov	r3, r4
 800afe2:	6864      	ldr	r4, [r4, #4]
 800afe4:	e7ae      	b.n	800af44 <_malloc_r+0x34>
 800afe6:	463c      	mov	r4, r7
 800afe8:	687f      	ldr	r7, [r7, #4]
 800afea:	e7b6      	b.n	800af5a <_malloc_r+0x4a>
 800afec:	461a      	mov	r2, r3
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	42a3      	cmp	r3, r4
 800aff2:	d1fb      	bne.n	800afec <_malloc_r+0xdc>
 800aff4:	2300      	movs	r3, #0
 800aff6:	6053      	str	r3, [r2, #4]
 800aff8:	e7de      	b.n	800afb8 <_malloc_r+0xa8>
 800affa:	230c      	movs	r3, #12
 800affc:	6033      	str	r3, [r6, #0]
 800affe:	4630      	mov	r0, r6
 800b000:	f000 f80c 	bl	800b01c <__malloc_unlock>
 800b004:	e794      	b.n	800af30 <_malloc_r+0x20>
 800b006:	6005      	str	r5, [r0, #0]
 800b008:	e7d6      	b.n	800afb8 <_malloc_r+0xa8>
 800b00a:	bf00      	nop
 800b00c:	20001c30 	.word	0x20001c30

0800b010 <__malloc_lock>:
 800b010:	4801      	ldr	r0, [pc, #4]	@ (800b018 <__malloc_lock+0x8>)
 800b012:	f7ff bf01 	b.w	800ae18 <__retarget_lock_acquire_recursive>
 800b016:	bf00      	nop
 800b018:	20001c28 	.word	0x20001c28

0800b01c <__malloc_unlock>:
 800b01c:	4801      	ldr	r0, [pc, #4]	@ (800b024 <__malloc_unlock+0x8>)
 800b01e:	f7ff befc 	b.w	800ae1a <__retarget_lock_release_recursive>
 800b022:	bf00      	nop
 800b024:	20001c28 	.word	0x20001c28

0800b028 <_malloc_usable_size_r>:
 800b028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b02c:	1f18      	subs	r0, r3, #4
 800b02e:	2b00      	cmp	r3, #0
 800b030:	bfbc      	itt	lt
 800b032:	580b      	ldrlt	r3, [r1, r0]
 800b034:	18c0      	addlt	r0, r0, r3
 800b036:	4770      	bx	lr

0800b038 <_sbrk_r>:
 800b038:	b538      	push	{r3, r4, r5, lr}
 800b03a:	4d06      	ldr	r5, [pc, #24]	@ (800b054 <_sbrk_r+0x1c>)
 800b03c:	2300      	movs	r3, #0
 800b03e:	4604      	mov	r4, r0
 800b040:	4608      	mov	r0, r1
 800b042:	602b      	str	r3, [r5, #0]
 800b044:	f7f9 fe96 	bl	8004d74 <_sbrk>
 800b048:	1c43      	adds	r3, r0, #1
 800b04a:	d102      	bne.n	800b052 <_sbrk_r+0x1a>
 800b04c:	682b      	ldr	r3, [r5, #0]
 800b04e:	b103      	cbz	r3, 800b052 <_sbrk_r+0x1a>
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	bd38      	pop	{r3, r4, r5, pc}
 800b054:	20001c24 	.word	0x20001c24

0800b058 <_init>:
 800b058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05a:	bf00      	nop
 800b05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b05e:	bc08      	pop	{r3}
 800b060:	469e      	mov	lr, r3
 800b062:	4770      	bx	lr

0800b064 <_fini>:
 800b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b066:	bf00      	nop
 800b068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b06a:	bc08      	pop	{r3}
 800b06c:	469e      	mov	lr, r3
 800b06e:	4770      	bx	lr
