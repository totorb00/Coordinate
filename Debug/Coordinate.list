
Coordinate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd38  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0800bf00  0800bf00  0000cf00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4b0  0800c4b0  0000e06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4b0  0800c4b0  0000d4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4b8  0800c4b8  0000e06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c4b8  0800c4b8  0000d4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c4c0  0800c4c0  0000d4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800c4c4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c7c  20000070  0800c530  0000e070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001cec  0800c530  0000ecec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a209  00000000  00000000  0000e09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035bf  00000000  00000000  000282a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  0002b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000103e  00000000  00000000  0002cd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025876  00000000  00000000  0002dd46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e7f  00000000  00000000  000535bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc83a  00000000  00000000  0006c43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148c75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006310  00000000  00000000  00148cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0014efc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800bee8 	.word	0x0800bee8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	0800bee8 	.word	0x0800bee8

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bc8:	f000 b96a 	b.w	8000ea0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	460c      	mov	r4, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14e      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	458c      	cmp	ip, r1
 8000bf4:	4686      	mov	lr, r0
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	d962      	bls.n	8000cc2 <__udivmoddi4+0xde>
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	4091      	lsls	r1, r2
 8000c04:	fa20 f303 	lsr.w	r3, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f f68c 	uxth.w	r6, ip
 8000c1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c22:	fb07 1114 	mls	r1, r7, r4, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb04 f106 	mul.w	r1, r4, r6
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c3a:	f080 8112 	bcs.w	8000e62 <__udivmoddi4+0x27e>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 810f 	bls.w	8000e62 <__udivmoddi4+0x27e>
 8000c44:	3c02      	subs	r4, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a59      	subs	r1, r3, r1
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c52:	fb07 1110 	mls	r1, r7, r0, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb00 f606 	mul.w	r6, r0, r6
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x94>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c6a:	f080 80fc 	bcs.w	8000e66 <__udivmoddi4+0x282>
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	f240 80f9 	bls.w	8000e66 <__udivmoddi4+0x282>
 8000c74:	4463      	add	r3, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa6>
 8000c82:	40d3      	lsrs	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xba>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb4>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x150>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xcc>
 8000caa:	4290      	cmp	r0, r2
 8000cac:	f0c0 80f0 	bcc.w	8000e90 <__udivmoddi4+0x2ac>
 8000cb0:	1a86      	subs	r6, r0, r2
 8000cb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d0e6      	beq.n	8000c8a <__udivmoddi4+0xa6>
 8000cbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc0:	e7e3      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x204>
 8000cc8:	eba1 040c 	sub.w	r4, r1, ip
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa1f f78c 	uxth.w	r7, ip
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cde:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb07 f006 	mul.w	r0, r7, r6
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x11c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x11a>
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cfe:	4626      	mov	r6, r4
 8000d00:	1a1c      	subs	r4, r3, r0
 8000d02:	fa1f f38e 	uxth.w	r3, lr
 8000d06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	429f      	cmp	r7, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x148>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x146>
 8000d24:	429f      	cmp	r7, r3
 8000d26:	f200 80b0 	bhi.w	8000e8a <__udivmoddi4+0x2a6>
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	1bdb      	subs	r3, r3, r7
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x9c>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d44:	fa04 f301 	lsl.w	r3, r4, r1
 8000d48:	ea43 030c 	orr.w	r3, r3, ip
 8000d4c:	40f4      	lsrs	r4, r6
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	0c38      	lsrs	r0, r7, #16
 8000d54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d58:	fbb4 fef0 	udiv	lr, r4, r0
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fb00 441e 	mls	r4, r0, lr, r4
 8000d64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d68:	fb0e f90c 	mul.w	r9, lr, ip
 8000d6c:	45a1      	cmp	r9, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x1a6>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d7a:	f080 8084 	bcs.w	8000e86 <__udivmoddi4+0x2a2>
 8000d7e:	45a1      	cmp	r9, r4
 8000d80:	f240 8081 	bls.w	8000e86 <__udivmoddi4+0x2a2>
 8000d84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	eba4 0409 	sub.w	r4, r4, r9
 8000d8e:	fa1f f983 	uxth.w	r9, r3
 8000d92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d96:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1d2>
 8000da6:	193c      	adds	r4, r7, r4
 8000da8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dac:	d267      	bcs.n	8000e7e <__udivmoddi4+0x29a>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d965      	bls.n	8000e7e <__udivmoddi4+0x29a>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dba:	fba0 9302 	umull	r9, r3, r0, r2
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	d351      	bcc.n	8000e6e <__udivmoddi4+0x28a>
 8000dca:	d04e      	beq.n	8000e6a <__udivmoddi4+0x286>
 8000dcc:	b155      	cbz	r5, 8000de4 <__udivmoddi4+0x200>
 8000dce:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	40cb      	lsrs	r3, r1
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c5 6400 	strd	r6, r4, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e750      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f103 	lsr.w	r1, r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa24 f303 	lsr.w	r3, r4, r3
 8000df8:	4094      	lsls	r4, r2
 8000dfa:	430c      	orrs	r4, r1
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e16:	fb00 f107 	mul.w	r1, r0, r7
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x24c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e26:	d22c      	bcs.n	8000e82 <__udivmoddi4+0x29e>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d92a      	bls.n	8000e82 <__udivmoddi4+0x29e>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb01 f307 	mul.w	r3, r1, r7
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x276>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e50:	d213      	bcs.n	8000e7a <__udivmoddi4+0x296>
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	d911      	bls.n	8000e7a <__udivmoddi4+0x296>
 8000e56:	3902      	subs	r1, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	1ae4      	subs	r4, r4, r3
 8000e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e60:	e739      	b.n	8000cd6 <__udivmoddi4+0xf2>
 8000e62:	4604      	mov	r4, r0
 8000e64:	e6f0      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e706      	b.n	8000c78 <__udivmoddi4+0x94>
 8000e6a:	45c8      	cmp	r8, r9
 8000e6c:	d2ae      	bcs.n	8000dcc <__udivmoddi4+0x1e8>
 8000e6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7a8      	b.n	8000dcc <__udivmoddi4+0x1e8>
 8000e7a:	4631      	mov	r1, r6
 8000e7c:	e7ed      	b.n	8000e5a <__udivmoddi4+0x276>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e799      	b.n	8000db6 <__udivmoddi4+0x1d2>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e7d4      	b.n	8000e30 <__udivmoddi4+0x24c>
 8000e86:	46d6      	mov	lr, sl
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1a6>
 8000e8a:	4463      	add	r3, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e74d      	b.n	8000d2c <__udivmoddi4+0x148>
 8000e90:	4606      	mov	r6, r0
 8000e92:	4623      	mov	r3, r4
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70f      	b.n	8000cb8 <__udivmoddi4+0xd4>
 8000e98:	3e02      	subs	r6, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	e730      	b.n	8000d00 <__udivmoddi4+0x11c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <DEV_Set_I2CAddress>:
UWORD IIC_Addr_t = IIC_Addr;
extern I2C_HandleTypeDef hi2c1;


void DEV_Set_I2CAddress(UBYTE add_)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	IIC_Addr_t = add_;
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <DEV_Set_I2CAddress+0x20>)
 8000eb4:	801a      	strh	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000000 	.word	0x20000000

08000ec8 <DEV_I2C_WriteByte>:
/******************************************************************************
function:
	I2C Write and Read
******************************************************************************/
void DEV_I2C_WriteByte(UBYTE add_, UBYTE data_)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af04      	add	r7, sp, #16
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
	UBYTE Buf[1] = {0};
 8000ed8:	2300      	movs	r3, #0
 8000eda:	733b      	strb	r3, [r7, #12]
	Buf[0] = data_;
 8000edc:	79bb      	ldrb	r3, [r7, #6]
 8000ede:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x10);
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <DEV_I2C_WriteByte+0x40>)
 8000ee2:	8819      	ldrh	r1, [r3, #0]
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	2310      	movs	r3, #16
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	2301      	movs	r3, #1
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	4804      	ldr	r0, [pc, #16]	@ (8000f0c <DEV_I2C_WriteByte+0x44>)
 8000efa:	f005 fc27 	bl	800674c <HAL_I2C_Mem_Write>
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000090 	.word	0x20000090

08000f10 <DEV_I2C_ReadByte>:
	Buf[1] = data_;
	HAL_I2C_Mem_Write(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 2, 0x10);
}

UBYTE DEV_I2C_ReadByte(UBYTE add_)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af04      	add	r7, sp, #16
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	UBYTE Buf[1]={add_};
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	733b      	strb	r3, [r7, #12]
	HAL_StatusTypeDef ret = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Mem_Read(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x10);
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <DEV_I2C_ReadByte+0x40>)
 8000f24:	8819      	ldrh	r1, [r3, #0]
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	4806      	ldr	r0, [pc, #24]	@ (8000f54 <DEV_I2C_ReadByte+0x44>)
 8000f3c:	f005 fd00 	bl	8006940 <HAL_I2C_Mem_Read>
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]
	return Buf[0];
 8000f44:	7b3b      	ldrb	r3, [r7, #12]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000090 	.word	0x20000090

08000f58 <TCS34725_WriteByte>:
parameter	:
        add : Register address
        data: Written data
******************************************************************************/
static void TCS34725_WriteByte(UBYTE add, UBYTE data)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	460a      	mov	r2, r1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	71bb      	strb	r3, [r7, #6]
    //Note: remember to add this when users write their own
    //Responsible for not finding the register,
    //refer to the data sheet Command Register CMD(Bit 7)
    add = add | TCS34725_CMD_BIT;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f6e:	71fb      	strb	r3, [r7, #7]
    DEV_I2C_WriteByte(add, data);
 8000f70:	79ba      	ldrb	r2, [r7, #6]
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ffa6 	bl	8000ec8 <DEV_I2C_WriteByte>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <TCS34725_ReadByte>:
function:   Read a byte to TCS34725
parameter	:
        add : Register address
******************************************************************************/
static UBYTE TCS34725_ReadByte(UBYTE add)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
    add = add | TCS34725_CMD_BIT;
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f94:	71fb      	strb	r3, [r7, #7]
    return DEV_I2C_ReadByte(add);
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ffb9 	bl	8000f10 <DEV_I2C_ReadByte>
 8000f9e:	4603      	mov	r3, r0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <TCS34725_Enable>:
/******************************************************************************
function:
        TCS34725 wake up
******************************************************************************/
static void TCS34725_Enable(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    TCS34725_WriteByte(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 8000fac:	2101      	movs	r1, #1
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f7ff ffd2 	bl	8000f58 <TCS34725_WriteByte>
    DEV_Delay_ms(3);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f004 fb9f 	bl	80056f8 <HAL_Delay>
    TCS34725_WriteByte(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 8000fba:	2103      	movs	r1, #3
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff ffcb 	bl	8000f58 <TCS34725_WriteByte>
    DEV_Delay_ms(3);
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	f004 fb98 	bl	80056f8 <HAL_Delay>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <TCS34725_Set_Integration_Time>:
function:   TCS34725 Set Integration Time
parameter	:
        time: Integration Time Reference "TCS34725.h" Enumeration Type
******************************************************************************/
void TCS34725_Set_Integration_Time(TCS34725IntegrationTime_t time)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
    /* Update the timing register */
    TCS34725_WriteByte(TCS34725_ATIME, time);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f7ff ffbc 	bl	8000f58 <TCS34725_WriteByte>
    IntegrationTime_t = time;
 8000fe0:	4a03      	ldr	r2, [pc, #12]	@ (8000ff0 <TCS34725_Set_Integration_Time+0x24>)
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	7013      	strb	r3, [r2, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000008c 	.word	0x2000008c

08000ff4 <TCS34725_Set_Gain>:
function:   TCS34725 Set gain
parameter	:
        gain: gain Reference "TCS34725.h" Enumeration Type
******************************************************************************/
void TCS34725_Set_Gain(TCS34725Gain_t gain)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	TCS34725_WriteByte(TCS34725_CONTROL, gain);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	4619      	mov	r1, r3
 8001002:	200f      	movs	r0, #15
 8001004:	f7ff ffa8 	bl	8000f58 <TCS34725_WriteByte>
    Gain_t = gain;
 8001008:	4a03      	ldr	r2, [pc, #12]	@ (8001018 <TCS34725_Set_Gain+0x24>)
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	7013      	strb	r3, [r2, #0]
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000002 	.word	0x20000002

0800101c <TCS34725_Interrupt_Enable>:

/******************************************************************************
function:   Interrupt Enable
******************************************************************************/
static void TCS34725_Interrupt_Enable()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
    UBYTE data = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	71fb      	strb	r3, [r7, #7]
    data = TCS34725_ReadByte(TCS34725_ENABLE);
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff ffac 	bl	8000f84 <TCS34725_ReadByte>
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
    TCS34725_WriteByte(TCS34725_ENABLE, data | TCS34725_ENABLE_AIEN);
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f043 0310 	orr.w	r3, r3, #16
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4619      	mov	r1, r3
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff ff8c 	bl	8000f58 <TCS34725_WriteByte>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <TCS34725_Set_Interrupt_Persistence_Reg>:
            for several cycles
parameter	:
    TCS34725_PER : reference "TCS34725.h"
******************************************************************************/
static void TCS34725_Set_Interrupt_Persistence_Reg(UBYTE TCS34725_PER)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
    if(TCS34725_PER < 0x10)
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d805      	bhi.n	8001064 <TCS34725_Set_Interrupt_Persistence_Reg+0x1c>
        TCS34725_WriteByte(TCS34725_PERS, TCS34725_PER);
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	4619      	mov	r1, r3
 800105c:	200c      	movs	r0, #12
 800105e:	f7ff ff7b 	bl	8000f58 <TCS34725_WriteByte>
    else
        TCS34725_WriteByte(TCS34725_PERS, TCS34725_PERS_60_CYCLE);
}
 8001062:	e003      	b.n	800106c <TCS34725_Set_Interrupt_Persistence_Reg+0x24>
        TCS34725_WriteByte(TCS34725_PERS, TCS34725_PERS_60_CYCLE);
 8001064:	210f      	movs	r1, #15
 8001066:	200c      	movs	r0, #12
 8001068:	f7ff ff76 	bl	8000f58 <TCS34725_WriteByte>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <TCS34725_Set_Interrupt_Threshold>:
    when the Clear data (CDATA) is less than the Clear interrupt low
    threshold (AILTx) or is greater than the Clear interrupt high
    threshold (AIHTx)(Clear is the Clear ADC Channel Data Registers)
******************************************************************************/
static void TCS34725_Set_Interrupt_Threshold(UWORD Threshold_H, UWORD Threshold_L)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	460a      	mov	r2, r1
 800107e:	80fb      	strh	r3, [r7, #6]
 8001080:	4613      	mov	r3, r2
 8001082:	80bb      	strh	r3, [r7, #4]
    TCS34725_WriteByte(TCS34725_AILTL, Threshold_L & 0xff);
 8001084:	88bb      	ldrh	r3, [r7, #4]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	4619      	mov	r1, r3
 800108a:	2004      	movs	r0, #4
 800108c:	f7ff ff64 	bl	8000f58 <TCS34725_WriteByte>
    TCS34725_WriteByte(TCS34725_AILTH, Threshold_L >> 8);
 8001090:	88bb      	ldrh	r3, [r7, #4]
 8001092:	0a1b      	lsrs	r3, r3, #8
 8001094:	b29b      	uxth	r3, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	4619      	mov	r1, r3
 800109a:	2005      	movs	r0, #5
 800109c:	f7ff ff5c 	bl	8000f58 <TCS34725_WriteByte>
    TCS34725_WriteByte(TCS34725_AIHTL, Threshold_H & 0xff);
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4619      	mov	r1, r3
 80010a6:	2006      	movs	r0, #6
 80010a8:	f7ff ff56 	bl	8000f58 <TCS34725_WriteByte>
    TCS34725_WriteByte(TCS34725_AIHTH, Threshold_H >> 8);
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	4619      	mov	r1, r3
 80010b6:	2007      	movs	r0, #7
 80010b8:	f7ff ff4e 	bl	8000f58 <TCS34725_WriteByte>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <TCS34725_Init>:
parameter	:
        gain: gain Reference "TCS34725.h" Enumeration Type
        it  : Integration Time Reference "TCS34725.h" Enumeration Type
******************************************************************************/
UBYTE  TCS34725_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
	UBYTE ID = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	71fb      	strb	r3, [r7, #7]
	DEV_Set_I2CAddress(TCS34725_ADDRESS);
 80010ce:	2052      	movs	r0, #82	@ 0x52
 80010d0:	f7ff fee8 	bl	8000ea4 <DEV_Set_I2CAddress>
	ID = TCS34725_ReadByte(TCS34725_ID);
 80010d4:	2012      	movs	r0, #18
 80010d6:	f7ff ff55 	bl	8000f84 <TCS34725_ReadByte>
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	if(ID != 0x44 && ID != 0x4D){
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b44      	cmp	r3, #68	@ 0x44
 80010e2:	d004      	beq.n	80010ee <TCS34725_Init+0x2a>
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b4d      	cmp	r3, #77	@ 0x4d
 80010e8:	d001      	beq.n	80010ee <TCS34725_Init+0x2a>
			return 1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e01b      	b.n	8001126 <TCS34725_Init+0x62>
	}
	//Set the integration time and gain
	TCS34725_Set_Integration_Time(TCS34725_INTEGRATIONTIME_154MS);
 80010ee:	20c0      	movs	r0, #192	@ 0xc0
 80010f0:	f7ff ff6c 	bl	8000fcc <TCS34725_Set_Integration_Time>
	TCS34725_Set_Gain(TCS34725_GAIN_60X);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f7ff ff7d 	bl	8000ff4 <TCS34725_Set_Gain>

	IntegrationTime_t = TCS34725_INTEGRATIONTIME_154MS;
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <TCS34725_Init+0x6c>)
 80010fc:	22c0      	movs	r2, #192	@ 0xc0
 80010fe:	701a      	strb	r2, [r3, #0]
	Gain_t = TCS34725_GAIN_60X;
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <TCS34725_Init+0x70>)
 8001102:	2203      	movs	r2, #3
 8001104:	701a      	strb	r2, [r3, #0]
	//Set Interrupt
	TCS34725_Set_Interrupt_Threshold(0xff00, 0x00ff);//Interrupt upper and lower threshold
 8001106:	21ff      	movs	r1, #255	@ 0xff
 8001108:	f44f 407f 	mov.w	r0, #65280	@ 0xff00
 800110c:	f7ff ffb2 	bl	8001074 <TCS34725_Set_Interrupt_Threshold>
	TCS34725_Set_Interrupt_Persistence_Reg(TCS34725_PERS_2_CYCLE);
 8001110:	2002      	movs	r0, #2
 8001112:	f7ff ff99 	bl	8001048 <TCS34725_Set_Interrupt_Persistence_Reg>
	TCS34725_Enable();
 8001116:	f7ff ff47 	bl	8000fa8 <TCS34725_Enable>
	TCS34725_Interrupt_Enable();
 800111a:	f7ff ff7f 	bl	800101c <TCS34725_Interrupt_Enable>
	//Set the LCD brightness
	TCS34725_SetLight(40);
 800111e:	2028      	movs	r0, #40	@ 0x28
 8001120:	f000 f80a 	bl	8001138 <TCS34725_SetLight>

	return 0;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000008c 	.word	0x2000008c
 8001134:	20000002 	.word	0x20000002

08001138 <TCS34725_SetLight>:
function:   Set the onboard LED brightness
parameter	:
     value : 0 - 100
******************************************************************************/
void TCS34725_SetLight(UWORD value)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
    if(value <= 100){
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	2b64      	cmp	r3, #100	@ 0x64
 8001146:	d809      	bhi.n	800115c <TCS34725_SetLight+0x24>
        value = value * DEV_PWM_value / 100;
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	461a      	mov	r2, r3
 800114c:	0092      	lsls	r2, r2, #2
 800114e:	4413      	add	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	80fb      	strh	r3, [r7, #6]
        DEV_Set_PWM(value);
 8001154:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	63d3      	str	r3, [r2, #60]	@ 0x3c
    }
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <HAL_TIM_PeriodElapsedCallback>:
//		flag++;
//	}
//
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	//	if(htim==&htim12)
	//	{
	////		can_transmit(&hcan1, 0x201, buffer[0], buffer[1], buffer[2],buffer[3],buffer[4]);
	//		loop();
	//	}
	if(htim==&htim5)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a69      	ldr	r2, [pc, #420]	@ (8001318 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	f040 80c2 	bne.w	80012fe <HAL_TIM_PeriodElapsedCallback+0x196>
	{
		uint16_t new_countA = TIM3->CNT;
 800117a:	4b68      	ldr	r3, [pc, #416]	@ (800131c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800117c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800117e:	823b      	strh	r3, [r7, #16]
		uint16_t new_countB = TIM4->CNT;
 8001180:	4b67      	ldr	r3, [pc, #412]	@ (8001320 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001184:	81fb      	strh	r3, [r7, #14]
		uint16_t new_countC = TIM8->CNT;
 8001186:	4b67      	ldr	r3, [pc, #412]	@ (8001324 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118a:	81bb      	strh	r3, [r7, #12]
		int16_t diffA = new_countA - valueA;
 800118c:	4b66      	ldr	r3, [pc, #408]	@ (8001328 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	b29b      	uxth	r3, r3
 8001192:	8a3a      	ldrh	r2, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	b29b      	uxth	r3, r3
 8001198:	82fb      	strh	r3, [r7, #22]
		int16_t diffB = new_countB - valueB;
 800119a:	4b64      	ldr	r3, [pc, #400]	@ (800132c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	89fa      	ldrh	r2, [r7, #14]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	82bb      	strh	r3, [r7, #20]
		int16_t diffC = new_countC - valueC;
 80011a8:	4b61      	ldr	r3, [pc, #388]	@ (8001330 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	89ba      	ldrh	r2, [r7, #12]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	827b      	strh	r3, [r7, #18]

		if (diffA > 32767) {
			diffA -= 65536; // Handle overflow
		} else if (diffA < -32767) {
 80011b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011ba:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
			diffA += 65536; // Handle underflow
		}

		if (diffB > 32767) {
			diffB -= 65536; // Handle overflow
		} else if (diffB < -32767) {
 80011be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011c2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
			diffB += 65536; // Handle underflow
		}

		if (diffC > 32767) {
			diffC -= 65536; // Handle overflow
		} else if (diffC < -32767) {
 80011c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011ca:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
			diffC += 65536; // Handle underflow
		}

		// Update total distances traveled
		Speed_EncoderA=diffA*per_step;
 80011ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f972 	bl	80004bc <__aeabi_i2d>
 80011d8:	a34b      	add	r3, pc, #300	@ (adr r3, 8001308 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff f9d7 	bl	8000590 <__aeabi_dmul>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	a349      	add	r3, pc, #292	@ (adr r3, 8001310 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff f9ce 	bl	8000590 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b4c      	ldr	r3, [pc, #304]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001202:	f7ff faef 	bl	80007e4 <__aeabi_ddiv>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	494b      	ldr	r1, [pc, #300]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800120c:	e9c1 2300 	strd	r2, r3, [r1]
		Speed_EncoderB=diffB*per_step;
 8001210:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f951 	bl	80004bc <__aeabi_i2d>
 800121a:	a33b      	add	r3, pc, #236	@ (adr r3, 8001308 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7ff f9b6 	bl	8000590 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	a338      	add	r3, pc, #224	@ (adr r3, 8001310 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	f7ff f9ad 	bl	8000590 <__aeabi_dmul>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b3c      	ldr	r3, [pc, #240]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001244:	f7ff face 	bl	80007e4 <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	493b      	ldr	r1, [pc, #236]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800124e:	e9c1 2300 	strd	r2, r3, [r1]
		Speed_EncoderC=diffC*per_step;
 8001252:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f930 	bl	80004bc <__aeabi_i2d>
 800125c:	a32a      	add	r3, pc, #168	@ (adr r3, 8001308 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f995 	bl	8000590 <__aeabi_dmul>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	a328      	add	r3, pc, #160	@ (adr r3, 8001310 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff f98c 	bl	8000590 <__aeabi_dmul>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	4b2b      	ldr	r3, [pc, #172]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001286:	f7ff faad 	bl	80007e4 <__aeabi_ddiv>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	492c      	ldr	r1, [pc, #176]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001290:	e9c1 2300 	strd	r2, r3, [r1]
		distanceA += Speed_EncoderA;
 8001294:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001296:	e9d3 0100 	ldrd	r0, r1, [r3]
 800129a:	4b27      	ldr	r3, [pc, #156]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	f7fe ffc0 	bl	8000224 <__adddf3>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4926      	ldr	r1, [pc, #152]	@ (8001344 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80012aa:	e9c1 2300 	strd	r2, r3, [r1]
		distanceB += Speed_EncoderB;
 80012ae:	4b26      	ldr	r3, [pc, #152]	@ (8001348 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80012b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7fe ffb3 	bl	8000224 <__adddf3>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4921      	ldr	r1, [pc, #132]	@ (8001348 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80012c4:	e9c1 2300 	strd	r2, r3, [r1]
		distanceC += Speed_EncoderC;
 80012c8:	4b20      	ldr	r3, [pc, #128]	@ (800134c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80012ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7fe ffa6 	bl	8000224 <__adddf3>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	491b      	ldr	r1, [pc, #108]	@ (800134c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80012de:	e9c1 2300 	strd	r2, r3, [r1]
		// Update current counts
		valueA = new_countA;
 80012e2:	8a3b      	ldrh	r3, [r7, #16]
 80012e4:	4a10      	ldr	r2, [pc, #64]	@ (8001328 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80012e6:	6013      	str	r3, [r2, #0]
		valueB = new_countB;
 80012e8:	89fb      	ldrh	r3, [r7, #14]
 80012ea:	4a10      	ldr	r2, [pc, #64]	@ (800132c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80012ec:	6013      	str	r3, [r2, #0]
		valueC = new_countC;
 80012ee:	89bb      	ldrh	r3, [r7, #12]
 80012f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001330 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80012f2:	6013      	str	r3, [r2, #0]
		interrupt_counter++;
 80012f4:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a15      	ldr	r2, [pc, #84]	@ (8001350 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80012fc:	6013      	str	r3, [r2, #0]
	}
}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	33333333 	.word	0x33333333
 800130c:	40153333 	.word	0x40153333
 8001310:	54442d18 	.word	0x54442d18
 8001314:	400921fb 	.word	0x400921fb
 8001318:	20000210 	.word	0x20000210
 800131c:	40000400 	.word	0x40000400
 8001320:	40000800 	.word	0x40000800
 8001324:	40010400 	.word	0x40010400
 8001328:	200003f0 	.word	0x200003f0
 800132c:	200003f4 	.word	0x200003f4
 8001330:	200003f8 	.word	0x200003f8
 8001334:	409f4000 	.word	0x409f4000
 8001338:	20000408 	.word	0x20000408
 800133c:	20000410 	.word	0x20000410
 8001340:	20000418 	.word	0x20000418
 8001344:	200004c0 	.word	0x200004c0
 8001348:	200004c8 	.word	0x200004c8
 800134c:	200004d0 	.word	0x200004d0
 8001350:	20000400 	.word	0x20000400

08001354 <MPU6050_Init>:
void MPU6050_Init (void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af04      	add	r7, sp, #16
	uint8_t check, Data;
	HAL_I2C_Mem_Read (&hi2c3, MPU6050_ADDR, WHO_AM_I_REG,1,&check,1,1000);
 800135a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	2301      	movs	r3, #1
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	1dfb      	adds	r3, r7, #7
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2301      	movs	r3, #1
 800136a:	2275      	movs	r2, #117	@ 0x75
 800136c:	21d0      	movs	r1, #208	@ 0xd0
 800136e:	4823      	ldr	r0, [pc, #140]	@ (80013fc <MPU6050_Init+0xa8>)
 8001370:	f005 fae6 	bl	8006940 <HAL_I2C_Mem_Read>

	if( check == 104)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2b68      	cmp	r3, #104	@ 0x68
 8001378:	d13b      	bne.n	80013f2 <MPU6050_Init+0x9e>
	{
		Data=0;
 800137a:	2300      	movs	r3, #0
 800137c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 800137e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001382:	9302      	str	r3, [sp, #8]
 8001384:	2301      	movs	r3, #1
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	1dbb      	adds	r3, r7, #6
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	226b      	movs	r2, #107	@ 0x6b
 8001390:	21d0      	movs	r1, #208	@ 0xd0
 8001392:	481a      	ldr	r0, [pc, #104]	@ (80013fc <MPU6050_Init+0xa8>)
 8001394:	f005 f9da 	bl	800674c <HAL_I2C_Mem_Write>

		Data=0x07;
 8001398:	2307      	movs	r3, #7
 800139a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 800139c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	1dbb      	adds	r3, r7, #6
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	2219      	movs	r2, #25
 80013ae:	21d0      	movs	r1, #208	@ 0xd0
 80013b0:	4812      	ldr	r0, [pc, #72]	@ (80013fc <MPU6050_Init+0xa8>)
 80013b2:	f005 f9cb 	bl	800674c <HAL_I2C_Mem_Write>

		Data=0x00;
 80013b6:	2300      	movs	r3, #0
 80013b8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80013ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013be:	9302      	str	r3, [sp, #8]
 80013c0:	2301      	movs	r3, #1
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	1dbb      	adds	r3, r7, #6
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2301      	movs	r3, #1
 80013ca:	221c      	movs	r2, #28
 80013cc:	21d0      	movs	r1, #208	@ 0xd0
 80013ce:	480b      	ldr	r0, [pc, #44]	@ (80013fc <MPU6050_Init+0xa8>)
 80013d0:	f005 f9bc 	bl	800674c <HAL_I2C_Mem_Write>

		Data=0x00;
 80013d4:	2300      	movs	r3, #0
 80013d6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80013d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013dc:	9302      	str	r3, [sp, #8]
 80013de:	2301      	movs	r3, #1
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	1dbb      	adds	r3, r7, #6
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2301      	movs	r3, #1
 80013e8:	221b      	movs	r2, #27
 80013ea:	21d0      	movs	r1, #208	@ 0xd0
 80013ec:	4803      	ldr	r0, [pc, #12]	@ (80013fc <MPU6050_Init+0xa8>)
 80013ee:	f005 f9ad 	bl	800674c <HAL_I2C_Mem_Write>
	}
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200000e4 	.word	0x200000e4

08001400 <MPU6050_Read_Accel>:
void MPU6050_Read_Accel(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	HAL_I2C_Mem_Read(&hi2c3, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001406:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	2306      	movs	r3, #6
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	463b      	mov	r3, r7
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2301      	movs	r3, #1
 8001416:	223b      	movs	r2, #59	@ 0x3b
 8001418:	21d0      	movs	r1, #208	@ 0xd0
 800141a:	482f      	ldr	r0, [pc, #188]	@ (80014d8 <MPU6050_Read_Accel+0xd8>)
 800141c:	f005 fa90 	bl	8006940 <HAL_I2C_Mem_Read>

	Accel_X_Raw=(int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001420:	783b      	ldrb	r3, [r7, #0]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	787b      	ldrb	r3, [r7, #1]
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b21b      	sxth	r3, r3
 800142e:	b29a      	uxth	r2, r3
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <MPU6050_Read_Accel+0xdc>)
 8001432:	801a      	strh	r2, [r3, #0]
	Accel_Y_Raw=(int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001434:	78bb      	ldrb	r3, [r7, #2]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	b21a      	sxth	r2, r3
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	b21b      	sxth	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b21b      	sxth	r3, r3
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b26      	ldr	r3, [pc, #152]	@ (80014e0 <MPU6050_Read_Accel+0xe0>)
 8001446:	801a      	strh	r2, [r3, #0]
	Accel_Z_Raw=(int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001448:	793b      	ldrb	r3, [r7, #4]
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	b21a      	sxth	r2, r3
 800144e:	797b      	ldrb	r3, [r7, #5]
 8001450:	b21b      	sxth	r3, r3
 8001452:	4313      	orrs	r3, r2
 8001454:	b21b      	sxth	r3, r3
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <MPU6050_Read_Accel+0xe4>)
 800145a:	801a      	strh	r2, [r3, #0]
	//		can_transmit(&hcan1, 0x191, Rec_Data[0], Rec_Data[1]);
	Ax=Accel_X_Raw/4096.0;
 800145c:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <MPU6050_Read_Accel+0xdc>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f82b 	bl	80004bc <__aeabi_i2d>
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b1f      	ldr	r3, [pc, #124]	@ (80014e8 <MPU6050_Read_Accel+0xe8>)
 800146c:	f7ff f9ba 	bl	80007e4 <__aeabi_ddiv>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fb4c 	bl	8000b14 <__aeabi_d2f>
 800147c:	4603      	mov	r3, r0
 800147e:	4a1b      	ldr	r2, [pc, #108]	@ (80014ec <MPU6050_Read_Accel+0xec>)
 8001480:	6013      	str	r3, [r2, #0]
	Ay=Accel_Y_Raw/4096.0;
 8001482:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <MPU6050_Read_Accel+0xe0>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f818 	bl	80004bc <__aeabi_i2d>
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <MPU6050_Read_Accel+0xe8>)
 8001492:	f7ff f9a7 	bl	80007e4 <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff fb39 	bl	8000b14 <__aeabi_d2f>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <MPU6050_Read_Accel+0xf0>)
 80014a6:	6013      	str	r3, [r2, #0]
	Az=Accel_Z_Raw/4096.0;
 80014a8:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <MPU6050_Read_Accel+0xe4>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f805 	bl	80004bc <__aeabi_i2d>
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <MPU6050_Read_Accel+0xe8>)
 80014b8:	f7ff f994 	bl	80007e4 <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff fb26 	bl	8000b14 <__aeabi_d2f>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <MPU6050_Read_Accel+0xf4>)
 80014cc:	6013      	str	r3, [r2, #0]
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200000e4 	.word	0x200000e4
 80014dc:	20000510 	.word	0x20000510
 80014e0:	20000512 	.word	0x20000512
 80014e4:	20000514 	.word	0x20000514
 80014e8:	40b00000 	.word	0x40b00000
 80014ec:	20000518 	.word	0x20000518
 80014f0:	2000051c 	.word	0x2000051c
 80014f4:	20000520 	.word	0x20000520

080014f8 <Accel_X_Angle>:
float Accel_X_Angle(float Ax, float Ay, float Az) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8001502:	edc7 0a02 	vstr	s1, [r7, #8]
 8001506:	ed87 1a01 	vstr	s2, [r7, #4]
	float angle_deg = (180/3.141592)*(atan(Az/Ax));
 800150a:	ed97 7a01 	vldr	s14, [r7, #4]
 800150e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001512:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001516:	ee16 0a90 	vmov	r0, s13
 800151a:	f7fe ffe1 	bl	80004e0 <__aeabi_f2d>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	ec43 2b10 	vmov	d0, r2, r3
 8001526:	f008 fdcb 	bl	800a0c0 <atan>
 800152a:	ec51 0b10 	vmov	r0, r1, d0
 800152e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001558 <Accel_X_Angle+0x60>)
 8001530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001534:	f7ff f82c 	bl	8000590 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff fae8 	bl	8000b14 <__aeabi_d2f>
 8001544:	4603      	mov	r3, r0
 8001546:	617b      	str	r3, [r7, #20]
	return angle_deg;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	ee07 3a90 	vmov	s15, r3
}
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	7e61df46 	.word	0x7e61df46
 800155c:	404ca5dc 	.word	0x404ca5dc

08001560 <Accel_Y_Angle>:
float Accel_Y_Angle(float Ax, float Ay, float Az) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	ed87 0a03 	vstr	s0, [r7, #12]
 800156a:	edc7 0a02 	vstr	s1, [r7, #8]
 800156e:	ed87 1a01 	vstr	s2, [r7, #4]
	float angle_deg = (180/3.141592)*(atan(Ay/Az));
 8001572:	ed97 7a02 	vldr	s14, [r7, #8]
 8001576:	edd7 7a01 	vldr	s15, [r7, #4]
 800157a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800157e:	ee16 0a90 	vmov	r0, s13
 8001582:	f7fe ffad 	bl	80004e0 <__aeabi_f2d>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	ec43 2b10 	vmov	d0, r2, r3
 800158e:	f008 fd97 	bl	800a0c0 <atan>
 8001592:	ec51 0b10 	vmov	r0, r1, d0
 8001596:	a30a      	add	r3, pc, #40	@ (adr r3, 80015c0 <Accel_Y_Angle+0x60>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7fe fff8 	bl	8000590 <__aeabi_dmul>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f7ff fab4 	bl	8000b14 <__aeabi_d2f>
 80015ac:	4603      	mov	r3, r0
 80015ae:	617b      	str	r3, [r7, #20]
	return angle_deg;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	ee07 3a90 	vmov	s15, r3
}
 80015b6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	7e61df46 	.word	0x7e61df46
 80015c4:	404ca5dc 	.word	0x404ca5dc

080015c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80015c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015cc:	b09a      	sub	sp, #104	@ 0x68
 80015ce:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015d0:	f004 f820 	bl	8005614 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015d4:	f000 fea6 	bl	8002324 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015d8:	f001 f99e 	bl	8002918 <MX_GPIO_Init>
	MX_DMA_Init();
 80015dc:	f001 f974 	bl	80028c8 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80015e0:	f001 f948 	bl	8002874 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 80015e4:	f000 ffc0 	bl	8002568 <MX_TIM3_Init>
	MX_TIM4_Init();
 80015e8:	f001 f812 	bl	8002610 <MX_TIM4_Init>
	MX_TIM5_Init();
 80015ec:	f001 f864 	bl	80026b8 <MX_TIM5_Init>
	MX_TIM8_Init();
 80015f0:	f001 f8b0 	bl	8002754 <MX_TIM8_Init>
	MX_I2C3_Init();
 80015f4:	f000 ff36 	bl	8002464 <MX_I2C3_Init>
	MX_TIM12_Init();
 80015f8:	f001 f904 	bl	8002804 <MX_TIM12_Init>
	MX_TIM2_Init();
 80015fc:	f000 ff60 	bl	80024c0 <MX_TIM2_Init>
	MX_I2C1_Init();
 8001600:	f000 ff02 	bl	8002408 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim5);
 8001604:	48b4      	ldr	r0, [pc, #720]	@ (80018d8 <main+0x310>)
 8001606:	f006 fe09 	bl	800821c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 800160a:	2100      	movs	r1, #0
 800160c:	48b3      	ldr	r0, [pc, #716]	@ (80018dc <main+0x314>)
 800160e:	f006 ff1b 	bl	8008448 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8001612:	2100      	movs	r1, #0
 8001614:	48b2      	ldr	r0, [pc, #712]	@ (80018e0 <main+0x318>)
 8001616:	f006 ff17 	bl	8008448 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 800161a:	2100      	movs	r1, #0
 800161c:	48b1      	ldr	r0, [pc, #708]	@ (80018e4 <main+0x31c>)
 800161e:	f006 ff13 	bl	8008448 <HAL_TIM_Encoder_Start>

	/*initial buyu neg robot geometry cm */
	radian_Alpha=(M_PI/180)*alpha;		//alpha untsugiig degree to radian bolgoj hurwuulj  baigaa uildel
 8001622:	49b1      	ldr	r1, [pc, #708]	@ (80018e8 <main+0x320>)
 8001624:	a3a4      	add	r3, pc, #656	@ (adr r3, 80018b8 <main+0x2f0>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	e9c1 2300 	strd	r2, r3, [r1]
	radian_Beta=(M_PI/180)*beta;		//beta untsugiig degree to radian bolgoj hurwuulj  baigaa uildel
 800162e:	49af      	ldr	r1, [pc, #700]	@ (80018ec <main+0x324>)
 8001630:	a3a3      	add	r3, pc, #652	@ (adr r3, 80018c0 <main+0x2f8>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	e9c1 2300 	strd	r2, r3, [r1]
	radian_Gamma=(M_PI/180)*gamma;		//gamma untsugiig degree to radian bolgoj hurwuulj  baigaa uildel;
 800163a:	49ad      	ldr	r1, [pc, #692]	@ (80018f0 <main+0x328>)
 800163c:	a3a2      	add	r3, pc, #648	@ (adr r3, 80018c8 <main+0x300>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	e9c1 2300 	strd	r2, r3, [r1]
	radian_Delta=(M_PI/180)*delta;		//delta untsugiig degree to radian bolgoj hurwuulj  baigaa uildel;
 8001646:	49ab      	ldr	r1, [pc, #684]	@ (80018f4 <main+0x32c>)
 8001648:	a3a1      	add	r3, pc, #644	@ (adr r3, 80018d0 <main+0x308>)
 800164a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164e:	e9c1 2300 	strd	r2, r3, [r1]
	// AB vector
	AB[0][0]=L*cos(radian_Delta);
 8001652:	4ba8      	ldr	r3, [pc, #672]	@ (80018f4 <main+0x32c>)
 8001654:	ed93 7b00 	vldr	d7, [r3]
 8001658:	eeb0 0a47 	vmov.f32	s0, s14
 800165c:	eef0 0a67 	vmov.f32	s1, s15
 8001660:	f008 fec6 	bl	800a3f0 <cos>
 8001664:	ec51 0b10 	vmov	r0, r1, d0
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	4ba2      	ldr	r3, [pc, #648]	@ (80018f8 <main+0x330>)
 800166e:	f7fe ff8f 	bl	8000590 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	49a1      	ldr	r1, [pc, #644]	@ (80018fc <main+0x334>)
 8001678:	e9c1 2300 	strd	r2, r3, [r1]
	AB[1][0]=L*sin(radian_Delta);
 800167c:	4b9d      	ldr	r3, [pc, #628]	@ (80018f4 <main+0x32c>)
 800167e:	ed93 7b00 	vldr	d7, [r3]
 8001682:	eeb0 0a47 	vmov.f32	s0, s14
 8001686:	eef0 0a67 	vmov.f32	s1, s15
 800168a:	f008 ff0d 	bl	800a4a8 <sin>
 800168e:	ec51 0b10 	vmov	r0, r1, d0
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	4b98      	ldr	r3, [pc, #608]	@ (80018f8 <main+0x330>)
 8001698:	f7fe ff7a 	bl	8000590 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4996      	ldr	r1, [pc, #600]	@ (80018fc <main+0x334>)
 80016a2:	e9c1 2302 	strd	r2, r3, [r1, #8]

	// AC vector
	AC[0][0]=M*1;
 80016a6:	4996      	ldr	r1, [pc, #600]	@ (8001900 <main+0x338>)
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	4b95      	ldr	r3, [pc, #596]	@ (8001904 <main+0x33c>)
 80016ae:	e9c1 2300 	strd	r2, r3, [r1]
	AC[1][0]=M*0;
 80016b2:	4993      	ldr	r1, [pc, #588]	@ (8001900 <main+0x338>)
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	e9c1 2302 	strd	r2, r3, [r1, #8]

	center[0][0]=16.5;
 80016c0:	4991      	ldr	r1, [pc, #580]	@ (8001908 <main+0x340>)
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	4b91      	ldr	r3, [pc, #580]	@ (800190c <main+0x344>)
 80016c8:	e9c1 2300 	strd	r2, r3, [r1]
	center[1][0]=23.25;
 80016cc:	498e      	ldr	r1, [pc, #568]	@ (8001908 <main+0x340>)
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	4b8f      	ldr	r3, [pc, #572]	@ (8001910 <main+0x348>)
 80016d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	//a_encoder Vector
	a_encoder[0][0]=cos(radian_Delta + radian_Alpha),
 80016d8:	4b86      	ldr	r3, [pc, #536]	@ (80018f4 <main+0x32c>)
 80016da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016de:	4b82      	ldr	r3, [pc, #520]	@ (80018e8 <main+0x320>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe fd9e 	bl	8000224 <__adddf3>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	ec43 2b17 	vmov	d7, r2, r3
 80016f0:	eeb0 0a47 	vmov.f32	s0, s14
 80016f4:	eef0 0a67 	vmov.f32	s1, s15
 80016f8:	f008 fe7a 	bl	800a3f0 <cos>
 80016fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001700:	eef0 7a60 	vmov.f32	s15, s1
 8001704:	4b83      	ldr	r3, [pc, #524]	@ (8001914 <main+0x34c>)
 8001706:	ed83 7b00 	vstr	d7, [r3]
			a_encoder[1][0]=sin(radian_Delta + radian_Alpha);
 800170a:	4b7a      	ldr	r3, [pc, #488]	@ (80018f4 <main+0x32c>)
 800170c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001710:	4b75      	ldr	r3, [pc, #468]	@ (80018e8 <main+0x320>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	f7fe fd85 	bl	8000224 <__adddf3>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	ec43 2b17 	vmov	d7, r2, r3
 8001722:	eeb0 0a47 	vmov.f32	s0, s14
 8001726:	eef0 0a67 	vmov.f32	s1, s15
 800172a:	f008 febd 	bl	800a4a8 <sin>
 800172e:	eeb0 7a40 	vmov.f32	s14, s0
 8001732:	eef0 7a60 	vmov.f32	s15, s1
 8001736:	4b77      	ldr	r3, [pc, #476]	@ (8001914 <main+0x34c>)
 8001738:	ed83 7b02 	vstr	d7, [r3, #8]
	//a_perp Vector
	a_perp[0][0]=-1*a_encoder[1][0];
 800173c:	4b75      	ldr	r3, [pc, #468]	@ (8001914 <main+0x34c>)
 800173e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001742:	4614      	mov	r4, r2
 8001744:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001748:	4b73      	ldr	r3, [pc, #460]	@ (8001918 <main+0x350>)
 800174a:	e9c3 4500 	strd	r4, r5, [r3]
	a_perp[1][0]=1*a_encoder[0][0];
 800174e:	4b71      	ldr	r3, [pc, #452]	@ (8001914 <main+0x34c>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	4970      	ldr	r1, [pc, #448]	@ (8001918 <main+0x350>)
 8001756:	e9c1 2302 	strd	r2, r3, [r1, #8]
	//b vector
	b_encoder[0][0]=cos(radian_Delta+radian_Beta);
 800175a:	4b66      	ldr	r3, [pc, #408]	@ (80018f4 <main+0x32c>)
 800175c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001760:	4b62      	ldr	r3, [pc, #392]	@ (80018ec <main+0x324>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	f7fe fd5d 	bl	8000224 <__adddf3>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	ec43 2b17 	vmov	d7, r2, r3
 8001772:	eeb0 0a47 	vmov.f32	s0, s14
 8001776:	eef0 0a67 	vmov.f32	s1, s15
 800177a:	f008 fe39 	bl	800a3f0 <cos>
 800177e:	eeb0 7a40 	vmov.f32	s14, s0
 8001782:	eef0 7a60 	vmov.f32	s15, s1
 8001786:	4b65      	ldr	r3, [pc, #404]	@ (800191c <main+0x354>)
 8001788:	ed83 7b00 	vstr	d7, [r3]
	b_encoder[1][0]=sin(radian_Delta+radian_Beta);
 800178c:	4b59      	ldr	r3, [pc, #356]	@ (80018f4 <main+0x32c>)
 800178e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001792:	4b56      	ldr	r3, [pc, #344]	@ (80018ec <main+0x324>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7fe fd44 	bl	8000224 <__adddf3>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	ec43 2b17 	vmov	d7, r2, r3
 80017a4:	eeb0 0a47 	vmov.f32	s0, s14
 80017a8:	eef0 0a67 	vmov.f32	s1, s15
 80017ac:	f008 fe7c 	bl	800a4a8 <sin>
 80017b0:	eeb0 7a40 	vmov.f32	s14, s0
 80017b4:	eef0 7a60 	vmov.f32	s15, s1
 80017b8:	4b58      	ldr	r3, [pc, #352]	@ (800191c <main+0x354>)
 80017ba:	ed83 7b02 	vstr	d7, [r3, #8]

	//c_vector
	c_encoder[0][0]=cos(radian_Gamma);
 80017be:	4b4c      	ldr	r3, [pc, #304]	@ (80018f0 <main+0x328>)
 80017c0:	ed93 7b00 	vldr	d7, [r3]
 80017c4:	eeb0 0a47 	vmov.f32	s0, s14
 80017c8:	eef0 0a67 	vmov.f32	s1, s15
 80017cc:	f008 fe10 	bl	800a3f0 <cos>
 80017d0:	eeb0 7a40 	vmov.f32	s14, s0
 80017d4:	eef0 7a60 	vmov.f32	s15, s1
 80017d8:	4b51      	ldr	r3, [pc, #324]	@ (8001920 <main+0x358>)
 80017da:	ed83 7b00 	vstr	d7, [r3]
	c_encoder[1][0]=sin(radian_Gamma);
 80017de:	4b44      	ldr	r3, [pc, #272]	@ (80018f0 <main+0x328>)
 80017e0:	ed93 7b00 	vldr	d7, [r3]
 80017e4:	eeb0 0a47 	vmov.f32	s0, s14
 80017e8:	eef0 0a67 	vmov.f32	s1, s15
 80017ec:	f008 fe5c 	bl	800a4a8 <sin>
 80017f0:	eeb0 7a40 	vmov.f32	s14, s0
 80017f4:	eef0 7a60 	vmov.f32	s15, s1
 80017f8:	4b49      	ldr	r3, [pc, #292]	@ (8001920 <main+0x358>)
 80017fa:	ed83 7b02 	vstr	d7, [r3, #8]
	 * g=inv([b,c])*a;
	 * [b,c]=[b_encoder,c_encoder]  [4][4]
	 * inv([b,c])
	 * a=[2][1]
	 */
	b_c_encoder[0][0]=b_encoder[0][0];
 80017fe:	4b47      	ldr	r3, [pc, #284]	@ (800191c <main+0x354>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	4947      	ldr	r1, [pc, #284]	@ (8001924 <main+0x35c>)
 8001806:	e9c1 2300 	strd	r2, r3, [r1]
	b_c_encoder[1][0]=b_encoder[1][0];
 800180a:	4b44      	ldr	r3, [pc, #272]	@ (800191c <main+0x354>)
 800180c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001810:	4944      	ldr	r1, [pc, #272]	@ (8001924 <main+0x35c>)
 8001812:	e9c1 2304 	strd	r2, r3, [r1, #16]
	b_c_encoder[0][1]=c_encoder[0][0];
 8001816:	4b42      	ldr	r3, [pc, #264]	@ (8001920 <main+0x358>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	4941      	ldr	r1, [pc, #260]	@ (8001924 <main+0x35c>)
 800181e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_c_encoder[1][1]=c_encoder[1][0];
 8001822:	4b3f      	ldr	r3, [pc, #252]	@ (8001920 <main+0x358>)
 8001824:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001828:	493e      	ldr	r1, [pc, #248]	@ (8001924 <main+0x35c>)
 800182a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	/*
	 * Determinant
	 */
	double determinant;
	determinant=b_c_encoder[0][0] * b_c_encoder[1][1] - b_c_encoder[0][1] * b_c_encoder[1][0];
 800182e:	4b3d      	ldr	r3, [pc, #244]	@ (8001924 <main+0x35c>)
 8001830:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001834:	4b3b      	ldr	r3, [pc, #236]	@ (8001924 <main+0x35c>)
 8001836:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800183a:	f7fe fea9 	bl	8000590 <__aeabi_dmul>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4614      	mov	r4, r2
 8001844:	461d      	mov	r5, r3
 8001846:	4b37      	ldr	r3, [pc, #220]	@ (8001924 <main+0x35c>)
 8001848:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800184c:	4b35      	ldr	r3, [pc, #212]	@ (8001924 <main+0x35c>)
 800184e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001852:	f7fe fe9d 	bl	8000590 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4620      	mov	r0, r4
 800185c:	4629      	mov	r1, r5
 800185e:	f7fe fcdf 	bl	8000220 <__aeabi_dsub>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	/*
	 * Matrix inverse
	 */
	double inv_det;
	inv_det=1/determinant;
 800186a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800186e:	f04f 0000 	mov.w	r0, #0
 8001872:	492d      	ldr	r1, [pc, #180]	@ (8001928 <main+0x360>)
 8001874:	f7fe ffb6 	bl	80007e4 <__aeabi_ddiv>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	double temp[2][2];
	temp[0][0] =  b_c_encoder[1][1] * inv_det;
 8001880:	4b28      	ldr	r3, [pc, #160]	@ (8001924 <main+0x35c>)
 8001882:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001886:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800188a:	f7fe fe81 	bl	8000590 <__aeabi_dmul>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	e9c7 2308 	strd	r2, r3, [r7, #32]
	temp[0][1] = -b_c_encoder[0][1] * inv_det;
 8001896:	4b23      	ldr	r3, [pc, #140]	@ (8001924 <main+0x35c>)
 8001898:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800189c:	60ba      	str	r2, [r7, #8]
 800189e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80018a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018ac:	f7fe fe70 	bl	8000590 <__aeabi_dmul>
 80018b0:	e03c      	b.n	800192c <main+0x364>
 80018b2:	bf00      	nop
 80018b4:	f3af 8000 	nop.w
 80018b8:	87c952c4 	.word	0x87c952c4
 80018bc:	3ff197c9 	.word	0x3ff197c9
 80018c0:	e1257683 	.word	0xe1257683
 80018c4:	40173f6e 	.word	0x40173f6e
 80018c8:	54442d18 	.word	0x54442d18
 80018cc:	3ff921fb 	.word	0x3ff921fb
 80018d0:	31eb6950 	.word	0x31eb6950
 80018d4:	3fde28c7 	.word	0x3fde28c7
 80018d8:	20000210 	.word	0x20000210
 80018dc:	20000180 	.word	0x20000180
 80018e0:	200001c8 	.word	0x200001c8
 80018e4:	20000258 	.word	0x20000258
 80018e8:	20000530 	.word	0x20000530
 80018ec:	20000538 	.word	0x20000538
 80018f0:	20000540 	.word	0x20000540
 80018f4:	20000548 	.word	0x20000548
 80018f8:	40468000 	.word	0x40468000
 80018fc:	20000550 	.word	0x20000550
 8001900:	20000560 	.word	0x20000560
 8001904:	40408000 	.word	0x40408000
 8001908:	200004f8 	.word	0x200004f8
 800190c:	40308000 	.word	0x40308000
 8001910:	40374000 	.word	0x40374000
 8001914:	20000570 	.word	0x20000570
 8001918:	20000580 	.word	0x20000580
 800191c:	20000590 	.word	0x20000590
 8001920:	200005a0 	.word	0x200005a0
 8001924:	200005d0 	.word	0x200005d0
 8001928:	3ff00000 	.word	0x3ff00000
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	temp[1][0] = -b_c_encoder[1][0] * inv_det;
 8001934:	4bb0      	ldr	r3, [pc, #704]	@ (8001bf8 <main+0x630>)
 8001936:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800193a:	4690      	mov	r8, r2
 800193c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001940:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001944:	4640      	mov	r0, r8
 8001946:	4649      	mov	r1, r9
 8001948:	f7fe fe22 	bl	8000590 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	temp[1][1] =  b_c_encoder[0][0] * inv_det;
 8001954:	4ba8      	ldr	r3, [pc, #672]	@ (8001bf8 <main+0x630>)
 8001956:	e9d3 0100 	ldrd	r0, r1, [r3]
 800195a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800195e:	f7fe fe17 	bl	8000590 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	/*
	 *
	 */
	g[0][0]=temp[0][0]*a_encoder[0][0]+temp[0][1]*a_encoder[1][0];
 800196a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800196e:	4ba3      	ldr	r3, [pc, #652]	@ (8001bfc <main+0x634>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7fe fe0c 	bl	8000590 <__aeabi_dmul>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4614      	mov	r4, r2
 800197e:	461d      	mov	r5, r3
 8001980:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001984:	4b9d      	ldr	r3, [pc, #628]	@ (8001bfc <main+0x634>)
 8001986:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800198a:	f7fe fe01 	bl	8000590 <__aeabi_dmul>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4620      	mov	r0, r4
 8001994:	4629      	mov	r1, r5
 8001996:	f7fe fc45 	bl	8000224 <__adddf3>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4998      	ldr	r1, [pc, #608]	@ (8001c00 <main+0x638>)
 80019a0:	e9c1 2300 	strd	r2, r3, [r1]
	g[1][0]=temp[1][0]*a_encoder[0][0]+temp[1][1]*a_encoder[1][0];
 80019a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80019a8:	4b94      	ldr	r3, [pc, #592]	@ (8001bfc <main+0x634>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	f7fe fdef 	bl	8000590 <__aeabi_dmul>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4614      	mov	r4, r2
 80019b8:	461d      	mov	r5, r3
 80019ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80019be:	4b8f      	ldr	r3, [pc, #572]	@ (8001bfc <main+0x634>)
 80019c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019c4:	f7fe fde4 	bl	8000590 <__aeabi_dmul>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4620      	mov	r0, r4
 80019ce:	4629      	mov	r1, r5
 80019d0:	f7fe fc28 	bl	8000224 <__adddf3>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4989      	ldr	r1, [pc, #548]	@ (8001c00 <main+0x638>)
 80019da:	e9c1 2302 	strd	r2, r3, [r1, #8]
	/*
	 * g_perp
	 */
	g_perp[0][0]=temp[0][0]*a_perp[0][0]+temp[0][1]*a_perp[1][0];
 80019de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019e2:	4b88      	ldr	r3, [pc, #544]	@ (8001c04 <main+0x63c>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7fe fdd2 	bl	8000590 <__aeabi_dmul>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4614      	mov	r4, r2
 80019f2:	461d      	mov	r5, r3
 80019f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019f8:	4b82      	ldr	r3, [pc, #520]	@ (8001c04 <main+0x63c>)
 80019fa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019fe:	f7fe fdc7 	bl	8000590 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4620      	mov	r0, r4
 8001a08:	4629      	mov	r1, r5
 8001a0a:	f7fe fc0b 	bl	8000224 <__adddf3>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	497d      	ldr	r1, [pc, #500]	@ (8001c08 <main+0x640>)
 8001a14:	e9c1 2300 	strd	r2, r3, [r1]
	g_perp[1][0]=temp[1][0]*a_perp[0][0]+temp[1][1]*a_perp[1][0];
 8001a18:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001a1c:	4b79      	ldr	r3, [pc, #484]	@ (8001c04 <main+0x63c>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fdb5 	bl	8000590 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	461d      	mov	r5, r3
 8001a2e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001a32:	4b74      	ldr	r3, [pc, #464]	@ (8001c04 <main+0x63c>)
 8001a34:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a38:	f7fe fdaa 	bl	8000590 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4620      	mov	r0, r4
 8001a42:	4629      	mov	r1, r5
 8001a44:	f7fe fbee 	bl	8000224 <__adddf3>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	496e      	ldr	r1, [pc, #440]	@ (8001c08 <main+0x640>)
 8001a4e:	e9c1 2302 	strd	r2, r3, [r1, #8]

	double Bb=AB[0][0]*b_encoder[1][0]-AB[1][0]*b_encoder[0][0];
 8001a52:	4b6e      	ldr	r3, [pc, #440]	@ (8001c0c <main+0x644>)
 8001a54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a58:	4b6d      	ldr	r3, [pc, #436]	@ (8001c10 <main+0x648>)
 8001a5a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a5e:	f7fe fd97 	bl	8000590 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4614      	mov	r4, r2
 8001a68:	461d      	mov	r5, r3
 8001a6a:	4b68      	ldr	r3, [pc, #416]	@ (8001c0c <main+0x644>)
 8001a6c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a70:	4b67      	ldr	r3, [pc, #412]	@ (8001c10 <main+0x648>)
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	f7fe fd8b 	bl	8000590 <__aeabi_dmul>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4620      	mov	r0, r4
 8001a80:	4629      	mov	r1, r5
 8001a82:	f7fe fbcd 	bl	8000220 <__aeabi_dsub>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double Cc=AC[0][0]*c_encoder[1][0]-AC[1][0]*c_encoder[0][0];
 8001a8e:	4b61      	ldr	r3, [pc, #388]	@ (8001c14 <main+0x64c>)
 8001a90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a94:	4b60      	ldr	r3, [pc, #384]	@ (8001c18 <main+0x650>)
 8001a96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a9a:	f7fe fd79 	bl	8000590 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4614      	mov	r4, r2
 8001aa4:	461d      	mov	r5, r3
 8001aa6:	4b5b      	ldr	r3, [pc, #364]	@ (8001c14 <main+0x64c>)
 8001aa8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001aac:	4b5a      	ldr	r3, [pc, #360]	@ (8001c18 <main+0x650>)
 8001aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab2:	f7fe fd6d 	bl	8000590 <__aeabi_dmul>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4620      	mov	r0, r4
 8001abc:	4629      	mov	r1, r5
 8001abe:	f7fe fbaf 	bl	8000220 <__aeabi_dsub>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	ha_perp=(g_perp[0][0]*Bb+g_perp[1][0]*Cc)/(g[0][0]*Bb+g[1][0]*Cc);
 8001aca:	4b4f      	ldr	r3, [pc, #316]	@ (8001c08 <main+0x640>)
 8001acc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ad0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001ad4:	f7fe fd5c 	bl	8000590 <__aeabi_dmul>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4614      	mov	r4, r2
 8001ade:	461d      	mov	r5, r3
 8001ae0:	4b49      	ldr	r3, [pc, #292]	@ (8001c08 <main+0x640>)
 8001ae2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ae6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001aea:	f7fe fd51 	bl	8000590 <__aeabi_dmul>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4620      	mov	r0, r4
 8001af4:	4629      	mov	r1, r5
 8001af6:	f7fe fb95 	bl	8000224 <__adddf3>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4614      	mov	r4, r2
 8001b00:	461d      	mov	r5, r3
 8001b02:	4b3f      	ldr	r3, [pc, #252]	@ (8001c00 <main+0x638>)
 8001b04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001b0c:	f7fe fd40 	bl	8000590 <__aeabi_dmul>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4690      	mov	r8, r2
 8001b16:	4699      	mov	r9, r3
 8001b18:	4b39      	ldr	r3, [pc, #228]	@ (8001c00 <main+0x638>)
 8001b1a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b22:	f7fe fd35 	bl	8000590 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4640      	mov	r0, r8
 8001b2c:	4649      	mov	r1, r9
 8001b2e:	f7fe fb79 	bl	8000224 <__adddf3>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4620      	mov	r0, r4
 8001b38:	4629      	mov	r1, r5
 8001b3a:	f7fe fe53 	bl	80007e4 <__aeabi_ddiv>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4936      	ldr	r1, [pc, #216]	@ (8001c1c <main+0x654>)
 8001b44:	e9c1 2300 	strd	r2, r3, [r1]
	hb_perp=(g_perp[0][0]*g[1][0]-g_perp[1][0]*g[1][1])*Cc/(g[0][0]*Bb+g[1][0]*Cc);
 8001b48:	4b2f      	ldr	r3, [pc, #188]	@ (8001c08 <main+0x640>)
 8001b4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c00 <main+0x638>)
 8001b50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b54:	f7fe fd1c 	bl	8000590 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4614      	mov	r4, r2
 8001b5e:	461d      	mov	r5, r3
 8001b60:	4b29      	ldr	r3, [pc, #164]	@ (8001c08 <main+0x640>)
 8001b62:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b66:	4b26      	ldr	r3, [pc, #152]	@ (8001c00 <main+0x638>)
 8001b68:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b6c:	f7fe fd10 	bl	8000590 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4620      	mov	r0, r4
 8001b76:	4629      	mov	r1, r5
 8001b78:	f7fe fb52 	bl	8000220 <__aeabi_dsub>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b88:	f7fe fd02 	bl	8000590 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4614      	mov	r4, r2
 8001b92:	461d      	mov	r5, r3
 8001b94:	4b1a      	ldr	r3, [pc, #104]	@ (8001c00 <main+0x638>)
 8001b96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b9a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001b9e:	f7fe fcf7 	bl	8000590 <__aeabi_dmul>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4690      	mov	r8, r2
 8001ba8:	4699      	mov	r9, r3
 8001baa:	4b15      	ldr	r3, [pc, #84]	@ (8001c00 <main+0x638>)
 8001bac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001bb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001bb4:	f7fe fcec 	bl	8000590 <__aeabi_dmul>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4640      	mov	r0, r8
 8001bbe:	4649      	mov	r1, r9
 8001bc0:	f7fe fb30 	bl	8000224 <__adddf3>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4620      	mov	r0, r4
 8001bca:	4629      	mov	r1, r5
 8001bcc:	f7fe fe0a 	bl	80007e4 <__aeabi_ddiv>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4912      	ldr	r1, [pc, #72]	@ (8001c20 <main+0x658>)
 8001bd6:	e9c1 2300 	strd	r2, r3, [r1]
	hc_perp=-(g_perp[0][0]*g[1][0]-g_perp[1][0]*g[0][0])*Bb/(g[0][0]*Bb+g[1][0]*Cc);
 8001bda:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <main+0x640>)
 8001bdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001be0:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <main+0x638>)
 8001be2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001be6:	f7fe fcd3 	bl	8000590 <__aeabi_dmul>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4614      	mov	r4, r2
 8001bf0:	461d      	mov	r5, r3
 8001bf2:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <main+0x640>)
 8001bf4:	e016      	b.n	8001c24 <main+0x65c>
 8001bf6:	bf00      	nop
 8001bf8:	200005d0 	.word	0x200005d0
 8001bfc:	20000570 	.word	0x20000570
 8001c00:	200005b0 	.word	0x200005b0
 8001c04:	20000580 	.word	0x20000580
 8001c08:	200005c0 	.word	0x200005c0
 8001c0c:	20000550 	.word	0x20000550
 8001c10:	20000590 	.word	0x20000590
 8001c14:	20000560 	.word	0x20000560
 8001c18:	200005a0 	.word	0x200005a0
 8001c1c:	20000420 	.word	0x20000420
 8001c20:	20000428 	.word	0x20000428
 8001c24:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c28:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <main+0x6f0>)
 8001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2e:	f7fe fcaf 	bl	8000590 <__aeabi_dmul>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4620      	mov	r0, r4
 8001c38:	4629      	mov	r1, r5
 8001c3a:	f7fe faf1 	bl	8000220 <__aeabi_dsub>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	603a      	str	r2, [r7, #0]
 8001c44:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c52:	f7fe fc9d 	bl	8000590 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4614      	mov	r4, r2
 8001c5c:	461d      	mov	r5, r3
 8001c5e:	4b16      	ldr	r3, [pc, #88]	@ (8001cb8 <main+0x6f0>)
 8001c60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c68:	f7fe fc92 	bl	8000590 <__aeabi_dmul>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4690      	mov	r8, r2
 8001c72:	4699      	mov	r9, r3
 8001c74:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <main+0x6f0>)
 8001c76:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c7e:	f7fe fc87 	bl	8000590 <__aeabi_dmul>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4640      	mov	r0, r8
 8001c88:	4649      	mov	r1, r9
 8001c8a:	f7fe facb 	bl	8000224 <__adddf3>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4620      	mov	r0, r4
 8001c94:	4629      	mov	r1, r5
 8001c96:	f7fe fda5 	bl	80007e4 <__aeabi_ddiv>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4907      	ldr	r1, [pc, #28]	@ (8001cbc <main+0x6f4>)
 8001ca0:	e9c1 2300 	strd	r2, r3, [r1]
	if(TCS34725_Init() != 0){
 8001ca4:	f7ff fa0e 	bl	80010c4 <TCS34725_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <main+0x6fc>
		printf("TCS34725 initialization error!!\n");
 8001cae:	4804      	ldr	r0, [pc, #16]	@ (8001cc0 <main+0x6f8>)
 8001cb0:	f009 fd70 	bl	800b794 <puts>
 8001cb4:	e009      	b.n	8001cca <main+0x702>
 8001cb6:	bf00      	nop
 8001cb8:	200005b0 	.word	0x200005b0
 8001cbc:	20000430 	.word	0x20000430
 8001cc0:	0800bf00 	.word	0x0800bf00
	}
	else{
		printf("TCS34725 initialization success!!\n");
 8001cc4:	48b4      	ldr	r0, [pc, #720]	@ (8001f98 <main+0x9d0>)
 8001cc6:	f009 fd65 	bl	800b794 <puts>
	}
	HAL_TIM_Base_Start_IT(&htim12);
 8001cca:	48b4      	ldr	r0, [pc, #720]	@ (8001f9c <main+0x9d4>)
 8001ccc:	f006 faa6 	bl	800821c <HAL_TIM_Base_Start_IT>
	MPU6050_Init();
 8001cd0:	f7ff fb40 	bl	8001354 <MPU6050_Init>
	setup();
 8001cd4:	f002 fb48 	bl	8004368 <setup>
//		rgb=TCS34725_Get_RGBData();
//		RGB888=TCS34725_GetRGB888(rgb);
//		color[0]=RGB888>>16 ;
//		color[1]=(RGB888>>8) & 0xff;
//		color[2]=(RGB888) & 0xff;
		if(interrupt_counter>old_couter)
 8001cd8:	4bb1      	ldr	r3, [pc, #708]	@ (8001fa0 <main+0x9d8>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4bb1      	ldr	r3, [pc, #708]	@ (8001fa4 <main+0x9dc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d9f9      	bls.n	8001cd8 <main+0x710>
		{
			//omega=(g[0][0]*Speed_EncoderB+g[1][0]*Speed_EncoderC-Speed_EncoderA)/(g[1][1]*Bb+g[1][0]*Cc);
			theta=theta_0+((g[0][0]*distanceB+g[1][0]*distanceC)-distanceA)/(g[0][0]*Bb+g[1][0]*Cc);
 8001ce4:	4bb0      	ldr	r3, [pc, #704]	@ (8001fa8 <main+0x9e0>)
 8001ce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cea:	4bb0      	ldr	r3, [pc, #704]	@ (8001fac <main+0x9e4>)
 8001cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf0:	f7fe fc4e 	bl	8000590 <__aeabi_dmul>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	4baa      	ldr	r3, [pc, #680]	@ (8001fa8 <main+0x9e0>)
 8001cfe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d02:	4bab      	ldr	r3, [pc, #684]	@ (8001fb0 <main+0x9e8>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fc42 	bl	8000590 <__aeabi_dmul>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4620      	mov	r0, r4
 8001d12:	4629      	mov	r1, r5
 8001d14:	f7fe fa86 	bl	8000224 <__adddf3>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4ba4      	ldr	r3, [pc, #656]	@ (8001fb4 <main+0x9ec>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	f7fe fa7b 	bl	8000220 <__aeabi_dsub>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4614      	mov	r4, r2
 8001d30:	461d      	mov	r5, r3
 8001d32:	4b9d      	ldr	r3, [pc, #628]	@ (8001fa8 <main+0x9e0>)
 8001d34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001d3c:	f7fe fc28 	bl	8000590 <__aeabi_dmul>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4690      	mov	r8, r2
 8001d46:	4699      	mov	r9, r3
 8001d48:	4b97      	ldr	r3, [pc, #604]	@ (8001fa8 <main+0x9e0>)
 8001d4a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d52:	f7fe fc1d 	bl	8000590 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4640      	mov	r0, r8
 8001d5c:	4649      	mov	r1, r9
 8001d5e:	f7fe fa61 	bl	8000224 <__adddf3>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4620      	mov	r0, r4
 8001d68:	4629      	mov	r1, r5
 8001d6a:	f7fe fd3b 	bl	80007e4 <__aeabi_ddiv>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	4b90      	ldr	r3, [pc, #576]	@ (8001fb8 <main+0x9f0>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe fa52 	bl	8000224 <__adddf3>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	498d      	ldr	r1, [pc, #564]	@ (8001fbc <main+0x9f4>)
 8001d86:	e9c1 2300 	strd	r2, r3, [r1]
			vA_perp=Speed_EncoderA*ha_perp+Speed_EncoderB*hb_perp+Speed_EncoderC*hc_perp;
 8001d8a:	4b8d      	ldr	r3, [pc, #564]	@ (8001fc0 <main+0x9f8>)
 8001d8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d90:	4b8c      	ldr	r3, [pc, #560]	@ (8001fc4 <main+0x9fc>)
 8001d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d96:	f7fe fbfb 	bl	8000590 <__aeabi_dmul>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4614      	mov	r4, r2
 8001da0:	461d      	mov	r5, r3
 8001da2:	4b89      	ldr	r3, [pc, #548]	@ (8001fc8 <main+0xa00>)
 8001da4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001da8:	4b88      	ldr	r3, [pc, #544]	@ (8001fcc <main+0xa04>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fbef 	bl	8000590 <__aeabi_dmul>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4620      	mov	r0, r4
 8001db8:	4629      	mov	r1, r5
 8001dba:	f7fe fa33 	bl	8000224 <__adddf3>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4614      	mov	r4, r2
 8001dc4:	461d      	mov	r5, r3
 8001dc6:	4b82      	ldr	r3, [pc, #520]	@ (8001fd0 <main+0xa08>)
 8001dc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dcc:	4b81      	ldr	r3, [pc, #516]	@ (8001fd4 <main+0xa0c>)
 8001dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd2:	f7fe fbdd 	bl	8000590 <__aeabi_dmul>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4620      	mov	r0, r4
 8001ddc:	4629      	mov	r1, r5
 8001dde:	f7fe fa21 	bl	8000224 <__adddf3>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	497c      	ldr	r1, [pc, #496]	@ (8001fd8 <main+0xa10>)
 8001de8:	e9c1 2300 	strd	r2, r3, [r1]
			/*
			 * Rotation matrix
			 */
			RX[0][0]=cos(theta);
 8001dec:	4b73      	ldr	r3, [pc, #460]	@ (8001fbc <main+0x9f4>)
 8001dee:	ed93 7b00 	vldr	d7, [r3]
 8001df2:	eeb0 0a47 	vmov.f32	s0, s14
 8001df6:	eef0 0a67 	vmov.f32	s1, s15
 8001dfa:	f008 faf9 	bl	800a3f0 <cos>
 8001dfe:	eeb0 7a40 	vmov.f32	s14, s0
 8001e02:	eef0 7a60 	vmov.f32	s15, s1
 8001e06:	4b75      	ldr	r3, [pc, #468]	@ (8001fdc <main+0xa14>)
 8001e08:	ed83 7b00 	vstr	d7, [r3]
			RX[1][0]=sin(theta);
 8001e0c:	4b6b      	ldr	r3, [pc, #428]	@ (8001fbc <main+0x9f4>)
 8001e0e:	ed93 7b00 	vldr	d7, [r3]
 8001e12:	eeb0 0a47 	vmov.f32	s0, s14
 8001e16:	eef0 0a67 	vmov.f32	s1, s15
 8001e1a:	f008 fb45 	bl	800a4a8 <sin>
 8001e1e:	eeb0 7a40 	vmov.f32	s14, s0
 8001e22:	eef0 7a60 	vmov.f32	s15, s1
 8001e26:	4b6d      	ldr	r3, [pc, #436]	@ (8001fdc <main+0xa14>)
 8001e28:	ed83 7b02 	vstr	d7, [r3, #8]
			RY[0][0]=-sin(theta);
 8001e2c:	4b63      	ldr	r3, [pc, #396]	@ (8001fbc <main+0x9f4>)
 8001e2e:	ed93 7b00 	vldr	d7, [r3]
 8001e32:	eeb0 0a47 	vmov.f32	s0, s14
 8001e36:	eef0 0a67 	vmov.f32	s1, s15
 8001e3a:	f008 fb35 	bl	800a4a8 <sin>
 8001e3e:	ec53 2b10 	vmov	r2, r3, d0
 8001e42:	4692      	mov	sl, r2
 8001e44:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8001e48:	4b65      	ldr	r3, [pc, #404]	@ (8001fe0 <main+0xa18>)
 8001e4a:	e9c3 ab00 	strd	sl, fp, [r3]
			RY[1][0]=cos(theta);
 8001e4e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fbc <main+0x9f4>)
 8001e50:	ed93 7b00 	vldr	d7, [r3]
 8001e54:	eeb0 0a47 	vmov.f32	s0, s14
 8001e58:	eef0 0a67 	vmov.f32	s1, s15
 8001e5c:	f008 fac8 	bl	800a3f0 <cos>
 8001e60:	eeb0 7a40 	vmov.f32	s14, s0
 8001e64:	eef0 7a60 	vmov.f32	s15, s1
 8001e68:	4b5d      	ldr	r3, [pc, #372]	@ (8001fe0 <main+0xa18>)
 8001e6a:	ed83 7b02 	vstr	d7, [r3, #8]

			at[0][0]=a_encoder[0][0]*RX[0][0]+a_encoder[1][0]*RY[0][0];
 8001e6e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fe4 <main+0xa1c>)
 8001e70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e74:	4b59      	ldr	r3, [pc, #356]	@ (8001fdc <main+0xa14>)
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	f7fe fb89 	bl	8000590 <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4614      	mov	r4, r2
 8001e84:	461d      	mov	r5, r3
 8001e86:	4b57      	ldr	r3, [pc, #348]	@ (8001fe4 <main+0xa1c>)
 8001e88:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e8c:	4b54      	ldr	r3, [pc, #336]	@ (8001fe0 <main+0xa18>)
 8001e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e92:	f7fe fb7d 	bl	8000590 <__aeabi_dmul>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	4629      	mov	r1, r5
 8001e9e:	f7fe f9c1 	bl	8000224 <__adddf3>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4950      	ldr	r1, [pc, #320]	@ (8001fe8 <main+0xa20>)
 8001ea8:	e9c1 2300 	strd	r2, r3, [r1]
			at[1][0]=a_encoder[0][0]*RX[1][0]+a_encoder[1][0]*RY[1][0];
 8001eac:	4b4d      	ldr	r3, [pc, #308]	@ (8001fe4 <main+0xa1c>)
 8001eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8001fdc <main+0xa14>)
 8001eb4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001eb8:	f7fe fb6a 	bl	8000590 <__aeabi_dmul>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4614      	mov	r4, r2
 8001ec2:	461d      	mov	r5, r3
 8001ec4:	4b47      	ldr	r3, [pc, #284]	@ (8001fe4 <main+0xa1c>)
 8001ec6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001eca:	4b45      	ldr	r3, [pc, #276]	@ (8001fe0 <main+0xa18>)
 8001ecc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ed0:	f7fe fb5e 	bl	8000590 <__aeabi_dmul>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4620      	mov	r0, r4
 8001eda:	4629      	mov	r1, r5
 8001edc:	f7fe f9a2 	bl	8000224 <__adddf3>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4940      	ldr	r1, [pc, #256]	@ (8001fe8 <main+0xa20>)
 8001ee6:	e9c1 2302 	strd	r2, r3, [r1, #8]

			//			at_perp[0][0]=a_perp[0][0]*RX[0][0]+a_perp[1][0]*RX[0][1];
			//			at_perp[1][0]=a_perp[0][0]*RY[0][0]+a_perp[1][0]*RY[0][1];

			at_perp[0][0]=a_perp[0][0]*RX[0][0]+a_perp[1][0]*RY[0][0];
 8001eea:	4b40      	ldr	r3, [pc, #256]	@ (8001fec <main+0xa24>)
 8001eec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8001fdc <main+0xa14>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	f7fe fb4b 	bl	8000590 <__aeabi_dmul>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4614      	mov	r4, r2
 8001f00:	461d      	mov	r5, r3
 8001f02:	4b3a      	ldr	r3, [pc, #232]	@ (8001fec <main+0xa24>)
 8001f04:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f08:	4b35      	ldr	r3, [pc, #212]	@ (8001fe0 <main+0xa18>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	f7fe fb3f 	bl	8000590 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4620      	mov	r0, r4
 8001f18:	4629      	mov	r1, r5
 8001f1a:	f7fe f983 	bl	8000224 <__adddf3>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4933      	ldr	r1, [pc, #204]	@ (8001ff0 <main+0xa28>)
 8001f24:	e9c1 2300 	strd	r2, r3, [r1]
			at_perp[1][0]=a_perp[0][0]*RX[1][0]+a_perp[1][0]*RY[1][0];
 8001f28:	4b30      	ldr	r3, [pc, #192]	@ (8001fec <main+0xa24>)
 8001f2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001fdc <main+0xa14>)
 8001f30:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f34:	f7fe fb2c 	bl	8000590 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4614      	mov	r4, r2
 8001f3e:	461d      	mov	r5, r3
 8001f40:	4b2a      	ldr	r3, [pc, #168]	@ (8001fec <main+0xa24>)
 8001f42:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f46:	4b26      	ldr	r3, [pc, #152]	@ (8001fe0 <main+0xa18>)
 8001f48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f4c:	f7fe fb20 	bl	8000590 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4620      	mov	r0, r4
 8001f56:	4629      	mov	r1, r5
 8001f58:	f7fe f964 	bl	8000224 <__adddf3>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4923      	ldr	r1, [pc, #140]	@ (8001ff0 <main+0xa28>)
 8001f62:	e9c1 2302 	strd	r2, r3, [r1, #8]

			velocity_A[0][0]=Speed_EncoderA*at[0][0];
 8001f66:	4b20      	ldr	r3, [pc, #128]	@ (8001fe8 <main+0xa20>)
 8001f68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f6c:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <main+0x9f8>)
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	f7fe fb0d 	bl	8000590 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	491e      	ldr	r1, [pc, #120]	@ (8001ff4 <main+0xa2c>)
 8001f7c:	e9c1 2300 	strd	r2, r3, [r1]
			velocity_A[1][0]=Speed_EncoderA*at[1][0];
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <main+0xa20>)
 8001f82:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f86:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <main+0x9f8>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	f7fe fb00 	bl	8000590 <__aeabi_dmul>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	e030      	b.n	8001ff8 <main+0xa30>
 8001f96:	bf00      	nop
 8001f98:	0800bf20 	.word	0x0800bf20
 8001f9c:	200002a0 	.word	0x200002a0
 8001fa0:	20000400 	.word	0x20000400
 8001fa4:	200005f8 	.word	0x200005f8
 8001fa8:	200005b0 	.word	0x200005b0
 8001fac:	200004c8 	.word	0x200004c8
 8001fb0:	200004d0 	.word	0x200004d0
 8001fb4:	200004c0 	.word	0x200004c0
 8001fb8:	200005f0 	.word	0x200005f0
 8001fbc:	20000508 	.word	0x20000508
 8001fc0:	20000408 	.word	0x20000408
 8001fc4:	20000420 	.word	0x20000420
 8001fc8:	20000410 	.word	0x20000410
 8001fcc:	20000428 	.word	0x20000428
 8001fd0:	20000418 	.word	0x20000418
 8001fd4:	20000430 	.word	0x20000430
 8001fd8:	20000438 	.word	0x20000438
 8001fdc:	20000440 	.word	0x20000440
 8001fe0:	20000450 	.word	0x20000450
 8001fe4:	20000570 	.word	0x20000570
 8001fe8:	20000460 	.word	0x20000460
 8001fec:	20000580 	.word	0x20000580
 8001ff0:	20000470 	.word	0x20000470
 8001ff4:	20000490 	.word	0x20000490
 8001ff8:	49a9      	ldr	r1, [pc, #676]	@ (80022a0 <main+0xcd8>)
 8001ffa:	e9c1 2302 	strd	r2, r3, [r1, #8]

			velocity_A_perp[0][0]=vA_perp*at_perp[0][0];
 8001ffe:	4ba9      	ldr	r3, [pc, #676]	@ (80022a4 <main+0xcdc>)
 8002000:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002004:	4ba8      	ldr	r3, [pc, #672]	@ (80022a8 <main+0xce0>)
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	f7fe fac1 	bl	8000590 <__aeabi_dmul>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	49a6      	ldr	r1, [pc, #664]	@ (80022ac <main+0xce4>)
 8002014:	e9c1 2300 	strd	r2, r3, [r1]
			velocity_A_perp[0][1]=vA_perp*at_perp[1][0];
 8002018:	4ba2      	ldr	r3, [pc, #648]	@ (80022a4 <main+0xcdc>)
 800201a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800201e:	4ba2      	ldr	r3, [pc, #648]	@ (80022a8 <main+0xce0>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	f7fe fab4 	bl	8000590 <__aeabi_dmul>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	499f      	ldr	r1, [pc, #636]	@ (80022ac <main+0xce4>)
 800202e:	e9c1 2302 	strd	r2, r3, [r1, #8]

			A_velocity[0][0]=velocity_A[0][0]+velocity_A_perp[0][0];
 8002032:	4b9b      	ldr	r3, [pc, #620]	@ (80022a0 <main+0xcd8>)
 8002034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002038:	4b9c      	ldr	r3, [pc, #624]	@ (80022ac <main+0xce4>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe f8f1 	bl	8000224 <__adddf3>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	499a      	ldr	r1, [pc, #616]	@ (80022b0 <main+0xce8>)
 8002048:	e9c1 2300 	strd	r2, r3, [r1]
			A_velocity[1][0]=velocity_A[1][0]+velocity_A_perp[1][0];
 800204c:	4b94      	ldr	r3, [pc, #592]	@ (80022a0 <main+0xcd8>)
 800204e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002052:	4b96      	ldr	r3, [pc, #600]	@ (80022ac <main+0xce4>)
 8002054:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002058:	f7fe f8e4 	bl	8000224 <__adddf3>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4993      	ldr	r1, [pc, #588]	@ (80022b0 <main+0xce8>)
 8002062:	e9c1 2302 	strd	r2, r3, [r1, #8]
			rA[0][0]=rA[0][0]+(A_velocity[0][0]);
 8002066:	4b93      	ldr	r3, [pc, #588]	@ (80022b4 <main+0xcec>)
 8002068:	e9d3 0100 	ldrd	r0, r1, [r3]
 800206c:	4b90      	ldr	r3, [pc, #576]	@ (80022b0 <main+0xce8>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	f7fe f8d7 	bl	8000224 <__adddf3>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	498e      	ldr	r1, [pc, #568]	@ (80022b4 <main+0xcec>)
 800207c:	e9c1 2300 	strd	r2, r3, [r1]
			rA[1][0]=rA[1][0]+(A_velocity[1][0]);
 8002080:	4b8c      	ldr	r3, [pc, #560]	@ (80022b4 <main+0xcec>)
 8002082:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002086:	4b8a      	ldr	r3, [pc, #552]	@ (80022b0 <main+0xce8>)
 8002088:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800208c:	f7fe f8ca 	bl	8000224 <__adddf3>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4987      	ldr	r1, [pc, #540]	@ (80022b4 <main+0xcec>)
 8002096:	e9c1 2302 	strd	r2, r3, [r1, #8]
			MPU6050_Read_Accel();
 800209a:	f7ff f9b1 	bl	8001400 <MPU6050_Read_Accel>
			angle_X = Accel_X_Angle(Ax, Ay, Az);
 800209e:	4b86      	ldr	r3, [pc, #536]	@ (80022b8 <main+0xcf0>)
 80020a0:	edd3 7a00 	vldr	s15, [r3]
 80020a4:	4b85      	ldr	r3, [pc, #532]	@ (80022bc <main+0xcf4>)
 80020a6:	ed93 7a00 	vldr	s14, [r3]
 80020aa:	4b85      	ldr	r3, [pc, #532]	@ (80022c0 <main+0xcf8>)
 80020ac:	edd3 6a00 	vldr	s13, [r3]
 80020b0:	eeb0 1a66 	vmov.f32	s2, s13
 80020b4:	eef0 0a47 	vmov.f32	s1, s14
 80020b8:	eeb0 0a67 	vmov.f32	s0, s15
 80020bc:	f7ff fa1c 	bl	80014f8 <Accel_X_Angle>
 80020c0:	eef0 7a40 	vmov.f32	s15, s0
 80020c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020c8:	edc7 7a02 	vstr	s15, [r7, #8]
 80020cc:	7a3b      	ldrb	r3, [r7, #8]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b7c      	ldr	r3, [pc, #496]	@ (80022c4 <main+0xcfc>)
 80020d2:	701a      	strb	r2, [r3, #0]
			angle_Y = Accel_Y_Angle(Ax, Ay, Az);
 80020d4:	4b78      	ldr	r3, [pc, #480]	@ (80022b8 <main+0xcf0>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	4b78      	ldr	r3, [pc, #480]	@ (80022bc <main+0xcf4>)
 80020dc:	ed93 7a00 	vldr	s14, [r3]
 80020e0:	4b77      	ldr	r3, [pc, #476]	@ (80022c0 <main+0xcf8>)
 80020e2:	edd3 6a00 	vldr	s13, [r3]
 80020e6:	eeb0 1a66 	vmov.f32	s2, s13
 80020ea:	eef0 0a47 	vmov.f32	s1, s14
 80020ee:	eeb0 0a67 	vmov.f32	s0, s15
 80020f2:	f7ff fa35 	bl	8001560 <Accel_Y_Angle>
 80020f6:	eef0 7a40 	vmov.f32	s15, s0
 80020fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020fe:	edc7 7a02 	vstr	s15, [r7, #8]
 8002102:	7a3b      	ldrb	r3, [r7, #8]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4b70      	ldr	r3, [pc, #448]	@ (80022c8 <main+0xd00>)
 8002108:	701a      	strb	r2, [r3, #0]
			theta_angle=theta*180/M_PI;
 800210a:	4b70      	ldr	r3, [pc, #448]	@ (80022cc <main+0xd04>)
 800210c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	4b6e      	ldr	r3, [pc, #440]	@ (80022d0 <main+0xd08>)
 8002116:	f7fe fa3b 	bl	8000590 <__aeabi_dmul>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	a35d      	add	r3, pc, #372	@ (adr r3, 8002298 <main+0xcd0>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe fb5c 	bl	80007e4 <__aeabi_ddiv>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	f7fe fcc6 	bl	8000ac4 <__aeabi_d2iz>
 8002138:	4603      	mov	r3, r0
 800213a:	b21a      	sxth	r2, r3
 800213c:	4b65      	ldr	r3, [pc, #404]	@ (80022d4 <main+0xd0c>)
 800213e:	801a      	strh	r2, [r3, #0]
			if(rA_old[0][0]!=rA[0][0] && rA_old[1][0]!=rA[1][0])
 8002140:	4b65      	ldr	r3, [pc, #404]	@ (80022d8 <main+0xd10>)
 8002142:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002146:	4b5b      	ldr	r3, [pc, #364]	@ (80022b4 <main+0xcec>)
 8002148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214c:	f7fe fc88 	bl	8000a60 <__aeabi_dcmpeq>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d15e      	bne.n	8002214 <main+0xc4c>
 8002156:	4b60      	ldr	r3, [pc, #384]	@ (80022d8 <main+0xd10>)
 8002158:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800215c:	4b55      	ldr	r3, [pc, #340]	@ (80022b4 <main+0xcec>)
 800215e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002162:	f7fe fc7d 	bl	8000a60 <__aeabi_dcmpeq>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d153      	bne.n	8002214 <main+0xc4c>
			{
				double tempo[2][1];
				tempo[0][0]=center[0][0]*RX[0][0]+center[1][0]*RY[0][0];
 800216c:	4b5b      	ldr	r3, [pc, #364]	@ (80022dc <main+0xd14>)
 800216e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002172:	4b5b      	ldr	r3, [pc, #364]	@ (80022e0 <main+0xd18>)
 8002174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002178:	f7fe fa0a 	bl	8000590 <__aeabi_dmul>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4614      	mov	r4, r2
 8002182:	461d      	mov	r5, r3
 8002184:	4b55      	ldr	r3, [pc, #340]	@ (80022dc <main+0xd14>)
 8002186:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800218a:	4b56      	ldr	r3, [pc, #344]	@ (80022e4 <main+0xd1c>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe f9fe 	bl	8000590 <__aeabi_dmul>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4620      	mov	r0, r4
 800219a:	4629      	mov	r1, r5
 800219c:	f7fe f842 	bl	8000224 <__adddf3>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
				tempo[1][0]=center[0][0]*RX[1][0]+center[1][0]*RY[1][0];
 80021a8:	4b4c      	ldr	r3, [pc, #304]	@ (80022dc <main+0xd14>)
 80021aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021ae:	4b4c      	ldr	r3, [pc, #304]	@ (80022e0 <main+0xd18>)
 80021b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021b4:	f7fe f9ec 	bl	8000590 <__aeabi_dmul>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4614      	mov	r4, r2
 80021be:	461d      	mov	r5, r3
 80021c0:	4b46      	ldr	r3, [pc, #280]	@ (80022dc <main+0xd14>)
 80021c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80021c6:	4b47      	ldr	r3, [pc, #284]	@ (80022e4 <main+0xd1c>)
 80021c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021cc:	f7fe f9e0 	bl	8000590 <__aeabi_dmul>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4620      	mov	r0, r4
 80021d6:	4629      	mov	r1, r5
 80021d8:	f7fe f824 	bl	8000224 <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
				center_last[0][0]=rA[0][0]+tempo[0][0];
 80021e4:	4b33      	ldr	r3, [pc, #204]	@ (80022b4 <main+0xcec>)
 80021e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021ee:	f7fe f819 	bl	8000224 <__adddf3>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	493c      	ldr	r1, [pc, #240]	@ (80022e8 <main+0xd20>)
 80021f8:	e9c1 2300 	strd	r2, r3, [r1]
				center_last[1][0]=rA[1][0]+tempo[1][0];
 80021fc:	4b2d      	ldr	r3, [pc, #180]	@ (80022b4 <main+0xcec>)
 80021fe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002202:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002206:	f7fe f80d 	bl	8000224 <__adddf3>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4936      	ldr	r1, [pc, #216]	@ (80022e8 <main+0xd20>)
 8002210:	e9c1 2302 	strd	r2, r3, [r1, #8]
				//				center_last[0][0]=rA[0][0]+center[0][0];
				//				center_last[1][0]=rA[1][0]+center[1][0];
			}
			int16_t rA_x_int16_t = (int16_t)rA[0][0];
 8002214:	4b27      	ldr	r3, [pc, #156]	@ (80022b4 <main+0xcec>)
 8002216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	f7fe fc51 	bl	8000ac4 <__aeabi_d2iz>
 8002222:	4603      	mov	r3, r0
 8002224:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
			int16_t rA_y_int16_t = (int16_t)rA[1][0];
 8002228:	4b22      	ldr	r3, [pc, #136]	@ (80022b4 <main+0xcec>)
 800222a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	f7fe fc47 	bl	8000ac4 <__aeabi_d2iz>
 8002236:	4603      	mov	r3, r0
 8002238:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
			int16_t center_x_int16_t = (int16_t)center_last[0][0];
 800223c:	4b2a      	ldr	r3, [pc, #168]	@ (80022e8 <main+0xd20>)
 800223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	f7fe fc3d 	bl	8000ac4 <__aeabi_d2iz>
 800224a:	4603      	mov	r3, r0
 800224c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
			int16_t center_y_int16_t = (int16_t)center_last[1][0];
 8002250:	4b25      	ldr	r3, [pc, #148]	@ (80022e8 <main+0xd20>)
 8002252:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002256:	4610      	mov	r0, r2
 8002258:	4619      	mov	r1, r3
 800225a:	f7fe fc33 	bl	8000ac4 <__aeabi_d2iz>
 800225e:	4603      	mov	r3, r0
 8002260:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			buffer[2]= theta_angle;
 8002264:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <main+0xd0c>)
 8002266:	f9b3 2000 	ldrsh.w	r2, [r3]
 800226a:	4b20      	ldr	r3, [pc, #128]	@ (80022ec <main+0xd24>)
 800226c:	809a      	strh	r2, [r3, #4]
			buffer[3]= rA_x_int16_t;
 800226e:	4a1f      	ldr	r2, [pc, #124]	@ (80022ec <main+0xd24>)
 8002270:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002274:	80d3      	strh	r3, [r2, #6]
			buffer[4]= rA_y_int16_t;
 8002276:	4a1d      	ldr	r2, [pc, #116]	@ (80022ec <main+0xd24>)
 8002278:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800227c:	8113      	strh	r3, [r2, #8]
			buffer[0]= angle_X;
 800227e:	4b11      	ldr	r3, [pc, #68]	@ (80022c4 <main+0xcfc>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	b21a      	sxth	r2, r3
 8002284:	4b19      	ldr	r3, [pc, #100]	@ (80022ec <main+0xd24>)
 8002286:	801a      	strh	r2, [r3, #0]
			buffer[1]= angle_Y;
 8002288:	4b0f      	ldr	r3, [pc, #60]	@ (80022c8 <main+0xd00>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	b21a      	sxth	r2, r3
 800228e:	4b17      	ldr	r3, [pc, #92]	@ (80022ec <main+0xd24>)
 8002290:	805a      	strh	r2, [r3, #2]
			old_couter=interrupt_counter;
 8002292:	4b17      	ldr	r3, [pc, #92]	@ (80022f0 <main+0xd28>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	e02d      	b.n	80022f4 <main+0xd2c>
 8002298:	54442d18 	.word	0x54442d18
 800229c:	400921fb 	.word	0x400921fb
 80022a0:	20000490 	.word	0x20000490
 80022a4:	20000470 	.word	0x20000470
 80022a8:	20000438 	.word	0x20000438
 80022ac:	200004a0 	.word	0x200004a0
 80022b0:	200004b0 	.word	0x200004b0
 80022b4:	20000480 	.word	0x20000480
 80022b8:	20000518 	.word	0x20000518
 80022bc:	2000051c 	.word	0x2000051c
 80022c0:	20000520 	.word	0x20000520
 80022c4:	2000052e 	.word	0x2000052e
 80022c8:	2000052f 	.word	0x2000052f
 80022cc:	20000508 	.word	0x20000508
 80022d0:	40668000 	.word	0x40668000
 80022d4:	200003fc 	.word	0x200003fc
 80022d8:	200004d8 	.word	0x200004d8
 80022dc:	200004f8 	.word	0x200004f8
 80022e0:	20000440 	.word	0x20000440
 80022e4:	20000450 	.word	0x20000450
 80022e8:	200004e8 	.word	0x200004e8
 80022ec:	20000524 	.word	0x20000524
 80022f0:	20000400 	.word	0x20000400
 80022f4:	4a08      	ldr	r2, [pc, #32]	@ (8002318 <main+0xd50>)
 80022f6:	6013      	str	r3, [r2, #0]
			rA_old[0][0]=rA[0][0];
 80022f8:	4b08      	ldr	r3, [pc, #32]	@ (800231c <main+0xd54>)
 80022fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fe:	4908      	ldr	r1, [pc, #32]	@ (8002320 <main+0xd58>)
 8002300:	e9c1 2300 	strd	r2, r3, [r1]
			rA_old[1][0]=rA[1][0];
 8002304:	4b05      	ldr	r3, [pc, #20]	@ (800231c <main+0xd54>)
 8002306:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800230a:	4905      	ldr	r1, [pc, #20]	@ (8002320 <main+0xd58>)
 800230c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			loop();
 8002310:	f002 f840 	bl	8004394 <loop>
		if(interrupt_counter>old_couter)
 8002314:	e4e0      	b.n	8001cd8 <main+0x710>
 8002316:	bf00      	nop
 8002318:	200005f8 	.word	0x200005f8
 800231c:	20000480 	.word	0x20000480
 8002320:	200004d8 	.word	0x200004d8

08002324 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b094      	sub	sp, #80	@ 0x50
 8002328:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	2234      	movs	r2, #52	@ 0x34
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f009 fb0e 	bl	800b954 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002338:	f107 0308 	add.w	r3, r7, #8
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002348:	2300      	movs	r3, #0
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	4b2c      	ldr	r3, [pc, #176]	@ (8002400 <SystemClock_Config+0xdc>)
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	4a2b      	ldr	r2, [pc, #172]	@ (8002400 <SystemClock_Config+0xdc>)
 8002352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002356:	6413      	str	r3, [r2, #64]	@ 0x40
 8002358:	4b29      	ldr	r3, [pc, #164]	@ (8002400 <SystemClock_Config+0xdc>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002364:	2300      	movs	r3, #0
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	4b26      	ldr	r3, [pc, #152]	@ (8002404 <SystemClock_Config+0xe0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a25      	ldr	r2, [pc, #148]	@ (8002404 <SystemClock_Config+0xe0>)
 800236e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b23      	ldr	r3, [pc, #140]	@ (8002404 <SystemClock_Config+0xe0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002380:	2302      	movs	r3, #2
 8002382:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002384:	2301      	movs	r3, #1
 8002386:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002388:	2310      	movs	r3, #16
 800238a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800238c:	2302      	movs	r3, #2
 800238e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002390:	2300      	movs	r3, #0
 8002392:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002394:	2308      	movs	r3, #8
 8002396:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002398:	23b4      	movs	r3, #180	@ 0xb4
 800239a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800239c:	2302      	movs	r3, #2
 800239e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80023a0:	2302      	movs	r3, #2
 80023a2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80023a4:	2302      	movs	r3, #2
 80023a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a8:	f107 031c 	add.w	r3, r7, #28
 80023ac:	4618      	mov	r0, r3
 80023ae:	f005 fc47 	bl	8007c40 <HAL_RCC_OscConfig>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <SystemClock_Config+0x98>
	{
		Error_Handler();
 80023b8:	f000 fb1c 	bl	80029f4 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80023bc:	f005 f8a6 	bl	800750c <HAL_PWREx_EnableOverDrive>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <SystemClock_Config+0xa6>
	{
		Error_Handler();
 80023c6:	f000 fb15 	bl	80029f4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ca:	230f      	movs	r3, #15
 80023cc:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ce:	2302      	movs	r3, #2
 80023d0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023da:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023e0:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023e2:	f107 0308 	add.w	r3, r7, #8
 80023e6:	2105      	movs	r1, #5
 80023e8:	4618      	mov	r0, r3
 80023ea:	f005 f8df 	bl	80075ac <HAL_RCC_ClockConfig>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 80023f4:	f000 fafe 	bl	80029f4 <Error_Handler>
	}
}
 80023f8:	bf00      	nop
 80023fa:	3750      	adds	r7, #80	@ 0x50
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40023800 	.word	0x40023800
 8002404:	40007000 	.word	0x40007000

08002408 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800240c:	4b12      	ldr	r3, [pc, #72]	@ (8002458 <MX_I2C1_Init+0x50>)
 800240e:	4a13      	ldr	r2, [pc, #76]	@ (800245c <MX_I2C1_Init+0x54>)
 8002410:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002412:	4b11      	ldr	r3, [pc, #68]	@ (8002458 <MX_I2C1_Init+0x50>)
 8002414:	4a12      	ldr	r2, [pc, #72]	@ (8002460 <MX_I2C1_Init+0x58>)
 8002416:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002418:	4b0f      	ldr	r3, [pc, #60]	@ (8002458 <MX_I2C1_Init+0x50>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800241e:	4b0e      	ldr	r3, [pc, #56]	@ (8002458 <MX_I2C1_Init+0x50>)
 8002420:	2200      	movs	r2, #0
 8002422:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002424:	4b0c      	ldr	r3, [pc, #48]	@ (8002458 <MX_I2C1_Init+0x50>)
 8002426:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800242a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800242c:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <MX_I2C1_Init+0x50>)
 800242e:	2200      	movs	r2, #0
 8002430:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <MX_I2C1_Init+0x50>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002438:	4b07      	ldr	r3, [pc, #28]	@ (8002458 <MX_I2C1_Init+0x50>)
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <MX_I2C1_Init+0x50>)
 8002440:	2200      	movs	r2, #0
 8002442:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002444:	4804      	ldr	r0, [pc, #16]	@ (8002458 <MX_I2C1_Init+0x50>)
 8002446:	f004 f83d 	bl	80064c4 <HAL_I2C_Init>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8002450:	f000 fad0 	bl	80029f4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000090 	.word	0x20000090
 800245c:	40005400 	.word	0x40005400
 8002460:	000186a0 	.word	0x000186a0

08002464 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8002468:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <MX_I2C3_Init+0x50>)
 800246a:	4a13      	ldr	r2, [pc, #76]	@ (80024b8 <MX_I2C3_Init+0x54>)
 800246c:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 800246e:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <MX_I2C3_Init+0x50>)
 8002470:	4a12      	ldr	r2, [pc, #72]	@ (80024bc <MX_I2C3_Init+0x58>)
 8002472:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002474:	4b0f      	ldr	r3, [pc, #60]	@ (80024b4 <MX_I2C3_Init+0x50>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 800247a:	4b0e      	ldr	r3, [pc, #56]	@ (80024b4 <MX_I2C3_Init+0x50>)
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002480:	4b0c      	ldr	r3, [pc, #48]	@ (80024b4 <MX_I2C3_Init+0x50>)
 8002482:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002486:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002488:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <MX_I2C3_Init+0x50>)
 800248a:	2200      	movs	r2, #0
 800248c:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 800248e:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <MX_I2C3_Init+0x50>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002494:	4b07      	ldr	r3, [pc, #28]	@ (80024b4 <MX_I2C3_Init+0x50>)
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800249a:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <MX_I2C3_Init+0x50>)
 800249c:	2200      	movs	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80024a0:	4804      	ldr	r0, [pc, #16]	@ (80024b4 <MX_I2C3_Init+0x50>)
 80024a2:	f004 f80f 	bl	80064c4 <HAL_I2C_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 80024ac:	f000 faa2 	bl	80029f4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	200000e4 	.word	0x200000e4
 80024b8:	40005c00 	.word	0x40005c00
 80024bc:	000186a0 	.word	0x000186a0

080024c0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08c      	sub	sp, #48	@ 0x30
 80024c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 80024c6:	f107 030c 	add.w	r3, r7, #12
 80024ca:	2224      	movs	r2, #36	@ 0x24
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f009 fa40 	bl	800b954 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80024dc:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <MX_TIM2_Init+0xa4>)
 80024de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024e2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80024e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002564 <MX_TIM2_Init+0xa4>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002564 <MX_TIM2_Init+0xa4>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80024f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002564 <MX_TIM2_Init+0xa4>)
 80024f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024f6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002564 <MX_TIM2_Init+0xa4>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024fe:	4b19      	ldr	r3, [pc, #100]	@ (8002564 <MX_TIM2_Init+0xa4>)
 8002500:	2200      	movs	r2, #0
 8002502:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002504:	2301      	movs	r3, #1
 8002506:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800250c:	2301      	movs	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002510:	2300      	movs	r3, #0
 8002512:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002518:	2300      	movs	r3, #0
 800251a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800251c:	2301      	movs	r3, #1
 800251e:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002520:	2300      	movs	r3, #0
 8002522:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002528:	f107 030c 	add.w	r3, r7, #12
 800252c:	4619      	mov	r1, r3
 800252e:	480d      	ldr	r0, [pc, #52]	@ (8002564 <MX_TIM2_Init+0xa4>)
 8002530:	f005 fee4 	bl	80082fc <HAL_TIM_Encoder_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 800253a:	f000 fa5b 	bl	80029f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	4619      	mov	r1, r3
 800254a:	4806      	ldr	r0, [pc, #24]	@ (8002564 <MX_TIM2_Init+0xa4>)
 800254c:	f006 fb56 	bl	8008bfc <HAL_TIMEx_MasterConfigSynchronization>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 8002556:	f000 fa4d 	bl	80029f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800255a:	bf00      	nop
 800255c:	3730      	adds	r7, #48	@ 0x30
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000138 	.word	0x20000138

08002568 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	@ 0x30
 800256c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 800256e:	f107 030c 	add.w	r3, r7, #12
 8002572:	2224      	movs	r2, #36	@ 0x24
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f009 f9ec 	bl	800b954 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002584:	4b20      	ldr	r3, [pc, #128]	@ (8002608 <MX_TIM3_Init+0xa0>)
 8002586:	4a21      	ldr	r2, [pc, #132]	@ (800260c <MX_TIM3_Init+0xa4>)
 8002588:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800258a:	4b1f      	ldr	r3, [pc, #124]	@ (8002608 <MX_TIM3_Init+0xa0>)
 800258c:	2200      	movs	r2, #0
 800258e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002590:	4b1d      	ldr	r3, [pc, #116]	@ (8002608 <MX_TIM3_Init+0xa0>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8002596:	4b1c      	ldr	r3, [pc, #112]	@ (8002608 <MX_TIM3_Init+0xa0>)
 8002598:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800259c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259e:	4b1a      	ldr	r3, [pc, #104]	@ (8002608 <MX_TIM3_Init+0xa0>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025a4:	4b18      	ldr	r3, [pc, #96]	@ (8002608 <MX_TIM3_Init+0xa0>)
 80025a6:	2280      	movs	r2, #128	@ 0x80
 80025a8:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80025aa:	2301      	movs	r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025b2:	2301      	movs	r3, #1
 80025b4:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 80025b6:	2308      	movs	r3, #8
 80025b8:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025c2:	2301      	movs	r3, #1
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 80025c6:	2308      	movs	r3, #8
 80025c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80025ce:	f107 030c 	add.w	r3, r7, #12
 80025d2:	4619      	mov	r1, r3
 80025d4:	480c      	ldr	r0, [pc, #48]	@ (8002608 <MX_TIM3_Init+0xa0>)
 80025d6:	f005 fe91 	bl	80082fc <HAL_TIM_Encoder_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM3_Init+0x7c>
	{
		Error_Handler();
 80025e0:	f000 fa08 	bl	80029f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e4:	2300      	movs	r3, #0
 80025e6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025ec:	1d3b      	adds	r3, r7, #4
 80025ee:	4619      	mov	r1, r3
 80025f0:	4805      	ldr	r0, [pc, #20]	@ (8002608 <MX_TIM3_Init+0xa0>)
 80025f2:	f006 fb03 	bl	8008bfc <HAL_TIMEx_MasterConfigSynchronization>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM3_Init+0x98>
	{
		Error_Handler();
 80025fc:	f000 f9fa 	bl	80029f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8002600:	bf00      	nop
 8002602:	3730      	adds	r7, #48	@ 0x30
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000180 	.word	0x20000180
 800260c:	40000400 	.word	0x40000400

08002610 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	@ 0x30
 8002614:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	2224      	movs	r2, #36	@ 0x24
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f009 f998 	bl	800b954 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800262c:	4b20      	ldr	r3, [pc, #128]	@ (80026b0 <MX_TIM4_Init+0xa0>)
 800262e:	4a21      	ldr	r2, [pc, #132]	@ (80026b4 <MX_TIM4_Init+0xa4>)
 8002630:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002632:	4b1f      	ldr	r3, [pc, #124]	@ (80026b0 <MX_TIM4_Init+0xa0>)
 8002634:	2200      	movs	r2, #0
 8002636:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002638:	4b1d      	ldr	r3, [pc, #116]	@ (80026b0 <MX_TIM4_Init+0xa0>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800263e:	4b1c      	ldr	r3, [pc, #112]	@ (80026b0 <MX_TIM4_Init+0xa0>)
 8002640:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002644:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002646:	4b1a      	ldr	r3, [pc, #104]	@ (80026b0 <MX_TIM4_Init+0xa0>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800264c:	4b18      	ldr	r3, [pc, #96]	@ (80026b0 <MX_TIM4_Init+0xa0>)
 800264e:	2280      	movs	r2, #128	@ 0x80
 8002650:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002652:	2301      	movs	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800265a:	2301      	movs	r3, #1
 800265c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 800265e:	2308      	movs	r3, #8
 8002660:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002666:	2300      	movs	r3, #0
 8002668:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800266a:	2301      	movs	r3, #1
 800266c:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 800266e:	2308      	movs	r3, #8
 8002670:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	4619      	mov	r1, r3
 800267c:	480c      	ldr	r0, [pc, #48]	@ (80026b0 <MX_TIM4_Init+0xa0>)
 800267e:	f005 fe3d 	bl	80082fc <HAL_TIM_Encoder_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM4_Init+0x7c>
	{
		Error_Handler();
 8002688:	f000 f9b4 	bl	80029f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268c:	2300      	movs	r3, #0
 800268e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002694:	1d3b      	adds	r3, r7, #4
 8002696:	4619      	mov	r1, r3
 8002698:	4805      	ldr	r0, [pc, #20]	@ (80026b0 <MX_TIM4_Init+0xa0>)
 800269a:	f006 faaf 	bl	8008bfc <HAL_TIMEx_MasterConfigSynchronization>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_TIM4_Init+0x98>
	{
		Error_Handler();
 80026a4:	f000 f9a6 	bl	80029f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80026a8:	bf00      	nop
 80026aa:	3730      	adds	r7, #48	@ 0x30
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	200001c8 	.word	0x200001c8
 80026b4:	40000800 	.word	0x40000800

080026b8 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026be:	f107 0308 	add.w	r3, r7, #8
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026cc:	463b      	mov	r3, r7
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80026d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002748 <MX_TIM5_Init+0x90>)
 80026d6:	4a1d      	ldr	r2, [pc, #116]	@ (800274c <MX_TIM5_Init+0x94>)
 80026d8:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 5;
 80026da:	4b1b      	ldr	r3, [pc, #108]	@ (8002748 <MX_TIM5_Init+0x90>)
 80026dc:	2205      	movs	r2, #5
 80026de:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e0:	4b19      	ldr	r3, [pc, #100]	@ (8002748 <MX_TIM5_Init+0x90>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 899999;
 80026e6:	4b18      	ldr	r3, [pc, #96]	@ (8002748 <MX_TIM5_Init+0x90>)
 80026e8:	4a19      	ldr	r2, [pc, #100]	@ (8002750 <MX_TIM5_Init+0x98>)
 80026ea:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ec:	4b16      	ldr	r3, [pc, #88]	@ (8002748 <MX_TIM5_Init+0x90>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026f2:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <MX_TIM5_Init+0x90>)
 80026f4:	2280      	movs	r2, #128	@ 0x80
 80026f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026f8:	4813      	ldr	r0, [pc, #76]	@ (8002748 <MX_TIM5_Init+0x90>)
 80026fa:	f005 fd3f 	bl	800817c <HAL_TIM_Base_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM5_Init+0x50>
	{
		Error_Handler();
 8002704:	f000 f976 	bl	80029f4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800270c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800270e:	f107 0308 	add.w	r3, r7, #8
 8002712:	4619      	mov	r1, r3
 8002714:	480c      	ldr	r0, [pc, #48]	@ (8002748 <MX_TIM5_Init+0x90>)
 8002716:	f006 f815 	bl	8008744 <HAL_TIM_ConfigClockSource>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM5_Init+0x6c>
	{
		Error_Handler();
 8002720:	f000 f968 	bl	80029f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002724:	2300      	movs	r3, #0
 8002726:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800272c:	463b      	mov	r3, r7
 800272e:	4619      	mov	r1, r3
 8002730:	4805      	ldr	r0, [pc, #20]	@ (8002748 <MX_TIM5_Init+0x90>)
 8002732:	f006 fa63 	bl	8008bfc <HAL_TIMEx_MasterConfigSynchronization>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM5_Init+0x88>
	{
		Error_Handler();
 800273c:	f000 f95a 	bl	80029f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8002740:	bf00      	nop
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000210 	.word	0x20000210
 800274c:	40000c00 	.word	0x40000c00
 8002750:	000dbb9f 	.word	0x000dbb9f

08002754 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08c      	sub	sp, #48	@ 0x30
 8002758:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 800275a:	f107 030c 	add.w	r3, r7, #12
 800275e:	2224      	movs	r2, #36	@ 0x24
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f009 f8f6 	bl	800b954 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8002770:	4b22      	ldr	r3, [pc, #136]	@ (80027fc <MX_TIM8_Init+0xa8>)
 8002772:	4a23      	ldr	r2, [pc, #140]	@ (8002800 <MX_TIM8_Init+0xac>)
 8002774:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8002776:	4b21      	ldr	r3, [pc, #132]	@ (80027fc <MX_TIM8_Init+0xa8>)
 8002778:	2200      	movs	r2, #0
 800277a:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800277c:	4b1f      	ldr	r3, [pc, #124]	@ (80027fc <MX_TIM8_Init+0xa8>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8002782:	4b1e      	ldr	r3, [pc, #120]	@ (80027fc <MX_TIM8_Init+0xa8>)
 8002784:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002788:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800278a:	4b1c      	ldr	r3, [pc, #112]	@ (80027fc <MX_TIM8_Init+0xa8>)
 800278c:	2200      	movs	r2, #0
 800278e:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8002790:	4b1a      	ldr	r3, [pc, #104]	@ (80027fc <MX_TIM8_Init+0xa8>)
 8002792:	2200      	movs	r2, #0
 8002794:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002796:	4b19      	ldr	r3, [pc, #100]	@ (80027fc <MX_TIM8_Init+0xa8>)
 8002798:	2280      	movs	r2, #128	@ 0x80
 800279a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800279c:	2301      	movs	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027a4:	2301      	movs	r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 80027a8:	2308      	movs	r3, #8
 80027aa:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027b4:	2301      	movs	r3, #1
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 80027b8:	2308      	movs	r3, #8
 80027ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	4619      	mov	r1, r3
 80027c6:	480d      	ldr	r0, [pc, #52]	@ (80027fc <MX_TIM8_Init+0xa8>)
 80027c8:	f005 fd98 	bl	80082fc <HAL_TIM_Encoder_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_TIM8_Init+0x82>
	{
		Error_Handler();
 80027d2:	f000 f90f 	bl	80029f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	4619      	mov	r1, r3
 80027e2:	4806      	ldr	r0, [pc, #24]	@ (80027fc <MX_TIM8_Init+0xa8>)
 80027e4:	f006 fa0a 	bl	8008bfc <HAL_TIMEx_MasterConfigSynchronization>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_TIM8_Init+0x9e>
	{
		Error_Handler();
 80027ee:	f000 f901 	bl	80029f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 80027f2:	bf00      	nop
 80027f4:	3730      	adds	r7, #48	@ 0x30
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000258 	.word	0x20000258
 8002800:	40010400 	.word	0x40010400

08002804 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800280a:	463b      	mov	r3, r7
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8002816:	4b15      	ldr	r3, [pc, #84]	@ (800286c <MX_TIM12_Init+0x68>)
 8002818:	4a15      	ldr	r2, [pc, #84]	@ (8002870 <MX_TIM12_Init+0x6c>)
 800281a:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 90-1;
 800281c:	4b13      	ldr	r3, [pc, #76]	@ (800286c <MX_TIM12_Init+0x68>)
 800281e:	2259      	movs	r2, #89	@ 0x59
 8002820:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002822:	4b12      	ldr	r3, [pc, #72]	@ (800286c <MX_TIM12_Init+0x68>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 200-1;
 8002828:	4b10      	ldr	r3, [pc, #64]	@ (800286c <MX_TIM12_Init+0x68>)
 800282a:	22c7      	movs	r2, #199	@ 0xc7
 800282c:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800282e:	4b0f      	ldr	r3, [pc, #60]	@ (800286c <MX_TIM12_Init+0x68>)
 8002830:	2200      	movs	r2, #0
 8002832:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002834:	4b0d      	ldr	r3, [pc, #52]	@ (800286c <MX_TIM12_Init+0x68>)
 8002836:	2200      	movs	r2, #0
 8002838:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800283a:	480c      	ldr	r0, [pc, #48]	@ (800286c <MX_TIM12_Init+0x68>)
 800283c:	f005 fc9e 	bl	800817c <HAL_TIM_Base_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM12_Init+0x46>
	{
		Error_Handler();
 8002846:	f000 f8d5 	bl	80029f4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800284a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800284e:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002850:	463b      	mov	r3, r7
 8002852:	4619      	mov	r1, r3
 8002854:	4805      	ldr	r0, [pc, #20]	@ (800286c <MX_TIM12_Init+0x68>)
 8002856:	f005 ff75 	bl	8008744 <HAL_TIM_ConfigClockSource>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_TIM12_Init+0x60>
	{
		Error_Handler();
 8002860:	f000 f8c8 	bl	80029f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */

}
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	200002a0 	.word	0x200002a0
 8002870:	40001800 	.word	0x40001800

08002874 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002878:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <MX_USART2_UART_Init+0x4c>)
 800287a:	4a12      	ldr	r2, [pc, #72]	@ (80028c4 <MX_USART2_UART_Init+0x50>)
 800287c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <MX_USART2_UART_Init+0x4c>)
 8002880:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002884:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002886:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <MX_USART2_UART_Init+0x4c>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800288c:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <MX_USART2_UART_Init+0x4c>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002892:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <MX_USART2_UART_Init+0x4c>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002898:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <MX_USART2_UART_Init+0x4c>)
 800289a:	220c      	movs	r2, #12
 800289c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289e:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <MX_USART2_UART_Init+0x4c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <MX_USART2_UART_Init+0x4c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80028aa:	4805      	ldr	r0, [pc, #20]	@ (80028c0 <MX_USART2_UART_Init+0x4c>)
 80028ac:	f006 fa36 	bl	8008d1c <HAL_UART_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80028b6:	f000 f89d 	bl	80029f4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200002e8 	.word	0x200002e8
 80028c4:	40004400 	.word	0x40004400

080028c8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <MX_DMA_Init+0x4c>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002914 <MX_DMA_Init+0x4c>)
 80028d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028de:	4b0d      	ldr	r3, [pc, #52]	@ (8002914 <MX_DMA_Init+0x4c>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2100      	movs	r1, #0
 80028ee:	2010      	movs	r0, #16
 80028f0:	f003 f801 	bl	80058f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80028f4:	2010      	movs	r0, #16
 80028f6:	f003 f81a 	bl	800592e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2100      	movs	r1, #0
 80028fe:	2011      	movs	r0, #17
 8002900:	f002 fff9 	bl	80058f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002904:	2011      	movs	r0, #17
 8002906:	f003 f812 	bl	800592e <HAL_NVIC_EnableIRQ>

}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800

08002918 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	@ 0x28
 800291c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]
 800292c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	4b2d      	ldr	r3, [pc, #180]	@ (80029e8 <MX_GPIO_Init+0xd0>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	4a2c      	ldr	r2, [pc, #176]	@ (80029e8 <MX_GPIO_Init+0xd0>)
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	6313      	str	r3, [r2, #48]	@ 0x30
 800293e:	4b2a      	ldr	r3, [pc, #168]	@ (80029e8 <MX_GPIO_Init+0xd0>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	4b26      	ldr	r3, [pc, #152]	@ (80029e8 <MX_GPIO_Init+0xd0>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	4a25      	ldr	r2, [pc, #148]	@ (80029e8 <MX_GPIO_Init+0xd0>)
 8002954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002958:	6313      	str	r3, [r2, #48]	@ 0x30
 800295a:	4b23      	ldr	r3, [pc, #140]	@ (80029e8 <MX_GPIO_Init+0xd0>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	4b1f      	ldr	r3, [pc, #124]	@ (80029e8 <MX_GPIO_Init+0xd0>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a1e      	ldr	r2, [pc, #120]	@ (80029e8 <MX_GPIO_Init+0xd0>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b1c      	ldr	r3, [pc, #112]	@ (80029e8 <MX_GPIO_Init+0xd0>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	4b18      	ldr	r3, [pc, #96]	@ (80029e8 <MX_GPIO_Init+0xd0>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	4a17      	ldr	r2, [pc, #92]	@ (80029e8 <MX_GPIO_Init+0xd0>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	6313      	str	r3, [r2, #48]	@ 0x30
 8002992:	4b15      	ldr	r3, [pc, #84]	@ (80029e8 <MX_GPIO_Init+0xd0>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800299e:	2200      	movs	r2, #0
 80029a0:	2120      	movs	r1, #32
 80029a2:	4812      	ldr	r0, [pc, #72]	@ (80029ec <MX_GPIO_Init+0xd4>)
 80029a4:	f003 fd74 	bl	8006490 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80029a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80029b2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	4619      	mov	r1, r3
 80029be:	480c      	ldr	r0, [pc, #48]	@ (80029f0 <MX_GPIO_Init+0xd8>)
 80029c0:	f003 fbd2 	bl	8006168 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80029c4:	2320      	movs	r3, #32
 80029c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c8:	2301      	movs	r3, #1
 80029ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	4619      	mov	r1, r3
 80029da:	4804      	ldr	r0, [pc, #16]	@ (80029ec <MX_GPIO_Init+0xd4>)
 80029dc:	f003 fbc4 	bl	8006168 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80029e0:	bf00      	nop
 80029e2:	3728      	adds	r7, #40	@ 0x28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40020000 	.word	0x40020000
 80029f0:	40020800 	.word	0x40020800

080029f4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029f8:	b672      	cpsid	i
}
 80029fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80029fc:	bf00      	nop
 80029fe:	e7fd      	b.n	80029fc <Error_Handler+0x8>

08002a00 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	4a04      	ldr	r2, [pc, #16]	@ (8002a40 <_ZN3ros3MsgC1Ev+0x1c>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	0800c268 	.word	0x0800c268

08002a44 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
      data()
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff ffe8 	bl	8002a24 <_ZN3ros3MsgC1Ev>
 8002a54:	4a06      	ldr	r2, [pc, #24]	@ (8002a70 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ffce 	bl	8002a00 <_ZN3ros4TimeC1Ev>
    {
    }
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	0800c250 	.word	0x0800c250

08002a74 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6859      	ldr	r1, [r3, #4]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	b2ca      	uxtb	r2, r1
 8002a8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	0a19      	lsrs	r1, r3, #8
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	b2ca      	uxtb	r2, r1
 8002aa0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	0c19      	lsrs	r1, r3, #16
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3302      	adds	r3, #2
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	4413      	add	r3, r2
 8002ab0:	b2ca      	uxtb	r2, r1
 8002ab2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	0e19      	lsrs	r1, r3, #24
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	3303      	adds	r3, #3
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	b2ca      	uxtb	r2, r1
 8002ac4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6899      	ldr	r1, [r3, #8]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	b2ca      	uxtb	r2, r1
 8002ad8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	0a19      	lsrs	r1, r3, #8
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	b2ca      	uxtb	r2, r1
 8002aea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	0c19      	lsrs	r1, r3, #16
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3302      	adds	r3, #2
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	4413      	add	r3, r2
 8002afa:	b2ca      	uxtb	r2, r1
 8002afc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	0e19      	lsrs	r1, r3, #24
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	3303      	adds	r3, #3
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	b2ca      	uxtb	r2, r1
 8002b0e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3304      	adds	r3, #4
 8002b14:	60fb      	str	r3, [r7, #12]
      return offset;
 8002b16:	68fb      	ldr	r3, [r7, #12]
    }
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	4413      	add	r3, r2
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	3301      	adds	r3, #1
 8002b48:	6839      	ldr	r1, [r7, #0]
 8002b4a:	440b      	add	r3, r1
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	6839      	ldr	r1, [r7, #0]
 8002b60:	440b      	add	r3, r1
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	041b      	lsls	r3, r3, #16
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3303      	adds	r3, #3
 8002b74:	6839      	ldr	r1, [r7, #0]
 8002b76:	440b      	add	r3, r1
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	061b      	lsls	r3, r3, #24
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3304      	adds	r3, #4
 8002b86:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	6839      	ldr	r1, [r7, #0]
 8002ba0:	440b      	add	r3, r1
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	6839      	ldr	r1, [r7, #0]
 8002bb6:	440b      	add	r3, r1
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	041b      	lsls	r3, r3, #16
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3303      	adds	r3, #3
 8002bca:	6839      	ldr	r1, [r7, #0]
 8002bcc:	440b      	add	r3, r1
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	061b      	lsls	r3, r3, #24
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	60fb      	str	r3, [r7, #12]
     return offset;
 8002bde:	68fb      	ldr	r3, [r7, #12]
    }
 8002be0:	4618      	mov	r0, r3
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	0800bf44 	.word	0x0800bf44

08002c08 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	4b03      	ldr	r3, [pc, #12]	@ (8002c20 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	0800bf54 	.word	0x0800bf54

08002c24 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fef8 	bl	8002a24 <_ZN3ros3MsgC1Ev>
 8002c34:	4a0b      	ldr	r2, [pc, #44]	@ (8002c64 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a09      	ldr	r2, [pc, #36]	@ (8002c68 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002c44:	609a      	str	r2, [r3, #8]
      message_type(""),
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a07      	ldr	r2, [pc, #28]	@ (8002c68 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002c4a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a06      	ldr	r2, [pc, #24]	@ (8002c68 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002c50:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	615a      	str	r2, [r3, #20]
    {
    }
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	0800c238 	.word	0x0800c238
 8002c68:	0800bf78 	.word	0x0800bf78

08002c6c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	8899      	ldrh	r1, [r3, #4]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	4413      	add	r3, r2
 8002c84:	b2ca      	uxtb	r2, r1
 8002c86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	889b      	ldrh	r3, [r3, #4]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	b299      	uxth	r1, r3
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	3301      	adds	r3, #1
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	4413      	add	r3, r2
 8002c98:	b2ca      	uxtb	r2, r1
 8002c9a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd faae 	bl	8000208 <strlen>
 8002cac:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	69b9      	ldr	r1, [r7, #24]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 fb8e 	bl	80043d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	18d0      	adds	r0, r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f008 febb 	bl	800ba4a <memcpy>
      offset += length_topic_name;
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	4413      	add	r3, r2
 8002cda:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fd fa91 	bl	8000208 <strlen>
 8002ce6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	4413      	add	r3, r2
 8002cee:	6979      	ldr	r1, [r7, #20]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f001 fb71 	bl	80043d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	18d0      	adds	r0, r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f008 fe9e 	bl	800ba4a <memcpy>
      offset += length_message_type;
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	4413      	add	r3, r2
 8002d14:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fd fa74 	bl	8000208 <strlen>
 8002d20:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	4413      	add	r3, r2
 8002d28:	6939      	ldr	r1, [r7, #16]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f001 fb54 	bl	80043d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	3304      	adds	r3, #4
 8002d34:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	18d0      	adds	r0, r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4619      	mov	r1, r3
 8002d44:	f008 fe81 	bl	800ba4a <memcpy>
      offset += length_md5sum;
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002d56:	68f9      	ldr	r1, [r7, #12]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	b2ca      	uxtb	r2, r1
 8002d60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	0a19      	lsrs	r1, r3, #8
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	b2ca      	uxtb	r2, r1
 8002d70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	0c19      	lsrs	r1, r3, #16
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3302      	adds	r3, #2
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	b2ca      	uxtb	r2, r1
 8002d80:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	0e19      	lsrs	r1, r3, #24
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3303      	adds	r3, #3
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	b2ca      	uxtb	r2, r1
 8002d90:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3304      	adds	r3, #4
 8002d96:	61fb      	str	r3, [r7, #28]
      return offset;
 8002d98:	69fb      	ldr	r3, [r7, #28]
    }
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b08a      	sub	sp, #40	@ 0x28
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	4413      	add	r3, r2
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	889b      	ldrh	r3, [r3, #4]
 8002dc2:	b21a      	sxth	r2, r3
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	6839      	ldr	r1, [r7, #0]
 8002dca:	440b      	add	r3, r1
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	b21b      	sxth	r3, r3
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	b21b      	sxth	r3, r3
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	3302      	adds	r3, #2
 8002de0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	441a      	add	r2, r3
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 fb11 	bl	8004416 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	3304      	adds	r3, #4
 8002df8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dfe:	e00b      	b.n	8002e18 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	441a      	add	r2, r3
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	6839      	ldr	r1, [r7, #0]
 8002e0c:	440b      	add	r3, r1
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	3301      	adds	r3, #1
 8002e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d3ed      	bcc.n	8002e00 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	4413      	add	r3, r2
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	441a      	add	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	4413      	add	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	441a      	add	r2, r3
 8002e4e:	f107 0310 	add.w	r3, r7, #16
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 fade 	bl	8004416 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	623b      	str	r3, [r7, #32]
 8002e64:	e00b      	b.n	8002e7e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	441a      	add	r2, r3
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	6839      	ldr	r1, [r7, #0]
 8002e72:	440b      	add	r3, r1
 8002e74:	7812      	ldrb	r2, [r2, #0]
 8002e76:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	623b      	str	r3, [r7, #32]
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4413      	add	r3, r2
 8002e84:	6a3a      	ldr	r2, [r7, #32]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d3ed      	bcc.n	8002e66 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4413      	add	r3, r2
 8002e90:	3b01      	subs	r3, #1
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	4413      	add	r3, r2
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	441a      	add	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	441a      	add	r2, r3
 8002eb4:	f107 030c 	add.w	r3, r7, #12
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f001 faab 	bl	8004416 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	e00b      	b.n	8002ee4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	441a      	add	r2, r3
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	6839      	ldr	r1, [r7, #0]
 8002ed8:	440b      	add	r3, r1
 8002eda:	7812      	ldrb	r2, [r2, #0]
 8002edc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4413      	add	r3, r2
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d3ed      	bcc.n	8002ecc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	441a      	add	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4413      	add	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	6839      	ldr	r1, [r7, #0]
 8002f1e:	440a      	add	r2, r1
 8002f20:	7812      	ldrb	r2, [r2, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	6839      	ldr	r1, [r7, #0]
 8002f2e:	440b      	add	r3, r1
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	021b      	lsls	r3, r3, #8
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	6839      	ldr	r1, [r7, #0]
 8002f40:	440b      	add	r3, r1
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	041b      	lsls	r3, r3, #16
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	3303      	adds	r3, #3
 8002f50:	6839      	ldr	r1, [r7, #0]
 8002f52:	440b      	add	r3, r1
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	061b      	lsls	r3, r3, #24
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	3304      	adds	r3, #4
 8002f66:	61bb      	str	r3, [r7, #24]
     return offset;
 8002f68:	69bb      	ldr	r3, [r7, #24]
    }
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3728      	adds	r7, #40	@ 0x28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	4b03      	ldr	r3, [pc, #12]	@ (8002f8c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	0800bf7c 	.word	0x0800bf7c

08002f90 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	4b03      	ldr	r3, [pc, #12]	@ (8002fa8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	0800bf98 	.word	0x0800bf98

08002fac <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fd34 	bl	8002a24 <_ZN3ros3MsgC1Ev>
 8002fbc:	4a06      	ldr	r2, [pc, #24]	@ (8002fd8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	601a      	str	r2, [r3, #0]
      level(0),
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	711a      	strb	r2, [r3, #4]
      msg("")
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a04      	ldr	r2, [pc, #16]	@ (8002fdc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002fcc:	609a      	str	r2, [r3, #8]
    {
    }
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	0800c220 	.word	0x0800c220
 8002fdc:	0800bf78 	.word	0x0800bf78

08002fe0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	7912      	ldrb	r2, [r2, #4]
 8002ff8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd f8ff 	bl	8000208 <strlen>
 800300a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	4413      	add	r3, r2
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	4618      	mov	r0, r3
 8003016:	f001 f9df 	bl	80043d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3304      	adds	r3, #4
 800301e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	18d0      	adds	r0, r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	4619      	mov	r1, r3
 800302e:	f008 fd0c 	bl	800ba4a <memcpy>
      offset += length_msg;
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4413      	add	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
      return offset;
 800303a:	68fb      	ldr	r3, [r7, #12]
    }
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	4413      	add	r3, r2
 8003058:	781a      	ldrb	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	3301      	adds	r3, #1
 8003062:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	441a      	add	r2, r3
 800306a:	f107 030c 	add.w	r3, r7, #12
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f001 f9d0 	bl	8004416 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	3304      	adds	r3, #4
 800307a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	e00b      	b.n	800309a <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	441a      	add	r2, r3
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	3b01      	subs	r3, #1
 800308c:	6839      	ldr	r1, [r7, #0]
 800308e:	440b      	add	r3, r1
 8003090:	7812      	ldrb	r2, [r2, #0]
 8003092:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	3301      	adds	r3, #1
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4413      	add	r3, r2
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d3ed      	bcc.n	8003082 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4413      	add	r3, r2
 80030ac:	3b01      	subs	r3, #1
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	4413      	add	r3, r2
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	441a      	add	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4413      	add	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
     return offset;
 80030ca:	693b      	ldr	r3, [r7, #16]
    }
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	4b03      	ldr	r3, [pc, #12]	@ (80030ec <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	0800bfbc 	.word	0x0800bfbc

080030f0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	4b03      	ldr	r3, [pc, #12]	@ (8003108 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	0800bfd0 	.word	0x0800bfd0

0800310c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fc84 	bl	8002a24 <_ZN3ros3MsgC1Ev>
 800311c:	4a11      	ldr	r2, [pc, #68]	@ (8003164 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	611a      	str	r2, [r3, #16]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	615a      	str	r2, [r3, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	61da      	str	r2, [r3, #28]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	621a      	str	r2, [r3, #32]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	0800c208 	.word	0x0800c208

08003168 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003168:	b580      	push	{r7, lr}
 800316a:	b08a      	sub	sp, #40	@ 0x28
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6859      	ldr	r1, [r3, #4]
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	4413      	add	r3, r2
 8003180:	b2ca      	uxtb	r2, r1
 8003182:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	0a19      	lsrs	r1, r3, #8
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	3301      	adds	r3, #1
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	4413      	add	r3, r2
 8003192:	b2ca      	uxtb	r2, r1
 8003194:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	0c19      	lsrs	r1, r3, #16
 800319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319e:	3302      	adds	r3, #2
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	4413      	add	r3, r2
 80031a4:	b2ca      	uxtb	r2, r1
 80031a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	0e19      	lsrs	r1, r3, #24
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	3303      	adds	r3, #3
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	4413      	add	r3, r2
 80031b6:	b2ca      	uxtb	r2, r1
 80031b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	3304      	adds	r3, #4
 80031be:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80031c0:	2300      	movs	r3, #0
 80031c2:	623b      	str	r3, [r7, #32]
 80031c4:	e02a      	b.n	800321c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80031d4:	6939      	ldr	r1, [r7, #16]
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	4413      	add	r3, r2
 80031dc:	b2ca      	uxtb	r2, r1
 80031de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	0a19      	lsrs	r1, r3, #8
 80031e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e6:	3301      	adds	r3, #1
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	4413      	add	r3, r2
 80031ec:	b2ca      	uxtb	r2, r1
 80031ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	0c19      	lsrs	r1, r3, #16
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	3302      	adds	r3, #2
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	4413      	add	r3, r2
 80031fc:	b2ca      	uxtb	r2, r1
 80031fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	0e19      	lsrs	r1, r3, #24
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	3303      	adds	r3, #3
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	4413      	add	r3, r2
 800320c:	b2ca      	uxtb	r2, r1
 800320e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8003210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003212:	3304      	adds	r3, #4
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	3301      	adds	r3, #1
 800321a:	623b      	str	r3, [r7, #32]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	6a3a      	ldr	r2, [r7, #32]
 8003222:	429a      	cmp	r2, r3
 8003224:	d3cf      	bcc.n	80031c6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6919      	ldr	r1, [r3, #16]
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	4413      	add	r3, r2
 8003230:	b2ca      	uxtb	r2, r1
 8003232:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	0a19      	lsrs	r1, r3, #8
 800323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323c:	3301      	adds	r3, #1
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	4413      	add	r3, r2
 8003242:	b2ca      	uxtb	r2, r1
 8003244:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	0c19      	lsrs	r1, r3, #16
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	3302      	adds	r3, #2
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	4413      	add	r3, r2
 8003254:	b2ca      	uxtb	r2, r1
 8003256:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	0e19      	lsrs	r1, r3, #24
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	3303      	adds	r3, #3
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	4413      	add	r3, r2
 8003266:	b2ca      	uxtb	r2, r1
 8003268:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	3304      	adds	r3, #4
 800326e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003270:	2300      	movs	r3, #0
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	e02a      	b.n	80032cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003284:	68f9      	ldr	r1, [r7, #12]
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	4413      	add	r3, r2
 800328c:	b2ca      	uxtb	r2, r1
 800328e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	0a19      	lsrs	r1, r3, #8
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003296:	3301      	adds	r3, #1
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	4413      	add	r3, r2
 800329c:	b2ca      	uxtb	r2, r1
 800329e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	0c19      	lsrs	r1, r3, #16
 80032a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a6:	3302      	adds	r3, #2
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	b2ca      	uxtb	r2, r1
 80032ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	0e19      	lsrs	r1, r3, #24
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	3303      	adds	r3, #3
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	4413      	add	r3, r2
 80032bc:	b2ca      	uxtb	r2, r1
 80032be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	3304      	adds	r3, #4
 80032c4:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3301      	adds	r3, #1
 80032ca:	61fb      	str	r3, [r7, #28]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d3cf      	bcc.n	8003276 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69d9      	ldr	r1, [r3, #28]
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	4413      	add	r3, r2
 80032e0:	b2ca      	uxtb	r2, r1
 80032e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	0a19      	lsrs	r1, r3, #8
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ec:	3301      	adds	r3, #1
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	4413      	add	r3, r2
 80032f2:	b2ca      	uxtb	r2, r1
 80032f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	0c19      	lsrs	r1, r3, #16
 80032fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fe:	3302      	adds	r3, #2
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	4413      	add	r3, r2
 8003304:	b2ca      	uxtb	r2, r1
 8003306:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	0e19      	lsrs	r1, r3, #24
 800330e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003310:	3303      	adds	r3, #3
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	4413      	add	r3, r2
 8003316:	b2ca      	uxtb	r2, r1
 8003318:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	3304      	adds	r3, #4
 800331e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003320:	2300      	movs	r3, #0
 8003322:	61bb      	str	r3, [r7, #24]
 8003324:	e027      	b.n	8003376 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fc ff68 	bl	8000208 <strlen>
 8003338:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	4413      	add	r3, r2
 8003340:	6979      	ldr	r1, [r7, #20]
 8003342:	4618      	mov	r0, r3
 8003344:	f001 f848 	bl	80043d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334a:	3304      	adds	r3, #4
 800334c:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800334e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	18d0      	adds	r0, r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4619      	mov	r1, r3
 8003364:	f008 fb71 	bl	800ba4a <memcpy>
      offset += length_stringsi;
 8003368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	4413      	add	r3, r2
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	3301      	adds	r3, #1
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	429a      	cmp	r2, r3
 800337e:	d3d2      	bcc.n	8003326 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8003380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003382:	4618      	mov	r0, r3
 8003384:	3728      	adds	r7, #40	@ 0x28
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800338a:	b580      	push	{r7, lr}
 800338c:	b08e      	sub	sp, #56	@ 0x38
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	4413      	add	r3, r2
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80033a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a4:	3301      	adds	r3, #1
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	4413      	add	r3, r2
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	6a3a      	ldr	r2, [r7, #32]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80033b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b6:	3302      	adds	r3, #2
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	4413      	add	r3, r2
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	041b      	lsls	r3, r3, #16
 80033c0:	6a3a      	ldr	r2, [r7, #32]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80033c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c8:	3303      	adds	r3, #3
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	4413      	add	r3, r2
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	6a3a      	ldr	r2, [r7, #32]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80033d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033da:	3304      	adds	r3, #4
 80033dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	6a3a      	ldr	r2, [r7, #32]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d90a      	bls.n	80033fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4619      	mov	r1, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f008 f880 	bl	800b4f8 <realloc>
 80033f8:	4602      	mov	r2, r0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a3a      	ldr	r2, [r7, #32]
 8003402:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003404:	2300      	movs	r3, #0
 8003406:	633b      	str	r3, [r7, #48]	@ 0x30
 8003408:	e035      	b.n	8003476 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003412:	6839      	ldr	r1, [r7, #0]
 8003414:	440a      	add	r2, r1
 8003416:	7812      	ldrb	r2, [r2, #0]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003420:	3301      	adds	r3, #1
 8003422:	6839      	ldr	r1, [r7, #0]
 8003424:	440b      	add	r3, r1
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003432:	3302      	adds	r3, #2
 8003434:	6839      	ldr	r1, [r7, #0]
 8003436:	440b      	add	r3, r1
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	041b      	lsls	r3, r3, #16
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003444:	3303      	adds	r3, #3
 8003446:	6839      	ldr	r1, [r7, #0]
 8003448:	440b      	add	r3, r1
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	061b      	lsls	r3, r3, #24
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800345a:	3304      	adds	r3, #4
 800345c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	3208      	adds	r2, #8
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003472:	3301      	adds	r3, #1
 8003474:	633b      	str	r3, [r7, #48]	@ 0x30
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800347c:	429a      	cmp	r2, r3
 800347e:	d3c4      	bcc.n	800340a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	4413      	add	r3, r2
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800348a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800348c:	3301      	adds	r3, #1
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	4413      	add	r3, r2
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	69fa      	ldr	r2, [r7, #28]
 8003498:	4313      	orrs	r3, r2
 800349a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800349c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349e:	3302      	adds	r3, #2
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	4413      	add	r3, r2
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	041b      	lsls	r3, r3, #16
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80034ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b0:	3303      	adds	r3, #3
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	4413      	add	r3, r2
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	061b      	lsls	r3, r3, #24
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80034c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c2:	3304      	adds	r3, #4
 80034c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d90a      	bls.n	80034e6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4619      	mov	r1, r3
 80034da:	4610      	mov	r0, r2
 80034dc:	f008 f80c 	bl	800b4f8 <realloc>
 80034e0:	4602      	mov	r2, r0
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80034ec:	2300      	movs	r3, #0
 80034ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034f0:	e035      	b.n	800355e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034fa:	6839      	ldr	r1, [r7, #0]
 80034fc:	440a      	add	r2, r1
 80034fe:	7812      	ldrb	r2, [r2, #0]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003508:	3301      	adds	r3, #1
 800350a:	6839      	ldr	r1, [r7, #0]
 800350c:	440b      	add	r3, r1
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	021b      	lsls	r3, r3, #8
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351a:	3302      	adds	r3, #2
 800351c:	6839      	ldr	r1, [r7, #0]
 800351e:	440b      	add	r3, r1
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	041b      	lsls	r3, r3, #16
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800352c:	3303      	adds	r3, #3
 800352e:	6839      	ldr	r1, [r7, #0]
 8003530:	440b      	add	r3, r1
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	061b      	lsls	r3, r3, #24
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003542:	3304      	adds	r3, #4
 8003544:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	3214      	adds	r2, #20
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8003558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355a:	3301      	adds	r3, #1
 800355c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003564:	429a      	cmp	r2, r3
 8003566:	d3c4      	bcc.n	80034f2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	4413      	add	r3, r2
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003574:	3301      	adds	r3, #1
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	4413      	add	r3, r2
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003586:	3302      	adds	r3, #2
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	4413      	add	r3, r2
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	041b      	lsls	r3, r3, #16
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003598:	3303      	adds	r3, #3
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	4413      	add	r3, r2
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	061b      	lsls	r3, r3, #24
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80035a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035aa:	3304      	adds	r3, #4
 80035ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d90a      	bls.n	80035ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4619      	mov	r1, r3
 80035c2:	4610      	mov	r0, r2
 80035c4:	f007 ff98 	bl	800b4f8 <realloc>
 80035c8:	4602      	mov	r2, r0
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80035d4:	2300      	movs	r3, #0
 80035d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035d8:	e03e      	b.n	8003658 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80035da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	441a      	add	r2, r3
 80035e0:	f107 030c 	add.w	r3, r7, #12
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 ff15 	bl	8004416 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80035ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ee:	3304      	adds	r3, #4
 80035f0:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80035f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035f6:	e00b      	b.n	8003610 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	441a      	add	r2, r3
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	3b01      	subs	r3, #1
 8003602:	6839      	ldr	r1, [r7, #0]
 8003604:	440b      	add	r3, r1
 8003606:	7812      	ldrb	r2, [r2, #0]
 8003608:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360c:	3301      	adds	r3, #1
 800360e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003610:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4413      	add	r3, r2
 8003616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003618:	429a      	cmp	r2, r3
 800361a:	d3ed      	bcc.n	80035f8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800361c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4413      	add	r3, r2
 8003622:	3b01      	subs	r3, #1
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	4413      	add	r3, r2
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800362c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800362e:	3b01      	subs	r3, #1
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	441a      	add	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003638:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4413      	add	r3, r2
 800363e:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	3220      	adds	r2, #32
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8003652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003654:	3301      	adds	r3, #1
 8003656:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800365e:	429a      	cmp	r2, r3
 8003660:	d3bb      	bcc.n	80035da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8003662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8003664:	4618      	mov	r0, r3
 8003666:	3738      	adds	r7, #56	@ 0x38
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	0800c15c 	.word	0x0800c15c

08003688 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	4b03      	ldr	r3, [pc, #12]	@ (80036a0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	0800bff4 	.word	0x0800bff4

080036a4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	601a      	str	r2, [r3, #0]
    msg_(msg),
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	611a      	str	r2, [r3, #16]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68d8      	ldr	r0, [r3, #12]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6891      	ldr	r1, [r2, #8]
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	4798      	blx	r3
 80036f0:	4603      	mov	r3, r0
  };
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
  }
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>:
	uint16_t tx_head = 0;
	uint16_t tx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	6039      	str	r1, [r7, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800372c:	2200      	movs	r2, #0
 800372e:	805a      	strh	r2, [r3, #2]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003736:	2200      	movs	r2, #0
 8003738:	809a      	strh	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003740:	2200      	movs	r2, #0
 8003742:	80da      	strh	r2, [r3, #6]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800374a:	461a      	mov	r2, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6093      	str	r3, [r2, #8]
	{
		//this->huart = huart;
	}
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <_ZN11SerialClass10get_handleEv>:

	inline UART_HandleTypeDef * const get_handle(void)
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
	{
		return &huart;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800376c:	689b      	ldr	r3, [r3, #8]
	}
 800376e:	4618      	mov	r0, r3
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <_ZN11SerialClass9start_dmaEv>:

	inline void start_dma(void)
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]
		rx_tail = 0;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003792:	2200      	movs	r2, #0
 8003794:	805a      	strh	r2, [r3, #2]
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800379c:	6898      	ldr	r0, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037a8:	4619      	mov	r1, r3
 80037aa:	f005 fb77 	bl	8008e9c <HAL_UART_Receive_DMA>
	}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <_ZN11SerialClass4readEv>:



	inline int read(void)
 80037b6:	b480      	push	{r7}
 80037b8:	b085      	sub	sp, #20
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
	{
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->NDTR)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80037d2:	b29b      	uxth	r3, r3
				& buf_mask;
 80037d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037d8:	81fb      	strh	r3, [r7, #14]
		if (rx_tail == rx_head)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037e0:	885b      	ldrh	r3, [r3, #2]
 80037e2:	89fa      	ldrh	r2, [r7, #14]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d102      	bne.n	80037ee <_ZN11SerialClass4readEv+0x38>
		{
			return -1;
 80037e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037ec:	e01b      	b.n	8003826 <_ZN11SerialClass4readEv+0x70>
		}

		int c = (int) rx_buf[rx_tail++];
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037f4:	885b      	ldrh	r3, [r3, #2]
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	b291      	uxth	r1, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003800:	8051      	strh	r1, [r2, #2]
 8003802:	461a      	mov	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4413      	add	r3, r2
 8003808:	f893 3800 	ldrb.w	r3, [r3, #2048]	@ 0x800
 800380c:	60bb      	str	r3, [r7, #8]
		rx_tail &= buf_mask;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003814:	885b      	ldrh	r3, [r3, #2]
 8003816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800381a:	b29a      	uxth	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003822:	805a      	strh	r2, [r3, #2]
		return c;
 8003824:	68bb      	ldr	r3, [r7, #8]
	}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <_ZN11SerialClass5writeEPKhi>:

	inline void write(const uint8_t * const c, const int length)
 8003832:	b580      	push	{r7, lr}
 8003834:	b086      	sub	sp, #24
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
	{
		if (length > BUF_SIZE || length < 1)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003844:	dc35      	bgt.n	80038b2 <_ZN11SerialClass5writeEPKhi+0x80>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	dd32      	ble.n	80038b2 <_ZN11SerialClass5writeEPKhi+0x80>
		{
			return;
		}

		while(!tx_cplt)
 800384c:	bf00      	nop
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	f083 0301 	eor.w	r3, r3, #1
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f6      	bne.n	800384e <_ZN11SerialClass5writeEPKhi+0x1c>
		{

		}

		for (int i = 0; i < length; i++)
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	e00b      	b.n	800387e <_ZN11SerialClass5writeEPKhi+0x4c>
		{
			tx_buf[i] = c[i];
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	4413      	add	r3, r2
 800386c:	7819      	ldrb	r1, [r3, #0]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	4413      	add	r3, r2
 8003874:	460a      	mov	r2, r1
 8003876:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < length; i++)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	3301      	adds	r3, #1
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	429a      	cmp	r2, r3
 8003884:	dbef      	blt.n	8003866 <_ZN11SerialClass5writeEPKhi+0x34>
		}

		if(tx_cplt)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d010      	beq.n	80038b4 <_ZN11SerialClass5writeEPKhi+0x82>
		{
			tx_cplt = false;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	68f9      	ldr	r1, [r7, #12]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	b292      	uxth	r2, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f005 fa86 	bl	8008dbc <HAL_UART_Transmit_DMA>
 80038b0:	e000      	b.n	80038b4 <_ZN11SerialClass5writeEPKhi+0x82>
			return;
 80038b2:	bf00      	nop
		}
	}
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <_ZN11SerialClass16tx_cplt_callbackEv>:

	inline void tx_cplt_callback(void)
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
	}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <_ZN11SerialClass10reset_rbufEv>:

    inline void reset_rbuf(void){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038e6:	6898      	ldr	r0, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038f2:	4619      	mov	r1, r3
 80038f4:	f005 fad2 	bl	8008e9c <HAL_UART_Receive_DMA>
    }
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_UART_TxCpltCallback>:
SerialClass serial(huart2);
//SerialClass serial(huart2);
//SerialClass serial(huart3);

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681c      	ldr	r4, [r3, #0]
 800390c:	4809      	ldr	r0, [pc, #36]	@ (8003934 <HAL_UART_TxCpltCallback+0x34>)
 800390e:	f7ff ff26 	bl	800375e <_ZN11SerialClass10get_handleEv>
 8003912:	4603      	mov	r3, r0
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	429c      	cmp	r4, r3
 8003918:	bf0c      	ite	eq
 800391a:	2301      	moveq	r3, #1
 800391c:	2300      	movne	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_UART_TxCpltCallback+0x2a>
	{
		serial.tx_cplt_callback();
 8003924:	4803      	ldr	r0, [pc, #12]	@ (8003934 <HAL_UART_TxCpltCallback+0x34>)
 8003926:	f7ff ffc8 	bl	80038ba <_ZN11SerialClass16tx_cplt_callbackEv>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	bd90      	pop	{r4, r7, pc}
 8003932:	bf00      	nop
 8003934:	200005fc 	.word	0x200005fc

08003938 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
	serial.reset_rbuf();
 8003940:	4803      	ldr	r0, [pc, #12]	@ (8003950 <HAL_UART_RxCpltCallback+0x18>)
 8003942:	f7ff ffc9 	bl	80038d8 <_ZN11SerialClass10reset_rbufEv>
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	200005fc 	.word	0x200005fc

08003954 <_ZN13STM32HardwareC1Ev>:
#include "SerialClass.h"

class STM32Hardware
{
public:
	STM32Hardware() :
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
			com(&serial)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a04      	ldr	r2, [pc, #16]	@ (8003970 <_ZN13STM32HardwareC1Ev+0x1c>)
 8003960:	601a      	str	r2, [r3, #0]
	{

	}
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	200005fc 	.word	0x200005fc

08003974 <_ZN13STM32Hardware4initEv>:

	void init()
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	{
		com->start_dma();
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fefa 	bl	800377a <_ZN11SerialClass9start_dmaEv>
	}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <_ZN13STM32Hardware4readEv>:

	int read()
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
	{
		return com->read();
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff ff0b 	bl	80037b6 <_ZN11SerialClass4readEv>
 80039a0:	4603      	mov	r3, r0
	}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t* data, int length)
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
	{
		com->write(data, length);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff ff37 	bl	8003832 <_ZN11SerialClass5writeEPKhi>
	}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <_ZN13STM32Hardware4timeEv>:

	unsigned long time()
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 80039d4:	f001 fe84 	bl	80056e0 <HAL_GetTick>
 80039d8:	4603      	mov	r3, r0
	}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
      data("")
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff f818 	bl	8002a24 <_ZN3ros3MsgC1Ev>
 80039f4:	4a05      	ldr	r2, [pc, #20]	@ (8003a0c <_ZN8std_msgs6StringC1Ev+0x28>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a04      	ldr	r2, [pc, #16]	@ (8003a10 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80039fe:	605a      	str	r2, [r3, #4]
    {
    }
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	0800c1dc 	.word	0x0800c1dc
 8003a10:	0800bf78 	.word	0x0800bf78

08003a14 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fc fbee 	bl	8000208 <strlen>
 8003a2c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	4413      	add	r3, r2
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fcce 	bl	80043d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	18d0      	adds	r0, r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	f007 fffb 	bl	800ba4a <memcpy>
      offset += length_data;
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	4413      	add	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
      return offset;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
    }
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b086      	sub	sp, #24
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	441a      	add	r2, r3
 8003a7a:	f107 030c 	add.w	r3, r7, #12
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fcc8 	bl	8004416 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e00b      	b.n	8003aaa <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	441a      	add	r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	6839      	ldr	r1, [r7, #0]
 8003a9e:	440b      	add	r3, r1
 8003aa0:	7812      	ldrb	r2, [r2, #0]
 8003aa2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d3ed      	bcc.n	8003a92 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4413      	add	r3, r2
 8003abc:	3b01      	subs	r3, #1
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	441a      	add	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
     return offset;
 8003ada:	693b      	ldr	r3, [r7, #16]
    }
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	4b03      	ldr	r3, [pc, #12]	@ (8003afc <_ZN8std_msgs6String7getTypeEv+0x18>)
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	0800c018 	.word	0x0800c018

08003b00 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	4b03      	ldr	r3, [pc, #12]	@ (8003b18 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	0800c028 	.word	0x0800c028

08003b1c <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe ff7c 	bl	8002a24 <_ZN3ros3MsgC1Ev>
 8003b2c:	4a08      	ldr	r2, [pc, #32]	@ (8003b50 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	601a      	str	r2, [r3, #0]
      label(""),
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a07      	ldr	r2, [pc, #28]	@ (8003b54 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8003b36:	605a      	str	r2, [r3, #4]
      size(0),
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	609a      	str	r2, [r3, #8]
      stride(0)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	60da      	str	r2, [r3, #12]
    {
    }
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	0800c1c4 	.word	0x0800c1c4
 8003b54:	0800bf78 	.word	0x0800bf78

08003b58 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fc fb4c 	bl	8000208 <strlen>
 8003b70:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	4413      	add	r3, r2
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fc2c 	bl	80043d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3304      	adds	r3, #4
 8003b84:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	18d0      	adds	r0, r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	4619      	mov	r1, r3
 8003b94:	f007 ff59 	bl	800ba4a <memcpy>
      offset += length_label;
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6899      	ldr	r1, [r3, #8]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	4413      	add	r3, r2
 8003baa:	b2ca      	uxtb	r2, r1
 8003bac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	0a19      	lsrs	r1, r3, #8
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	4413      	add	r3, r2
 8003bbc:	b2ca      	uxtb	r2, r1
 8003bbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	0c19      	lsrs	r1, r3, #16
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3302      	adds	r3, #2
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	4413      	add	r3, r2
 8003bce:	b2ca      	uxtb	r2, r1
 8003bd0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	0e19      	lsrs	r1, r3, #24
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3303      	adds	r3, #3
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	4413      	add	r3, r2
 8003be0:	b2ca      	uxtb	r2, r1
 8003be2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3304      	adds	r3, #4
 8003be8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68d9      	ldr	r1, [r3, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	b2ca      	uxtb	r2, r1
 8003bf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	0a19      	lsrs	r1, r3, #8
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3301      	adds	r3, #1
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	4413      	add	r3, r2
 8003c06:	b2ca      	uxtb	r2, r1
 8003c08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	0c19      	lsrs	r1, r3, #16
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3302      	adds	r3, #2
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	4413      	add	r3, r2
 8003c18:	b2ca      	uxtb	r2, r1
 8003c1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	0e19      	lsrs	r1, r3, #24
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3303      	adds	r3, #3
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	4413      	add	r3, r2
 8003c2a:	b2ca      	uxtb	r2, r1
 8003c2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3304      	adds	r3, #4
 8003c32:	60fb      	str	r3, [r7, #12]
      return offset;
 8003c34:	68fb      	ldr	r3, [r7, #12]
    }
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	441a      	add	r2, r3
 8003c52:	f107 030c 	add.w	r3, r7, #12
 8003c56:	4611      	mov	r1, r2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fbdc 	bl	8004416 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	3304      	adds	r3, #4
 8003c62:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	e00b      	b.n	8003c82 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	441a      	add	r2, r3
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	6839      	ldr	r1, [r7, #0]
 8003c76:	440b      	add	r3, r1
 8003c78:	7812      	ldrb	r2, [r2, #0]
 8003c7a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d3ed      	bcc.n	8003c6a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	3b01      	subs	r3, #1
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	4413      	add	r3, r2
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	441a      	add	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	6839      	ldr	r1, [r7, #0]
 8003cca:	440b      	add	r3, r1
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	021b      	lsls	r3, r3, #8
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	3302      	adds	r3, #2
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	440b      	add	r3, r1
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	041b      	lsls	r3, r3, #16
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	3303      	adds	r3, #3
 8003cf4:	6839      	ldr	r1, [r7, #0]
 8003cf6:	440b      	add	r3, r1
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	061b      	lsls	r3, r3, #24
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	3304      	adds	r3, #4
 8003d06:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	6839      	ldr	r1, [r7, #0]
 8003d20:	440b      	add	r3, r1
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	021b      	lsls	r3, r3, #8
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	3302      	adds	r3, #2
 8003d34:	6839      	ldr	r1, [r7, #0]
 8003d36:	440b      	add	r3, r1
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	041b      	lsls	r3, r3, #16
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	3303      	adds	r3, #3
 8003d4a:	6839      	ldr	r1, [r7, #0]
 8003d4c:	440b      	add	r3, r1
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	061b      	lsls	r3, r3, #24
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	613b      	str	r3, [r7, #16]
     return offset;
 8003d5e:	693b      	ldr	r3, [r7, #16]
    }
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	4b03      	ldr	r3, [pc, #12]	@ (8003d80 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	0800c04c 	.word	0x0800c04c

08003d84 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	4b03      	ldr	r3, [pc, #12]	@ (8003d9c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8003d8e:	4618      	mov	r0, r3
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	0800c06c 	.word	0x0800c06c

08003da0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fe fe3a 	bl	8002a24 <_ZN3ros3MsgC1Ev>
 8003db0:	4a0a      	ldr	r2, [pc, #40]	@ (8003ddc <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3308      	adds	r3, #8
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff feab 	bl	8003b1c <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	619a      	str	r2, [r3, #24]
      data_offset(0)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	61da      	str	r2, [r3, #28]
    {
    }
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	0800c1ac 	.word	0x0800c1ac

08003de0 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6859      	ldr	r1, [r3, #4]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	4413      	add	r3, r2
 8003df8:	b2ca      	uxtb	r2, r1
 8003dfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	0a19      	lsrs	r1, r3, #8
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	3301      	adds	r3, #1
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	4413      	add	r3, r2
 8003e0a:	b2ca      	uxtb	r2, r1
 8003e0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	0c19      	lsrs	r1, r3, #16
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3302      	adds	r3, #2
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	b2ca      	uxtb	r2, r1
 8003e1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	0e19      	lsrs	r1, r3, #24
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3303      	adds	r3, #3
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	b2ca      	uxtb	r2, r1
 8003e30:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3304      	adds	r3, #4
 8003e36:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	e017      	b.n	8003e6e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	18d0      	adds	r0, r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699a      	ldr	r2, [r3, #24]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	4413      	add	r3, r2
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	6839      	ldr	r1, [r7, #0]
 8003e5a:	440a      	add	r2, r1
 8003e5c:	4611      	mov	r1, r2
 8003e5e:	4798      	blx	r3
 8003e60:	4602      	mov	r2, r0
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d3e2      	bcc.n	8003e3e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69d9      	ldr	r1, [r3, #28]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	4413      	add	r3, r2
 8003e82:	b2ca      	uxtb	r2, r1
 8003e84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	0a19      	lsrs	r1, r3, #8
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	4413      	add	r3, r2
 8003e94:	b2ca      	uxtb	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	0c19      	lsrs	r1, r3, #16
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	b2ca      	uxtb	r2, r1
 8003ea8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	0e19      	lsrs	r1, r3, #24
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3303      	adds	r3, #3
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	b2ca      	uxtb	r2, r1
 8003eba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	60fb      	str	r3, [r7, #12]
      return offset;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
    }
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	4413      	add	r3, r2
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	4413      	add	r3, r2
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	021b      	lsls	r3, r3, #8
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	3302      	adds	r3, #2
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	4413      	add	r3, r2
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	041b      	lsls	r3, r3, #16
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	3303      	adds	r3, #3
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	4413      	add	r3, r2
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	061b      	lsls	r3, r3, #24
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d90a      	bls.n	8003f40 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	4619      	mov	r1, r3
 8003f34:	4610      	mov	r0, r2
 8003f36:	f007 fadf 	bl	800b4f8 <realloc>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8003f46:	2300      	movs	r3, #0
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	e01a      	b.n	8003f82 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f103 0008 	add.w	r0, r3, #8
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	4413      	add	r3, r2
 8003f58:	4619      	mov	r1, r3
 8003f5a:	f7ff fe70 	bl	8003c3e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	4413      	add	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699a      	ldr	r2, [r3, #24]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	18d0      	adds	r0, r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3308      	adds	r3, #8
 8003f74:	2210      	movs	r2, #16
 8003f76:	4619      	mov	r1, r3
 8003f78:	f007 fd67 	bl	800ba4a <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d3df      	bcc.n	8003f4c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	4413      	add	r3, r2
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69da      	ldr	r2, [r3, #28]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	6839      	ldr	r1, [r7, #0]
 8003fa4:	440b      	add	r3, r1
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69da      	ldr	r2, [r3, #28]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	3302      	adds	r3, #2
 8003fb8:	6839      	ldr	r1, [r7, #0]
 8003fba:	440b      	add	r3, r1
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	041b      	lsls	r3, r3, #16
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	3303      	adds	r3, #3
 8003fce:	6839      	ldr	r1, [r7, #0]
 8003fd0:	440b      	add	r3, r1
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	061b      	lsls	r3, r3, #24
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	617b      	str	r3, [r7, #20]
     return offset;
 8003fe2:	697b      	ldr	r3, [r7, #20]
    }
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	4b03      	ldr	r3, [pc, #12]	@ (8004004 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	0800c090 	.word	0x0800c090

08004008 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	4b03      	ldr	r3, [pc, #12]	@ (8004020 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	0800c0ac 	.word	0x0800c0ac

08004024 <_ZN8std_msgs15Int16MultiArrayC1Ev>:
      uint32_t data_length;
      typedef int16_t _data_type;
      _data_type st_data;
      _data_type * data;

    Int16MultiArray():
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4618      	mov	r0, r3
 8004030:	f7fe fcf8 	bl	8002a24 <_ZN3ros3MsgC1Ev>
 8004034:	4a0a      	ldr	r2, [pc, #40]	@ (8004060 <_ZN8std_msgs15Int16MultiArrayC1Ev+0x3c>)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	601a      	str	r2, [r3, #0]
      layout(),
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3304      	adds	r3, #4
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff feae 	bl	8003da0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	625a      	str	r2, [r3, #36]	@ 0x24
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
    }
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	0800c194 	.word	0x0800c194

08004064 <_ZNK8std_msgs15Int16MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	1d18      	adds	r0, r3, #4
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	4413      	add	r3, r2
 800407c:	4619      	mov	r1, r3
 800407e:	f7ff feaf 	bl	8003de0 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8004082:	4602      	mov	r2, r0
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	4413      	add	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	4413      	add	r3, r2
 8004094:	b2ca      	uxtb	r2, r1
 8004096:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	0a19      	lsrs	r1, r3, #8
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	3301      	adds	r3, #1
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	4413      	add	r3, r2
 80040a6:	b2ca      	uxtb	r2, r1
 80040a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	0c19      	lsrs	r1, r3, #16
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	3302      	adds	r3, #2
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	4413      	add	r3, r2
 80040b8:	b2ca      	uxtb	r2, r1
 80040ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	0e19      	lsrs	r1, r3, #24
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	3303      	adds	r3, #3
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	4413      	add	r3, r2
 80040ca:	b2ca      	uxtb	r2, r1
 80040cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	3304      	adds	r3, #4
 80040d2:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	e01c      	b.n	8004114 <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0xb0>
      union {
        int16_t real;
        uint16_t base;
      } u_datai;
      u_datai.real = this->data[i];
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	4413      	add	r3, r2
 80040e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040e8:	81bb      	strh	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 80040ea:	89b9      	ldrh	r1, [r7, #12]
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	4413      	add	r3, r2
 80040f2:	b2ca      	uxtb	r2, r1
 80040f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 80040f6:	89bb      	ldrh	r3, [r7, #12]
 80040f8:	0a1b      	lsrs	r3, r3, #8
 80040fa:	b299      	uxth	r1, r3
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	3301      	adds	r3, #1
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	4413      	add	r3, r2
 8004104:	b2ca      	uxtb	r2, r1
 8004106:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	3302      	adds	r3, #2
 800410c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	3301      	adds	r3, #1
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	429a      	cmp	r2, r3
 800411c:	d3dd      	bcc.n	80040da <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0x76>
      }
      return offset;
 800411e:	697b      	ldr	r3, [r7, #20]
    }
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <_ZN8std_msgs15Int16MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	1d18      	adds	r0, r3, #4
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	4413      	add	r3, r2
 8004140:	4619      	mov	r1, r3
 8004142:	f7ff fec3 	bl	8003ecc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8004146:	4602      	mov	r2, r0
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	4413      	add	r3, r2
 800414c:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	4413      	add	r3, r2
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	3301      	adds	r3, #1
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	4413      	add	r3, r2
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	3302      	adds	r3, #2
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	4413      	add	r3, r2
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	041b      	lsls	r3, r3, #16
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	3303      	adds	r3, #3
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	4413      	add	r3, r2
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	061b      	lsls	r3, r3, #24
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	3304      	adds	r3, #4
 8004192:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	429a      	cmp	r2, r3
 800419c:	d90a      	bls.n	80041b4 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x8c>
        this->data = (int16_t*)realloc(this->data, data_lengthT * sizeof(int16_t));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f007 f9a5 	bl	800b4f8 <realloc>
 80041ae:	4602      	mov	r2, r0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      data_length = data_lengthT;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	625a      	str	r2, [r3, #36]	@ 0x24
      for( uint32_t i = 0; i < data_length; i++){
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	e02a      	b.n	8004216 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0xee>
      union {
        int16_t real;
        uint16_t base;
      } u_st_data;
      u_st_data.base = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80041c4:	893b      	ldrh	r3, [r7, #8]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	6839      	ldr	r1, [r7, #0]
 80041ca:	440a      	add	r2, r1
 80041cc:	7812      	ldrb	r2, [r2, #0]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80041d4:	893b      	ldrh	r3, [r7, #8]
 80041d6:	b21a      	sxth	r2, r3
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	3301      	adds	r3, #1
 80041dc:	6839      	ldr	r1, [r7, #0]
 80041de:	440b      	add	r3, r1
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	b21b      	sxth	r3, r3
 80041e6:	4313      	orrs	r3, r2
 80041e8:	b21b      	sxth	r3, r3
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	813b      	strh	r3, [r7, #8]
      this->st_data = u_st_data.real;
 80041ee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      offset += sizeof(this->st_data);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	3302      	adds	r3, #2
 80041fa:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int16_t));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4413      	add	r3, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	3228      	adds	r2, #40	@ 0x28
 800420a:	8812      	ldrh	r2, [r2, #0]
 800420c:	b292      	uxth	r2, r2
 800420e:	801a      	strh	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	3301      	adds	r3, #1
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	429a      	cmp	r2, r3
 800421e:	d3cf      	bcc.n	80041c0 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8004220:	697b      	ldr	r3, [r7, #20]
    }
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <_ZN8std_msgs15Int16MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int16MultiArray"; };
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	4b03      	ldr	r3, [pc, #12]	@ (8004244 <_ZN8std_msgs15Int16MultiArray7getTypeEv+0x18>)
 8004236:	4618      	mov	r0, r3
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	0800c0d0 	.word	0x0800c0d0

08004248 <_ZN8std_msgs15Int16MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "d9338d7f523fcb692fae9d0a0e9f067c"; };
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	4b03      	ldr	r3, [pc, #12]	@ (8004260 <_ZN8std_msgs15Int16MultiArray6getMD5Ev+0x18>)
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	0800c0ec 	.word	0x0800c0ec

08004264 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	4a04      	ldr	r2, [pc, #16]	@ (8004280 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	0800c1f4 	.word	0x0800c1f4

08004284 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff ffe8 	bl	8004264 <_ZN3ros15NodeHandleBase_C1Ev>
 8004294:	4a33      	ldr	r2, [pc, #204]	@ (8004364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3304      	adds	r3, #4
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff fb58 	bl	8003954 <_ZN13STM32HardwareC1Ev>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	609a      	str	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	60da      	str	r2, [r3, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	611a      	str	r2, [r3, #16]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	615a      	str	r2, [r3, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3318      	adds	r3, #24
 80042c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042c4:	2100      	movs	r1, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f007 fb44 	bl	800b954 <memset>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80042d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042d6:	2100      	movs	r1, #0
 80042d8:	4618      	mov	r0, r3
 80042da:	f007 fb3b 	bl	800b954 <memset>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 80042e4:	2264      	movs	r2, #100	@ 0x64
 80042e6:	2100      	movs	r1, #0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f007 fb33 	bl	800b954 <memset>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 80042f4:	2264      	movs	r2, #100	@ 0x64
 80042f6:	2100      	movs	r1, #0
 80042f8:	4618      	mov	r0, r3
 80042fa:	f007 fb2b 	bl	800b954 <memset>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe fed9 	bl	800310c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4618      	mov	r0, r3
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	0800c180 	.word	0x0800c180

08004368 <setup>:
//extern char color_buffer[]='';
extern int16_t buffer[5];

ros::Publisher encoder("encoder", &Encoder_data);
ros::Publisher color_sensor("color", &color_data);
void setup(void){
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
	nh.initNode();
 800436c:	4806      	ldr	r0, [pc, #24]	@ (8004388 <setup+0x20>)
 800436e:	f000 f878 	bl	8004462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(encoder);
 8004372:	4906      	ldr	r1, [pc, #24]	@ (800438c <setup+0x24>)
 8004374:	4804      	ldr	r0, [pc, #16]	@ (8004388 <setup+0x20>)
 8004376:	f000 f891 	bl	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(color_sensor);
 800437a:	4905      	ldr	r1, [pc, #20]	@ (8004390 <setup+0x28>)
 800437c:	4802      	ldr	r0, [pc, #8]	@ (8004388 <setup+0x20>)
 800437e:	f000 f88d 	bl	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8004382:	bf00      	nop
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20001608 	.word	0x20001608
 800438c:	20001b70 	.word	0x20001b70
 8004390:	20001b84 	.word	0x20001b84

08004394 <loop>:

void loop(void){
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
//		color_data.data= color_buffer;
	    Encoder_data.data_length =5;
 8004398:	4b09      	ldr	r3, [pc, #36]	@ (80043c0 <loop+0x2c>)
 800439a:	2205      	movs	r2, #5
 800439c:	625a      	str	r2, [r3, #36]	@ 0x24
		Encoder_data.data= buffer;
 800439e:	4b08      	ldr	r3, [pc, #32]	@ (80043c0 <loop+0x2c>)
 80043a0:	4a08      	ldr	r2, [pc, #32]	@ (80043c4 <loop+0x30>)
 80043a2:	62da      	str	r2, [r3, #44]	@ 0x2c
		encoder.publish(&Encoder_data);
 80043a4:	4906      	ldr	r1, [pc, #24]	@ (80043c0 <loop+0x2c>)
 80043a6:	4808      	ldr	r0, [pc, #32]	@ (80043c8 <loop+0x34>)
 80043a8:	f7ff f993 	bl	80036d2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		color_sensor.publish(&color_data);
 80043ac:	4907      	ldr	r1, [pc, #28]	@ (80043cc <loop+0x38>)
 80043ae:	4808      	ldr	r0, [pc, #32]	@ (80043d0 <loop+0x3c>)
 80043b0:	f7ff f98f 	bl	80036d2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 80043b4:	4807      	ldr	r0, [pc, #28]	@ (80043d4 <loop+0x40>)
 80043b6:	f000 f89f 	bl	80044f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20001b38 	.word	0x20001b38
 80043c4:	20000524 	.word	0x20000524
 80043c8:	20001b70 	.word	0x20001b70
 80043cc:	20001b68 	.word	0x20001b68
 80043d0:	20001b84 	.word	0x20001b84
 80043d4:	20001608 	.word	0x20001608

080043d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	e00c      	b.n	8004402 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	fa22 f103 	lsr.w	r1, r2, r3
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4413      	add	r3, r2
 80043f8:	b2ca      	uxtb	r2, r1
 80043fa:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3301      	adds	r3, #1
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b03      	cmp	r3, #3
 8004406:	d9ef      	bls.n	80043e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004416:	b480      	push	{r7}
 8004418:	b085      	sub	sp, #20
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	e010      	b.n	800444e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6839      	ldr	r1, [r7, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	440a      	add	r2, r1
 8004436:	7812      	ldrb	r2, [r2, #0]
 8004438:	4611      	mov	r1, r2
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	00d2      	lsls	r2, r2, #3
 800443e:	fa01 f202 	lsl.w	r2, r1, r2
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	3301      	adds	r3, #1
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d9eb      	bls.n	800442c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8004454:	bf00      	nop
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3304      	adds	r3, #4
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fa80 	bl	8003974 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    bytes_ = 0;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
    index_ = 0;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
    topic_ = 0;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
  };
 8004494:	bf00      	nop
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	e01b      	b.n	80044e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 80044b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d110      	bne.n	80044de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 80044c4:	6839      	ldr	r1, [r7, #0]
 80044c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	60da      	str	r2, [r3, #12]
        return true;
 80044da:	2301      	movs	r3, #1
 80044dc:	e006      	b.n	80044ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3301      	adds	r3, #1
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b18      	cmp	r3, #24
 80044e8:	dde0      	ble.n	80044ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 80044ea:	2300      	movs	r3, #0
  }
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3304      	adds	r3, #4
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fa61 	bl	80039cc <_ZN13STM32Hardware4timeEv>
 800450a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800451a:	4293      	cmp	r3, r2
 800451c:	d903      	bls.n	8004526 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d009      	beq.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	429a      	cmp	r2, r3
 800453a:	d903      	bls.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
      if (spin_timeout_ > 0)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d013      	beq.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3304      	adds	r3, #4
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fa3b 	bl	80039cc <_ZN13STM32Hardware4timeEv>
 8004556:	4602      	mov	r2, r0
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1ad2      	subs	r2, r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	429a      	cmp	r2, r3
 8004562:	bf8c      	ite	hi
 8004564:	2301      	movhi	r3, #1
 8004566:	2300      	movls	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 800456e:	f06f 0301 	mvn.w	r3, #1
 8004572:	e190      	b.n	8004896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3304      	adds	r3, #4
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff fa08 	bl	800398e <_ZN13STM32Hardware4readEv>
 800457e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f2c0 8170 	blt.w	8004868 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	@ 0x4f0
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	441a      	add	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800459e:	2b07      	cmp	r3, #7
 80045a0:	d11d      	bne.n	80045de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80045a8:	1c59      	adds	r1, r3, #1
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	f8c2 14ec 	str.w	r1, [r2, #1260]	@ 0x4ec
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	b2d1      	uxtb	r1, r2
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	4413      	add	r3, r2
 80045b8:	460a      	mov	r2, r1
 80045ba:	761a      	strb	r2, [r3, #24]
        bytes_--;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 80045c2:	1e5a      	subs	r2, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1b7      	bne.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2208      	movs	r2, #8
 80045d8:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 80045dc:	e7b2      	b.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d128      	bne.n	800463a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2bff      	cmp	r3, #255	@ 0xff
 80045ec:	d10d      	bne.n	800460a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f103 0214 	add.w	r2, r3, #20
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
 8004608:	e79c      	b.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3304      	adds	r3, #4
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff f9dc 	bl	80039cc <_ZN13STM32Hardware4timeEv>
 8004614:	4602      	mov	r2, r0
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800461e:	4293      	cmp	r3, r2
 8004620:	bf8c      	ite	hi
 8004622:	2301      	movhi	r3, #1
 8004624:	2300      	movls	r3, #0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d08b      	beq.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
          return SPIN_TIMEOUT;
 8004634:	f06f 0301 	mvn.w	r3, #1
 8004638:	e12d      	b.n	8004896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004640:	2b01      	cmp	r3, #1
 8004642:	d118      	bne.n	8004676 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2bfe      	cmp	r3, #254	@ 0xfe
 8004648:	d107      	bne.n	800465a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8004658:	e774      	b.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
          if (configured_ == false)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004668:	2b00      	cmp	r3, #0
 800466a:	f47f af6b 	bne.w	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f915 	bl	800489e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004674:	e766      	b.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800467c:	2b02      	cmp	r3, #2
 800467e:	d113      	bne.n	80046a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        index_ = 0;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
        mode_++;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 80046a6:	e74d      	b.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d110      	bne.n	80046d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	@ 0x4e4
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	021b      	lsls	r3, r3, #8
 80046bc:	441a      	add	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
        mode_++;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 80046d2:	e737      	b.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d116      	bne.n	800470c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80046e4:	425a      	negs	r2, r3
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	bf58      	it	pl
 80046ec:	4253      	negpl	r3, r2
 80046ee:	2bff      	cmp	r3, #255	@ 0xff
 80046f0:	d107      	bne.n	8004702 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 8004700:	e720      	b.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 800470a:	e71b      	b.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004712:	2b05      	cmp	r3, #5
 8004714:	d10f      	bne.n	8004736 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
        mode_++;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 8004734:	e706      	b.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800473c:	2b06      	cmp	r3, #6
 800473e:	d117      	bne.n	8004770 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	441a      	add	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
        mode_ = MODE_MESSAGE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2207      	movs	r2, #7
 8004756:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        if (bytes_ == 0)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 8004760:	2b00      	cmp	r3, #0
 8004762:	f47f aeef 	bne.w	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2208      	movs	r2, #8
 800476a:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
 800476e:	e6e9      	b.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8004776:	2b08      	cmp	r3, #8
 8004778:	f47f aee4 	bne.w	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
        if ((checksum_ % 256) == 255)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 800478a:	425a      	negs	r2, r3
 800478c:	b2db      	uxtb	r3, r3
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	bf58      	it	pl
 8004792:	4253      	negpl	r3, r2
 8004794:	2bff      	cmp	r3, #255	@ 0xff
 8004796:	f47f aed5 	bne.w	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d110      	bne.n	80047c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f87a 	bl	800489e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f894 	bl	80048d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
            last_sync_receive_time = c_time;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
            return SPIN_ERR;
 80047c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047c4:	e067      	b.n	8004896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80047cc:	2b0a      	cmp	r3, #10
 80047ce:	d106      	bne.n	80047de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3318      	adds	r3, #24
 80047d4:	4619      	mov	r1, r3
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f95e 	bl	8004a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80047dc:	e6b2      	b.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 80047e4:	2b06      	cmp	r3, #6
 80047e6:	d10d      	bne.n	8004804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f503 62a1 	add.w	r2, r3, #1288	@ 0x508
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3318      	adds	r3, #24
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f7fe fdc8 	bl	800338a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
 8004802:	e69f      	b.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800480a:	2b0b      	cmp	r3, #11
 800480c:	d104      	bne.n	8004818 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
 8004816:	e695      	b.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800481e:	3b64      	subs	r3, #100	@ 0x64
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f43f ae89 	beq.w	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 8004838:	3b64      	subs	r3, #100	@ 0x64
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	6858      	ldr	r0, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800484c:	3b64      	subs	r3, #100	@ 0x64
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	3218      	adds	r2, #24
 8004862:	4611      	mov	r1, r2
 8004864:	4798      	blx	r3
    while (true)
 8004866:	e66d      	b.n	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004868:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00f      	beq.n	8004894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8004882:	4293      	cmp	r3, r2
 8004884:	d906      	bls.n	8004894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f809 	bl	800489e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
    return SPIN_OK;
 8004894:	2300      	movs	r3, #0
  }
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800489e:	b580      	push	{r7, lr}
 80048a0:	b086      	sub	sp, #24
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80048a6:	f107 030c 	add.w	r3, r7, #12
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fe f8ca 	bl	8002a44 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f107 020c 	add.w	r2, r7, #12
 80048ba:	210a      	movs	r1, #10
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	4798      	blx	r3
    rt_time = hardware_.time();
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff f881 	bl	80039cc <_ZN13STM32Hardware4timeEv>
 80048ca:	4602      	mov	r2, r0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	609a      	str	r2, [r3, #8]
  }
 80048d0:	bf00      	nop
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80048d8:	b590      	push	{r4, r7, lr}
 80048da:	b08b      	sub	sp, #44	@ 0x2c
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80048e0:	f107 030c 	add.w	r3, r7, #12
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fe f99d 	bl	8002c24 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80048ea:	2300      	movs	r3, #0
 80048ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ee:	e05a      	b.n	80049a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f4:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 80048f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d04f      	beq.n	80049a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004904:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	b29b      	uxth	r3, r3
 8004910:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004916:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 800491a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004926:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 800492a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800492e:	6859      	ldr	r1, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004934:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3308      	adds	r3, #8
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4608      	mov	r0, r1
 8004946:	4798      	blx	r3
 8004948:	4603      	mov	r3, r0
 800494a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004950:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004958:	6859      	ldr	r1, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800495e:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 8004962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	330c      	adds	r3, #12
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4608      	mov	r0, r1
 8004970:	4798      	blx	r3
 8004972:	4603      	mov	r3, r0
 8004974:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004976:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800497a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681c      	ldr	r4, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004986:	f502 7283 	add.w	r2, r2, #262	@ 0x106
 800498a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800498e:	4618      	mov	r0, r3
 8004990:	f7fe feb3 	bl	80036fa <_ZN3ros9Publisher15getEndpointTypeEv>
 8004994:	4601      	mov	r1, r0
 8004996:	f107 030c 	add.w	r3, r7, #12
 800499a:	461a      	mov	r2, r3
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	3301      	adds	r3, #1
 80049a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	2b18      	cmp	r3, #24
 80049aa:	dda1      	ble.n	80048f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80049ac:	2300      	movs	r3, #0
 80049ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80049b0:	e067      	b.n	8004a82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b6:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d05b      	beq.n	8004a7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ee:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3308      	adds	r3, #8
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	4798      	blx	r3
 8004a10:	4603      	mov	r3, r0
 8004a12:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	6859      	ldr	r1, [r3, #4]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a26:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4608      	mov	r0, r1
 8004a38:	4798      	blx	r3
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004a3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a42:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681c      	ldr	r4, [r3, #0]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	6859      	ldr	r1, [r3, #4]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	4798      	blx	r3
 8004a70:	4601      	mov	r1, r0
 8004a72:	f107 030c 	add.w	r3, r7, #12
 8004a76:	461a      	mov	r2, r3
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	3301      	adds	r3, #1
 8004a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	2b18      	cmp	r3, #24
 8004a86:	dd94      	ble.n	80049b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  }
 8004a90:	bf00      	nop
 8004a92:	372c      	adds	r7, #44	@ 0x2c
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd90      	pop	{r4, r7, pc}

08004a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004aa2:	f107 0308 	add.w	r3, r7, #8
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fd ffcc 	bl	8002a44 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3304      	adds	r3, #4
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fe ff8b 	bl	80039cc <_ZN13STM32Hardware4timeEv>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004ac0:	f107 0308 	add.w	r3, r7, #8
 8004ac4:	6839      	ldr	r1, [r7, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fe f82c 	bl	8002b24 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	4914      	ldr	r1, [pc, #80]	@ (8004b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8004ad2:	fba1 1303 	umull	r1, r3, r1, r3
 8004ad6:	099b      	lsrs	r3, r3, #6
 8004ad8:	4413      	add	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004adc:	6939      	ldr	r1, [r7, #16]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4b10      	ldr	r3, [pc, #64]	@ (8004b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8004ae2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ae6:	099b      	lsrs	r3, r3, #6
 8004ae8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004aec:	fb00 f303 	mul.w	r3, r0, r3
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	4a0d      	ldr	r2, [pc, #52]	@ (8004b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004af4:	fb02 f303 	mul.w	r3, r2, r3
 8004af8:	440b      	add	r3, r1
 8004afa:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004afc:	f107 0308 	add.w	r3, r7, #8
 8004b00:	3304      	adds	r3, #4
 8004b02:	4619      	mov	r1, r3
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f8a5 	bl	8004c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fe ff5c 	bl	80039cc <_ZN13STM32Hardware4timeEv>
 8004b14:	4602      	mov	r2, r0
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc
  }
 8004b1c:	bf00      	nop
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	10624dd3 	.word	0x10624dd3
 8004b28:	000f4240 	.word	0x000f4240

08004b2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b63      	cmp	r3, #99	@ 0x63
 8004b3c:	dd09      	ble.n	8004b52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004b44:	f083 0301 	eor.w	r3, r3, #1
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e079      	b.n	8004c46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	f502 7206 	add.w	r2, r2, #536	@ 0x218
 8004b5e:	3207      	adds	r2, #7
 8004b60:	4611      	mov	r1, r2
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4798      	blx	r3
 8004b66:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	22ff      	movs	r2, #255	@ 0xff
 8004b6c:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
    message_out[1] = PROTOCOL_VER;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	22fe      	movs	r2, #254	@ 0xfe
 8004b74:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	0a1b      	lsrs	r3, r3, #8
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 221a 	ldrb.w	r2, [r3, #538]	@ 0x21a
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 8004b9e:	4413      	add	r3, r2
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	b21b      	sxth	r3, r3
 8004bba:	121b      	asrs	r3, r3, #8
 8004bbc:	b21b      	sxth	r3, r3
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e

    /* calculate checksum */
    int chk = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004bca:	2305      	movs	r3, #5
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	e00c      	b.n	8004bea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	3301      	adds	r3, #1
 8004be8:	61bb      	str	r3, [r7, #24]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	3306      	adds	r3, #6
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	dded      	ble.n	8004bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	3307      	adds	r3, #7
 8004bf8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	425a      	negs	r2, r3
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	bf58      	it	pl
 8004c04:	4253      	negpl	r3, r2
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	1c59      	adds	r1, r3, #1
 8004c0c:	6179      	str	r1, [r7, #20]
 8004c0e:	43d2      	mvns	r2, r2
 8004c10:	b2d1      	uxtb	r1, r2
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4413      	add	r3, r2
 8004c16:	460a      	mov	r2, r1
 8004c18:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

    if (l <= OUTPUT_SIZE)
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c22:	dc0a      	bgt.n	8004c3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1d18      	adds	r0, r3, #4
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4619      	mov	r1, r3
 8004c32:	f7fe feba 	bl	80039aa <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	e005      	b.n	8004c46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004c3a:	4905      	ldr	r1, [pc, #20]	@ (8004c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f847 	bl	8004cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004c42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	0800c110 	.word	0x0800c110

08004c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3304      	adds	r3, #4
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe feb2 	bl	80039cc <_ZN13STM32Hardware4timeEv>
 8004c68:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4914      	ldr	r1, [pc, #80]	@ (8004cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8004c72:	fba1 1303 	umull	r1, r3, r1, r3
 8004c76:	099b      	lsrs	r3, r3, #6
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	1e5a      	subs	r2, r3, #1
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	6859      	ldr	r1, [r3, #4]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8004c88:	fba3 0302 	umull	r0, r3, r3, r2
 8004c8c:	099b      	lsrs	r3, r3, #6
 8004c8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c92:	fb00 f303 	mul.w	r3, r0, r3
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	4a0b      	ldr	r2, [pc, #44]	@ (8004cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004c9a:	fb02 f303 	mul.w	r3, r2, r3
 8004c9e:	1aca      	subs	r2, r1, r3
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8004ca2:	4413      	add	r3, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f103 020c 	add.w	r2, r3, #12
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3310      	adds	r3, #16
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	f000 fc57 	bl	8005568 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	10624dd3 	.word	0x10624dd3
 8004cc8:	000f4240 	.word	0x000f4240
 8004ccc:	3b9aca00 	.word	0x3b9aca00

08004cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	2103      	movs	r1, #3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f804 	bl	8004cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004cfa:	f107 0314 	add.w	r3, r7, #20
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fe f954 	bl	8002fac <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004d04:	7afb      	ldrb	r3, [r7, #11]
 8004d06:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f107 0214 	add.w	r2, r7, #20
 8004d16:	2107      	movs	r1, #7
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	4798      	blx	r3
  }
 8004d1c:	bf00      	nop
 8004d1e:	3720      	adds	r7, #32
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <_Z41__static_initialization_and_destruction_0ii>:
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d11d      	bne.n	8004d70 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d118      	bne.n	8004d70 <_Z41__static_initialization_and_destruction_0ii+0x4c>
SerialClass serial(huart2);
 8004d3e:	490e      	ldr	r1, [pc, #56]	@ (8004d78 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004d40:	480e      	ldr	r0, [pc, #56]	@ (8004d7c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004d42:	f7fe fce6 	bl	8003712 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>
ros::NodeHandle nh;
 8004d46:	480e      	ldr	r0, [pc, #56]	@ (8004d80 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004d48:	f7ff fa9c 	bl	8004284 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int16MultiArray Encoder_data;
 8004d4c:	480d      	ldr	r0, [pc, #52]	@ (8004d84 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004d4e:	f7ff f969 	bl	8004024 <_ZN8std_msgs15Int16MultiArrayC1Ev>
std_msgs::String color_data;
 8004d52:	480d      	ldr	r0, [pc, #52]	@ (8004d88 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004d54:	f7fe fe46 	bl	80039e4 <_ZN8std_msgs6StringC1Ev>
ros::Publisher encoder("encoder", &Encoder_data);
 8004d58:	2300      	movs	r3, #0
 8004d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d84 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004d5c:	490b      	ldr	r1, [pc, #44]	@ (8004d8c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004d5e:	480c      	ldr	r0, [pc, #48]	@ (8004d90 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004d60:	f7fe fca0 	bl	80036a4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher color_sensor("color", &color_data);
 8004d64:	2300      	movs	r3, #0
 8004d66:	4a08      	ldr	r2, [pc, #32]	@ (8004d88 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004d68:	490a      	ldr	r1, [pc, #40]	@ (8004d94 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004d6a:	480b      	ldr	r0, [pc, #44]	@ (8004d98 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004d6c:	f7fe fc9a 	bl	80036a4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	200002e8 	.word	0x200002e8
 8004d7c:	200005fc 	.word	0x200005fc
 8004d80:	20001608 	.word	0x20001608
 8004d84:	20001b38 	.word	0x20001b38
 8004d88:	20001b68 	.word	0x20001b68
 8004d8c:	0800c14c 	.word	0x0800c14c
 8004d90:	20001b70 	.word	0x20001b70
 8004d94:	0800c154 	.word	0x0800c154
 8004d98:	20001b84 	.word	0x20001b84

08004d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
    return configured_;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
  };
 8004daa:	4618      	mov	r0, r3
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <_GLOBAL__sub_I_serial>:
 8004db6:	b580      	push	{r7, lr}
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004dbe:	2001      	movs	r0, #1
 8004dc0:	f7ff ffb0 	bl	8004d24 <_Z41__static_initialization_and_destruction_0ii>
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dce:	2300      	movs	r3, #0
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	4b10      	ldr	r3, [pc, #64]	@ (8004e14 <HAL_MspInit+0x4c>)
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8004e14 <HAL_MspInit+0x4c>)
 8004dd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004dde:	4b0d      	ldr	r3, [pc, #52]	@ (8004e14 <HAL_MspInit+0x4c>)
 8004de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004de6:	607b      	str	r3, [r7, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dea:	2300      	movs	r3, #0
 8004dec:	603b      	str	r3, [r7, #0]
 8004dee:	4b09      	ldr	r3, [pc, #36]	@ (8004e14 <HAL_MspInit+0x4c>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df2:	4a08      	ldr	r2, [pc, #32]	@ (8004e14 <HAL_MspInit+0x4c>)
 8004df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dfa:	4b06      	ldr	r3, [pc, #24]	@ (8004e14 <HAL_MspInit+0x4c>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004e06:	2007      	movs	r0, #7
 8004e08:	f000 fd6a 	bl	80058e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e0c:	bf00      	nop
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40023800 	.word	0x40023800

08004e18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08c      	sub	sp, #48	@ 0x30
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e20:	f107 031c 	add.w	r3, r7, #28
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	605a      	str	r2, [r3, #4]
 8004e2a:	609a      	str	r2, [r3, #8]
 8004e2c:	60da      	str	r2, [r3, #12]
 8004e2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a42      	ldr	r2, [pc, #264]	@ (8004f40 <HAL_I2C_MspInit+0x128>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d12d      	bne.n	8004e96 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	4b41      	ldr	r3, [pc, #260]	@ (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e42:	4a40      	ldr	r2, [pc, #256]	@ (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004e44:	f043 0302 	orr.w	r3, r3, #2
 8004e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	61bb      	str	r3, [r7, #24]
 8004e54:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004e56:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e5c:	2312      	movs	r3, #18
 8004e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e64:	2303      	movs	r3, #3
 8004e66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e68:	2304      	movs	r3, #4
 8004e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e6c:	f107 031c 	add.w	r3, r7, #28
 8004e70:	4619      	mov	r1, r3
 8004e72:	4835      	ldr	r0, [pc, #212]	@ (8004f48 <HAL_I2C_MspInit+0x130>)
 8004e74:	f001 f978 	bl	8006168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	4b31      	ldr	r3, [pc, #196]	@ (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e80:	4a30      	ldr	r2, [pc, #192]	@ (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004e82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e86:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e88:	4b2e      	ldr	r3, [pc, #184]	@ (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004e94:	e050      	b.n	8004f38 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f4c <HAL_I2C_MspInit+0x134>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d14b      	bne.n	8004f38 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	613b      	str	r3, [r7, #16]
 8004ea4:	4b27      	ldr	r3, [pc, #156]	@ (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea8:	4a26      	ldr	r2, [pc, #152]	@ (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004eaa:	f043 0304 	orr.w	r3, r3, #4
 8004eae:	6313      	str	r3, [r2, #48]	@ 0x30
 8004eb0:	4b24      	ldr	r3, [pc, #144]	@ (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	4b20      	ldr	r3, [pc, #128]	@ (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ed8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ede:	2312      	movs	r3, #18
 8004ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004eea:	2304      	movs	r3, #4
 8004eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004eee:	f107 031c 	add.w	r3, r7, #28
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4816      	ldr	r0, [pc, #88]	@ (8004f50 <HAL_I2C_MspInit+0x138>)
 8004ef6:	f001 f937 	bl	8006168 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004efa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f00:	2312      	movs	r3, #18
 8004f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f04:	2300      	movs	r3, #0
 8004f06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f10:	f107 031c 	add.w	r3, r7, #28
 8004f14:	4619      	mov	r1, r3
 8004f16:	480f      	ldr	r0, [pc, #60]	@ (8004f54 <HAL_I2C_MspInit+0x13c>)
 8004f18:	f001 f926 	bl	8006168 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	4b08      	ldr	r3, [pc, #32]	@ (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f24:	4a07      	ldr	r2, [pc, #28]	@ (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004f26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f2c:	4b05      	ldr	r3, [pc, #20]	@ (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	68bb      	ldr	r3, [r7, #8]
}
 8004f38:	bf00      	nop
 8004f3a:	3730      	adds	r7, #48	@ 0x30
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40005400 	.word	0x40005400
 8004f44:	40023800 	.word	0x40023800
 8004f48:	40020400 	.word	0x40020400
 8004f4c:	40005c00 	.word	0x40005c00
 8004f50:	40020800 	.word	0x40020800
 8004f54:	40020000 	.word	0x40020000

08004f58 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b090      	sub	sp, #64	@ 0x40
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	605a      	str	r2, [r3, #4]
 8004f6a:	609a      	str	r2, [r3, #8]
 8004f6c:	60da      	str	r2, [r3, #12]
 8004f6e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f78:	d12c      	bne.n	8004fd4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f7e:	4b66      	ldr	r3, [pc, #408]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f82:	4a65      	ldr	r2, [pc, #404]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f8a:	4b63      	ldr	r3, [pc, #396]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f9a:	4b5f      	ldr	r3, [pc, #380]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9e:	4a5e      	ldr	r2, [pc, #376]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004fa0:	f043 0301 	orr.w	r3, r3, #1
 8004fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fa6:	4b5c      	ldr	r3, [pc, #368]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4853      	ldr	r0, [pc, #332]	@ (800511c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004fce:	f001 f8cb 	bl	8006168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004fd2:	e09c      	b.n	800510e <HAL_TIM_Encoder_MspInit+0x1b6>
  else if(htim_encoder->Instance==TIM3)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a51      	ldr	r2, [pc, #324]	@ (8005120 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d12c      	bne.n	8005038 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	623b      	str	r3, [r7, #32]
 8004fe2:	4b4d      	ldr	r3, [pc, #308]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	4a4c      	ldr	r2, [pc, #304]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004fe8:	f043 0302 	orr.w	r3, r3, #2
 8004fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fee:	4b4a      	ldr	r3, [pc, #296]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	623b      	str	r3, [r7, #32]
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61fb      	str	r3, [r7, #28]
 8004ffe:	4b46      	ldr	r3, [pc, #280]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005002:	4a45      	ldr	r2, [pc, #276]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	6313      	str	r3, [r2, #48]	@ 0x30
 800500a:	4b43      	ldr	r3, [pc, #268]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005016:	23c0      	movs	r3, #192	@ 0xc0
 8005018:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800501a:	2302      	movs	r3, #2
 800501c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501e:	2300      	movs	r3, #0
 8005020:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005022:	2300      	movs	r3, #0
 8005024:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005026:	2302      	movs	r3, #2
 8005028:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800502a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800502e:	4619      	mov	r1, r3
 8005030:	483a      	ldr	r0, [pc, #232]	@ (800511c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005032:	f001 f899 	bl	8006168 <HAL_GPIO_Init>
}
 8005036:	e06a      	b.n	800510e <HAL_TIM_Encoder_MspInit+0x1b6>
  else if(htim_encoder->Instance==TIM4)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a39      	ldr	r2, [pc, #228]	@ (8005124 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d12c      	bne.n	800509c <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005042:	2300      	movs	r3, #0
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	4b34      	ldr	r3, [pc, #208]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504a:	4a33      	ldr	r2, [pc, #204]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 800504c:	f043 0304 	orr.w	r3, r3, #4
 8005050:	6413      	str	r3, [r2, #64]	@ 0x40
 8005052:	4b31      	ldr	r3, [pc, #196]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	61bb      	str	r3, [r7, #24]
 800505c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	4b2d      	ldr	r3, [pc, #180]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005066:	4a2c      	ldr	r2, [pc, #176]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005068:	f043 0302 	orr.w	r3, r3, #2
 800506c:	6313      	str	r3, [r2, #48]	@ 0x30
 800506e:	4b2a      	ldr	r3, [pc, #168]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800507a:	23c0      	movs	r3, #192	@ 0xc0
 800507c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800507e:	2302      	movs	r3, #2
 8005080:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005082:	2300      	movs	r3, #0
 8005084:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005086:	2300      	movs	r3, #0
 8005088:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800508a:	2302      	movs	r3, #2
 800508c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800508e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005092:	4619      	mov	r1, r3
 8005094:	4824      	ldr	r0, [pc, #144]	@ (8005128 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8005096:	f001 f867 	bl	8006168 <HAL_GPIO_Init>
}
 800509a:	e038      	b.n	800510e <HAL_TIM_Encoder_MspInit+0x1b6>
  else if(htim_encoder->Instance==TIM8)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a22      	ldr	r2, [pc, #136]	@ (800512c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d133      	bne.n	800510e <HAL_TIM_Encoder_MspInit+0x1b6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80050a6:	2300      	movs	r3, #0
 80050a8:	613b      	str	r3, [r7, #16]
 80050aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80050ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80050b0:	f043 0302 	orr.w	r3, r3, #2
 80050b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80050b6:	4b18      	ldr	r3, [pc, #96]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80050b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	4b14      	ldr	r3, [pc, #80]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ca:	4a13      	ldr	r2, [pc, #76]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80050cc:	f043 0304 	orr.w	r3, r3, #4
 80050d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80050d2:	4b11      	ldr	r3, [pc, #68]	@ (8005118 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050de:	23c0      	movs	r3, #192	@ 0xc0
 80050e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e2:	2302      	movs	r3, #2
 80050e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ea:	2300      	movs	r3, #0
 80050ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80050ee:	2303      	movs	r3, #3
 80050f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80050f6:	4619      	mov	r1, r3
 80050f8:	480d      	ldr	r0, [pc, #52]	@ (8005130 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80050fa:	f001 f835 	bl	8006168 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80050fe:	2200      	movs	r2, #0
 8005100:	2100      	movs	r1, #0
 8005102:	202b      	movs	r0, #43	@ 0x2b
 8005104:	f000 fbf7 	bl	80058f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005108:	202b      	movs	r0, #43	@ 0x2b
 800510a:	f000 fc10 	bl	800592e <HAL_NVIC_EnableIRQ>
}
 800510e:	bf00      	nop
 8005110:	3740      	adds	r7, #64	@ 0x40
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40023800 	.word	0x40023800
 800511c:	40020000 	.word	0x40020000
 8005120:	40000400 	.word	0x40000400
 8005124:	40000800 	.word	0x40000800
 8005128:	40020400 	.word	0x40020400
 800512c:	40010400 	.word	0x40010400
 8005130:	40020800 	.word	0x40020800

08005134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1c      	ldr	r2, [pc, #112]	@ (80051b4 <HAL_TIM_Base_MspInit+0x80>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d116      	bne.n	8005174 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	4b1b      	ldr	r3, [pc, #108]	@ (80051b8 <HAL_TIM_Base_MspInit+0x84>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514e:	4a1a      	ldr	r2, [pc, #104]	@ (80051b8 <HAL_TIM_Base_MspInit+0x84>)
 8005150:	f043 0308 	orr.w	r3, r3, #8
 8005154:	6413      	str	r3, [r2, #64]	@ 0x40
 8005156:	4b18      	ldr	r3, [pc, #96]	@ (80051b8 <HAL_TIM_Base_MspInit+0x84>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005162:	2200      	movs	r2, #0
 8005164:	2100      	movs	r1, #0
 8005166:	2032      	movs	r0, #50	@ 0x32
 8005168:	f000 fbc5 	bl	80058f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800516c:	2032      	movs	r0, #50	@ 0x32
 800516e:	f000 fbde 	bl	800592e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8005172:	e01a      	b.n	80051aa <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM12)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a10      	ldr	r2, [pc, #64]	@ (80051bc <HAL_TIM_Base_MspInit+0x88>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d115      	bne.n	80051aa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800517e:	2300      	movs	r3, #0
 8005180:	60bb      	str	r3, [r7, #8]
 8005182:	4b0d      	ldr	r3, [pc, #52]	@ (80051b8 <HAL_TIM_Base_MspInit+0x84>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005186:	4a0c      	ldr	r2, [pc, #48]	@ (80051b8 <HAL_TIM_Base_MspInit+0x84>)
 8005188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800518c:	6413      	str	r3, [r2, #64]	@ 0x40
 800518e:	4b0a      	ldr	r3, [pc, #40]	@ (80051b8 <HAL_TIM_Base_MspInit+0x84>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005196:	60bb      	str	r3, [r7, #8]
 8005198:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800519a:	2200      	movs	r2, #0
 800519c:	2100      	movs	r1, #0
 800519e:	202b      	movs	r0, #43	@ 0x2b
 80051a0:	f000 fba9 	bl	80058f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80051a4:	202b      	movs	r0, #43	@ 0x2b
 80051a6:	f000 fbc2 	bl	800592e <HAL_NVIC_EnableIRQ>
}
 80051aa:	bf00      	nop
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40023800 	.word	0x40023800
 80051bc:	40001800 	.word	0x40001800

080051c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08a      	sub	sp, #40	@ 0x28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051c8:	f107 0314 	add.w	r3, r7, #20
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	605a      	str	r2, [r3, #4]
 80051d2:	609a      	str	r2, [r3, #8]
 80051d4:	60da      	str	r2, [r3, #12]
 80051d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a4d      	ldr	r2, [pc, #308]	@ (8005314 <HAL_UART_MspInit+0x154>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	f040 8093 	bne.w	800530a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80051e4:	2300      	movs	r3, #0
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005318 <HAL_UART_MspInit+0x158>)
 80051ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ec:	4a4a      	ldr	r2, [pc, #296]	@ (8005318 <HAL_UART_MspInit+0x158>)
 80051ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80051f4:	4b48      	ldr	r3, [pc, #288]	@ (8005318 <HAL_UART_MspInit+0x158>)
 80051f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	4b44      	ldr	r3, [pc, #272]	@ (8005318 <HAL_UART_MspInit+0x158>)
 8005206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005208:	4a43      	ldr	r2, [pc, #268]	@ (8005318 <HAL_UART_MspInit+0x158>)
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005210:	4b41      	ldr	r3, [pc, #260]	@ (8005318 <HAL_UART_MspInit+0x158>)
 8005212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800521c:	230c      	movs	r3, #12
 800521e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005220:	2302      	movs	r3, #2
 8005222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005224:	2300      	movs	r3, #0
 8005226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005228:	2303      	movs	r3, #3
 800522a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800522c:	2307      	movs	r3, #7
 800522e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005230:	f107 0314 	add.w	r3, r7, #20
 8005234:	4619      	mov	r1, r3
 8005236:	4839      	ldr	r0, [pc, #228]	@ (800531c <HAL_UART_MspInit+0x15c>)
 8005238:	f000 ff96 	bl	8006168 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800523c:	4b38      	ldr	r3, [pc, #224]	@ (8005320 <HAL_UART_MspInit+0x160>)
 800523e:	4a39      	ldr	r2, [pc, #228]	@ (8005324 <HAL_UART_MspInit+0x164>)
 8005240:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005242:	4b37      	ldr	r3, [pc, #220]	@ (8005320 <HAL_UART_MspInit+0x160>)
 8005244:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005248:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800524a:	4b35      	ldr	r3, [pc, #212]	@ (8005320 <HAL_UART_MspInit+0x160>)
 800524c:	2200      	movs	r2, #0
 800524e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005250:	4b33      	ldr	r3, [pc, #204]	@ (8005320 <HAL_UART_MspInit+0x160>)
 8005252:	2200      	movs	r2, #0
 8005254:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005256:	4b32      	ldr	r3, [pc, #200]	@ (8005320 <HAL_UART_MspInit+0x160>)
 8005258:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800525c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800525e:	4b30      	ldr	r3, [pc, #192]	@ (8005320 <HAL_UART_MspInit+0x160>)
 8005260:	2200      	movs	r2, #0
 8005262:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005264:	4b2e      	ldr	r3, [pc, #184]	@ (8005320 <HAL_UART_MspInit+0x160>)
 8005266:	2200      	movs	r2, #0
 8005268:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800526a:	4b2d      	ldr	r3, [pc, #180]	@ (8005320 <HAL_UART_MspInit+0x160>)
 800526c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005270:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005272:	4b2b      	ldr	r3, [pc, #172]	@ (8005320 <HAL_UART_MspInit+0x160>)
 8005274:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005278:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800527a:	4b29      	ldr	r3, [pc, #164]	@ (8005320 <HAL_UART_MspInit+0x160>)
 800527c:	2200      	movs	r2, #0
 800527e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005280:	4827      	ldr	r0, [pc, #156]	@ (8005320 <HAL_UART_MspInit+0x160>)
 8005282:	f000 fb6f 	bl	8005964 <HAL_DMA_Init>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800528c:	f7fd fbb2 	bl	80029f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a23      	ldr	r2, [pc, #140]	@ (8005320 <HAL_UART_MspInit+0x160>)
 8005294:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005296:	4a22      	ldr	r2, [pc, #136]	@ (8005320 <HAL_UART_MspInit+0x160>)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800529c:	4b22      	ldr	r3, [pc, #136]	@ (8005328 <HAL_UART_MspInit+0x168>)
 800529e:	4a23      	ldr	r2, [pc, #140]	@ (800532c <HAL_UART_MspInit+0x16c>)
 80052a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80052a2:	4b21      	ldr	r3, [pc, #132]	@ (8005328 <HAL_UART_MspInit+0x168>)
 80052a4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80052a8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80052aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005328 <HAL_UART_MspInit+0x168>)
 80052ac:	2240      	movs	r2, #64	@ 0x40
 80052ae:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005328 <HAL_UART_MspInit+0x168>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80052b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005328 <HAL_UART_MspInit+0x168>)
 80052b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052be:	4b1a      	ldr	r3, [pc, #104]	@ (8005328 <HAL_UART_MspInit+0x168>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052c4:	4b18      	ldr	r3, [pc, #96]	@ (8005328 <HAL_UART_MspInit+0x168>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80052ca:	4b17      	ldr	r3, [pc, #92]	@ (8005328 <HAL_UART_MspInit+0x168>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80052d0:	4b15      	ldr	r3, [pc, #84]	@ (8005328 <HAL_UART_MspInit+0x168>)
 80052d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80052d6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80052d8:	4b13      	ldr	r3, [pc, #76]	@ (8005328 <HAL_UART_MspInit+0x168>)
 80052da:	2200      	movs	r2, #0
 80052dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80052de:	4812      	ldr	r0, [pc, #72]	@ (8005328 <HAL_UART_MspInit+0x168>)
 80052e0:	f000 fb40 	bl	8005964 <HAL_DMA_Init>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80052ea:	f7fd fb83 	bl	80029f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a0d      	ldr	r2, [pc, #52]	@ (8005328 <HAL_UART_MspInit+0x168>)
 80052f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80052f4:	4a0c      	ldr	r2, [pc, #48]	@ (8005328 <HAL_UART_MspInit+0x168>)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80052fa:	2200      	movs	r2, #0
 80052fc:	2100      	movs	r1, #0
 80052fe:	2026      	movs	r0, #38	@ 0x26
 8005300:	f000 faf9 	bl	80058f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005304:	2026      	movs	r0, #38	@ 0x26
 8005306:	f000 fb12 	bl	800592e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800530a:	bf00      	nop
 800530c:	3728      	adds	r7, #40	@ 0x28
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	40004400 	.word	0x40004400
 8005318:	40023800 	.word	0x40023800
 800531c:	40020000 	.word	0x40020000
 8005320:	20000330 	.word	0x20000330
 8005324:	40026088 	.word	0x40026088
 8005328:	20000390 	.word	0x20000390
 800532c:	400260a0 	.word	0x400260a0

08005330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005334:	bf00      	nop
 8005336:	e7fd      	b.n	8005334 <NMI_Handler+0x4>

08005338 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800533c:	bf00      	nop
 800533e:	e7fd      	b.n	800533c <HardFault_Handler+0x4>

08005340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005344:	bf00      	nop
 8005346:	e7fd      	b.n	8005344 <MemManage_Handler+0x4>

08005348 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800534c:	bf00      	nop
 800534e:	e7fd      	b.n	800534c <BusFault_Handler+0x4>

08005350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005354:	bf00      	nop
 8005356:	e7fd      	b.n	8005354 <UsageFault_Handler+0x4>

08005358 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800535c:	bf00      	nop
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005366:	b480      	push	{r7}
 8005368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800536a:	bf00      	nop
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005378:	bf00      	nop
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005386:	f000 f997 	bl	80056b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800538a:	bf00      	nop
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005394:	4802      	ldr	r0, [pc, #8]	@ (80053a0 <DMA1_Stream5_IRQHandler+0x10>)
 8005396:	f000 fc7d 	bl	8005c94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800539a:	bf00      	nop
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000330 	.word	0x20000330

080053a4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80053a8:	4802      	ldr	r0, [pc, #8]	@ (80053b4 <DMA1_Stream6_IRQHandler+0x10>)
 80053aa:	f000 fc73 	bl	8005c94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80053ae:	bf00      	nop
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000390 	.word	0x20000390

080053b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80053bc:	4802      	ldr	r0, [pc, #8]	@ (80053c8 <USART2_IRQHandler+0x10>)
 80053be:	f003 fd93 	bl	8008ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80053c2:	bf00      	nop
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	200002e8 	.word	0x200002e8

080053cc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80053d0:	4803      	ldr	r0, [pc, #12]	@ (80053e0 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80053d2:	f003 f8c7 	bl	8008564 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80053d6:	4803      	ldr	r0, [pc, #12]	@ (80053e4 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80053d8:	f003 f8c4 	bl	8008564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80053dc:	bf00      	nop
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	20000258 	.word	0x20000258
 80053e4:	200002a0 	.word	0x200002a0

080053e8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80053ec:	4802      	ldr	r0, [pc, #8]	@ (80053f8 <TIM5_IRQHandler+0x10>)
 80053ee:	f003 f8b9 	bl	8008564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80053f2:	bf00      	nop
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20000210 	.word	0x20000210

080053fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	e00a      	b.n	8005424 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800540e:	f3af 8000 	nop.w
 8005412:	4601      	mov	r1, r0
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	60ba      	str	r2, [r7, #8]
 800541a:	b2ca      	uxtb	r2, r1
 800541c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	3301      	adds	r3, #1
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	429a      	cmp	r2, r3
 800542a:	dbf0      	blt.n	800540e <_read+0x12>
  }

  return len;
 800542c:	687b      	ldr	r3, [r7, #4]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b086      	sub	sp, #24
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	60b9      	str	r1, [r7, #8]
 8005440:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	e009      	b.n	800545c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	60ba      	str	r2, [r7, #8]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	4618      	mov	r0, r3
 8005452:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	3301      	adds	r3, #1
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	dbf1      	blt.n	8005448 <_write+0x12>
  }
  return len;
 8005464:	687b      	ldr	r3, [r7, #4]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <_close>:

int _close(int file)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005476:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800547a:	4618      	mov	r0, r3
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005496:	605a      	str	r2, [r3, #4]
  return 0;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <_isatty>:

int _isatty(int file)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80054ae:	2301      	movs	r3, #1
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80054e0:	4a14      	ldr	r2, [pc, #80]	@ (8005534 <_sbrk+0x5c>)
 80054e2:	4b15      	ldr	r3, [pc, #84]	@ (8005538 <_sbrk+0x60>)
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80054ec:	4b13      	ldr	r3, [pc, #76]	@ (800553c <_sbrk+0x64>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d102      	bne.n	80054fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80054f4:	4b11      	ldr	r3, [pc, #68]	@ (800553c <_sbrk+0x64>)
 80054f6:	4a12      	ldr	r2, [pc, #72]	@ (8005540 <_sbrk+0x68>)
 80054f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80054fa:	4b10      	ldr	r3, [pc, #64]	@ (800553c <_sbrk+0x64>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4413      	add	r3, r2
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	429a      	cmp	r2, r3
 8005506:	d207      	bcs.n	8005518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005508:	f006 fa72 	bl	800b9f0 <__errno>
 800550c:	4603      	mov	r3, r0
 800550e:	220c      	movs	r2, #12
 8005510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005512:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005516:	e009      	b.n	800552c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005518:	4b08      	ldr	r3, [pc, #32]	@ (800553c <_sbrk+0x64>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800551e:	4b07      	ldr	r3, [pc, #28]	@ (800553c <_sbrk+0x64>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4413      	add	r3, r2
 8005526:	4a05      	ldr	r2, [pc, #20]	@ (800553c <_sbrk+0x64>)
 8005528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800552a:	68fb      	ldr	r3, [r7, #12]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20020000 	.word	0x20020000
 8005538:	00000400 	.word	0x00000400
 800553c:	20001b98 	.word	0x20001b98
 8005540:	20001cf0 	.word	0x20001cf0

08005544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005548:	4b06      	ldr	r3, [pc, #24]	@ (8005564 <SystemInit+0x20>)
 800554a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554e:	4a05      	ldr	r2, [pc, #20]	@ (8005564 <SystemInit+0x20>)
 8005550:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005554:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005558:	bf00      	nop
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	e000ed00 	.word	0xe000ed00

08005568 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	0a5a      	lsrs	r2, r3, #9
 8005578:	490f      	ldr	r1, [pc, #60]	@ (80055b8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800557a:	fba1 1202 	umull	r1, r2, r1, r2
 800557e:	09d2      	lsrs	r2, r2, #7
 8005580:	490e      	ldr	r1, [pc, #56]	@ (80055bc <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8005582:	fb01 f202 	mul.w	r2, r1, r2
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	0a5b      	lsrs	r3, r3, #9
 8005590:	4a09      	ldr	r2, [pc, #36]	@ (80055b8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	09db      	lsrs	r3, r3, #7
 8005598:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	441a      	add	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]
}
 80055ac:	bf00      	nop
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	00044b83 	.word	0x00044b83
 80055bc:	3b9aca00 	.word	0x3b9aca00

080055c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80055c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80055f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80055c4:	f7ff ffbe 	bl	8005544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80055c8:	480c      	ldr	r0, [pc, #48]	@ (80055fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80055ca:	490d      	ldr	r1, [pc, #52]	@ (8005600 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80055cc:	4a0d      	ldr	r2, [pc, #52]	@ (8005604 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80055ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055d0:	e002      	b.n	80055d8 <LoopCopyDataInit>

080055d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055d6:	3304      	adds	r3, #4

080055d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055dc:	d3f9      	bcc.n	80055d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055de:	4a0a      	ldr	r2, [pc, #40]	@ (8005608 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80055e0:	4c0a      	ldr	r4, [pc, #40]	@ (800560c <LoopFillZerobss+0x22>)
  movs r3, #0
 80055e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055e4:	e001      	b.n	80055ea <LoopFillZerobss>

080055e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055e8:	3204      	adds	r2, #4

080055ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055ec:	d3fb      	bcc.n	80055e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80055ee:	f006 fa05 	bl	800b9fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055f2:	f7fb ffe9 	bl	80015c8 <main>
  bx  lr    
 80055f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80055f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80055fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005600:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8005604:	0800c4c4 	.word	0x0800c4c4
  ldr r2, =_sbss
 8005608:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800560c:	20001cec 	.word	0x20001cec

08005610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005610:	e7fe      	b.n	8005610 <ADC_IRQHandler>
	...

08005614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005618:	4b0e      	ldr	r3, [pc, #56]	@ (8005654 <HAL_Init+0x40>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a0d      	ldr	r2, [pc, #52]	@ (8005654 <HAL_Init+0x40>)
 800561e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005622:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005624:	4b0b      	ldr	r3, [pc, #44]	@ (8005654 <HAL_Init+0x40>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a0a      	ldr	r2, [pc, #40]	@ (8005654 <HAL_Init+0x40>)
 800562a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800562e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005630:	4b08      	ldr	r3, [pc, #32]	@ (8005654 <HAL_Init+0x40>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a07      	ldr	r2, [pc, #28]	@ (8005654 <HAL_Init+0x40>)
 8005636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800563a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800563c:	2003      	movs	r0, #3
 800563e:	f000 f94f 	bl	80058e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005642:	2000      	movs	r0, #0
 8005644:	f000 f808 	bl	8005658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005648:	f7ff fbbe 	bl	8004dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40023c00 	.word	0x40023c00

08005658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005660:	4b12      	ldr	r3, [pc, #72]	@ (80056ac <HAL_InitTick+0x54>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	4b12      	ldr	r3, [pc, #72]	@ (80056b0 <HAL_InitTick+0x58>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	4619      	mov	r1, r3
 800566a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800566e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005672:	fbb2 f3f3 	udiv	r3, r2, r3
 8005676:	4618      	mov	r0, r3
 8005678:	f000 f967 	bl	800594a <HAL_SYSTICK_Config>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e00e      	b.n	80056a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b0f      	cmp	r3, #15
 800568a:	d80a      	bhi.n	80056a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800568c:	2200      	movs	r2, #0
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005694:	f000 f92f 	bl	80058f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005698:	4a06      	ldr	r2, [pc, #24]	@ (80056b4 <HAL_InitTick+0x5c>)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	e000      	b.n	80056a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20000004 	.word	0x20000004
 80056b0:	2000000c 	.word	0x2000000c
 80056b4:	20000008 	.word	0x20000008

080056b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056bc:	4b06      	ldr	r3, [pc, #24]	@ (80056d8 <HAL_IncTick+0x20>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	4b06      	ldr	r3, [pc, #24]	@ (80056dc <HAL_IncTick+0x24>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4413      	add	r3, r2
 80056c8:	4a04      	ldr	r2, [pc, #16]	@ (80056dc <HAL_IncTick+0x24>)
 80056ca:	6013      	str	r3, [r2, #0]
}
 80056cc:	bf00      	nop
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	2000000c 	.word	0x2000000c
 80056dc:	20001b9c 	.word	0x20001b9c

080056e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  return uwTick;
 80056e4:	4b03      	ldr	r3, [pc, #12]	@ (80056f4 <HAL_GetTick+0x14>)
 80056e6:	681b      	ldr	r3, [r3, #0]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	20001b9c 	.word	0x20001b9c

080056f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005700:	f7ff ffee 	bl	80056e0 <HAL_GetTick>
 8005704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005710:	d005      	beq.n	800571e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005712:	4b0a      	ldr	r3, [pc, #40]	@ (800573c <HAL_Delay+0x44>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800571e:	bf00      	nop
 8005720:	f7ff ffde 	bl	80056e0 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	429a      	cmp	r2, r3
 800572e:	d8f7      	bhi.n	8005720 <HAL_Delay+0x28>
  {
  }
}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	2000000c 	.word	0x2000000c

08005740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005750:	4b0c      	ldr	r3, [pc, #48]	@ (8005784 <__NVIC_SetPriorityGrouping+0x44>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800575c:	4013      	ands	r3, r2
 800575e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800576c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005772:	4a04      	ldr	r2, [pc, #16]	@ (8005784 <__NVIC_SetPriorityGrouping+0x44>)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	60d3      	str	r3, [r2, #12]
}
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	e000ed00 	.word	0xe000ed00

08005788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800578c:	4b04      	ldr	r3, [pc, #16]	@ (80057a0 <__NVIC_GetPriorityGrouping+0x18>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	0a1b      	lsrs	r3, r3, #8
 8005792:	f003 0307 	and.w	r3, r3, #7
}
 8005796:	4618      	mov	r0, r3
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	e000ed00 	.word	0xe000ed00

080057a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	db0b      	blt.n	80057ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	f003 021f 	and.w	r2, r3, #31
 80057bc:	4907      	ldr	r1, [pc, #28]	@ (80057dc <__NVIC_EnableIRQ+0x38>)
 80057be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	2001      	movs	r0, #1
 80057c6:	fa00 f202 	lsl.w	r2, r0, r2
 80057ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	e000e100 	.word	0xe000e100

080057e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	6039      	str	r1, [r7, #0]
 80057ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	db0a      	blt.n	800580a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	490c      	ldr	r1, [pc, #48]	@ (800582c <__NVIC_SetPriority+0x4c>)
 80057fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057fe:	0112      	lsls	r2, r2, #4
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	440b      	add	r3, r1
 8005804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005808:	e00a      	b.n	8005820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	b2da      	uxtb	r2, r3
 800580e:	4908      	ldr	r1, [pc, #32]	@ (8005830 <__NVIC_SetPriority+0x50>)
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	3b04      	subs	r3, #4
 8005818:	0112      	lsls	r2, r2, #4
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	440b      	add	r3, r1
 800581e:	761a      	strb	r2, [r3, #24]
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	e000e100 	.word	0xe000e100
 8005830:	e000ed00 	.word	0xe000ed00

08005834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005834:	b480      	push	{r7}
 8005836:	b089      	sub	sp, #36	@ 0x24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f1c3 0307 	rsb	r3, r3, #7
 800584e:	2b04      	cmp	r3, #4
 8005850:	bf28      	it	cs
 8005852:	2304      	movcs	r3, #4
 8005854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	3304      	adds	r3, #4
 800585a:	2b06      	cmp	r3, #6
 800585c:	d902      	bls.n	8005864 <NVIC_EncodePriority+0x30>
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3b03      	subs	r3, #3
 8005862:	e000      	b.n	8005866 <NVIC_EncodePriority+0x32>
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005868:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	43da      	mvns	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	401a      	ands	r2, r3
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800587c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	fa01 f303 	lsl.w	r3, r1, r3
 8005886:	43d9      	mvns	r1, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800588c:	4313      	orrs	r3, r2
         );
}
 800588e:	4618      	mov	r0, r3
 8005890:	3724      	adds	r7, #36	@ 0x24
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
	...

0800589c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3b01      	subs	r3, #1
 80058a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058ac:	d301      	bcc.n	80058b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058ae:	2301      	movs	r3, #1
 80058b0:	e00f      	b.n	80058d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058b2:	4a0a      	ldr	r2, [pc, #40]	@ (80058dc <SysTick_Config+0x40>)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058ba:	210f      	movs	r1, #15
 80058bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058c0:	f7ff ff8e 	bl	80057e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058c4:	4b05      	ldr	r3, [pc, #20]	@ (80058dc <SysTick_Config+0x40>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058ca:	4b04      	ldr	r3, [pc, #16]	@ (80058dc <SysTick_Config+0x40>)
 80058cc:	2207      	movs	r2, #7
 80058ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	e000e010 	.word	0xe000e010

080058e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff ff29 	bl	8005740 <__NVIC_SetPriorityGrouping>
}
 80058ee:	bf00      	nop
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b086      	sub	sp, #24
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	4603      	mov	r3, r0
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	607a      	str	r2, [r7, #4]
 8005902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005908:	f7ff ff3e 	bl	8005788 <__NVIC_GetPriorityGrouping>
 800590c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	6978      	ldr	r0, [r7, #20]
 8005914:	f7ff ff8e 	bl	8005834 <NVIC_EncodePriority>
 8005918:	4602      	mov	r2, r0
 800591a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800591e:	4611      	mov	r1, r2
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff ff5d 	bl	80057e0 <__NVIC_SetPriority>
}
 8005926:	bf00      	nop
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b082      	sub	sp, #8
 8005932:	af00      	add	r7, sp, #0
 8005934:	4603      	mov	r3, r0
 8005936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff ff31 	bl	80057a4 <__NVIC_EnableIRQ>
}
 8005942:	bf00      	nop
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff ffa2 	bl	800589c <SysTick_Config>
 8005958:	4603      	mov	r3, r0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005970:	f7ff feb6 	bl	80056e0 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e099      	b.n	8005ab4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0201 	bic.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059a0:	e00f      	b.n	80059c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059a2:	f7ff fe9d 	bl	80056e0 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b05      	cmp	r3, #5
 80059ae:	d908      	bls.n	80059c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2203      	movs	r2, #3
 80059ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e078      	b.n	8005ab4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e8      	bne.n	80059a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4b38      	ldr	r3, [pc, #224]	@ (8005abc <HAL_DMA_Init+0x158>)
 80059dc:	4013      	ands	r3, r2
 80059de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d107      	bne.n	8005a2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a24:	4313      	orrs	r3, r2
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f023 0307 	bic.w	r3, r3, #7
 8005a42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d117      	bne.n	8005a86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00e      	beq.n	8005a86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fb01 	bl	8006070 <DMA_CheckFifoParam>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d008      	beq.n	8005a86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2240      	movs	r2, #64	@ 0x40
 8005a78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005a82:	2301      	movs	r3, #1
 8005a84:	e016      	b.n	8005ab4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fab8 	bl	8006004 <DMA_CalcBaseAndBitshift>
 8005a94:	4603      	mov	r3, r0
 8005a96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a9c:	223f      	movs	r2, #63	@ 0x3f
 8005a9e:	409a      	lsls	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	f010803f 	.word	0xf010803f

08005ac0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_DMA_Start_IT+0x26>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e040      	b.n	8005b68 <HAL_DMA_Start_IT+0xa8>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d12f      	bne.n	8005b5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2202      	movs	r2, #2
 8005afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 fa4a 	bl	8005fa8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b18:	223f      	movs	r2, #63	@ 0x3f
 8005b1a:	409a      	lsls	r2, r3
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0216 	orr.w	r2, r2, #22
 8005b2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d007      	beq.n	8005b48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0208 	orr.w	r2, r2, #8
 8005b46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e005      	b.n	8005b66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b62:	2302      	movs	r3, #2
 8005b64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005b7e:	f7ff fdaf 	bl	80056e0 <HAL_GetTick>
 8005b82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d008      	beq.n	8005ba2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2280      	movs	r2, #128	@ 0x80
 8005b94:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e052      	b.n	8005c48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0216 	bic.w	r2, r2, #22
 8005bb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695a      	ldr	r2, [r3, #20]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d103      	bne.n	8005bd2 <HAL_DMA_Abort+0x62>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d007      	beq.n	8005be2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0208 	bic.w	r2, r2, #8
 8005be0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bf2:	e013      	b.n	8005c1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bf4:	f7ff fd74 	bl	80056e0 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b05      	cmp	r3, #5
 8005c00:	d90c      	bls.n	8005c1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2220      	movs	r2, #32
 8005c06:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2203      	movs	r2, #3
 8005c0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e015      	b.n	8005c48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e4      	bne.n	8005bf4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c2e:	223f      	movs	r2, #63	@ 0x3f
 8005c30:	409a      	lsls	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d004      	beq.n	8005c6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2280      	movs	r2, #128	@ 0x80
 8005c68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e00c      	b.n	8005c88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2205      	movs	r2, #5
 8005c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0201 	bic.w	r2, r2, #1
 8005c84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ca0:	4b8e      	ldr	r3, [pc, #568]	@ (8005edc <HAL_DMA_IRQHandler+0x248>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a8e      	ldr	r2, [pc, #568]	@ (8005ee0 <HAL_DMA_IRQHandler+0x24c>)
 8005ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8005caa:	0a9b      	lsrs	r3, r3, #10
 8005cac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cbe:	2208      	movs	r2, #8
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d01a      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d013      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0204 	bic.w	r2, r2, #4
 8005ce6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cec:	2208      	movs	r2, #8
 8005cee:	409a      	lsls	r2, r3
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf8:	f043 0201 	orr.w	r2, r3, #1
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d04:	2201      	movs	r2, #1
 8005d06:	409a      	lsls	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d012      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d22:	2201      	movs	r2, #1
 8005d24:	409a      	lsls	r2, r3
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2e:	f043 0202 	orr.w	r2, r3, #2
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d3a:	2204      	movs	r2, #4
 8005d3c:	409a      	lsls	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4013      	ands	r3, r2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d012      	beq.n	8005d6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00b      	beq.n	8005d6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d58:	2204      	movs	r2, #4
 8005d5a:	409a      	lsls	r2, r3
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d64:	f043 0204 	orr.w	r2, r3, #4
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d70:	2210      	movs	r2, #16
 8005d72:	409a      	lsls	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4013      	ands	r3, r2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d043      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d03c      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d8e:	2210      	movs	r2, #16
 8005d90:	409a      	lsls	r2, r3
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d018      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d108      	bne.n	8005dc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d024      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	4798      	blx	r3
 8005dc2:	e01f      	b.n	8005e04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01b      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	4798      	blx	r3
 8005dd4:	e016      	b.n	8005e04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d107      	bne.n	8005df4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0208 	bic.w	r2, r2, #8
 8005df2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e08:	2220      	movs	r2, #32
 8005e0a:	409a      	lsls	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 808f 	beq.w	8005f34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 8087 	beq.w	8005f34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	409a      	lsls	r2, r3
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b05      	cmp	r3, #5
 8005e3c:	d136      	bne.n	8005eac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0216 	bic.w	r2, r2, #22
 8005e4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695a      	ldr	r2, [r3, #20]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d103      	bne.n	8005e6e <HAL_DMA_IRQHandler+0x1da>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0208 	bic.w	r2, r2, #8
 8005e7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e82:	223f      	movs	r2, #63	@ 0x3f
 8005e84:	409a      	lsls	r2, r3
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d07e      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	4798      	blx	r3
        }
        return;
 8005eaa:	e079      	b.n	8005fa0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d01d      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10d      	bne.n	8005ee4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d031      	beq.n	8005f34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	4798      	blx	r3
 8005ed8:	e02c      	b.n	8005f34 <HAL_DMA_IRQHandler+0x2a0>
 8005eda:	bf00      	nop
 8005edc:	20000004 	.word	0x20000004
 8005ee0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d023      	beq.n	8005f34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	4798      	blx	r3
 8005ef4:	e01e      	b.n	8005f34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10f      	bne.n	8005f24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0210 	bic.w	r2, r2, #16
 8005f12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d032      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d022      	beq.n	8005f8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2205      	movs	r2, #5
 8005f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 0201 	bic.w	r2, r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60bb      	str	r3, [r7, #8]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d307      	bcc.n	8005f7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1f2      	bne.n	8005f60 <HAL_DMA_IRQHandler+0x2cc>
 8005f7a:	e000      	b.n	8005f7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005f7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4798      	blx	r3
 8005f9e:	e000      	b.n	8005fa2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005fa0:	bf00      	nop
    }
  }
}
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005fc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2b40      	cmp	r3, #64	@ 0x40
 8005fd4:	d108      	bne.n	8005fe8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005fe6:	e007      	b.n	8005ff8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	60da      	str	r2, [r3, #12]
}
 8005ff8:	bf00      	nop
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	3b10      	subs	r3, #16
 8006014:	4a14      	ldr	r2, [pc, #80]	@ (8006068 <DMA_CalcBaseAndBitshift+0x64>)
 8006016:	fba2 2303 	umull	r2, r3, r2, r3
 800601a:	091b      	lsrs	r3, r3, #4
 800601c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800601e:	4a13      	ldr	r2, [pc, #76]	@ (800606c <DMA_CalcBaseAndBitshift+0x68>)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b03      	cmp	r3, #3
 8006030:	d909      	bls.n	8006046 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800603a:	f023 0303 	bic.w	r3, r3, #3
 800603e:	1d1a      	adds	r2, r3, #4
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	659a      	str	r2, [r3, #88]	@ 0x58
 8006044:	e007      	b.n	8006056 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800604e:	f023 0303 	bic.w	r3, r3, #3
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	aaaaaaab 	.word	0xaaaaaaab
 800606c:	0800c290 	.word	0x0800c290

08006070 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006080:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d11f      	bne.n	80060ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b03      	cmp	r3, #3
 800608e:	d856      	bhi.n	800613e <DMA_CheckFifoParam+0xce>
 8006090:	a201      	add	r2, pc, #4	@ (adr r2, 8006098 <DMA_CheckFifoParam+0x28>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	080060a9 	.word	0x080060a9
 800609c:	080060bb 	.word	0x080060bb
 80060a0:	080060a9 	.word	0x080060a9
 80060a4:	0800613f 	.word	0x0800613f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d046      	beq.n	8006142 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060b8:	e043      	b.n	8006142 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80060c2:	d140      	bne.n	8006146 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060c8:	e03d      	b.n	8006146 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060d2:	d121      	bne.n	8006118 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d837      	bhi.n	800614a <DMA_CheckFifoParam+0xda>
 80060da:	a201      	add	r2, pc, #4	@ (adr r2, 80060e0 <DMA_CheckFifoParam+0x70>)
 80060dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e0:	080060f1 	.word	0x080060f1
 80060e4:	080060f7 	.word	0x080060f7
 80060e8:	080060f1 	.word	0x080060f1
 80060ec:	08006109 	.word	0x08006109
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	73fb      	strb	r3, [r7, #15]
      break;
 80060f4:	e030      	b.n	8006158 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d025      	beq.n	800614e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006106:	e022      	b.n	800614e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006110:	d11f      	bne.n	8006152 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006116:	e01c      	b.n	8006152 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d903      	bls.n	8006126 <DMA_CheckFifoParam+0xb6>
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b03      	cmp	r3, #3
 8006122:	d003      	beq.n	800612c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006124:	e018      	b.n	8006158 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	73fb      	strb	r3, [r7, #15]
      break;
 800612a:	e015      	b.n	8006158 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006130:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00e      	beq.n	8006156 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	73fb      	strb	r3, [r7, #15]
      break;
 800613c:	e00b      	b.n	8006156 <DMA_CheckFifoParam+0xe6>
      break;
 800613e:	bf00      	nop
 8006140:	e00a      	b.n	8006158 <DMA_CheckFifoParam+0xe8>
      break;
 8006142:	bf00      	nop
 8006144:	e008      	b.n	8006158 <DMA_CheckFifoParam+0xe8>
      break;
 8006146:	bf00      	nop
 8006148:	e006      	b.n	8006158 <DMA_CheckFifoParam+0xe8>
      break;
 800614a:	bf00      	nop
 800614c:	e004      	b.n	8006158 <DMA_CheckFifoParam+0xe8>
      break;
 800614e:	bf00      	nop
 8006150:	e002      	b.n	8006158 <DMA_CheckFifoParam+0xe8>
      break;   
 8006152:	bf00      	nop
 8006154:	e000      	b.n	8006158 <DMA_CheckFifoParam+0xe8>
      break;
 8006156:	bf00      	nop
    }
  } 
  
  return status; 
 8006158:	7bfb      	ldrb	r3, [r7, #15]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop

08006168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006168:	b480      	push	{r7}
 800616a:	b089      	sub	sp, #36	@ 0x24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006172:	2300      	movs	r3, #0
 8006174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006176:	2300      	movs	r3, #0
 8006178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800617a:	2300      	movs	r3, #0
 800617c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800617e:	2300      	movs	r3, #0
 8006180:	61fb      	str	r3, [r7, #28]
 8006182:	e165      	b.n	8006450 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006184:	2201      	movs	r2, #1
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	4013      	ands	r3, r2
 8006196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	429a      	cmp	r2, r3
 800619e:	f040 8154 	bne.w	800644a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d005      	beq.n	80061ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d130      	bne.n	800621c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	2203      	movs	r2, #3
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	43db      	mvns	r3, r3
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	4013      	ands	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	fa02 f303 	lsl.w	r3, r2, r3
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061f0:	2201      	movs	r2, #1
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	43db      	mvns	r3, r3
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	4013      	ands	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	091b      	lsrs	r3, r3, #4
 8006206:	f003 0201 	and.w	r2, r3, #1
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	4313      	orrs	r3, r2
 8006214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	2b03      	cmp	r3, #3
 8006226:	d017      	beq.n	8006258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	2203      	movs	r2, #3
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	43db      	mvns	r3, r3
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	4013      	ands	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	4313      	orrs	r3, r2
 8006250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f003 0303 	and.w	r3, r3, #3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d123      	bne.n	80062ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	08da      	lsrs	r2, r3, #3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3208      	adds	r2, #8
 800626c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	220f      	movs	r2, #15
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	43db      	mvns	r3, r3
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	4013      	ands	r3, r2
 8006286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	691a      	ldr	r2, [r3, #16]
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	4313      	orrs	r3, r2
 800629c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	08da      	lsrs	r2, r3, #3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3208      	adds	r2, #8
 80062a6:	69b9      	ldr	r1, [r7, #24]
 80062a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	2203      	movs	r2, #3
 80062b8:	fa02 f303 	lsl.w	r3, r2, r3
 80062bc:	43db      	mvns	r3, r3
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	4013      	ands	r3, r2
 80062c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f003 0203 	and.w	r2, r3, #3
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	005b      	lsls	r3, r3, #1
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 80ae 	beq.w	800644a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	4b5d      	ldr	r3, [pc, #372]	@ (8006468 <HAL_GPIO_Init+0x300>)
 80062f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f6:	4a5c      	ldr	r2, [pc, #368]	@ (8006468 <HAL_GPIO_Init+0x300>)
 80062f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80062fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80062fe:	4b5a      	ldr	r3, [pc, #360]	@ (8006468 <HAL_GPIO_Init+0x300>)
 8006300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800630a:	4a58      	ldr	r2, [pc, #352]	@ (800646c <HAL_GPIO_Init+0x304>)
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	089b      	lsrs	r3, r3, #2
 8006310:	3302      	adds	r3, #2
 8006312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	220f      	movs	r2, #15
 8006322:	fa02 f303 	lsl.w	r3, r2, r3
 8006326:	43db      	mvns	r3, r3
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	4013      	ands	r3, r2
 800632c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a4f      	ldr	r2, [pc, #316]	@ (8006470 <HAL_GPIO_Init+0x308>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d025      	beq.n	8006382 <HAL_GPIO_Init+0x21a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a4e      	ldr	r2, [pc, #312]	@ (8006474 <HAL_GPIO_Init+0x30c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d01f      	beq.n	800637e <HAL_GPIO_Init+0x216>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a4d      	ldr	r2, [pc, #308]	@ (8006478 <HAL_GPIO_Init+0x310>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d019      	beq.n	800637a <HAL_GPIO_Init+0x212>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a4c      	ldr	r2, [pc, #304]	@ (800647c <HAL_GPIO_Init+0x314>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d013      	beq.n	8006376 <HAL_GPIO_Init+0x20e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a4b      	ldr	r2, [pc, #300]	@ (8006480 <HAL_GPIO_Init+0x318>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00d      	beq.n	8006372 <HAL_GPIO_Init+0x20a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a4a      	ldr	r2, [pc, #296]	@ (8006484 <HAL_GPIO_Init+0x31c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d007      	beq.n	800636e <HAL_GPIO_Init+0x206>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a49      	ldr	r2, [pc, #292]	@ (8006488 <HAL_GPIO_Init+0x320>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d101      	bne.n	800636a <HAL_GPIO_Init+0x202>
 8006366:	2306      	movs	r3, #6
 8006368:	e00c      	b.n	8006384 <HAL_GPIO_Init+0x21c>
 800636a:	2307      	movs	r3, #7
 800636c:	e00a      	b.n	8006384 <HAL_GPIO_Init+0x21c>
 800636e:	2305      	movs	r3, #5
 8006370:	e008      	b.n	8006384 <HAL_GPIO_Init+0x21c>
 8006372:	2304      	movs	r3, #4
 8006374:	e006      	b.n	8006384 <HAL_GPIO_Init+0x21c>
 8006376:	2303      	movs	r3, #3
 8006378:	e004      	b.n	8006384 <HAL_GPIO_Init+0x21c>
 800637a:	2302      	movs	r3, #2
 800637c:	e002      	b.n	8006384 <HAL_GPIO_Init+0x21c>
 800637e:	2301      	movs	r3, #1
 8006380:	e000      	b.n	8006384 <HAL_GPIO_Init+0x21c>
 8006382:	2300      	movs	r3, #0
 8006384:	69fa      	ldr	r2, [r7, #28]
 8006386:	f002 0203 	and.w	r2, r2, #3
 800638a:	0092      	lsls	r2, r2, #2
 800638c:	4093      	lsls	r3, r2
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	4313      	orrs	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006394:	4935      	ldr	r1, [pc, #212]	@ (800646c <HAL_GPIO_Init+0x304>)
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	089b      	lsrs	r3, r3, #2
 800639a:	3302      	adds	r3, #2
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80063a2:	4b3a      	ldr	r3, [pc, #232]	@ (800648c <HAL_GPIO_Init+0x324>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	43db      	mvns	r3, r3
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	4013      	ands	r3, r2
 80063b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80063c6:	4a31      	ldr	r2, [pc, #196]	@ (800648c <HAL_GPIO_Init+0x324>)
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063cc:	4b2f      	ldr	r3, [pc, #188]	@ (800648c <HAL_GPIO_Init+0x324>)
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	43db      	mvns	r3, r3
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	4013      	ands	r3, r2
 80063da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063f0:	4a26      	ldr	r2, [pc, #152]	@ (800648c <HAL_GPIO_Init+0x324>)
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80063f6:	4b25      	ldr	r3, [pc, #148]	@ (800648c <HAL_GPIO_Init+0x324>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	43db      	mvns	r3, r3
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	4013      	ands	r3, r2
 8006404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800641a:	4a1c      	ldr	r2, [pc, #112]	@ (800648c <HAL_GPIO_Init+0x324>)
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006420:	4b1a      	ldr	r3, [pc, #104]	@ (800648c <HAL_GPIO_Init+0x324>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	43db      	mvns	r3, r3
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	4013      	ands	r3, r2
 800642e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006444:	4a11      	ldr	r2, [pc, #68]	@ (800648c <HAL_GPIO_Init+0x324>)
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	3301      	adds	r3, #1
 800644e:	61fb      	str	r3, [r7, #28]
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	2b0f      	cmp	r3, #15
 8006454:	f67f ae96 	bls.w	8006184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006458:	bf00      	nop
 800645a:	bf00      	nop
 800645c:	3724      	adds	r7, #36	@ 0x24
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40023800 	.word	0x40023800
 800646c:	40013800 	.word	0x40013800
 8006470:	40020000 	.word	0x40020000
 8006474:	40020400 	.word	0x40020400
 8006478:	40020800 	.word	0x40020800
 800647c:	40020c00 	.word	0x40020c00
 8006480:	40021000 	.word	0x40021000
 8006484:	40021400 	.word	0x40021400
 8006488:	40021800 	.word	0x40021800
 800648c:	40013c00 	.word	0x40013c00

08006490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	807b      	strh	r3, [r7, #2]
 800649c:	4613      	mov	r3, r2
 800649e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064a0:	787b      	ldrb	r3, [r7, #1]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064a6:	887a      	ldrh	r2, [r7, #2]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80064ac:	e003      	b.n	80064b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80064ae:	887b      	ldrh	r3, [r7, #2]
 80064b0:	041a      	lsls	r2, r3, #16
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	619a      	str	r2, [r3, #24]
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
	...

080064c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e12b      	b.n	800672e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fe fc94 	bl	8004e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2224      	movs	r2, #36	@ 0x24
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0201 	bic.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006516:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006526:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006528:	f001 f932 	bl	8007790 <HAL_RCC_GetPCLK1Freq>
 800652c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	4a81      	ldr	r2, [pc, #516]	@ (8006738 <HAL_I2C_Init+0x274>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d807      	bhi.n	8006548 <HAL_I2C_Init+0x84>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4a80      	ldr	r2, [pc, #512]	@ (800673c <HAL_I2C_Init+0x278>)
 800653c:	4293      	cmp	r3, r2
 800653e:	bf94      	ite	ls
 8006540:	2301      	movls	r3, #1
 8006542:	2300      	movhi	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	e006      	b.n	8006556 <HAL_I2C_Init+0x92>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4a7d      	ldr	r2, [pc, #500]	@ (8006740 <HAL_I2C_Init+0x27c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	bf94      	ite	ls
 8006550:	2301      	movls	r3, #1
 8006552:	2300      	movhi	r3, #0
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e0e7      	b.n	800672e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4a78      	ldr	r2, [pc, #480]	@ (8006744 <HAL_I2C_Init+0x280>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	0c9b      	lsrs	r3, r3, #18
 8006568:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	430a      	orrs	r2, r1
 800657c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	4a6a      	ldr	r2, [pc, #424]	@ (8006738 <HAL_I2C_Init+0x274>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d802      	bhi.n	8006598 <HAL_I2C_Init+0xd4>
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	3301      	adds	r3, #1
 8006596:	e009      	b.n	80065ac <HAL_I2C_Init+0xe8>
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800659e:	fb02 f303 	mul.w	r3, r2, r3
 80065a2:	4a69      	ldr	r2, [pc, #420]	@ (8006748 <HAL_I2C_Init+0x284>)
 80065a4:	fba2 2303 	umull	r2, r3, r2, r3
 80065a8:	099b      	lsrs	r3, r3, #6
 80065aa:	3301      	adds	r3, #1
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	430b      	orrs	r3, r1
 80065b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80065be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	495c      	ldr	r1, [pc, #368]	@ (8006738 <HAL_I2C_Init+0x274>)
 80065c8:	428b      	cmp	r3, r1
 80065ca:	d819      	bhi.n	8006600 <HAL_I2C_Init+0x13c>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	1e59      	subs	r1, r3, #1
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80065da:	1c59      	adds	r1, r3, #1
 80065dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80065e0:	400b      	ands	r3, r1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <HAL_I2C_Init+0x138>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1e59      	subs	r1, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80065f4:	3301      	adds	r3, #1
 80065f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065fa:	e051      	b.n	80066a0 <HAL_I2C_Init+0x1dc>
 80065fc:	2304      	movs	r3, #4
 80065fe:	e04f      	b.n	80066a0 <HAL_I2C_Init+0x1dc>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d111      	bne.n	800662c <HAL_I2C_Init+0x168>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	1e58      	subs	r0, r3, #1
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6859      	ldr	r1, [r3, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	440b      	add	r3, r1
 8006616:	fbb0 f3f3 	udiv	r3, r0, r3
 800661a:	3301      	adds	r3, #1
 800661c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006620:	2b00      	cmp	r3, #0
 8006622:	bf0c      	ite	eq
 8006624:	2301      	moveq	r3, #1
 8006626:	2300      	movne	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	e012      	b.n	8006652 <HAL_I2C_Init+0x18e>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	1e58      	subs	r0, r3, #1
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6859      	ldr	r1, [r3, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	440b      	add	r3, r1
 800663a:	0099      	lsls	r1, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006642:	3301      	adds	r3, #1
 8006644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006648:	2b00      	cmp	r3, #0
 800664a:	bf0c      	ite	eq
 800664c:	2301      	moveq	r3, #1
 800664e:	2300      	movne	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <HAL_I2C_Init+0x196>
 8006656:	2301      	movs	r3, #1
 8006658:	e022      	b.n	80066a0 <HAL_I2C_Init+0x1dc>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10e      	bne.n	8006680 <HAL_I2C_Init+0x1bc>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	1e58      	subs	r0, r3, #1
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6859      	ldr	r1, [r3, #4]
 800666a:	460b      	mov	r3, r1
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	440b      	add	r3, r1
 8006670:	fbb0 f3f3 	udiv	r3, r0, r3
 8006674:	3301      	adds	r3, #1
 8006676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800667a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800667e:	e00f      	b.n	80066a0 <HAL_I2C_Init+0x1dc>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	1e58      	subs	r0, r3, #1
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6859      	ldr	r1, [r3, #4]
 8006688:	460b      	mov	r3, r1
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	0099      	lsls	r1, r3, #2
 8006690:	440b      	add	r3, r1
 8006692:	fbb0 f3f3 	udiv	r3, r0, r3
 8006696:	3301      	adds	r3, #1
 8006698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800669c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066a0:	6879      	ldr	r1, [r7, #4]
 80066a2:	6809      	ldr	r1, [r1, #0]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69da      	ldr	r2, [r3, #28]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	431a      	orrs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	430a      	orrs	r2, r1
 80066c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80066ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6911      	ldr	r1, [r2, #16]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	68d2      	ldr	r2, [r2, #12]
 80066da:	4311      	orrs	r1, r2
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6812      	ldr	r2, [r2, #0]
 80066e0:	430b      	orrs	r3, r1
 80066e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695a      	ldr	r2, [r3, #20]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0201 	orr.w	r2, r2, #1
 800670e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	000186a0 	.word	0x000186a0
 800673c:	001e847f 	.word	0x001e847f
 8006740:	003d08ff 	.word	0x003d08ff
 8006744:	431bde83 	.word	0x431bde83
 8006748:	10624dd3 	.word	0x10624dd3

0800674c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b088      	sub	sp, #32
 8006750:	af02      	add	r7, sp, #8
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	4608      	mov	r0, r1
 8006756:	4611      	mov	r1, r2
 8006758:	461a      	mov	r2, r3
 800675a:	4603      	mov	r3, r0
 800675c:	817b      	strh	r3, [r7, #10]
 800675e:	460b      	mov	r3, r1
 8006760:	813b      	strh	r3, [r7, #8]
 8006762:	4613      	mov	r3, r2
 8006764:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006766:	f7fe ffbb 	bl	80056e0 <HAL_GetTick>
 800676a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b20      	cmp	r3, #32
 8006776:	f040 80d9 	bne.w	800692c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	2319      	movs	r3, #25
 8006780:	2201      	movs	r2, #1
 8006782:	496d      	ldr	r1, [pc, #436]	@ (8006938 <HAL_I2C_Mem_Write+0x1ec>)
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 fc8b 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006790:	2302      	movs	r3, #2
 8006792:	e0cc      	b.n	800692e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800679a:	2b01      	cmp	r3, #1
 800679c:	d101      	bne.n	80067a2 <HAL_I2C_Mem_Write+0x56>
 800679e:	2302      	movs	r3, #2
 80067a0:	e0c5      	b.n	800692e <HAL_I2C_Mem_Write+0x1e2>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d007      	beq.n	80067c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0201 	orr.w	r2, r2, #1
 80067c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2221      	movs	r2, #33	@ 0x21
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2240      	movs	r2, #64	@ 0x40
 80067e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a3a      	ldr	r2, [r7, #32]
 80067f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80067f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4a4d      	ldr	r2, [pc, #308]	@ (800693c <HAL_I2C_Mem_Write+0x1f0>)
 8006808:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800680a:	88f8      	ldrh	r0, [r7, #6]
 800680c:	893a      	ldrh	r2, [r7, #8]
 800680e:	8979      	ldrh	r1, [r7, #10]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	9301      	str	r3, [sp, #4]
 8006814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	4603      	mov	r3, r0
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 fac2 	bl	8006da4 <I2C_RequestMemoryWrite>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d052      	beq.n	80068cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e081      	b.n	800692e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 fd50 	bl	80072d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00d      	beq.n	8006856 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683e:	2b04      	cmp	r3, #4
 8006840:	d107      	bne.n	8006852 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006850:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e06b      	b.n	800692e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685a:	781a      	ldrb	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006870:	3b01      	subs	r3, #1
 8006872:	b29a      	uxth	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800687c:	b29b      	uxth	r3, r3
 800687e:	3b01      	subs	r3, #1
 8006880:	b29a      	uxth	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b04      	cmp	r3, #4
 8006892:	d11b      	bne.n	80068cc <HAL_I2C_Mem_Write+0x180>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006898:	2b00      	cmp	r3, #0
 800689a:	d017      	beq.n	80068cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a0:	781a      	ldrb	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1aa      	bne.n	800682a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 fd43 	bl	8007364 <I2C_WaitOnBTFFlagUntilTimeout>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00d      	beq.n	8006900 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d107      	bne.n	80068fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e016      	b.n	800692e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800690e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	e000      	b.n	800692e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800692c:	2302      	movs	r3, #2
  }
}
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	00100002 	.word	0x00100002
 800693c:	ffff0000 	.word	0xffff0000

08006940 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b08c      	sub	sp, #48	@ 0x30
 8006944:	af02      	add	r7, sp, #8
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	4608      	mov	r0, r1
 800694a:	4611      	mov	r1, r2
 800694c:	461a      	mov	r2, r3
 800694e:	4603      	mov	r3, r0
 8006950:	817b      	strh	r3, [r7, #10]
 8006952:	460b      	mov	r3, r1
 8006954:	813b      	strh	r3, [r7, #8]
 8006956:	4613      	mov	r3, r2
 8006958:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800695a:	f7fe fec1 	bl	80056e0 <HAL_GetTick>
 800695e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b20      	cmp	r3, #32
 800696a:	f040 8214 	bne.w	8006d96 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	2319      	movs	r3, #25
 8006974:	2201      	movs	r2, #1
 8006976:	497b      	ldr	r1, [pc, #492]	@ (8006b64 <HAL_I2C_Mem_Read+0x224>)
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 fb91 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006984:	2302      	movs	r3, #2
 8006986:	e207      	b.n	8006d98 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800698e:	2b01      	cmp	r3, #1
 8006990:	d101      	bne.n	8006996 <HAL_I2C_Mem_Read+0x56>
 8006992:	2302      	movs	r3, #2
 8006994:	e200      	b.n	8006d98 <HAL_I2C_Mem_Read+0x458>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d007      	beq.n	80069bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0201 	orr.w	r2, r2, #1
 80069ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2222      	movs	r2, #34	@ 0x22
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2240      	movs	r2, #64	@ 0x40
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80069ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4a5b      	ldr	r2, [pc, #364]	@ (8006b68 <HAL_I2C_Mem_Read+0x228>)
 80069fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069fe:	88f8      	ldrh	r0, [r7, #6]
 8006a00:	893a      	ldrh	r2, [r7, #8]
 8006a02:	8979      	ldrh	r1, [r7, #10]
 8006a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a06:	9301      	str	r3, [sp, #4]
 8006a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 fa5e 	bl	8006ed0 <I2C_RequestMemoryRead>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e1bc      	b.n	8006d98 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d113      	bne.n	8006a4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a26:	2300      	movs	r3, #0
 8006a28:	623b      	str	r3, [r7, #32]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	623b      	str	r3, [r7, #32]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	623b      	str	r3, [r7, #32]
 8006a3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	e190      	b.n	8006d70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d11b      	bne.n	8006a8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a66:	2300      	movs	r3, #0
 8006a68:	61fb      	str	r3, [r7, #28]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	61fb      	str	r3, [r7, #28]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	61fb      	str	r3, [r7, #28]
 8006a7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	e170      	b.n	8006d70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d11b      	bne.n	8006ace <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aa4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ab4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	61bb      	str	r3, [r7, #24]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	61bb      	str	r3, [r7, #24]
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	e150      	b.n	8006d70 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ace:	2300      	movs	r3, #0
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ae4:	e144      	b.n	8006d70 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	f200 80f1 	bhi.w	8006cd2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d123      	bne.n	8006b40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006afa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 fc79 	bl	80073f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e145      	b.n	8006d98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691a      	ldr	r2, [r3, #16]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	3b01      	subs	r3, #1
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006b3e:	e117      	b.n	8006d70 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d14e      	bne.n	8006be6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4e:	2200      	movs	r2, #0
 8006b50:	4906      	ldr	r1, [pc, #24]	@ (8006b6c <HAL_I2C_Mem_Read+0x22c>)
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 faa4 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d008      	beq.n	8006b70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e11a      	b.n	8006d98 <HAL_I2C_Mem_Read+0x458>
 8006b62:	bf00      	nop
 8006b64:	00100002 	.word	0x00100002
 8006b68:	ffff0000 	.word	0xffff0000
 8006b6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691a      	ldr	r2, [r3, #16]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	691a      	ldr	r2, [r3, #16]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bbc:	b2d2      	uxtb	r2, r2
 8006bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006be4:	e0c4      	b.n	8006d70 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bec:	2200      	movs	r2, #0
 8006bee:	496c      	ldr	r1, [pc, #432]	@ (8006da0 <HAL_I2C_Mem_Read+0x460>)
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 fa55 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e0cb      	b.n	8006d98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	691a      	ldr	r2, [r3, #16]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4955      	ldr	r1, [pc, #340]	@ (8006da0 <HAL_I2C_Mem_Read+0x460>)
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fa27 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e09d      	b.n	8006d98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	691a      	ldr	r2, [r3, #16]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006cd0:	e04e      	b.n	8006d70 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cd4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 fb8c 	bl	80073f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e058      	b.n	8006d98 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	691a      	ldr	r2, [r3, #16]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf0:	b2d2      	uxtb	r2, r2
 8006cf2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d02:	3b01      	subs	r3, #1
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	3b01      	subs	r3, #1
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d124      	bne.n	8006d70 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d107      	bne.n	8006d3e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d3c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	691a      	ldr	r2, [r3, #16]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d48:	b2d2      	uxtb	r2, r2
 8006d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f47f aeb6 	bne.w	8006ae6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e000      	b.n	8006d98 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006d96:	2302      	movs	r3, #2
  }
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3728      	adds	r7, #40	@ 0x28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	00010004 	.word	0x00010004

08006da4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b088      	sub	sp, #32
 8006da8:	af02      	add	r7, sp, #8
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	4608      	mov	r0, r1
 8006dae:	4611      	mov	r1, r2
 8006db0:	461a      	mov	r2, r3
 8006db2:	4603      	mov	r3, r0
 8006db4:	817b      	strh	r3, [r7, #10]
 8006db6:	460b      	mov	r3, r1
 8006db8:	813b      	strh	r3, [r7, #8]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006dcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f000 f960 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00d      	beq.n	8006e02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006df0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006df4:	d103      	bne.n	8006dfe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dfc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e05f      	b.n	8006ec2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e02:	897b      	ldrh	r3, [r7, #10]
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	461a      	mov	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006e10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e14:	6a3a      	ldr	r2, [r7, #32]
 8006e16:	492d      	ldr	r1, [pc, #180]	@ (8006ecc <I2C_RequestMemoryWrite+0x128>)
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f9bb 	bl	8007194 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e04c      	b.n	8006ec2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e28:	2300      	movs	r3, #0
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	617b      	str	r3, [r7, #20]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	617b      	str	r3, [r7, #20]
 8006e3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e40:	6a39      	ldr	r1, [r7, #32]
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 fa46 	bl	80072d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00d      	beq.n	8006e6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d107      	bne.n	8006e66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e02b      	b.n	8006ec2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e6a:	88fb      	ldrh	r3, [r7, #6]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d105      	bne.n	8006e7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e70:	893b      	ldrh	r3, [r7, #8]
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	611a      	str	r2, [r3, #16]
 8006e7a:	e021      	b.n	8006ec0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e7c:	893b      	ldrh	r3, [r7, #8]
 8006e7e:	0a1b      	lsrs	r3, r3, #8
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e8c:	6a39      	ldr	r1, [r7, #32]
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 fa20 	bl	80072d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00d      	beq.n	8006eb6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d107      	bne.n	8006eb2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006eb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e005      	b.n	8006ec2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006eb6:	893b      	ldrh	r3, [r7, #8]
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	00010002 	.word	0x00010002

08006ed0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af02      	add	r7, sp, #8
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	4608      	mov	r0, r1
 8006eda:	4611      	mov	r1, r2
 8006edc:	461a      	mov	r2, r3
 8006ede:	4603      	mov	r3, r0
 8006ee0:	817b      	strh	r3, [r7, #10]
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	813b      	strh	r3, [r7, #8]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ef8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 f8c2 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00d      	beq.n	8006f3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f30:	d103      	bne.n	8006f3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e0aa      	b.n	8007094 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f3e:	897b      	ldrh	r3, [r7, #10]
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006f4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	6a3a      	ldr	r2, [r7, #32]
 8006f52:	4952      	ldr	r1, [pc, #328]	@ (800709c <I2C_RequestMemoryRead+0x1cc>)
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 f91d 	bl	8007194 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e097      	b.n	8007094 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f64:	2300      	movs	r3, #0
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	617b      	str	r3, [r7, #20]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	617b      	str	r3, [r7, #20]
 8006f78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f7c:	6a39      	ldr	r1, [r7, #32]
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f000 f9a8 	bl	80072d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00d      	beq.n	8006fa6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d107      	bne.n	8006fa2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fa0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e076      	b.n	8007094 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fa6:	88fb      	ldrh	r3, [r7, #6]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d105      	bne.n	8006fb8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fac:	893b      	ldrh	r3, [r7, #8]
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	611a      	str	r2, [r3, #16]
 8006fb6:	e021      	b.n	8006ffc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006fb8:	893b      	ldrh	r3, [r7, #8]
 8006fba:	0a1b      	lsrs	r3, r3, #8
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fc8:	6a39      	ldr	r1, [r7, #32]
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 f982 	bl	80072d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00d      	beq.n	8006ff2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fda:	2b04      	cmp	r3, #4
 8006fdc:	d107      	bne.n	8006fee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e050      	b.n	8007094 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ff2:	893b      	ldrh	r3, [r7, #8]
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ffe:	6a39      	ldr	r1, [r7, #32]
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 f967 	bl	80072d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00d      	beq.n	8007028 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007010:	2b04      	cmp	r3, #4
 8007012:	d107      	bne.n	8007024 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007022:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e035      	b.n	8007094 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007036:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	2200      	movs	r2, #0
 8007040:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f82b 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00d      	beq.n	800706c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800705a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800705e:	d103      	bne.n	8007068 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007066:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e013      	b.n	8007094 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800706c:	897b      	ldrh	r3, [r7, #10]
 800706e:	b2db      	uxtb	r3, r3
 8007070:	f043 0301 	orr.w	r3, r3, #1
 8007074:	b2da      	uxtb	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800707c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707e:	6a3a      	ldr	r2, [r7, #32]
 8007080:	4906      	ldr	r1, [pc, #24]	@ (800709c <I2C_RequestMemoryRead+0x1cc>)
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 f886 	bl	8007194 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3718      	adds	r7, #24
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	00010002 	.word	0x00010002

080070a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	4613      	mov	r3, r2
 80070ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070b0:	e048      	b.n	8007144 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070b8:	d044      	beq.n	8007144 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ba:	f7fe fb11 	bl	80056e0 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d302      	bcc.n	80070d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d139      	bne.n	8007144 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	0c1b      	lsrs	r3, r3, #16
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d10d      	bne.n	80070f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	43da      	mvns	r2, r3
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	4013      	ands	r3, r2
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	bf0c      	ite	eq
 80070ec:	2301      	moveq	r3, #1
 80070ee:	2300      	movne	r3, #0
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	461a      	mov	r2, r3
 80070f4:	e00c      	b.n	8007110 <I2C_WaitOnFlagUntilTimeout+0x70>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	43da      	mvns	r2, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	4013      	ands	r3, r2
 8007102:	b29b      	uxth	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	bf0c      	ite	eq
 8007108:	2301      	moveq	r3, #1
 800710a:	2300      	movne	r3, #0
 800710c:	b2db      	uxtb	r3, r3
 800710e:	461a      	mov	r2, r3
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	429a      	cmp	r2, r3
 8007114:	d116      	bne.n	8007144 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2220      	movs	r2, #32
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007130:	f043 0220 	orr.w	r2, r3, #32
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e023      	b.n	800718c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	0c1b      	lsrs	r3, r3, #16
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b01      	cmp	r3, #1
 800714c:	d10d      	bne.n	800716a <I2C_WaitOnFlagUntilTimeout+0xca>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	43da      	mvns	r2, r3
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	4013      	ands	r3, r2
 800715a:	b29b      	uxth	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	bf0c      	ite	eq
 8007160:	2301      	moveq	r3, #1
 8007162:	2300      	movne	r3, #0
 8007164:	b2db      	uxtb	r3, r3
 8007166:	461a      	mov	r2, r3
 8007168:	e00c      	b.n	8007184 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	43da      	mvns	r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	4013      	ands	r3, r2
 8007176:	b29b      	uxth	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	bf0c      	ite	eq
 800717c:	2301      	moveq	r3, #1
 800717e:	2300      	movne	r3, #0
 8007180:	b2db      	uxtb	r3, r3
 8007182:	461a      	mov	r2, r3
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	429a      	cmp	r2, r3
 8007188:	d093      	beq.n	80070b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071a2:	e071      	b.n	8007288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071b2:	d123      	bne.n	80071fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80071cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2220      	movs	r2, #32
 80071d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e8:	f043 0204 	orr.w	r2, r3, #4
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e067      	b.n	80072cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007202:	d041      	beq.n	8007288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007204:	f7fe fa6c 	bl	80056e0 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	429a      	cmp	r2, r3
 8007212:	d302      	bcc.n	800721a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d136      	bne.n	8007288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	0c1b      	lsrs	r3, r3, #16
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b01      	cmp	r3, #1
 8007222:	d10c      	bne.n	800723e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	43da      	mvns	r2, r3
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	4013      	ands	r3, r2
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	bf14      	ite	ne
 8007236:	2301      	movne	r3, #1
 8007238:	2300      	moveq	r3, #0
 800723a:	b2db      	uxtb	r3, r3
 800723c:	e00b      	b.n	8007256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	43da      	mvns	r2, r3
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	4013      	ands	r3, r2
 800724a:	b29b      	uxth	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	bf14      	ite	ne
 8007250:	2301      	movne	r3, #1
 8007252:	2300      	moveq	r3, #0
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d016      	beq.n	8007288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2220      	movs	r2, #32
 8007264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007274:	f043 0220 	orr.w	r2, r3, #32
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e021      	b.n	80072cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	0c1b      	lsrs	r3, r3, #16
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b01      	cmp	r3, #1
 8007290:	d10c      	bne.n	80072ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	43da      	mvns	r2, r3
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	4013      	ands	r3, r2
 800729e:	b29b      	uxth	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	bf14      	ite	ne
 80072a4:	2301      	movne	r3, #1
 80072a6:	2300      	moveq	r3, #0
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	e00b      	b.n	80072c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	43da      	mvns	r2, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	4013      	ands	r3, r2
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	bf14      	ite	ne
 80072be:	2301      	movne	r3, #1
 80072c0:	2300      	moveq	r3, #0
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f47f af6d 	bne.w	80071a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072e0:	e034      	b.n	800734c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 f8e3 	bl	80074ae <I2C_IsAcknowledgeFailed>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e034      	b.n	800735c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072f8:	d028      	beq.n	800734c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072fa:	f7fe f9f1 	bl	80056e0 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	429a      	cmp	r2, r3
 8007308:	d302      	bcc.n	8007310 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d11d      	bne.n	800734c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800731a:	2b80      	cmp	r3, #128	@ 0x80
 800731c:	d016      	beq.n	800734c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2220      	movs	r2, #32
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007338:	f043 0220 	orr.w	r2, r3, #32
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e007      	b.n	800735c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007356:	2b80      	cmp	r3, #128	@ 0x80
 8007358:	d1c3      	bne.n	80072e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007370:	e034      	b.n	80073dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 f89b 	bl	80074ae <I2C_IsAcknowledgeFailed>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e034      	b.n	80073ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007388:	d028      	beq.n	80073dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800738a:	f7fe f9a9 	bl	80056e0 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	429a      	cmp	r2, r3
 8007398:	d302      	bcc.n	80073a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d11d      	bne.n	80073dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	f003 0304 	and.w	r3, r3, #4
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d016      	beq.n	80073dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2220      	movs	r2, #32
 80073b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c8:	f043 0220 	orr.w	r2, r3, #32
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e007      	b.n	80073ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	f003 0304 	and.w	r3, r3, #4
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	d1c3      	bne.n	8007372 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007400:	e049      	b.n	8007496 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	f003 0310 	and.w	r3, r3, #16
 800740c:	2b10      	cmp	r3, #16
 800740e:	d119      	bne.n	8007444 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f06f 0210 	mvn.w	r2, #16
 8007418:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2220      	movs	r2, #32
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e030      	b.n	80074a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007444:	f7fe f94c 	bl	80056e0 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	429a      	cmp	r2, r3
 8007452:	d302      	bcc.n	800745a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d11d      	bne.n	8007496 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007464:	2b40      	cmp	r3, #64	@ 0x40
 8007466:	d016      	beq.n	8007496 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2220      	movs	r2, #32
 8007472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007482:	f043 0220 	orr.w	r2, r3, #32
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e007      	b.n	80074a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074a0:	2b40      	cmp	r3, #64	@ 0x40
 80074a2:	d1ae      	bne.n	8007402 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074c4:	d11b      	bne.n	80074fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80074ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2220      	movs	r2, #32
 80074da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ea:	f043 0204 	orr.w	r2, r3, #4
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e000      	b.n	8007500 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007516:	2300      	movs	r3, #0
 8007518:	603b      	str	r3, [r7, #0]
 800751a:	4b20      	ldr	r3, [pc, #128]	@ (800759c <HAL_PWREx_EnableOverDrive+0x90>)
 800751c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751e:	4a1f      	ldr	r2, [pc, #124]	@ (800759c <HAL_PWREx_EnableOverDrive+0x90>)
 8007520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007524:	6413      	str	r3, [r2, #64]	@ 0x40
 8007526:	4b1d      	ldr	r3, [pc, #116]	@ (800759c <HAL_PWREx_EnableOverDrive+0x90>)
 8007528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800752e:	603b      	str	r3, [r7, #0]
 8007530:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007532:	4b1b      	ldr	r3, [pc, #108]	@ (80075a0 <HAL_PWREx_EnableOverDrive+0x94>)
 8007534:	2201      	movs	r2, #1
 8007536:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007538:	f7fe f8d2 	bl	80056e0 <HAL_GetTick>
 800753c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800753e:	e009      	b.n	8007554 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007540:	f7fe f8ce 	bl	80056e0 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800754e:	d901      	bls.n	8007554 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e01f      	b.n	8007594 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007554:	4b13      	ldr	r3, [pc, #76]	@ (80075a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800755c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007560:	d1ee      	bne.n	8007540 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007562:	4b11      	ldr	r3, [pc, #68]	@ (80075a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007564:	2201      	movs	r2, #1
 8007566:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007568:	f7fe f8ba 	bl	80056e0 <HAL_GetTick>
 800756c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800756e:	e009      	b.n	8007584 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007570:	f7fe f8b6 	bl	80056e0 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800757e:	d901      	bls.n	8007584 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e007      	b.n	8007594 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007584:	4b07      	ldr	r3, [pc, #28]	@ (80075a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800758c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007590:	d1ee      	bne.n	8007570 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	40023800 	.word	0x40023800
 80075a0:	420e0040 	.word	0x420e0040
 80075a4:	40007000 	.word	0x40007000
 80075a8:	420e0044 	.word	0x420e0044

080075ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e0cc      	b.n	800775a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075c0:	4b68      	ldr	r3, [pc, #416]	@ (8007764 <HAL_RCC_ClockConfig+0x1b8>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 030f 	and.w	r3, r3, #15
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d90c      	bls.n	80075e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ce:	4b65      	ldr	r3, [pc, #404]	@ (8007764 <HAL_RCC_ClockConfig+0x1b8>)
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	b2d2      	uxtb	r2, r2
 80075d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075d6:	4b63      	ldr	r3, [pc, #396]	@ (8007764 <HAL_RCC_ClockConfig+0x1b8>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 030f 	and.w	r3, r3, #15
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d001      	beq.n	80075e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e0b8      	b.n	800775a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d020      	beq.n	8007636 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d005      	beq.n	800760c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007600:	4b59      	ldr	r3, [pc, #356]	@ (8007768 <HAL_RCC_ClockConfig+0x1bc>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	4a58      	ldr	r2, [pc, #352]	@ (8007768 <HAL_RCC_ClockConfig+0x1bc>)
 8007606:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800760a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0308 	and.w	r3, r3, #8
 8007614:	2b00      	cmp	r3, #0
 8007616:	d005      	beq.n	8007624 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007618:	4b53      	ldr	r3, [pc, #332]	@ (8007768 <HAL_RCC_ClockConfig+0x1bc>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	4a52      	ldr	r2, [pc, #328]	@ (8007768 <HAL_RCC_ClockConfig+0x1bc>)
 800761e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007622:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007624:	4b50      	ldr	r3, [pc, #320]	@ (8007768 <HAL_RCC_ClockConfig+0x1bc>)
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	494d      	ldr	r1, [pc, #308]	@ (8007768 <HAL_RCC_ClockConfig+0x1bc>)
 8007632:	4313      	orrs	r3, r2
 8007634:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b00      	cmp	r3, #0
 8007640:	d044      	beq.n	80076cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d107      	bne.n	800765a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800764a:	4b47      	ldr	r3, [pc, #284]	@ (8007768 <HAL_RCC_ClockConfig+0x1bc>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d119      	bne.n	800768a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e07f      	b.n	800775a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2b02      	cmp	r3, #2
 8007660:	d003      	beq.n	800766a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007666:	2b03      	cmp	r3, #3
 8007668:	d107      	bne.n	800767a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800766a:	4b3f      	ldr	r3, [pc, #252]	@ (8007768 <HAL_RCC_ClockConfig+0x1bc>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d109      	bne.n	800768a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e06f      	b.n	800775a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800767a:	4b3b      	ldr	r3, [pc, #236]	@ (8007768 <HAL_RCC_ClockConfig+0x1bc>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d101      	bne.n	800768a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e067      	b.n	800775a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800768a:	4b37      	ldr	r3, [pc, #220]	@ (8007768 <HAL_RCC_ClockConfig+0x1bc>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f023 0203 	bic.w	r2, r3, #3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	4934      	ldr	r1, [pc, #208]	@ (8007768 <HAL_RCC_ClockConfig+0x1bc>)
 8007698:	4313      	orrs	r3, r2
 800769a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800769c:	f7fe f820 	bl	80056e0 <HAL_GetTick>
 80076a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076a2:	e00a      	b.n	80076ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076a4:	f7fe f81c 	bl	80056e0 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d901      	bls.n	80076ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e04f      	b.n	800775a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ba:	4b2b      	ldr	r3, [pc, #172]	@ (8007768 <HAL_RCC_ClockConfig+0x1bc>)
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f003 020c 	and.w	r2, r3, #12
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d1eb      	bne.n	80076a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076cc:	4b25      	ldr	r3, [pc, #148]	@ (8007764 <HAL_RCC_ClockConfig+0x1b8>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 030f 	and.w	r3, r3, #15
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d20c      	bcs.n	80076f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076da:	4b22      	ldr	r3, [pc, #136]	@ (8007764 <HAL_RCC_ClockConfig+0x1b8>)
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	b2d2      	uxtb	r2, r2
 80076e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076e2:	4b20      	ldr	r3, [pc, #128]	@ (8007764 <HAL_RCC_ClockConfig+0x1b8>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 030f 	and.w	r3, r3, #15
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d001      	beq.n	80076f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e032      	b.n	800775a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0304 	and.w	r3, r3, #4
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d008      	beq.n	8007712 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007700:	4b19      	ldr	r3, [pc, #100]	@ (8007768 <HAL_RCC_ClockConfig+0x1bc>)
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	4916      	ldr	r1, [pc, #88]	@ (8007768 <HAL_RCC_ClockConfig+0x1bc>)
 800770e:	4313      	orrs	r3, r2
 8007710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0308 	and.w	r3, r3, #8
 800771a:	2b00      	cmp	r3, #0
 800771c:	d009      	beq.n	8007732 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800771e:	4b12      	ldr	r3, [pc, #72]	@ (8007768 <HAL_RCC_ClockConfig+0x1bc>)
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	490e      	ldr	r1, [pc, #56]	@ (8007768 <HAL_RCC_ClockConfig+0x1bc>)
 800772e:	4313      	orrs	r3, r2
 8007730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007732:	f000 f855 	bl	80077e0 <HAL_RCC_GetSysClockFreq>
 8007736:	4602      	mov	r2, r0
 8007738:	4b0b      	ldr	r3, [pc, #44]	@ (8007768 <HAL_RCC_ClockConfig+0x1bc>)
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	091b      	lsrs	r3, r3, #4
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	490a      	ldr	r1, [pc, #40]	@ (800776c <HAL_RCC_ClockConfig+0x1c0>)
 8007744:	5ccb      	ldrb	r3, [r1, r3]
 8007746:	fa22 f303 	lsr.w	r3, r2, r3
 800774a:	4a09      	ldr	r2, [pc, #36]	@ (8007770 <HAL_RCC_ClockConfig+0x1c4>)
 800774c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800774e:	4b09      	ldr	r3, [pc, #36]	@ (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4618      	mov	r0, r3
 8007754:	f7fd ff80 	bl	8005658 <HAL_InitTick>

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	40023c00 	.word	0x40023c00
 8007768:	40023800 	.word	0x40023800
 800776c:	0800c278 	.word	0x0800c278
 8007770:	20000004 	.word	0x20000004
 8007774:	20000008 	.word	0x20000008

08007778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800777c:	4b03      	ldr	r3, [pc, #12]	@ (800778c <HAL_RCC_GetHCLKFreq+0x14>)
 800777e:	681b      	ldr	r3, [r3, #0]
}
 8007780:	4618      	mov	r0, r3
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	20000004 	.word	0x20000004

08007790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007794:	f7ff fff0 	bl	8007778 <HAL_RCC_GetHCLKFreq>
 8007798:	4602      	mov	r2, r0
 800779a:	4b05      	ldr	r3, [pc, #20]	@ (80077b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	0a9b      	lsrs	r3, r3, #10
 80077a0:	f003 0307 	and.w	r3, r3, #7
 80077a4:	4903      	ldr	r1, [pc, #12]	@ (80077b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077a6:	5ccb      	ldrb	r3, [r1, r3]
 80077a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	40023800 	.word	0x40023800
 80077b4:	0800c288 	.word	0x0800c288

080077b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80077bc:	f7ff ffdc 	bl	8007778 <HAL_RCC_GetHCLKFreq>
 80077c0:	4602      	mov	r2, r0
 80077c2:	4b05      	ldr	r3, [pc, #20]	@ (80077d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	0b5b      	lsrs	r3, r3, #13
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	4903      	ldr	r1, [pc, #12]	@ (80077dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80077ce:	5ccb      	ldrb	r3, [r1, r3]
 80077d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	40023800 	.word	0x40023800
 80077dc:	0800c288 	.word	0x0800c288

080077e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077e4:	b0ae      	sub	sp, #184	@ 0xb8
 80077e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80077fa:	2300      	movs	r3, #0
 80077fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007800:	2300      	movs	r3, #0
 8007802:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007806:	4bcb      	ldr	r3, [pc, #812]	@ (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 030c 	and.w	r3, r3, #12
 800780e:	2b0c      	cmp	r3, #12
 8007810:	f200 8206 	bhi.w	8007c20 <HAL_RCC_GetSysClockFreq+0x440>
 8007814:	a201      	add	r2, pc, #4	@ (adr r2, 800781c <HAL_RCC_GetSysClockFreq+0x3c>)
 8007816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781a:	bf00      	nop
 800781c:	08007851 	.word	0x08007851
 8007820:	08007c21 	.word	0x08007c21
 8007824:	08007c21 	.word	0x08007c21
 8007828:	08007c21 	.word	0x08007c21
 800782c:	08007859 	.word	0x08007859
 8007830:	08007c21 	.word	0x08007c21
 8007834:	08007c21 	.word	0x08007c21
 8007838:	08007c21 	.word	0x08007c21
 800783c:	08007861 	.word	0x08007861
 8007840:	08007c21 	.word	0x08007c21
 8007844:	08007c21 	.word	0x08007c21
 8007848:	08007c21 	.word	0x08007c21
 800784c:	08007a51 	.word	0x08007a51
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007850:	4bb9      	ldr	r3, [pc, #740]	@ (8007b38 <HAL_RCC_GetSysClockFreq+0x358>)
 8007852:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8007856:	e1e7      	b.n	8007c28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007858:	4bb8      	ldr	r3, [pc, #736]	@ (8007b3c <HAL_RCC_GetSysClockFreq+0x35c>)
 800785a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800785e:	e1e3      	b.n	8007c28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007860:	4bb4      	ldr	r3, [pc, #720]	@ (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007868:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800786c:	4bb1      	ldr	r3, [pc, #708]	@ (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d071      	beq.n	800795c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007878:	4bae      	ldr	r3, [pc, #696]	@ (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	099b      	lsrs	r3, r3, #6
 800787e:	2200      	movs	r2, #0
 8007880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007884:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007888:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800788c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007890:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007894:	2300      	movs	r3, #0
 8007896:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800789a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800789e:	4622      	mov	r2, r4
 80078a0:	462b      	mov	r3, r5
 80078a2:	f04f 0000 	mov.w	r0, #0
 80078a6:	f04f 0100 	mov.w	r1, #0
 80078aa:	0159      	lsls	r1, r3, #5
 80078ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078b0:	0150      	lsls	r0, r2, #5
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4621      	mov	r1, r4
 80078b8:	1a51      	subs	r1, r2, r1
 80078ba:	6439      	str	r1, [r7, #64]	@ 0x40
 80078bc:	4629      	mov	r1, r5
 80078be:	eb63 0301 	sbc.w	r3, r3, r1
 80078c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80078c4:	f04f 0200 	mov.w	r2, #0
 80078c8:	f04f 0300 	mov.w	r3, #0
 80078cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80078d0:	4649      	mov	r1, r9
 80078d2:	018b      	lsls	r3, r1, #6
 80078d4:	4641      	mov	r1, r8
 80078d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80078da:	4641      	mov	r1, r8
 80078dc:	018a      	lsls	r2, r1, #6
 80078de:	4641      	mov	r1, r8
 80078e0:	1a51      	subs	r1, r2, r1
 80078e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80078e4:	4649      	mov	r1, r9
 80078e6:	eb63 0301 	sbc.w	r3, r3, r1
 80078ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	f04f 0300 	mov.w	r3, #0
 80078f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80078f8:	4649      	mov	r1, r9
 80078fa:	00cb      	lsls	r3, r1, #3
 80078fc:	4641      	mov	r1, r8
 80078fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007902:	4641      	mov	r1, r8
 8007904:	00ca      	lsls	r2, r1, #3
 8007906:	4610      	mov	r0, r2
 8007908:	4619      	mov	r1, r3
 800790a:	4603      	mov	r3, r0
 800790c:	4622      	mov	r2, r4
 800790e:	189b      	adds	r3, r3, r2
 8007910:	633b      	str	r3, [r7, #48]	@ 0x30
 8007912:	462b      	mov	r3, r5
 8007914:	460a      	mov	r2, r1
 8007916:	eb42 0303 	adc.w	r3, r2, r3
 800791a:	637b      	str	r3, [r7, #52]	@ 0x34
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007928:	4629      	mov	r1, r5
 800792a:	024b      	lsls	r3, r1, #9
 800792c:	4621      	mov	r1, r4
 800792e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007932:	4621      	mov	r1, r4
 8007934:	024a      	lsls	r2, r1, #9
 8007936:	4610      	mov	r0, r2
 8007938:	4619      	mov	r1, r3
 800793a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800793e:	2200      	movs	r2, #0
 8007940:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007944:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007948:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800794c:	f7f9 f932 	bl	8000bb4 <__aeabi_uldivmod>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4613      	mov	r3, r2
 8007956:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800795a:	e067      	b.n	8007a2c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800795c:	4b75      	ldr	r3, [pc, #468]	@ (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	099b      	lsrs	r3, r3, #6
 8007962:	2200      	movs	r2, #0
 8007964:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007968:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800796c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007974:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007976:	2300      	movs	r3, #0
 8007978:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800797a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800797e:	4622      	mov	r2, r4
 8007980:	462b      	mov	r3, r5
 8007982:	f04f 0000 	mov.w	r0, #0
 8007986:	f04f 0100 	mov.w	r1, #0
 800798a:	0159      	lsls	r1, r3, #5
 800798c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007990:	0150      	lsls	r0, r2, #5
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	4621      	mov	r1, r4
 8007998:	1a51      	subs	r1, r2, r1
 800799a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800799c:	4629      	mov	r1, r5
 800799e:	eb63 0301 	sbc.w	r3, r3, r1
 80079a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079a4:	f04f 0200 	mov.w	r2, #0
 80079a8:	f04f 0300 	mov.w	r3, #0
 80079ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80079b0:	4649      	mov	r1, r9
 80079b2:	018b      	lsls	r3, r1, #6
 80079b4:	4641      	mov	r1, r8
 80079b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80079ba:	4641      	mov	r1, r8
 80079bc:	018a      	lsls	r2, r1, #6
 80079be:	4641      	mov	r1, r8
 80079c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80079c4:	4649      	mov	r1, r9
 80079c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80079ca:	f04f 0200 	mov.w	r2, #0
 80079ce:	f04f 0300 	mov.w	r3, #0
 80079d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079de:	4692      	mov	sl, r2
 80079e0:	469b      	mov	fp, r3
 80079e2:	4623      	mov	r3, r4
 80079e4:	eb1a 0303 	adds.w	r3, sl, r3
 80079e8:	623b      	str	r3, [r7, #32]
 80079ea:	462b      	mov	r3, r5
 80079ec:	eb4b 0303 	adc.w	r3, fp, r3
 80079f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80079f2:	f04f 0200 	mov.w	r2, #0
 80079f6:	f04f 0300 	mov.w	r3, #0
 80079fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80079fe:	4629      	mov	r1, r5
 8007a00:	028b      	lsls	r3, r1, #10
 8007a02:	4621      	mov	r1, r4
 8007a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a08:	4621      	mov	r1, r4
 8007a0a:	028a      	lsls	r2, r1, #10
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	4619      	mov	r1, r3
 8007a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a14:	2200      	movs	r2, #0
 8007a16:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a18:	677a      	str	r2, [r7, #116]	@ 0x74
 8007a1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007a1e:	f7f9 f8c9 	bl	8000bb4 <__aeabi_uldivmod>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4613      	mov	r3, r2
 8007a28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a2c:	4b41      	ldr	r3, [pc, #260]	@ (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	0c1b      	lsrs	r3, r3, #16
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	3301      	adds	r3, #1
 8007a38:	005b      	lsls	r3, r3, #1
 8007a3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8007a3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007a4e:	e0eb      	b.n	8007c28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a50:	4b38      	ldr	r3, [pc, #224]	@ (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a5c:	4b35      	ldr	r3, [pc, #212]	@ (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d06b      	beq.n	8007b40 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a68:	4b32      	ldr	r3, [pc, #200]	@ (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	099b      	lsrs	r3, r3, #6
 8007a6e:	2200      	movs	r2, #0
 8007a70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a80:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007a84:	4622      	mov	r2, r4
 8007a86:	462b      	mov	r3, r5
 8007a88:	f04f 0000 	mov.w	r0, #0
 8007a8c:	f04f 0100 	mov.w	r1, #0
 8007a90:	0159      	lsls	r1, r3, #5
 8007a92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a96:	0150      	lsls	r0, r2, #5
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4621      	mov	r1, r4
 8007a9e:	1a51      	subs	r1, r2, r1
 8007aa0:	61b9      	str	r1, [r7, #24]
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	eb63 0301 	sbc.w	r3, r3, r1
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	f04f 0200 	mov.w	r2, #0
 8007aae:	f04f 0300 	mov.w	r3, #0
 8007ab2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007ab6:	4659      	mov	r1, fp
 8007ab8:	018b      	lsls	r3, r1, #6
 8007aba:	4651      	mov	r1, sl
 8007abc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007ac0:	4651      	mov	r1, sl
 8007ac2:	018a      	lsls	r2, r1, #6
 8007ac4:	4651      	mov	r1, sl
 8007ac6:	ebb2 0801 	subs.w	r8, r2, r1
 8007aca:	4659      	mov	r1, fp
 8007acc:	eb63 0901 	sbc.w	r9, r3, r1
 8007ad0:	f04f 0200 	mov.w	r2, #0
 8007ad4:	f04f 0300 	mov.w	r3, #0
 8007ad8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007adc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ae0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ae4:	4690      	mov	r8, r2
 8007ae6:	4699      	mov	r9, r3
 8007ae8:	4623      	mov	r3, r4
 8007aea:	eb18 0303 	adds.w	r3, r8, r3
 8007aee:	613b      	str	r3, [r7, #16]
 8007af0:	462b      	mov	r3, r5
 8007af2:	eb49 0303 	adc.w	r3, r9, r3
 8007af6:	617b      	str	r3, [r7, #20]
 8007af8:	f04f 0200 	mov.w	r2, #0
 8007afc:	f04f 0300 	mov.w	r3, #0
 8007b00:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007b04:	4629      	mov	r1, r5
 8007b06:	024b      	lsls	r3, r1, #9
 8007b08:	4621      	mov	r1, r4
 8007b0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007b0e:	4621      	mov	r1, r4
 8007b10:	024a      	lsls	r2, r1, #9
 8007b12:	4610      	mov	r0, r2
 8007b14:	4619      	mov	r1, r3
 8007b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b1e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007b20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007b24:	f7f9 f846 	bl	8000bb4 <__aeabi_uldivmod>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b32:	e065      	b.n	8007c00 <HAL_RCC_GetSysClockFreq+0x420>
 8007b34:	40023800 	.word	0x40023800
 8007b38:	00f42400 	.word	0x00f42400
 8007b3c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b40:	4b3d      	ldr	r3, [pc, #244]	@ (8007c38 <HAL_RCC_GetSysClockFreq+0x458>)
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	099b      	lsrs	r3, r3, #6
 8007b46:	2200      	movs	r2, #0
 8007b48:	4618      	mov	r0, r3
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007b50:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b52:	2300      	movs	r3, #0
 8007b54:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b56:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8007b5a:	4642      	mov	r2, r8
 8007b5c:	464b      	mov	r3, r9
 8007b5e:	f04f 0000 	mov.w	r0, #0
 8007b62:	f04f 0100 	mov.w	r1, #0
 8007b66:	0159      	lsls	r1, r3, #5
 8007b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b6c:	0150      	lsls	r0, r2, #5
 8007b6e:	4602      	mov	r2, r0
 8007b70:	460b      	mov	r3, r1
 8007b72:	4641      	mov	r1, r8
 8007b74:	1a51      	subs	r1, r2, r1
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	4649      	mov	r1, r9
 8007b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8007b7e:	60fb      	str	r3, [r7, #12]
 8007b80:	f04f 0200 	mov.w	r2, #0
 8007b84:	f04f 0300 	mov.w	r3, #0
 8007b88:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007b8c:	4659      	mov	r1, fp
 8007b8e:	018b      	lsls	r3, r1, #6
 8007b90:	4651      	mov	r1, sl
 8007b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b96:	4651      	mov	r1, sl
 8007b98:	018a      	lsls	r2, r1, #6
 8007b9a:	4651      	mov	r1, sl
 8007b9c:	1a54      	subs	r4, r2, r1
 8007b9e:	4659      	mov	r1, fp
 8007ba0:	eb63 0501 	sbc.w	r5, r3, r1
 8007ba4:	f04f 0200 	mov.w	r2, #0
 8007ba8:	f04f 0300 	mov.w	r3, #0
 8007bac:	00eb      	lsls	r3, r5, #3
 8007bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bb2:	00e2      	lsls	r2, r4, #3
 8007bb4:	4614      	mov	r4, r2
 8007bb6:	461d      	mov	r5, r3
 8007bb8:	4643      	mov	r3, r8
 8007bba:	18e3      	adds	r3, r4, r3
 8007bbc:	603b      	str	r3, [r7, #0]
 8007bbe:	464b      	mov	r3, r9
 8007bc0:	eb45 0303 	adc.w	r3, r5, r3
 8007bc4:	607b      	str	r3, [r7, #4]
 8007bc6:	f04f 0200 	mov.w	r2, #0
 8007bca:	f04f 0300 	mov.w	r3, #0
 8007bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	028b      	lsls	r3, r1, #10
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007bdc:	4621      	mov	r1, r4
 8007bde:	028a      	lsls	r2, r1, #10
 8007be0:	4610      	mov	r0, r2
 8007be2:	4619      	mov	r1, r3
 8007be4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007be8:	2200      	movs	r2, #0
 8007bea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007bee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007bf2:	f7f8 ffdf 	bl	8000bb4 <__aeabi_uldivmod>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007c00:	4b0d      	ldr	r3, [pc, #52]	@ (8007c38 <HAL_RCC_GetSysClockFreq+0x458>)
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	0f1b      	lsrs	r3, r3, #28
 8007c06:	f003 0307 	and.w	r3, r3, #7
 8007c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8007c0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007c1e:	e003      	b.n	8007c28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c20:	4b06      	ldr	r3, [pc, #24]	@ (8007c3c <HAL_RCC_GetSysClockFreq+0x45c>)
 8007c22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007c26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	37b8      	adds	r7, #184	@ 0xb8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c36:	bf00      	nop
 8007c38:	40023800 	.word	0x40023800
 8007c3c:	00f42400 	.word	0x00f42400

08007c40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e28d      	b.n	800816e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 8083 	beq.w	8007d66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007c60:	4b94      	ldr	r3, [pc, #592]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f003 030c 	and.w	r3, r3, #12
 8007c68:	2b04      	cmp	r3, #4
 8007c6a:	d019      	beq.n	8007ca0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007c6c:	4b91      	ldr	r3, [pc, #580]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007c74:	2b08      	cmp	r3, #8
 8007c76:	d106      	bne.n	8007c86 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007c78:	4b8e      	ldr	r3, [pc, #568]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c84:	d00c      	beq.n	8007ca0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c86:	4b8b      	ldr	r3, [pc, #556]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007c8e:	2b0c      	cmp	r3, #12
 8007c90:	d112      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c92:	4b88      	ldr	r3, [pc, #544]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c9e:	d10b      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ca0:	4b84      	ldr	r3, [pc, #528]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d05b      	beq.n	8007d64 <HAL_RCC_OscConfig+0x124>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d157      	bne.n	8007d64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e25a      	b.n	800816e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cc0:	d106      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x90>
 8007cc2:	4b7c      	ldr	r3, [pc, #496]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a7b      	ldr	r2, [pc, #492]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ccc:	6013      	str	r3, [r2, #0]
 8007cce:	e01d      	b.n	8007d0c <HAL_RCC_OscConfig+0xcc>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007cd8:	d10c      	bne.n	8007cf4 <HAL_RCC_OscConfig+0xb4>
 8007cda:	4b76      	ldr	r3, [pc, #472]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a75      	ldr	r2, [pc, #468]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	4b73      	ldr	r3, [pc, #460]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a72      	ldr	r2, [pc, #456]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	e00b      	b.n	8007d0c <HAL_RCC_OscConfig+0xcc>
 8007cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a6e      	ldr	r2, [pc, #440]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	4b6c      	ldr	r3, [pc, #432]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a6b      	ldr	r2, [pc, #428]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d013      	beq.n	8007d3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d14:	f7fd fce4 	bl	80056e0 <HAL_GetTick>
 8007d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d1a:	e008      	b.n	8007d2e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d1c:	f7fd fce0 	bl	80056e0 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	2b64      	cmp	r3, #100	@ 0x64
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e21f      	b.n	800816e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d2e:	4b61      	ldr	r3, [pc, #388]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0f0      	beq.n	8007d1c <HAL_RCC_OscConfig+0xdc>
 8007d3a:	e014      	b.n	8007d66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d3c:	f7fd fcd0 	bl	80056e0 <HAL_GetTick>
 8007d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d42:	e008      	b.n	8007d56 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d44:	f7fd fccc 	bl	80056e0 <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b64      	cmp	r3, #100	@ 0x64
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e20b      	b.n	800816e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d56:	4b57      	ldr	r3, [pc, #348]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f0      	bne.n	8007d44 <HAL_RCC_OscConfig+0x104>
 8007d62:	e000      	b.n	8007d66 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d06f      	beq.n	8007e52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007d72:	4b50      	ldr	r3, [pc, #320]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f003 030c 	and.w	r3, r3, #12
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d017      	beq.n	8007dae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007d7e:	4b4d      	ldr	r3, [pc, #308]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007d86:	2b08      	cmp	r3, #8
 8007d88:	d105      	bne.n	8007d96 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00b      	beq.n	8007dae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d96:	4b47      	ldr	r3, [pc, #284]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007d9e:	2b0c      	cmp	r3, #12
 8007da0:	d11c      	bne.n	8007ddc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007da2:	4b44      	ldr	r3, [pc, #272]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d116      	bne.n	8007ddc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dae:	4b41      	ldr	r3, [pc, #260]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d005      	beq.n	8007dc6 <HAL_RCC_OscConfig+0x186>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d001      	beq.n	8007dc6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e1d3      	b.n	800816e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	00db      	lsls	r3, r3, #3
 8007dd4:	4937      	ldr	r1, [pc, #220]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dda:	e03a      	b.n	8007e52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d020      	beq.n	8007e26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007de4:	4b34      	ldr	r3, [pc, #208]	@ (8007eb8 <HAL_RCC_OscConfig+0x278>)
 8007de6:	2201      	movs	r2, #1
 8007de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dea:	f7fd fc79 	bl	80056e0 <HAL_GetTick>
 8007dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007df0:	e008      	b.n	8007e04 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007df2:	f7fd fc75 	bl	80056e0 <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d901      	bls.n	8007e04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e1b4      	b.n	800816e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e04:	4b2b      	ldr	r3, [pc, #172]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0302 	and.w	r3, r3, #2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d0f0      	beq.n	8007df2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e10:	4b28      	ldr	r3, [pc, #160]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	00db      	lsls	r3, r3, #3
 8007e1e:	4925      	ldr	r1, [pc, #148]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	600b      	str	r3, [r1, #0]
 8007e24:	e015      	b.n	8007e52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e26:	4b24      	ldr	r3, [pc, #144]	@ (8007eb8 <HAL_RCC_OscConfig+0x278>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e2c:	f7fd fc58 	bl	80056e0 <HAL_GetTick>
 8007e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e32:	e008      	b.n	8007e46 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e34:	f7fd fc54 	bl	80056e0 <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d901      	bls.n	8007e46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e193      	b.n	800816e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e46:	4b1b      	ldr	r3, [pc, #108]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0302 	and.w	r3, r3, #2
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1f0      	bne.n	8007e34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0308 	and.w	r3, r3, #8
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d036      	beq.n	8007ecc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d016      	beq.n	8007e94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e66:	4b15      	ldr	r3, [pc, #84]	@ (8007ebc <HAL_RCC_OscConfig+0x27c>)
 8007e68:	2201      	movs	r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e6c:	f7fd fc38 	bl	80056e0 <HAL_GetTick>
 8007e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e72:	e008      	b.n	8007e86 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e74:	f7fd fc34 	bl	80056e0 <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d901      	bls.n	8007e86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e173      	b.n	800816e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e86:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d0f0      	beq.n	8007e74 <HAL_RCC_OscConfig+0x234>
 8007e92:	e01b      	b.n	8007ecc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e94:	4b09      	ldr	r3, [pc, #36]	@ (8007ebc <HAL_RCC_OscConfig+0x27c>)
 8007e96:	2200      	movs	r2, #0
 8007e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e9a:	f7fd fc21 	bl	80056e0 <HAL_GetTick>
 8007e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ea0:	e00e      	b.n	8007ec0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ea2:	f7fd fc1d 	bl	80056e0 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d907      	bls.n	8007ec0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e15c      	b.n	800816e <HAL_RCC_OscConfig+0x52e>
 8007eb4:	40023800 	.word	0x40023800
 8007eb8:	42470000 	.word	0x42470000
 8007ebc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ec0:	4b8a      	ldr	r3, [pc, #552]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ec4:	f003 0302 	and.w	r3, r3, #2
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1ea      	bne.n	8007ea2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0304 	and.w	r3, r3, #4
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 8097 	beq.w	8008008 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007eda:	2300      	movs	r3, #0
 8007edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ede:	4b83      	ldr	r3, [pc, #524]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d10f      	bne.n	8007f0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007eea:	2300      	movs	r3, #0
 8007eec:	60bb      	str	r3, [r7, #8]
 8007eee:	4b7f      	ldr	r3, [pc, #508]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef2:	4a7e      	ldr	r2, [pc, #504]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007efa:	4b7c      	ldr	r3, [pc, #496]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f02:	60bb      	str	r3, [r7, #8]
 8007f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f06:	2301      	movs	r3, #1
 8007f08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f0a:	4b79      	ldr	r3, [pc, #484]	@ (80080f0 <HAL_RCC_OscConfig+0x4b0>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d118      	bne.n	8007f48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f16:	4b76      	ldr	r3, [pc, #472]	@ (80080f0 <HAL_RCC_OscConfig+0x4b0>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a75      	ldr	r2, [pc, #468]	@ (80080f0 <HAL_RCC_OscConfig+0x4b0>)
 8007f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f22:	f7fd fbdd 	bl	80056e0 <HAL_GetTick>
 8007f26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f28:	e008      	b.n	8007f3c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f2a:	f7fd fbd9 	bl	80056e0 <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d901      	bls.n	8007f3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e118      	b.n	800816e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f3c:	4b6c      	ldr	r3, [pc, #432]	@ (80080f0 <HAL_RCC_OscConfig+0x4b0>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d0f0      	beq.n	8007f2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d106      	bne.n	8007f5e <HAL_RCC_OscConfig+0x31e>
 8007f50:	4b66      	ldr	r3, [pc, #408]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f54:	4a65      	ldr	r2, [pc, #404]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007f56:	f043 0301 	orr.w	r3, r3, #1
 8007f5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f5c:	e01c      	b.n	8007f98 <HAL_RCC_OscConfig+0x358>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	2b05      	cmp	r3, #5
 8007f64:	d10c      	bne.n	8007f80 <HAL_RCC_OscConfig+0x340>
 8007f66:	4b61      	ldr	r3, [pc, #388]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f6a:	4a60      	ldr	r2, [pc, #384]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007f6c:	f043 0304 	orr.w	r3, r3, #4
 8007f70:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f72:	4b5e      	ldr	r3, [pc, #376]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f76:	4a5d      	ldr	r2, [pc, #372]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007f78:	f043 0301 	orr.w	r3, r3, #1
 8007f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f7e:	e00b      	b.n	8007f98 <HAL_RCC_OscConfig+0x358>
 8007f80:	4b5a      	ldr	r3, [pc, #360]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f84:	4a59      	ldr	r2, [pc, #356]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007f86:	f023 0301 	bic.w	r3, r3, #1
 8007f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f8c:	4b57      	ldr	r3, [pc, #348]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f90:	4a56      	ldr	r2, [pc, #344]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007f92:	f023 0304 	bic.w	r3, r3, #4
 8007f96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d015      	beq.n	8007fcc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fa0:	f7fd fb9e 	bl	80056e0 <HAL_GetTick>
 8007fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fa6:	e00a      	b.n	8007fbe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fa8:	f7fd fb9a 	bl	80056e0 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d901      	bls.n	8007fbe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e0d7      	b.n	800816e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fbe:	4b4b      	ldr	r3, [pc, #300]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d0ee      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x368>
 8007fca:	e014      	b.n	8007ff6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fcc:	f7fd fb88 	bl	80056e0 <HAL_GetTick>
 8007fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fd2:	e00a      	b.n	8007fea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fd4:	f7fd fb84 	bl	80056e0 <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d901      	bls.n	8007fea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e0c1      	b.n	800816e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fea:	4b40      	ldr	r3, [pc, #256]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1ee      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d105      	bne.n	8008008 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008000:	4a3a      	ldr	r2, [pc, #232]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8008002:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008006:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 80ad 	beq.w	800816c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008012:	4b36      	ldr	r3, [pc, #216]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f003 030c 	and.w	r3, r3, #12
 800801a:	2b08      	cmp	r3, #8
 800801c:	d060      	beq.n	80080e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	2b02      	cmp	r3, #2
 8008024:	d145      	bne.n	80080b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008026:	4b33      	ldr	r3, [pc, #204]	@ (80080f4 <HAL_RCC_OscConfig+0x4b4>)
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800802c:	f7fd fb58 	bl	80056e0 <HAL_GetTick>
 8008030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008032:	e008      	b.n	8008046 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008034:	f7fd fb54 	bl	80056e0 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d901      	bls.n	8008046 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e093      	b.n	800816e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008046:	4b29      	ldr	r3, [pc, #164]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f0      	bne.n	8008034 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	69da      	ldr	r2, [r3, #28]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	431a      	orrs	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008060:	019b      	lsls	r3, r3, #6
 8008062:	431a      	orrs	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008068:	085b      	lsrs	r3, r3, #1
 800806a:	3b01      	subs	r3, #1
 800806c:	041b      	lsls	r3, r3, #16
 800806e:	431a      	orrs	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008074:	061b      	lsls	r3, r3, #24
 8008076:	431a      	orrs	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800807c:	071b      	lsls	r3, r3, #28
 800807e:	491b      	ldr	r1, [pc, #108]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 8008080:	4313      	orrs	r3, r2
 8008082:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008084:	4b1b      	ldr	r3, [pc, #108]	@ (80080f4 <HAL_RCC_OscConfig+0x4b4>)
 8008086:	2201      	movs	r2, #1
 8008088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800808a:	f7fd fb29 	bl	80056e0 <HAL_GetTick>
 800808e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008090:	e008      	b.n	80080a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008092:	f7fd fb25 	bl	80056e0 <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	2b02      	cmp	r3, #2
 800809e:	d901      	bls.n	80080a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e064      	b.n	800816e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080a4:	4b11      	ldr	r3, [pc, #68]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d0f0      	beq.n	8008092 <HAL_RCC_OscConfig+0x452>
 80080b0:	e05c      	b.n	800816c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080b2:	4b10      	ldr	r3, [pc, #64]	@ (80080f4 <HAL_RCC_OscConfig+0x4b4>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b8:	f7fd fb12 	bl	80056e0 <HAL_GetTick>
 80080bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080be:	e008      	b.n	80080d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080c0:	f7fd fb0e 	bl	80056e0 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e04d      	b.n	800816e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080d2:	4b06      	ldr	r3, [pc, #24]	@ (80080ec <HAL_RCC_OscConfig+0x4ac>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1f0      	bne.n	80080c0 <HAL_RCC_OscConfig+0x480>
 80080de:	e045      	b.n	800816c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d107      	bne.n	80080f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e040      	b.n	800816e <HAL_RCC_OscConfig+0x52e>
 80080ec:	40023800 	.word	0x40023800
 80080f0:	40007000 	.word	0x40007000
 80080f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80080f8:	4b1f      	ldr	r3, [pc, #124]	@ (8008178 <HAL_RCC_OscConfig+0x538>)
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d030      	beq.n	8008168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008110:	429a      	cmp	r2, r3
 8008112:	d129      	bne.n	8008168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800811e:	429a      	cmp	r2, r3
 8008120:	d122      	bne.n	8008168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008128:	4013      	ands	r3, r2
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800812e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008130:	4293      	cmp	r3, r2
 8008132:	d119      	bne.n	8008168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813e:	085b      	lsrs	r3, r3, #1
 8008140:	3b01      	subs	r3, #1
 8008142:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008144:	429a      	cmp	r2, r3
 8008146:	d10f      	bne.n	8008168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008152:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008154:	429a      	cmp	r2, r3
 8008156:	d107      	bne.n	8008168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008162:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008164:	429a      	cmp	r2, r3
 8008166:	d001      	beq.n	800816c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e000      	b.n	800816e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3718      	adds	r7, #24
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	40023800 	.word	0x40023800

0800817c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e041      	b.n	8008212 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	d106      	bne.n	80081a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7fc ffc6 	bl	8005134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	3304      	adds	r3, #4
 80081b8:	4619      	mov	r1, r3
 80081ba:	4610      	mov	r0, r2
 80081bc:	f000 fbb2 	bl	8008924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b01      	cmp	r3, #1
 800822e:	d001      	beq.n	8008234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e04e      	b.n	80082d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68da      	ldr	r2, [r3, #12]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a23      	ldr	r2, [pc, #140]	@ (80082e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d022      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800825e:	d01d      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a1f      	ldr	r2, [pc, #124]	@ (80082e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d018      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a1e      	ldr	r2, [pc, #120]	@ (80082e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d013      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a1c      	ldr	r2, [pc, #112]	@ (80082ec <HAL_TIM_Base_Start_IT+0xd0>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d00e      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a1b      	ldr	r2, [pc, #108]	@ (80082f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d009      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a19      	ldr	r2, [pc, #100]	@ (80082f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d004      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a18      	ldr	r2, [pc, #96]	@ (80082f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d111      	bne.n	80082c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f003 0307 	and.w	r3, r3, #7
 80082a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2b06      	cmp	r3, #6
 80082ac:	d010      	beq.n	80082d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f042 0201 	orr.w	r2, r2, #1
 80082bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082be:	e007      	b.n	80082d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f042 0201 	orr.w	r2, r2, #1
 80082ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	40010000 	.word	0x40010000
 80082e4:	40000400 	.word	0x40000400
 80082e8:	40000800 	.word	0x40000800
 80082ec:	40000c00 	.word	0x40000c00
 80082f0:	40010400 	.word	0x40010400
 80082f4:	40014000 	.word	0x40014000
 80082f8:	40001800 	.word	0x40001800

080082fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e097      	b.n	8008440 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b00      	cmp	r3, #0
 800831a:	d106      	bne.n	800832a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7fc fe17 	bl	8004f58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2202      	movs	r2, #2
 800832e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	6812      	ldr	r2, [r2, #0]
 800833c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008340:	f023 0307 	bic.w	r3, r3, #7
 8008344:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	3304      	adds	r3, #4
 800834e:	4619      	mov	r1, r3
 8008350:	4610      	mov	r0, r2
 8008352:	f000 fae7 	bl	8008924 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	4313      	orrs	r3, r2
 8008376:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800837e:	f023 0303 	bic.w	r3, r3, #3
 8008382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	021b      	lsls	r3, r3, #8
 800838e:	4313      	orrs	r3, r2
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	4313      	orrs	r3, r2
 8008394:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800839c:	f023 030c 	bic.w	r3, r3, #12
 80083a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80083a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	021b      	lsls	r3, r3, #8
 80083b8:	4313      	orrs	r3, r2
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	4313      	orrs	r3, r2
 80083be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	011a      	lsls	r2, r3, #4
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	031b      	lsls	r3, r3, #12
 80083cc:	4313      	orrs	r3, r2
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80083da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80083e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	011b      	lsls	r3, r3, #4
 80083ee:	4313      	orrs	r3, r2
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008458:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008460:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008468:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008470:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d110      	bne.n	800849a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008478:	7bfb      	ldrb	r3, [r7, #15]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d102      	bne.n	8008484 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800847e:	7b7b      	ldrb	r3, [r7, #13]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d001      	beq.n	8008488 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e069      	b.n	800855c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2202      	movs	r2, #2
 800848c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2202      	movs	r2, #2
 8008494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008498:	e031      	b.n	80084fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b04      	cmp	r3, #4
 800849e:	d110      	bne.n	80084c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d102      	bne.n	80084ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80084a6:	7b3b      	ldrb	r3, [r7, #12]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d001      	beq.n	80084b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e055      	b.n	800855c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80084c0:	e01d      	b.n	80084fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d108      	bne.n	80084da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d105      	bne.n	80084da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084ce:	7b7b      	ldrb	r3, [r7, #13]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d102      	bne.n	80084da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80084d4:	7b3b      	ldrb	r3, [r7, #12]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d001      	beq.n	80084de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e03e      	b.n	800855c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2202      	movs	r2, #2
 80084e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2202      	movs	r2, #2
 80084ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2202      	movs	r2, #2
 80084f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2202      	movs	r2, #2
 80084fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d003      	beq.n	800850c <HAL_TIM_Encoder_Start+0xc4>
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	2b04      	cmp	r3, #4
 8008508:	d008      	beq.n	800851c <HAL_TIM_Encoder_Start+0xd4>
 800850a:	e00f      	b.n	800852c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2201      	movs	r2, #1
 8008512:	2100      	movs	r1, #0
 8008514:	4618      	mov	r0, r3
 8008516:	f000 fb4b 	bl	8008bb0 <TIM_CCxChannelCmd>
      break;
 800851a:	e016      	b.n	800854a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2201      	movs	r2, #1
 8008522:	2104      	movs	r1, #4
 8008524:	4618      	mov	r0, r3
 8008526:	f000 fb43 	bl	8008bb0 <TIM_CCxChannelCmd>
      break;
 800852a:	e00e      	b.n	800854a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2201      	movs	r2, #1
 8008532:	2100      	movs	r1, #0
 8008534:	4618      	mov	r0, r3
 8008536:	f000 fb3b 	bl	8008bb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2201      	movs	r2, #1
 8008540:	2104      	movs	r1, #4
 8008542:	4618      	mov	r0, r3
 8008544:	f000 fb34 	bl	8008bb0 <TIM_CCxChannelCmd>
      break;
 8008548:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f042 0201 	orr.w	r2, r2, #1
 8008558:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	f003 0302 	and.w	r3, r3, #2
 8008582:	2b00      	cmp	r3, #0
 8008584:	d020      	beq.n	80085c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f003 0302 	and.w	r3, r3, #2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d01b      	beq.n	80085c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f06f 0202 	mvn.w	r2, #2
 8008598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	f003 0303 	and.w	r3, r3, #3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f999 	bl	80088e6 <HAL_TIM_IC_CaptureCallback>
 80085b4:	e005      	b.n	80085c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f98b 	bl	80088d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f99c 	bl	80088fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f003 0304 	and.w	r3, r3, #4
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d020      	beq.n	8008614 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d01b      	beq.n	8008614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f06f 0204 	mvn.w	r2, #4
 80085e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2202      	movs	r2, #2
 80085ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f973 	bl	80088e6 <HAL_TIM_IC_CaptureCallback>
 8008600:	e005      	b.n	800860e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f965 	bl	80088d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f976 	bl	80088fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	f003 0308 	and.w	r3, r3, #8
 800861a:	2b00      	cmp	r3, #0
 800861c:	d020      	beq.n	8008660 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01b      	beq.n	8008660 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f06f 0208 	mvn.w	r2, #8
 8008630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2204      	movs	r2, #4
 8008636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	f003 0303 	and.w	r3, r3, #3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f94d 	bl	80088e6 <HAL_TIM_IC_CaptureCallback>
 800864c:	e005      	b.n	800865a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f93f 	bl	80088d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f950 	bl	80088fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	f003 0310 	and.w	r3, r3, #16
 8008666:	2b00      	cmp	r3, #0
 8008668:	d020      	beq.n	80086ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f003 0310 	and.w	r3, r3, #16
 8008670:	2b00      	cmp	r3, #0
 8008672:	d01b      	beq.n	80086ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f06f 0210 	mvn.w	r2, #16
 800867c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2208      	movs	r2, #8
 8008682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f927 	bl	80088e6 <HAL_TIM_IC_CaptureCallback>
 8008698:	e005      	b.n	80086a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f919 	bl	80088d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f92a 	bl	80088fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00c      	beq.n	80086d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f003 0301 	and.w	r3, r3, #1
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d007      	beq.n	80086d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f06f 0201 	mvn.w	r2, #1
 80086c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7f8 fd4c 	bl	8001168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00c      	beq.n	80086f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d007      	beq.n	80086f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80086ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fb0a 	bl	8008d08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00c      	beq.n	8008718 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008704:	2b00      	cmp	r3, #0
 8008706:	d007      	beq.n	8008718 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f8fb 	bl	800890e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	f003 0320 	and.w	r3, r3, #32
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00c      	beq.n	800873c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f003 0320 	and.w	r3, r3, #32
 8008728:	2b00      	cmp	r3, #0
 800872a:	d007      	beq.n	800873c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f06f 0220 	mvn.w	r2, #32
 8008734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fadc 	bl	8008cf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800873c:	bf00      	nop
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008758:	2b01      	cmp	r3, #1
 800875a:	d101      	bne.n	8008760 <HAL_TIM_ConfigClockSource+0x1c>
 800875c:	2302      	movs	r3, #2
 800875e:	e0b4      	b.n	80088ca <HAL_TIM_ConfigClockSource+0x186>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2202      	movs	r2, #2
 800876c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800877e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008798:	d03e      	beq.n	8008818 <HAL_TIM_ConfigClockSource+0xd4>
 800879a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800879e:	f200 8087 	bhi.w	80088b0 <HAL_TIM_ConfigClockSource+0x16c>
 80087a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a6:	f000 8086 	beq.w	80088b6 <HAL_TIM_ConfigClockSource+0x172>
 80087aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087ae:	d87f      	bhi.n	80088b0 <HAL_TIM_ConfigClockSource+0x16c>
 80087b0:	2b70      	cmp	r3, #112	@ 0x70
 80087b2:	d01a      	beq.n	80087ea <HAL_TIM_ConfigClockSource+0xa6>
 80087b4:	2b70      	cmp	r3, #112	@ 0x70
 80087b6:	d87b      	bhi.n	80088b0 <HAL_TIM_ConfigClockSource+0x16c>
 80087b8:	2b60      	cmp	r3, #96	@ 0x60
 80087ba:	d050      	beq.n	800885e <HAL_TIM_ConfigClockSource+0x11a>
 80087bc:	2b60      	cmp	r3, #96	@ 0x60
 80087be:	d877      	bhi.n	80088b0 <HAL_TIM_ConfigClockSource+0x16c>
 80087c0:	2b50      	cmp	r3, #80	@ 0x50
 80087c2:	d03c      	beq.n	800883e <HAL_TIM_ConfigClockSource+0xfa>
 80087c4:	2b50      	cmp	r3, #80	@ 0x50
 80087c6:	d873      	bhi.n	80088b0 <HAL_TIM_ConfigClockSource+0x16c>
 80087c8:	2b40      	cmp	r3, #64	@ 0x40
 80087ca:	d058      	beq.n	800887e <HAL_TIM_ConfigClockSource+0x13a>
 80087cc:	2b40      	cmp	r3, #64	@ 0x40
 80087ce:	d86f      	bhi.n	80088b0 <HAL_TIM_ConfigClockSource+0x16c>
 80087d0:	2b30      	cmp	r3, #48	@ 0x30
 80087d2:	d064      	beq.n	800889e <HAL_TIM_ConfigClockSource+0x15a>
 80087d4:	2b30      	cmp	r3, #48	@ 0x30
 80087d6:	d86b      	bhi.n	80088b0 <HAL_TIM_ConfigClockSource+0x16c>
 80087d8:	2b20      	cmp	r3, #32
 80087da:	d060      	beq.n	800889e <HAL_TIM_ConfigClockSource+0x15a>
 80087dc:	2b20      	cmp	r3, #32
 80087de:	d867      	bhi.n	80088b0 <HAL_TIM_ConfigClockSource+0x16c>
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d05c      	beq.n	800889e <HAL_TIM_ConfigClockSource+0x15a>
 80087e4:	2b10      	cmp	r3, #16
 80087e6:	d05a      	beq.n	800889e <HAL_TIM_ConfigClockSource+0x15a>
 80087e8:	e062      	b.n	80088b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087fa:	f000 f9b9 	bl	8008b70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800880c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	609a      	str	r2, [r3, #8]
      break;
 8008816:	e04f      	b.n	80088b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008828:	f000 f9a2 	bl	8008b70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689a      	ldr	r2, [r3, #8]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800883a:	609a      	str	r2, [r3, #8]
      break;
 800883c:	e03c      	b.n	80088b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800884a:	461a      	mov	r2, r3
 800884c:	f000 f916 	bl	8008a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2150      	movs	r1, #80	@ 0x50
 8008856:	4618      	mov	r0, r3
 8008858:	f000 f96f 	bl	8008b3a <TIM_ITRx_SetConfig>
      break;
 800885c:	e02c      	b.n	80088b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800886a:	461a      	mov	r2, r3
 800886c:	f000 f935 	bl	8008ada <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2160      	movs	r1, #96	@ 0x60
 8008876:	4618      	mov	r0, r3
 8008878:	f000 f95f 	bl	8008b3a <TIM_ITRx_SetConfig>
      break;
 800887c:	e01c      	b.n	80088b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800888a:	461a      	mov	r2, r3
 800888c:	f000 f8f6 	bl	8008a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2140      	movs	r1, #64	@ 0x40
 8008896:	4618      	mov	r0, r3
 8008898:	f000 f94f 	bl	8008b3a <TIM_ITRx_SetConfig>
      break;
 800889c:	e00c      	b.n	80088b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4619      	mov	r1, r3
 80088a8:	4610      	mov	r0, r2
 80088aa:	f000 f946 	bl	8008b3a <TIM_ITRx_SetConfig>
      break;
 80088ae:	e003      	b.n	80088b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	73fb      	strb	r3, [r7, #15]
      break;
 80088b4:	e000      	b.n	80088b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80088b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b083      	sub	sp, #12
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088da:	bf00      	nop
 80088dc:	370c      	adds	r7, #12
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088ee:	bf00      	nop
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b083      	sub	sp, #12
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008902:	bf00      	nop
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008916:	bf00      	nop
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
	...

08008924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a46      	ldr	r2, [pc, #280]	@ (8008a50 <TIM_Base_SetConfig+0x12c>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d013      	beq.n	8008964 <TIM_Base_SetConfig+0x40>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008942:	d00f      	beq.n	8008964 <TIM_Base_SetConfig+0x40>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a43      	ldr	r2, [pc, #268]	@ (8008a54 <TIM_Base_SetConfig+0x130>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d00b      	beq.n	8008964 <TIM_Base_SetConfig+0x40>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a42      	ldr	r2, [pc, #264]	@ (8008a58 <TIM_Base_SetConfig+0x134>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d007      	beq.n	8008964 <TIM_Base_SetConfig+0x40>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a41      	ldr	r2, [pc, #260]	@ (8008a5c <TIM_Base_SetConfig+0x138>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d003      	beq.n	8008964 <TIM_Base_SetConfig+0x40>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a40      	ldr	r2, [pc, #256]	@ (8008a60 <TIM_Base_SetConfig+0x13c>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d108      	bne.n	8008976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800896a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	4313      	orrs	r3, r2
 8008974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a35      	ldr	r2, [pc, #212]	@ (8008a50 <TIM_Base_SetConfig+0x12c>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d02b      	beq.n	80089d6 <TIM_Base_SetConfig+0xb2>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008984:	d027      	beq.n	80089d6 <TIM_Base_SetConfig+0xb2>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a32      	ldr	r2, [pc, #200]	@ (8008a54 <TIM_Base_SetConfig+0x130>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d023      	beq.n	80089d6 <TIM_Base_SetConfig+0xb2>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a31      	ldr	r2, [pc, #196]	@ (8008a58 <TIM_Base_SetConfig+0x134>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d01f      	beq.n	80089d6 <TIM_Base_SetConfig+0xb2>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a30      	ldr	r2, [pc, #192]	@ (8008a5c <TIM_Base_SetConfig+0x138>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d01b      	beq.n	80089d6 <TIM_Base_SetConfig+0xb2>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a2f      	ldr	r2, [pc, #188]	@ (8008a60 <TIM_Base_SetConfig+0x13c>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d017      	beq.n	80089d6 <TIM_Base_SetConfig+0xb2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a2e      	ldr	r2, [pc, #184]	@ (8008a64 <TIM_Base_SetConfig+0x140>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d013      	beq.n	80089d6 <TIM_Base_SetConfig+0xb2>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a2d      	ldr	r2, [pc, #180]	@ (8008a68 <TIM_Base_SetConfig+0x144>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d00f      	beq.n	80089d6 <TIM_Base_SetConfig+0xb2>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a2c      	ldr	r2, [pc, #176]	@ (8008a6c <TIM_Base_SetConfig+0x148>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d00b      	beq.n	80089d6 <TIM_Base_SetConfig+0xb2>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a2b      	ldr	r2, [pc, #172]	@ (8008a70 <TIM_Base_SetConfig+0x14c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d007      	beq.n	80089d6 <TIM_Base_SetConfig+0xb2>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a2a      	ldr	r2, [pc, #168]	@ (8008a74 <TIM_Base_SetConfig+0x150>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d003      	beq.n	80089d6 <TIM_Base_SetConfig+0xb2>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a29      	ldr	r2, [pc, #164]	@ (8008a78 <TIM_Base_SetConfig+0x154>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d108      	bne.n	80089e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	689a      	ldr	r2, [r3, #8]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a10      	ldr	r2, [pc, #64]	@ (8008a50 <TIM_Base_SetConfig+0x12c>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d003      	beq.n	8008a1c <TIM_Base_SetConfig+0xf8>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a12      	ldr	r2, [pc, #72]	@ (8008a60 <TIM_Base_SetConfig+0x13c>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d103      	bne.n	8008a24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	691a      	ldr	r2, [r3, #16]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d105      	bne.n	8008a42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	f023 0201 	bic.w	r2, r3, #1
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	611a      	str	r2, [r3, #16]
  }
}
 8008a42:	bf00      	nop
 8008a44:	3714      	adds	r7, #20
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	40010000 	.word	0x40010000
 8008a54:	40000400 	.word	0x40000400
 8008a58:	40000800 	.word	0x40000800
 8008a5c:	40000c00 	.word	0x40000c00
 8008a60:	40010400 	.word	0x40010400
 8008a64:	40014000 	.word	0x40014000
 8008a68:	40014400 	.word	0x40014400
 8008a6c:	40014800 	.word	0x40014800
 8008a70:	40001800 	.word	0x40001800
 8008a74:	40001c00 	.word	0x40001c00
 8008a78:	40002000 	.word	0x40002000

08008a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b087      	sub	sp, #28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	f023 0201 	bic.w	r2, r3, #1
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	011b      	lsls	r3, r3, #4
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f023 030a 	bic.w	r3, r3, #10
 8008ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	621a      	str	r2, [r3, #32]
}
 8008ace:	bf00      	nop
 8008ad0:	371c      	adds	r7, #28
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b087      	sub	sp, #28
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6a1b      	ldr	r3, [r3, #32]
 8008af0:	f023 0210 	bic.w	r2, r3, #16
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	031b      	lsls	r3, r3, #12
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008b16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	011b      	lsls	r3, r3, #4
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	621a      	str	r2, [r3, #32]
}
 8008b2e:	bf00      	nop
 8008b30:	371c      	adds	r7, #28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b085      	sub	sp, #20
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	f043 0307 	orr.w	r3, r3, #7
 8008b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	609a      	str	r2, [r3, #8]
}
 8008b64:	bf00      	nop
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
 8008b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	021a      	lsls	r2, r3, #8
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	431a      	orrs	r2, r3
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	609a      	str	r2, [r3, #8]
}
 8008ba4:	bf00      	nop
 8008ba6:	371c      	adds	r7, #28
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	f003 031f 	and.w	r3, r3, #31
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6a1a      	ldr	r2, [r3, #32]
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	43db      	mvns	r3, r3
 8008bd2:	401a      	ands	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6a1a      	ldr	r2, [r3, #32]
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	f003 031f 	and.w	r3, r3, #31
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	fa01 f303 	lsl.w	r3, r1, r3
 8008be8:	431a      	orrs	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	621a      	str	r2, [r3, #32]
}
 8008bee:	bf00      	nop
 8008bf0:	371c      	adds	r7, #28
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
	...

08008bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d101      	bne.n	8008c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c10:	2302      	movs	r3, #2
 8008c12:	e05a      	b.n	8008cca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a21      	ldr	r2, [pc, #132]	@ (8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d022      	beq.n	8008c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c60:	d01d      	beq.n	8008c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a1d      	ldr	r2, [pc, #116]	@ (8008cdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d018      	beq.n	8008c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a1b      	ldr	r2, [pc, #108]	@ (8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d013      	beq.n	8008c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a1a      	ldr	r2, [pc, #104]	@ (8008ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d00e      	beq.n	8008c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a18      	ldr	r2, [pc, #96]	@ (8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d009      	beq.n	8008c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a17      	ldr	r2, [pc, #92]	@ (8008cec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d004      	beq.n	8008c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a15      	ldr	r2, [pc, #84]	@ (8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d10c      	bne.n	8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	40010000 	.word	0x40010000
 8008cdc:	40000400 	.word	0x40000400
 8008ce0:	40000800 	.word	0x40000800
 8008ce4:	40000c00 	.word	0x40000c00
 8008ce8:	40010400 	.word	0x40010400
 8008cec:	40014000 	.word	0x40014000
 8008cf0:	40001800 	.word	0x40001800

08008cf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d101      	bne.n	8008d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e042      	b.n	8008db4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d106      	bne.n	8008d48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7fc fa3c 	bl	80051c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2224      	movs	r2, #36	@ 0x24
 8008d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68da      	ldr	r2, [r3, #12]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 ff37 	bl	8009bd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	691a      	ldr	r2, [r3, #16]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	695a      	ldr	r2, [r3, #20]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68da      	ldr	r2, [r3, #12]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2220      	movs	r2, #32
 8008da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2220      	movs	r2, #32
 8008da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b08c      	sub	sp, #48	@ 0x30
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b20      	cmp	r3, #32
 8008dd4:	d156      	bne.n	8008e84 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <HAL_UART_Transmit_DMA+0x26>
 8008ddc:	88fb      	ldrh	r3, [r7, #6]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e04f      	b.n	8008e86 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	88fa      	ldrh	r2, [r7, #6]
 8008df0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	88fa      	ldrh	r2, [r7, #6]
 8008df6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2221      	movs	r2, #33	@ 0x21
 8008e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e0a:	4a21      	ldr	r2, [pc, #132]	@ (8008e90 <HAL_UART_Transmit_DMA+0xd4>)
 8008e0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e12:	4a20      	ldr	r2, [pc, #128]	@ (8008e94 <HAL_UART_Transmit_DMA+0xd8>)
 8008e14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e1a:	4a1f      	ldr	r2, [pc, #124]	@ (8008e98 <HAL_UART_Transmit_DMA+0xdc>)
 8008e1c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e22:	2200      	movs	r2, #0
 8008e24:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008e26:	f107 0308 	add.w	r3, r7, #8
 8008e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e32:	6819      	ldr	r1, [r3, #0]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	3304      	adds	r3, #4
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	88fb      	ldrh	r3, [r7, #6]
 8008e3e:	f7fc fe3f 	bl	8005ac0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008e4a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	3314      	adds	r3, #20
 8008e52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	e853 3f00 	ldrex	r3, [r3]
 8008e5a:	617b      	str	r3, [r7, #20]
   return(result);
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3314      	adds	r3, #20
 8008e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e70:	6a39      	ldr	r1, [r7, #32]
 8008e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e74:	e841 2300 	strex	r3, r2, [r1]
 8008e78:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1e5      	bne.n	8008e4c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	e000      	b.n	8008e86 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008e84:	2302      	movs	r3, #2
  }
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3730      	adds	r7, #48	@ 0x30
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	08009461 	.word	0x08009461
 8008e94:	080094fb 	.word	0x080094fb
 8008e98:	0800967f 	.word	0x0800967f

08008e9c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b20      	cmp	r3, #32
 8008eb4:	d112      	bne.n	8008edc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <HAL_UART_Receive_DMA+0x26>
 8008ebc:	88fb      	ldrh	r3, [r7, #6]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d101      	bne.n	8008ec6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e00b      	b.n	8008ede <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008ecc:	88fb      	ldrh	r3, [r7, #6]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	68b9      	ldr	r1, [r7, #8]
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f000 fc1e 	bl	8009714 <UART_Start_Receive_DMA>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	e000      	b.n	8008ede <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008edc:	2302      	movs	r3, #2
  }
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
	...

08008ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b0ba      	sub	sp, #232	@ 0xe8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f1e:	f003 030f 	and.w	r3, r3, #15
 8008f22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10f      	bne.n	8008f4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f32:	f003 0320 	and.w	r3, r3, #32
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d009      	beq.n	8008f4e <HAL_UART_IRQHandler+0x66>
 8008f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f3e:	f003 0320 	and.w	r3, r3, #32
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fd85 	bl	8009a56 <UART_Receive_IT>
      return;
 8008f4c:	e25b      	b.n	8009406 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 80de 	beq.w	8009114 <HAL_UART_IRQHandler+0x22c>
 8008f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d106      	bne.n	8008f72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 80d1 	beq.w	8009114 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00b      	beq.n	8008f96 <HAL_UART_IRQHandler+0xae>
 8008f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d005      	beq.n	8008f96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f8e:	f043 0201 	orr.w	r2, r3, #1
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f9a:	f003 0304 	and.w	r3, r3, #4
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00b      	beq.n	8008fba <HAL_UART_IRQHandler+0xd2>
 8008fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d005      	beq.n	8008fba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fb2:	f043 0202 	orr.w	r2, r3, #2
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fbe:	f003 0302 	and.w	r3, r3, #2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00b      	beq.n	8008fde <HAL_UART_IRQHandler+0xf6>
 8008fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fd6:	f043 0204 	orr.w	r2, r3, #4
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fe2:	f003 0308 	and.w	r3, r3, #8
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d011      	beq.n	800900e <HAL_UART_IRQHandler+0x126>
 8008fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fee:	f003 0320 	and.w	r3, r3, #32
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d105      	bne.n	8009002 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d005      	beq.n	800900e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009006:	f043 0208 	orr.w	r2, r3, #8
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 81f2 	beq.w	80093fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800901c:	f003 0320 	and.w	r3, r3, #32
 8009020:	2b00      	cmp	r3, #0
 8009022:	d008      	beq.n	8009036 <HAL_UART_IRQHandler+0x14e>
 8009024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b00      	cmp	r3, #0
 800902e:	d002      	beq.n	8009036 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fd10 	bl	8009a56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009040:	2b40      	cmp	r3, #64	@ 0x40
 8009042:	bf0c      	ite	eq
 8009044:	2301      	moveq	r3, #1
 8009046:	2300      	movne	r3, #0
 8009048:	b2db      	uxtb	r3, r3
 800904a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009052:	f003 0308 	and.w	r3, r3, #8
 8009056:	2b00      	cmp	r3, #0
 8009058:	d103      	bne.n	8009062 <HAL_UART_IRQHandler+0x17a>
 800905a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800905e:	2b00      	cmp	r3, #0
 8009060:	d04f      	beq.n	8009102 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fc18 	bl	8009898 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009072:	2b40      	cmp	r3, #64	@ 0x40
 8009074:	d141      	bne.n	80090fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3314      	adds	r3, #20
 800907c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009080:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009084:	e853 3f00 	ldrex	r3, [r3]
 8009088:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800908c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009094:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3314      	adds	r3, #20
 800909e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80090a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80090a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80090ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80090b2:	e841 2300 	strex	r3, r2, [r1]
 80090b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80090ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1d9      	bne.n	8009076 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d013      	beq.n	80090f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090ce:	4a7e      	ldr	r2, [pc, #504]	@ (80092c8 <HAL_UART_IRQHandler+0x3e0>)
 80090d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fc fdba 	bl	8005c50 <HAL_DMA_Abort_IT>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d016      	beq.n	8009110 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80090ec:	4610      	mov	r0, r2
 80090ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f0:	e00e      	b.n	8009110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f99e 	bl	8009434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f8:	e00a      	b.n	8009110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f99a 	bl	8009434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009100:	e006      	b.n	8009110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f996 	bl	8009434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800910e:	e175      	b.n	80093fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009110:	bf00      	nop
    return;
 8009112:	e173      	b.n	80093fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009118:	2b01      	cmp	r3, #1
 800911a:	f040 814f 	bne.w	80093bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800911e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009122:	f003 0310 	and.w	r3, r3, #16
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 8148 	beq.w	80093bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800912c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009130:	f003 0310 	and.w	r3, r3, #16
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 8141 	beq.w	80093bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800913a:	2300      	movs	r3, #0
 800913c:	60bb      	str	r3, [r7, #8]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	60bb      	str	r3, [r7, #8]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	60bb      	str	r3, [r7, #8]
 800914e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800915a:	2b40      	cmp	r3, #64	@ 0x40
 800915c:	f040 80b6 	bne.w	80092cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800916c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 8145 	beq.w	8009400 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800917a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800917e:	429a      	cmp	r2, r3
 8009180:	f080 813e 	bcs.w	8009400 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800918a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009196:	f000 8088 	beq.w	80092aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	330c      	adds	r3, #12
 80091a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80091b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80091b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	330c      	adds	r3, #12
 80091c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80091c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80091ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80091d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80091d6:	e841 2300 	strex	r3, r2, [r1]
 80091da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80091de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1d9      	bne.n	800919a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3314      	adds	r3, #20
 80091ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80091f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80091f8:	f023 0301 	bic.w	r3, r3, #1
 80091fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3314      	adds	r3, #20
 8009206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800920a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800920e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009212:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800921c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e1      	bne.n	80091e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3314      	adds	r3, #20
 8009228:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009238:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3314      	adds	r3, #20
 8009242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009246:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009248:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800924c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800924e:	e841 2300 	strex	r3, r2, [r1]
 8009252:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009254:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1e3      	bne.n	8009222 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2220      	movs	r2, #32
 800925e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	330c      	adds	r3, #12
 800926e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009272:	e853 3f00 	ldrex	r3, [r3]
 8009276:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800927a:	f023 0310 	bic.w	r3, r3, #16
 800927e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	330c      	adds	r3, #12
 8009288:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800928c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800928e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009290:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009292:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009294:	e841 2300 	strex	r3, r2, [r1]
 8009298:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800929a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e3      	bne.n	8009268 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fc fc63 	bl	8005b70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2202      	movs	r2, #2
 80092ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	1ad3      	subs	r3, r2, r3
 80092bc:	b29b      	uxth	r3, r3
 80092be:	4619      	mov	r1, r3
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f8c1 	bl	8009448 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092c6:	e09b      	b.n	8009400 <HAL_UART_IRQHandler+0x518>
 80092c8:	0800995f 	.word	0x0800995f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 808e 	beq.w	8009404 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80092e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 8089 	beq.w	8009404 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	330c      	adds	r3, #12
 80092f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092fc:	e853 3f00 	ldrex	r3, [r3]
 8009300:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009304:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009308:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	330c      	adds	r3, #12
 8009312:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009316:	647a      	str	r2, [r7, #68]	@ 0x44
 8009318:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800931c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800931e:	e841 2300 	strex	r3, r2, [r1]
 8009322:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1e3      	bne.n	80092f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3314      	adds	r3, #20
 8009330:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	623b      	str	r3, [r7, #32]
   return(result);
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	f023 0301 	bic.w	r3, r3, #1
 8009340:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3314      	adds	r3, #20
 800934a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800934e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009350:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009352:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009356:	e841 2300 	strex	r3, r2, [r1]
 800935a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800935c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1e3      	bne.n	800932a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2220      	movs	r2, #32
 8009366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	330c      	adds	r3, #12
 8009376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	e853 3f00 	ldrex	r3, [r3]
 800937e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f023 0310 	bic.w	r3, r3, #16
 8009386:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	330c      	adds	r3, #12
 8009390:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009394:	61fa      	str	r2, [r7, #28]
 8009396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009398:	69b9      	ldr	r1, [r7, #24]
 800939a:	69fa      	ldr	r2, [r7, #28]
 800939c:	e841 2300 	strex	r3, r2, [r1]
 80093a0:	617b      	str	r3, [r7, #20]
   return(result);
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1e3      	bne.n	8009370 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2202      	movs	r2, #2
 80093ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f847 	bl	8009448 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093ba:	e023      	b.n	8009404 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d009      	beq.n	80093dc <HAL_UART_IRQHandler+0x4f4>
 80093c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fad6 	bl	8009986 <UART_Transmit_IT>
    return;
 80093da:	e014      	b.n	8009406 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00e      	beq.n	8009406 <HAL_UART_IRQHandler+0x51e>
 80093e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d008      	beq.n	8009406 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fb16 	bl	8009a26 <UART_EndTransmit_IT>
    return;
 80093fa:	e004      	b.n	8009406 <HAL_UART_IRQHandler+0x51e>
    return;
 80093fc:	bf00      	nop
 80093fe:	e002      	b.n	8009406 <HAL_UART_IRQHandler+0x51e>
      return;
 8009400:	bf00      	nop
 8009402:	e000      	b.n	8009406 <HAL_UART_IRQHandler+0x51e>
      return;
 8009404:	bf00      	nop
  }
}
 8009406:	37e8      	adds	r7, #232	@ 0xe8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b090      	sub	sp, #64	@ 0x40
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800946c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009478:	2b00      	cmp	r3, #0
 800947a:	d137      	bne.n	80094ec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800947c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800947e:	2200      	movs	r2, #0
 8009480:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3314      	adds	r3, #20
 8009488:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	623b      	str	r3, [r7, #32]
   return(result);
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009498:	63bb      	str	r3, [r7, #56]	@ 0x38
 800949a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3314      	adds	r3, #20
 80094a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80094a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e5      	bne.n	8009482 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	330c      	adds	r3, #12
 80094bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	e853 3f00 	ldrex	r3, [r3]
 80094c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	330c      	adds	r3, #12
 80094d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80094d6:	61fa      	str	r2, [r7, #28]
 80094d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094da:	69b9      	ldr	r1, [r7, #24]
 80094dc:	69fa      	ldr	r2, [r7, #28]
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	617b      	str	r3, [r7, #20]
   return(result);
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1e5      	bne.n	80094b6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094ea:	e002      	b.n	80094f2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80094ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80094ee:	f7fa fa07 	bl	8003900 <HAL_UART_TxCpltCallback>
}
 80094f2:	bf00      	nop
 80094f4:	3740      	adds	r7, #64	@ 0x40
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009506:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f7ff ff7f 	bl	800940c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800950e:	bf00      	nop
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b09c      	sub	sp, #112	@ 0x70
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009522:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800952e:	2b00      	cmp	r3, #0
 8009530:	d172      	bne.n	8009618 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009534:	2200      	movs	r2, #0
 8009536:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	330c      	adds	r3, #12
 800953e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009540:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009542:	e853 3f00 	ldrex	r3, [r3]
 8009546:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009548:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800954a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800954e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009550:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	330c      	adds	r3, #12
 8009556:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009558:	65ba      	str	r2, [r7, #88]	@ 0x58
 800955a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800955e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009560:	e841 2300 	strex	r3, r2, [r1]
 8009564:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1e5      	bne.n	8009538 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3314      	adds	r3, #20
 8009572:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009576:	e853 3f00 	ldrex	r3, [r3]
 800957a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800957c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800957e:	f023 0301 	bic.w	r3, r3, #1
 8009582:	667b      	str	r3, [r7, #100]	@ 0x64
 8009584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3314      	adds	r3, #20
 800958a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800958c:	647a      	str	r2, [r7, #68]	@ 0x44
 800958e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009590:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009592:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009594:	e841 2300 	strex	r3, r2, [r1]
 8009598:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800959a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1e5      	bne.n	800956c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	3314      	adds	r3, #20
 80095a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095aa:	e853 3f00 	ldrex	r3, [r3]
 80095ae:	623b      	str	r3, [r7, #32]
   return(result);
 80095b0:	6a3b      	ldr	r3, [r7, #32]
 80095b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80095b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3314      	adds	r3, #20
 80095be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80095c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80095c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095c8:	e841 2300 	strex	r3, r2, [r1]
 80095cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1e5      	bne.n	80095a0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80095d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095d6:	2220      	movs	r2, #32
 80095d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d119      	bne.n	8009618 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	330c      	adds	r3, #12
 80095ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	e853 3f00 	ldrex	r3, [r3]
 80095f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f023 0310 	bic.w	r3, r3, #16
 80095fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	330c      	adds	r3, #12
 8009602:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009604:	61fa      	str	r2, [r7, #28]
 8009606:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009608:	69b9      	ldr	r1, [r7, #24]
 800960a:	69fa      	ldr	r2, [r7, #28]
 800960c:	e841 2300 	strex	r3, r2, [r1]
 8009610:	617b      	str	r3, [r7, #20]
   return(result);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1e5      	bne.n	80095e4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800961a:	2200      	movs	r2, #0
 800961c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800961e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009622:	2b01      	cmp	r3, #1
 8009624:	d106      	bne.n	8009634 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009628:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800962a:	4619      	mov	r1, r3
 800962c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800962e:	f7ff ff0b 	bl	8009448 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009632:	e002      	b.n	800963a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009634:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009636:	f7fa f97f 	bl	8003938 <HAL_UART_RxCpltCallback>
}
 800963a:	bf00      	nop
 800963c:	3770      	adds	r7, #112	@ 0x70
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b084      	sub	sp, #16
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800964e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2201      	movs	r2, #1
 8009654:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800965a:	2b01      	cmp	r3, #1
 800965c:	d108      	bne.n	8009670 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009662:	085b      	lsrs	r3, r3, #1
 8009664:	b29b      	uxth	r3, r3
 8009666:	4619      	mov	r1, r3
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f7ff feed 	bl	8009448 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800966e:	e002      	b.n	8009676 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f7ff fed5 	bl	8009420 <HAL_UART_RxHalfCpltCallback>
}
 8009676:	bf00      	nop
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b084      	sub	sp, #16
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009686:	2300      	movs	r3, #0
 8009688:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800968e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800969a:	2b80      	cmp	r3, #128	@ 0x80
 800969c:	bf0c      	ite	eq
 800969e:	2301      	moveq	r3, #1
 80096a0:	2300      	movne	r3, #0
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	2b21      	cmp	r3, #33	@ 0x21
 80096b0:	d108      	bne.n	80096c4 <UART_DMAError+0x46>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d005      	beq.n	80096c4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	2200      	movs	r2, #0
 80096bc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80096be:	68b8      	ldr	r0, [r7, #8]
 80096c0:	f000 f8c2 	bl	8009848 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096ce:	2b40      	cmp	r3, #64	@ 0x40
 80096d0:	bf0c      	ite	eq
 80096d2:	2301      	moveq	r3, #1
 80096d4:	2300      	movne	r3, #0
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b22      	cmp	r3, #34	@ 0x22
 80096e4:	d108      	bne.n	80096f8 <UART_DMAError+0x7a>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d005      	beq.n	80096f8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	2200      	movs	r2, #0
 80096f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80096f2:	68b8      	ldr	r0, [r7, #8]
 80096f4:	f000 f8d0 	bl	8009898 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096fc:	f043 0210 	orr.w	r2, r3, #16
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009704:	68b8      	ldr	r0, [r7, #8]
 8009706:	f7ff fe95 	bl	8009434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800970a:	bf00      	nop
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
	...

08009714 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b098      	sub	sp, #96	@ 0x60
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	4613      	mov	r3, r2
 8009720:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	88fa      	ldrh	r2, [r7, #6]
 800972c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2200      	movs	r2, #0
 8009732:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2222      	movs	r2, #34	@ 0x22
 8009738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009740:	4a3e      	ldr	r2, [pc, #248]	@ (800983c <UART_Start_Receive_DMA+0x128>)
 8009742:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009748:	4a3d      	ldr	r2, [pc, #244]	@ (8009840 <UART_Start_Receive_DMA+0x12c>)
 800974a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009750:	4a3c      	ldr	r2, [pc, #240]	@ (8009844 <UART_Start_Receive_DMA+0x130>)
 8009752:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009758:	2200      	movs	r2, #0
 800975a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800975c:	f107 0308 	add.w	r3, r7, #8
 8009760:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	3304      	adds	r3, #4
 800976c:	4619      	mov	r1, r3
 800976e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	88fb      	ldrh	r3, [r7, #6]
 8009774:	f7fc f9a4 	bl	8005ac0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009778:	2300      	movs	r3, #0
 800977a:	613b      	str	r3, [r7, #16]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	613b      	str	r3, [r7, #16]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	613b      	str	r3, [r7, #16]
 800978c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d019      	beq.n	80097ca <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	330c      	adds	r3, #12
 800979c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097a0:	e853 3f00 	ldrex	r3, [r3]
 80097a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	330c      	adds	r3, #12
 80097b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80097b6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80097b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80097bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097be:	e841 2300 	strex	r3, r2, [r1]
 80097c2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80097c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1e5      	bne.n	8009796 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	3314      	adds	r3, #20
 80097d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d4:	e853 3f00 	ldrex	r3, [r3]
 80097d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097dc:	f043 0301 	orr.w	r3, r3, #1
 80097e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3314      	adds	r3, #20
 80097e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80097ea:	63ba      	str	r2, [r7, #56]	@ 0x38
 80097ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80097f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e5      	bne.n	80097ca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3314      	adds	r3, #20
 8009804:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	e853 3f00 	ldrex	r3, [r3]
 800980c:	617b      	str	r3, [r7, #20]
   return(result);
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009814:	653b      	str	r3, [r7, #80]	@ 0x50
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3314      	adds	r3, #20
 800981c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800981e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009822:	6a39      	ldr	r1, [r7, #32]
 8009824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	61fb      	str	r3, [r7, #28]
   return(result);
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1e5      	bne.n	80097fe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3760      	adds	r7, #96	@ 0x60
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	08009517 	.word	0x08009517
 8009840:	08009643 	.word	0x08009643
 8009844:	0800967f 	.word	0x0800967f

08009848 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009848:	b480      	push	{r7}
 800984a:	b089      	sub	sp, #36	@ 0x24
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	330c      	adds	r3, #12
 8009856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	e853 3f00 	ldrex	r3, [r3]
 800985e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009866:	61fb      	str	r3, [r7, #28]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	330c      	adds	r3, #12
 800986e:	69fa      	ldr	r2, [r7, #28]
 8009870:	61ba      	str	r2, [r7, #24]
 8009872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009874:	6979      	ldr	r1, [r7, #20]
 8009876:	69ba      	ldr	r2, [r7, #24]
 8009878:	e841 2300 	strex	r3, r2, [r1]
 800987c:	613b      	str	r3, [r7, #16]
   return(result);
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1e5      	bne.n	8009850 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2220      	movs	r2, #32
 8009888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800988c:	bf00      	nop
 800988e:	3724      	adds	r7, #36	@ 0x24
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009898:	b480      	push	{r7}
 800989a:	b095      	sub	sp, #84	@ 0x54
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	330c      	adds	r3, #12
 80098a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098aa:	e853 3f00 	ldrex	r3, [r3]
 80098ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	330c      	adds	r3, #12
 80098be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80098c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098c8:	e841 2300 	strex	r3, r2, [r1]
 80098cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1e5      	bne.n	80098a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3314      	adds	r3, #20
 80098da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	e853 3f00 	ldrex	r3, [r3]
 80098e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	f023 0301 	bic.w	r3, r3, #1
 80098ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3314      	adds	r3, #20
 80098f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098fc:	e841 2300 	strex	r3, r2, [r1]
 8009900:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1e5      	bne.n	80098d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800990c:	2b01      	cmp	r3, #1
 800990e:	d119      	bne.n	8009944 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	330c      	adds	r3, #12
 8009916:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	e853 3f00 	ldrex	r3, [r3]
 800991e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	f023 0310 	bic.w	r3, r3, #16
 8009926:	647b      	str	r3, [r7, #68]	@ 0x44
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	330c      	adds	r3, #12
 800992e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009930:	61ba      	str	r2, [r7, #24]
 8009932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009934:	6979      	ldr	r1, [r7, #20]
 8009936:	69ba      	ldr	r2, [r7, #24]
 8009938:	e841 2300 	strex	r3, r2, [r1]
 800993c:	613b      	str	r3, [r7, #16]
   return(result);
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1e5      	bne.n	8009910 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2220      	movs	r2, #32
 8009948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009952:	bf00      	nop
 8009954:	3754      	adds	r7, #84	@ 0x54
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b084      	sub	sp, #16
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800996a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2200      	movs	r2, #0
 8009976:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f7ff fd5b 	bl	8009434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800997e:	bf00      	nop
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009986:	b480      	push	{r7}
 8009988:	b085      	sub	sp, #20
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009994:	b2db      	uxtb	r3, r3
 8009996:	2b21      	cmp	r3, #33	@ 0x21
 8009998:	d13e      	bne.n	8009a18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099a2:	d114      	bne.n	80099ce <UART_Transmit_IT+0x48>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d110      	bne.n	80099ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a1b      	ldr	r3, [r3, #32]
 80099b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	1c9a      	adds	r2, r3, #2
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	621a      	str	r2, [r3, #32]
 80099cc:	e008      	b.n	80099e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	1c59      	adds	r1, r3, #1
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	6211      	str	r1, [r2, #32]
 80099d8:	781a      	ldrb	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	3b01      	subs	r3, #1
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	4619      	mov	r1, r3
 80099ee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10f      	bne.n	8009a14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68da      	ldr	r2, [r3, #12]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68da      	ldr	r2, [r3, #12]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a14:	2300      	movs	r3, #0
 8009a16:	e000      	b.n	8009a1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a18:	2302      	movs	r3, #2
  }
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b082      	sub	sp, #8
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68da      	ldr	r2, [r3, #12]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2220      	movs	r2, #32
 8009a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f7f9 ff5a 	bl	8003900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b08c      	sub	sp, #48	@ 0x30
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b22      	cmp	r3, #34	@ 0x22
 8009a68:	f040 80ae 	bne.w	8009bc8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a74:	d117      	bne.n	8009aa6 <UART_Receive_IT+0x50>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d113      	bne.n	8009aa6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a86:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9e:	1c9a      	adds	r2, r3, #2
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8009aa4:	e026      	b.n	8009af4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009aac:	2300      	movs	r3, #0
 8009aae:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ab8:	d007      	beq.n	8009aca <UART_Receive_IT+0x74>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10a      	bne.n	8009ad8 <UART_Receive_IT+0x82>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d106      	bne.n	8009ad8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad4:	701a      	strb	r2, [r3, #0]
 8009ad6:	e008      	b.n	8009aea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ae4:	b2da      	uxtb	r2, r3
 8009ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aee:	1c5a      	adds	r2, r3, #1
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	3b01      	subs	r3, #1
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	4619      	mov	r1, r3
 8009b02:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d15d      	bne.n	8009bc4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68da      	ldr	r2, [r3, #12]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f022 0220 	bic.w	r2, r2, #32
 8009b16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68da      	ldr	r2, [r3, #12]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009b26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	695a      	ldr	r2, [r3, #20]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f022 0201 	bic.w	r2, r2, #1
 8009b36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2220      	movs	r2, #32
 8009b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d135      	bne.n	8009bba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	330c      	adds	r3, #12
 8009b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	e853 3f00 	ldrex	r3, [r3]
 8009b62:	613b      	str	r3, [r7, #16]
   return(result);
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	f023 0310 	bic.w	r3, r3, #16
 8009b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	330c      	adds	r3, #12
 8009b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b74:	623a      	str	r2, [r7, #32]
 8009b76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b78:	69f9      	ldr	r1, [r7, #28]
 8009b7a:	6a3a      	ldr	r2, [r7, #32]
 8009b7c:	e841 2300 	strex	r3, r2, [r1]
 8009b80:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1e5      	bne.n	8009b54 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 0310 	and.w	r3, r3, #16
 8009b92:	2b10      	cmp	r3, #16
 8009b94:	d10a      	bne.n	8009bac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b96:	2300      	movs	r3, #0
 8009b98:	60fb      	str	r3, [r7, #12]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	60fb      	str	r3, [r7, #12]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	60fb      	str	r3, [r7, #12]
 8009baa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7ff fc48 	bl	8009448 <HAL_UARTEx_RxEventCallback>
 8009bb8:	e002      	b.n	8009bc0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7f9 febc 	bl	8003938 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	e002      	b.n	8009bca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	e000      	b.n	8009bca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009bc8:	2302      	movs	r3, #2
  }
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3730      	adds	r7, #48	@ 0x30
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
	...

08009bd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bd8:	b0c0      	sub	sp, #256	@ 0x100
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf0:	68d9      	ldr	r1, [r3, #12]
 8009bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	ea40 0301 	orr.w	r3, r0, r1
 8009bfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c02:	689a      	ldr	r2, [r3, #8]
 8009c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	431a      	orrs	r2, r3
 8009c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c18:	69db      	ldr	r3, [r3, #28]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009c2c:	f021 010c 	bic.w	r1, r1, #12
 8009c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009c3a:	430b      	orrs	r3, r1
 8009c3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c4e:	6999      	ldr	r1, [r3, #24]
 8009c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	ea40 0301 	orr.w	r3, r0, r1
 8009c5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	4b8f      	ldr	r3, [pc, #572]	@ (8009ea0 <UART_SetConfig+0x2cc>)
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d005      	beq.n	8009c74 <UART_SetConfig+0xa0>
 8009c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8009ea4 <UART_SetConfig+0x2d0>)
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d104      	bne.n	8009c7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c74:	f7fd fda0 	bl	80077b8 <HAL_RCC_GetPCLK2Freq>
 8009c78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009c7c:	e003      	b.n	8009c86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c7e:	f7fd fd87 	bl	8007790 <HAL_RCC_GetPCLK1Freq>
 8009c82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c8a:	69db      	ldr	r3, [r3, #28]
 8009c8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c90:	f040 810c 	bne.w	8009eac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009c9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009ca2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009ca6:	4622      	mov	r2, r4
 8009ca8:	462b      	mov	r3, r5
 8009caa:	1891      	adds	r1, r2, r2
 8009cac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009cae:	415b      	adcs	r3, r3
 8009cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	eb12 0801 	adds.w	r8, r2, r1
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	eb43 0901 	adc.w	r9, r3, r1
 8009cc2:	f04f 0200 	mov.w	r2, #0
 8009cc6:	f04f 0300 	mov.w	r3, #0
 8009cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009cd6:	4690      	mov	r8, r2
 8009cd8:	4699      	mov	r9, r3
 8009cda:	4623      	mov	r3, r4
 8009cdc:	eb18 0303 	adds.w	r3, r8, r3
 8009ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009ce4:	462b      	mov	r3, r5
 8009ce6:	eb49 0303 	adc.w	r3, r9, r3
 8009cea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009cfa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009cfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009d02:	460b      	mov	r3, r1
 8009d04:	18db      	adds	r3, r3, r3
 8009d06:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d08:	4613      	mov	r3, r2
 8009d0a:	eb42 0303 	adc.w	r3, r2, r3
 8009d0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009d14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009d18:	f7f6 ff4c 	bl	8000bb4 <__aeabi_uldivmod>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4b61      	ldr	r3, [pc, #388]	@ (8009ea8 <UART_SetConfig+0x2d4>)
 8009d22:	fba3 2302 	umull	r2, r3, r3, r2
 8009d26:	095b      	lsrs	r3, r3, #5
 8009d28:	011c      	lsls	r4, r3, #4
 8009d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009d38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009d3c:	4642      	mov	r2, r8
 8009d3e:	464b      	mov	r3, r9
 8009d40:	1891      	adds	r1, r2, r2
 8009d42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009d44:	415b      	adcs	r3, r3
 8009d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009d4c:	4641      	mov	r1, r8
 8009d4e:	eb12 0a01 	adds.w	sl, r2, r1
 8009d52:	4649      	mov	r1, r9
 8009d54:	eb43 0b01 	adc.w	fp, r3, r1
 8009d58:	f04f 0200 	mov.w	r2, #0
 8009d5c:	f04f 0300 	mov.w	r3, #0
 8009d60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d6c:	4692      	mov	sl, r2
 8009d6e:	469b      	mov	fp, r3
 8009d70:	4643      	mov	r3, r8
 8009d72:	eb1a 0303 	adds.w	r3, sl, r3
 8009d76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d7a:	464b      	mov	r3, r9
 8009d7c:	eb4b 0303 	adc.w	r3, fp, r3
 8009d80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009d94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d98:	460b      	mov	r3, r1
 8009d9a:	18db      	adds	r3, r3, r3
 8009d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d9e:	4613      	mov	r3, r2
 8009da0:	eb42 0303 	adc.w	r3, r2, r3
 8009da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009da6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009daa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009dae:	f7f6 ff01 	bl	8000bb4 <__aeabi_uldivmod>
 8009db2:	4602      	mov	r2, r0
 8009db4:	460b      	mov	r3, r1
 8009db6:	4611      	mov	r1, r2
 8009db8:	4b3b      	ldr	r3, [pc, #236]	@ (8009ea8 <UART_SetConfig+0x2d4>)
 8009dba:	fba3 2301 	umull	r2, r3, r3, r1
 8009dbe:	095b      	lsrs	r3, r3, #5
 8009dc0:	2264      	movs	r2, #100	@ 0x64
 8009dc2:	fb02 f303 	mul.w	r3, r2, r3
 8009dc6:	1acb      	subs	r3, r1, r3
 8009dc8:	00db      	lsls	r3, r3, #3
 8009dca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009dce:	4b36      	ldr	r3, [pc, #216]	@ (8009ea8 <UART_SetConfig+0x2d4>)
 8009dd0:	fba3 2302 	umull	r2, r3, r3, r2
 8009dd4:	095b      	lsrs	r3, r3, #5
 8009dd6:	005b      	lsls	r3, r3, #1
 8009dd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009ddc:	441c      	add	r4, r3
 8009dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009de2:	2200      	movs	r2, #0
 8009de4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009de8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009dec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009df0:	4642      	mov	r2, r8
 8009df2:	464b      	mov	r3, r9
 8009df4:	1891      	adds	r1, r2, r2
 8009df6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009df8:	415b      	adcs	r3, r3
 8009dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009e00:	4641      	mov	r1, r8
 8009e02:	1851      	adds	r1, r2, r1
 8009e04:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e06:	4649      	mov	r1, r9
 8009e08:	414b      	adcs	r3, r1
 8009e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e0c:	f04f 0200 	mov.w	r2, #0
 8009e10:	f04f 0300 	mov.w	r3, #0
 8009e14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009e18:	4659      	mov	r1, fp
 8009e1a:	00cb      	lsls	r3, r1, #3
 8009e1c:	4651      	mov	r1, sl
 8009e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e22:	4651      	mov	r1, sl
 8009e24:	00ca      	lsls	r2, r1, #3
 8009e26:	4610      	mov	r0, r2
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	4642      	mov	r2, r8
 8009e2e:	189b      	adds	r3, r3, r2
 8009e30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e34:	464b      	mov	r3, r9
 8009e36:	460a      	mov	r2, r1
 8009e38:	eb42 0303 	adc.w	r3, r2, r3
 8009e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009e50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009e54:	460b      	mov	r3, r1
 8009e56:	18db      	adds	r3, r3, r3
 8009e58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	eb42 0303 	adc.w	r3, r2, r3
 8009e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009e66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009e6a:	f7f6 fea3 	bl	8000bb4 <__aeabi_uldivmod>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	4b0d      	ldr	r3, [pc, #52]	@ (8009ea8 <UART_SetConfig+0x2d4>)
 8009e74:	fba3 1302 	umull	r1, r3, r3, r2
 8009e78:	095b      	lsrs	r3, r3, #5
 8009e7a:	2164      	movs	r1, #100	@ 0x64
 8009e7c:	fb01 f303 	mul.w	r3, r1, r3
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	00db      	lsls	r3, r3, #3
 8009e84:	3332      	adds	r3, #50	@ 0x32
 8009e86:	4a08      	ldr	r2, [pc, #32]	@ (8009ea8 <UART_SetConfig+0x2d4>)
 8009e88:	fba2 2303 	umull	r2, r3, r2, r3
 8009e8c:	095b      	lsrs	r3, r3, #5
 8009e8e:	f003 0207 	and.w	r2, r3, #7
 8009e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4422      	add	r2, r4
 8009e9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e9c:	e106      	b.n	800a0ac <UART_SetConfig+0x4d8>
 8009e9e:	bf00      	nop
 8009ea0:	40011000 	.word	0x40011000
 8009ea4:	40011400 	.word	0x40011400
 8009ea8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009eb6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009eba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009ebe:	4642      	mov	r2, r8
 8009ec0:	464b      	mov	r3, r9
 8009ec2:	1891      	adds	r1, r2, r2
 8009ec4:	6239      	str	r1, [r7, #32]
 8009ec6:	415b      	adcs	r3, r3
 8009ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009eca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ece:	4641      	mov	r1, r8
 8009ed0:	1854      	adds	r4, r2, r1
 8009ed2:	4649      	mov	r1, r9
 8009ed4:	eb43 0501 	adc.w	r5, r3, r1
 8009ed8:	f04f 0200 	mov.w	r2, #0
 8009edc:	f04f 0300 	mov.w	r3, #0
 8009ee0:	00eb      	lsls	r3, r5, #3
 8009ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ee6:	00e2      	lsls	r2, r4, #3
 8009ee8:	4614      	mov	r4, r2
 8009eea:	461d      	mov	r5, r3
 8009eec:	4643      	mov	r3, r8
 8009eee:	18e3      	adds	r3, r4, r3
 8009ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ef4:	464b      	mov	r3, r9
 8009ef6:	eb45 0303 	adc.w	r3, r5, r3
 8009efa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009f0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009f0e:	f04f 0200 	mov.w	r2, #0
 8009f12:	f04f 0300 	mov.w	r3, #0
 8009f16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009f1a:	4629      	mov	r1, r5
 8009f1c:	008b      	lsls	r3, r1, #2
 8009f1e:	4621      	mov	r1, r4
 8009f20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f24:	4621      	mov	r1, r4
 8009f26:	008a      	lsls	r2, r1, #2
 8009f28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009f2c:	f7f6 fe42 	bl	8000bb4 <__aeabi_uldivmod>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4b60      	ldr	r3, [pc, #384]	@ (800a0b8 <UART_SetConfig+0x4e4>)
 8009f36:	fba3 2302 	umull	r2, r3, r3, r2
 8009f3a:	095b      	lsrs	r3, r3, #5
 8009f3c:	011c      	lsls	r4, r3, #4
 8009f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f42:	2200      	movs	r2, #0
 8009f44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009f4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009f50:	4642      	mov	r2, r8
 8009f52:	464b      	mov	r3, r9
 8009f54:	1891      	adds	r1, r2, r2
 8009f56:	61b9      	str	r1, [r7, #24]
 8009f58:	415b      	adcs	r3, r3
 8009f5a:	61fb      	str	r3, [r7, #28]
 8009f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f60:	4641      	mov	r1, r8
 8009f62:	1851      	adds	r1, r2, r1
 8009f64:	6139      	str	r1, [r7, #16]
 8009f66:	4649      	mov	r1, r9
 8009f68:	414b      	adcs	r3, r1
 8009f6a:	617b      	str	r3, [r7, #20]
 8009f6c:	f04f 0200 	mov.w	r2, #0
 8009f70:	f04f 0300 	mov.w	r3, #0
 8009f74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f78:	4659      	mov	r1, fp
 8009f7a:	00cb      	lsls	r3, r1, #3
 8009f7c:	4651      	mov	r1, sl
 8009f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f82:	4651      	mov	r1, sl
 8009f84:	00ca      	lsls	r2, r1, #3
 8009f86:	4610      	mov	r0, r2
 8009f88:	4619      	mov	r1, r3
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	4642      	mov	r2, r8
 8009f8e:	189b      	adds	r3, r3, r2
 8009f90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f94:	464b      	mov	r3, r9
 8009f96:	460a      	mov	r2, r1
 8009f98:	eb42 0303 	adc.w	r3, r2, r3
 8009f9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009faa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009fac:	f04f 0200 	mov.w	r2, #0
 8009fb0:	f04f 0300 	mov.w	r3, #0
 8009fb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009fb8:	4649      	mov	r1, r9
 8009fba:	008b      	lsls	r3, r1, #2
 8009fbc:	4641      	mov	r1, r8
 8009fbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fc2:	4641      	mov	r1, r8
 8009fc4:	008a      	lsls	r2, r1, #2
 8009fc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009fca:	f7f6 fdf3 	bl	8000bb4 <__aeabi_uldivmod>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	4b38      	ldr	r3, [pc, #224]	@ (800a0b8 <UART_SetConfig+0x4e4>)
 8009fd6:	fba3 2301 	umull	r2, r3, r3, r1
 8009fda:	095b      	lsrs	r3, r3, #5
 8009fdc:	2264      	movs	r2, #100	@ 0x64
 8009fde:	fb02 f303 	mul.w	r3, r2, r3
 8009fe2:	1acb      	subs	r3, r1, r3
 8009fe4:	011b      	lsls	r3, r3, #4
 8009fe6:	3332      	adds	r3, #50	@ 0x32
 8009fe8:	4a33      	ldr	r2, [pc, #204]	@ (800a0b8 <UART_SetConfig+0x4e4>)
 8009fea:	fba2 2303 	umull	r2, r3, r2, r3
 8009fee:	095b      	lsrs	r3, r3, #5
 8009ff0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ff4:	441c      	add	r4, r3
 8009ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	673b      	str	r3, [r7, #112]	@ 0x70
 8009ffe:	677a      	str	r2, [r7, #116]	@ 0x74
 800a000:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a004:	4642      	mov	r2, r8
 800a006:	464b      	mov	r3, r9
 800a008:	1891      	adds	r1, r2, r2
 800a00a:	60b9      	str	r1, [r7, #8]
 800a00c:	415b      	adcs	r3, r3
 800a00e:	60fb      	str	r3, [r7, #12]
 800a010:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a014:	4641      	mov	r1, r8
 800a016:	1851      	adds	r1, r2, r1
 800a018:	6039      	str	r1, [r7, #0]
 800a01a:	4649      	mov	r1, r9
 800a01c:	414b      	adcs	r3, r1
 800a01e:	607b      	str	r3, [r7, #4]
 800a020:	f04f 0200 	mov.w	r2, #0
 800a024:	f04f 0300 	mov.w	r3, #0
 800a028:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a02c:	4659      	mov	r1, fp
 800a02e:	00cb      	lsls	r3, r1, #3
 800a030:	4651      	mov	r1, sl
 800a032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a036:	4651      	mov	r1, sl
 800a038:	00ca      	lsls	r2, r1, #3
 800a03a:	4610      	mov	r0, r2
 800a03c:	4619      	mov	r1, r3
 800a03e:	4603      	mov	r3, r0
 800a040:	4642      	mov	r2, r8
 800a042:	189b      	adds	r3, r3, r2
 800a044:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a046:	464b      	mov	r3, r9
 800a048:	460a      	mov	r2, r1
 800a04a:	eb42 0303 	adc.w	r3, r2, r3
 800a04e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	663b      	str	r3, [r7, #96]	@ 0x60
 800a05a:	667a      	str	r2, [r7, #100]	@ 0x64
 800a05c:	f04f 0200 	mov.w	r2, #0
 800a060:	f04f 0300 	mov.w	r3, #0
 800a064:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a068:	4649      	mov	r1, r9
 800a06a:	008b      	lsls	r3, r1, #2
 800a06c:	4641      	mov	r1, r8
 800a06e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a072:	4641      	mov	r1, r8
 800a074:	008a      	lsls	r2, r1, #2
 800a076:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a07a:	f7f6 fd9b 	bl	8000bb4 <__aeabi_uldivmod>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b8 <UART_SetConfig+0x4e4>)
 800a084:	fba3 1302 	umull	r1, r3, r3, r2
 800a088:	095b      	lsrs	r3, r3, #5
 800a08a:	2164      	movs	r1, #100	@ 0x64
 800a08c:	fb01 f303 	mul.w	r3, r1, r3
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	011b      	lsls	r3, r3, #4
 800a094:	3332      	adds	r3, #50	@ 0x32
 800a096:	4a08      	ldr	r2, [pc, #32]	@ (800a0b8 <UART_SetConfig+0x4e4>)
 800a098:	fba2 2303 	umull	r2, r3, r2, r3
 800a09c:	095b      	lsrs	r3, r3, #5
 800a09e:	f003 020f 	and.w	r2, r3, #15
 800a0a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4422      	add	r2, r4
 800a0aa:	609a      	str	r2, [r3, #8]
}
 800a0ac:	bf00      	nop
 800a0ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0b8:	51eb851f 	.word	0x51eb851f
 800a0bc:	00000000 	.word	0x00000000

0800a0c0 <atan>:
 800a0c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	ec55 4b10 	vmov	r4, r5, d0
 800a0c8:	4bbf      	ldr	r3, [pc, #764]	@ (800a3c8 <atan+0x308>)
 800a0ca:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a0ce:	429e      	cmp	r6, r3
 800a0d0:	46ab      	mov	fp, r5
 800a0d2:	d918      	bls.n	800a106 <atan+0x46>
 800a0d4:	4bbd      	ldr	r3, [pc, #756]	@ (800a3cc <atan+0x30c>)
 800a0d6:	429e      	cmp	r6, r3
 800a0d8:	d801      	bhi.n	800a0de <atan+0x1e>
 800a0da:	d109      	bne.n	800a0f0 <atan+0x30>
 800a0dc:	b144      	cbz	r4, 800a0f0 <atan+0x30>
 800a0de:	4622      	mov	r2, r4
 800a0e0:	462b      	mov	r3, r5
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	f7f6 f89d 	bl	8000224 <__adddf3>
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	460d      	mov	r5, r1
 800a0ee:	e006      	b.n	800a0fe <atan+0x3e>
 800a0f0:	f1bb 0f00 	cmp.w	fp, #0
 800a0f4:	f340 812b 	ble.w	800a34e <atan+0x28e>
 800a0f8:	a597      	add	r5, pc, #604	@ (adr r5, 800a358 <atan+0x298>)
 800a0fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a0fe:	ec45 4b10 	vmov	d0, r4, r5
 800a102:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a106:	4bb2      	ldr	r3, [pc, #712]	@ (800a3d0 <atan+0x310>)
 800a108:	429e      	cmp	r6, r3
 800a10a:	d813      	bhi.n	800a134 <atan+0x74>
 800a10c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a110:	429e      	cmp	r6, r3
 800a112:	d80c      	bhi.n	800a12e <atan+0x6e>
 800a114:	a392      	add	r3, pc, #584	@ (adr r3, 800a360 <atan+0x2a0>)
 800a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11a:	4620      	mov	r0, r4
 800a11c:	4629      	mov	r1, r5
 800a11e:	f7f6 f881 	bl	8000224 <__adddf3>
 800a122:	4bac      	ldr	r3, [pc, #688]	@ (800a3d4 <atan+0x314>)
 800a124:	2200      	movs	r2, #0
 800a126:	f7f6 fcc3 	bl	8000ab0 <__aeabi_dcmpgt>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d1e7      	bne.n	800a0fe <atan+0x3e>
 800a12e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a132:	e029      	b.n	800a188 <atan+0xc8>
 800a134:	f000 f9b0 	bl	800a498 <fabs>
 800a138:	4ba7      	ldr	r3, [pc, #668]	@ (800a3d8 <atan+0x318>)
 800a13a:	429e      	cmp	r6, r3
 800a13c:	ec55 4b10 	vmov	r4, r5, d0
 800a140:	f200 80bc 	bhi.w	800a2bc <atan+0x1fc>
 800a144:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a148:	429e      	cmp	r6, r3
 800a14a:	f200 809e 	bhi.w	800a28a <atan+0x1ca>
 800a14e:	4622      	mov	r2, r4
 800a150:	462b      	mov	r3, r5
 800a152:	4620      	mov	r0, r4
 800a154:	4629      	mov	r1, r5
 800a156:	f7f6 f865 	bl	8000224 <__adddf3>
 800a15a:	4b9e      	ldr	r3, [pc, #632]	@ (800a3d4 <atan+0x314>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	f7f6 f85f 	bl	8000220 <__aeabi_dsub>
 800a162:	2200      	movs	r2, #0
 800a164:	4606      	mov	r6, r0
 800a166:	460f      	mov	r7, r1
 800a168:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a16c:	4620      	mov	r0, r4
 800a16e:	4629      	mov	r1, r5
 800a170:	f7f6 f858 	bl	8000224 <__adddf3>
 800a174:	4602      	mov	r2, r0
 800a176:	460b      	mov	r3, r1
 800a178:	4630      	mov	r0, r6
 800a17a:	4639      	mov	r1, r7
 800a17c:	f7f6 fb32 	bl	80007e4 <__aeabi_ddiv>
 800a180:	f04f 0a00 	mov.w	sl, #0
 800a184:	4604      	mov	r4, r0
 800a186:	460d      	mov	r5, r1
 800a188:	4622      	mov	r2, r4
 800a18a:	462b      	mov	r3, r5
 800a18c:	4620      	mov	r0, r4
 800a18e:	4629      	mov	r1, r5
 800a190:	f7f6 f9fe 	bl	8000590 <__aeabi_dmul>
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	4680      	mov	r8, r0
 800a19a:	4689      	mov	r9, r1
 800a19c:	f7f6 f9f8 	bl	8000590 <__aeabi_dmul>
 800a1a0:	a371      	add	r3, pc, #452	@ (adr r3, 800a368 <atan+0x2a8>)
 800a1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	460f      	mov	r7, r1
 800a1aa:	f7f6 f9f1 	bl	8000590 <__aeabi_dmul>
 800a1ae:	a370      	add	r3, pc, #448	@ (adr r3, 800a370 <atan+0x2b0>)
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	f7f6 f836 	bl	8000224 <__adddf3>
 800a1b8:	4632      	mov	r2, r6
 800a1ba:	463b      	mov	r3, r7
 800a1bc:	f7f6 f9e8 	bl	8000590 <__aeabi_dmul>
 800a1c0:	a36d      	add	r3, pc, #436	@ (adr r3, 800a378 <atan+0x2b8>)
 800a1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c6:	f7f6 f82d 	bl	8000224 <__adddf3>
 800a1ca:	4632      	mov	r2, r6
 800a1cc:	463b      	mov	r3, r7
 800a1ce:	f7f6 f9df 	bl	8000590 <__aeabi_dmul>
 800a1d2:	a36b      	add	r3, pc, #428	@ (adr r3, 800a380 <atan+0x2c0>)
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	f7f6 f824 	bl	8000224 <__adddf3>
 800a1dc:	4632      	mov	r2, r6
 800a1de:	463b      	mov	r3, r7
 800a1e0:	f7f6 f9d6 	bl	8000590 <__aeabi_dmul>
 800a1e4:	a368      	add	r3, pc, #416	@ (adr r3, 800a388 <atan+0x2c8>)
 800a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ea:	f7f6 f81b 	bl	8000224 <__adddf3>
 800a1ee:	4632      	mov	r2, r6
 800a1f0:	463b      	mov	r3, r7
 800a1f2:	f7f6 f9cd 	bl	8000590 <__aeabi_dmul>
 800a1f6:	a366      	add	r3, pc, #408	@ (adr r3, 800a390 <atan+0x2d0>)
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	f7f6 f812 	bl	8000224 <__adddf3>
 800a200:	4642      	mov	r2, r8
 800a202:	464b      	mov	r3, r9
 800a204:	f7f6 f9c4 	bl	8000590 <__aeabi_dmul>
 800a208:	a363      	add	r3, pc, #396	@ (adr r3, 800a398 <atan+0x2d8>)
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	4680      	mov	r8, r0
 800a210:	4689      	mov	r9, r1
 800a212:	4630      	mov	r0, r6
 800a214:	4639      	mov	r1, r7
 800a216:	f7f6 f9bb 	bl	8000590 <__aeabi_dmul>
 800a21a:	a361      	add	r3, pc, #388	@ (adr r3, 800a3a0 <atan+0x2e0>)
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	f7f5 fffe 	bl	8000220 <__aeabi_dsub>
 800a224:	4632      	mov	r2, r6
 800a226:	463b      	mov	r3, r7
 800a228:	f7f6 f9b2 	bl	8000590 <__aeabi_dmul>
 800a22c:	a35e      	add	r3, pc, #376	@ (adr r3, 800a3a8 <atan+0x2e8>)
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	f7f5 fff5 	bl	8000220 <__aeabi_dsub>
 800a236:	4632      	mov	r2, r6
 800a238:	463b      	mov	r3, r7
 800a23a:	f7f6 f9a9 	bl	8000590 <__aeabi_dmul>
 800a23e:	a35c      	add	r3, pc, #368	@ (adr r3, 800a3b0 <atan+0x2f0>)
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	f7f5 ffec 	bl	8000220 <__aeabi_dsub>
 800a248:	4632      	mov	r2, r6
 800a24a:	463b      	mov	r3, r7
 800a24c:	f7f6 f9a0 	bl	8000590 <__aeabi_dmul>
 800a250:	a359      	add	r3, pc, #356	@ (adr r3, 800a3b8 <atan+0x2f8>)
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	f7f5 ffe3 	bl	8000220 <__aeabi_dsub>
 800a25a:	4632      	mov	r2, r6
 800a25c:	463b      	mov	r3, r7
 800a25e:	f7f6 f997 	bl	8000590 <__aeabi_dmul>
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	4640      	mov	r0, r8
 800a268:	4649      	mov	r1, r9
 800a26a:	f7f5 ffdb 	bl	8000224 <__adddf3>
 800a26e:	4622      	mov	r2, r4
 800a270:	462b      	mov	r3, r5
 800a272:	f7f6 f98d 	bl	8000590 <__aeabi_dmul>
 800a276:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800a27a:	4602      	mov	r2, r0
 800a27c:	460b      	mov	r3, r1
 800a27e:	d148      	bne.n	800a312 <atan+0x252>
 800a280:	4620      	mov	r0, r4
 800a282:	4629      	mov	r1, r5
 800a284:	f7f5 ffcc 	bl	8000220 <__aeabi_dsub>
 800a288:	e72f      	b.n	800a0ea <atan+0x2a>
 800a28a:	4b52      	ldr	r3, [pc, #328]	@ (800a3d4 <atan+0x314>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	4620      	mov	r0, r4
 800a290:	4629      	mov	r1, r5
 800a292:	f7f5 ffc5 	bl	8000220 <__aeabi_dsub>
 800a296:	4b4f      	ldr	r3, [pc, #316]	@ (800a3d4 <atan+0x314>)
 800a298:	4606      	mov	r6, r0
 800a29a:	460f      	mov	r7, r1
 800a29c:	2200      	movs	r2, #0
 800a29e:	4620      	mov	r0, r4
 800a2a0:	4629      	mov	r1, r5
 800a2a2:	f7f5 ffbf 	bl	8000224 <__adddf3>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	4639      	mov	r1, r7
 800a2ae:	f7f6 fa99 	bl	80007e4 <__aeabi_ddiv>
 800a2b2:	f04f 0a01 	mov.w	sl, #1
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	460d      	mov	r5, r1
 800a2ba:	e765      	b.n	800a188 <atan+0xc8>
 800a2bc:	4b47      	ldr	r3, [pc, #284]	@ (800a3dc <atan+0x31c>)
 800a2be:	429e      	cmp	r6, r3
 800a2c0:	d21c      	bcs.n	800a2fc <atan+0x23c>
 800a2c2:	4b47      	ldr	r3, [pc, #284]	@ (800a3e0 <atan+0x320>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	4629      	mov	r1, r5
 800a2ca:	f7f5 ffa9 	bl	8000220 <__aeabi_dsub>
 800a2ce:	4b44      	ldr	r3, [pc, #272]	@ (800a3e0 <atan+0x320>)
 800a2d0:	4606      	mov	r6, r0
 800a2d2:	460f      	mov	r7, r1
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	4629      	mov	r1, r5
 800a2da:	f7f6 f959 	bl	8000590 <__aeabi_dmul>
 800a2de:	4b3d      	ldr	r3, [pc, #244]	@ (800a3d4 <atan+0x314>)
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f7f5 ff9f 	bl	8000224 <__adddf3>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	4639      	mov	r1, r7
 800a2ee:	f7f6 fa79 	bl	80007e4 <__aeabi_ddiv>
 800a2f2:	f04f 0a02 	mov.w	sl, #2
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	460d      	mov	r5, r1
 800a2fa:	e745      	b.n	800a188 <atan+0xc8>
 800a2fc:	4622      	mov	r2, r4
 800a2fe:	462b      	mov	r3, r5
 800a300:	4938      	ldr	r1, [pc, #224]	@ (800a3e4 <atan+0x324>)
 800a302:	2000      	movs	r0, #0
 800a304:	f7f6 fa6e 	bl	80007e4 <__aeabi_ddiv>
 800a308:	f04f 0a03 	mov.w	sl, #3
 800a30c:	4604      	mov	r4, r0
 800a30e:	460d      	mov	r5, r1
 800a310:	e73a      	b.n	800a188 <atan+0xc8>
 800a312:	4b35      	ldr	r3, [pc, #212]	@ (800a3e8 <atan+0x328>)
 800a314:	4e35      	ldr	r6, [pc, #212]	@ (800a3ec <atan+0x32c>)
 800a316:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f7f5 ff7f 	bl	8000220 <__aeabi_dsub>
 800a322:	4622      	mov	r2, r4
 800a324:	462b      	mov	r3, r5
 800a326:	f7f5 ff7b 	bl	8000220 <__aeabi_dsub>
 800a32a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a32e:	4602      	mov	r2, r0
 800a330:	460b      	mov	r3, r1
 800a332:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a336:	f7f5 ff73 	bl	8000220 <__aeabi_dsub>
 800a33a:	f1bb 0f00 	cmp.w	fp, #0
 800a33e:	4604      	mov	r4, r0
 800a340:	460d      	mov	r5, r1
 800a342:	f6bf aedc 	bge.w	800a0fe <atan+0x3e>
 800a346:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a34a:	461d      	mov	r5, r3
 800a34c:	e6d7      	b.n	800a0fe <atan+0x3e>
 800a34e:	a51c      	add	r5, pc, #112	@ (adr r5, 800a3c0 <atan+0x300>)
 800a350:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a354:	e6d3      	b.n	800a0fe <atan+0x3e>
 800a356:	bf00      	nop
 800a358:	54442d18 	.word	0x54442d18
 800a35c:	3ff921fb 	.word	0x3ff921fb
 800a360:	8800759c 	.word	0x8800759c
 800a364:	7e37e43c 	.word	0x7e37e43c
 800a368:	e322da11 	.word	0xe322da11
 800a36c:	3f90ad3a 	.word	0x3f90ad3a
 800a370:	24760deb 	.word	0x24760deb
 800a374:	3fa97b4b 	.word	0x3fa97b4b
 800a378:	a0d03d51 	.word	0xa0d03d51
 800a37c:	3fb10d66 	.word	0x3fb10d66
 800a380:	c54c206e 	.word	0xc54c206e
 800a384:	3fb745cd 	.word	0x3fb745cd
 800a388:	920083ff 	.word	0x920083ff
 800a38c:	3fc24924 	.word	0x3fc24924
 800a390:	5555550d 	.word	0x5555550d
 800a394:	3fd55555 	.word	0x3fd55555
 800a398:	2c6a6c2f 	.word	0x2c6a6c2f
 800a39c:	bfa2b444 	.word	0xbfa2b444
 800a3a0:	52defd9a 	.word	0x52defd9a
 800a3a4:	3fadde2d 	.word	0x3fadde2d
 800a3a8:	af749a6d 	.word	0xaf749a6d
 800a3ac:	3fb3b0f2 	.word	0x3fb3b0f2
 800a3b0:	fe231671 	.word	0xfe231671
 800a3b4:	3fbc71c6 	.word	0x3fbc71c6
 800a3b8:	9998ebc4 	.word	0x9998ebc4
 800a3bc:	3fc99999 	.word	0x3fc99999
 800a3c0:	54442d18 	.word	0x54442d18
 800a3c4:	bff921fb 	.word	0xbff921fb
 800a3c8:	440fffff 	.word	0x440fffff
 800a3cc:	7ff00000 	.word	0x7ff00000
 800a3d0:	3fdbffff 	.word	0x3fdbffff
 800a3d4:	3ff00000 	.word	0x3ff00000
 800a3d8:	3ff2ffff 	.word	0x3ff2ffff
 800a3dc:	40038000 	.word	0x40038000
 800a3e0:	3ff80000 	.word	0x3ff80000
 800a3e4:	bff00000 	.word	0xbff00000
 800a3e8:	0800c298 	.word	0x0800c298
 800a3ec:	0800c2b8 	.word	0x0800c2b8

0800a3f0 <cos>:
 800a3f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3f2:	ec53 2b10 	vmov	r2, r3, d0
 800a3f6:	4826      	ldr	r0, [pc, #152]	@ (800a490 <cos+0xa0>)
 800a3f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a3fc:	4281      	cmp	r1, r0
 800a3fe:	d806      	bhi.n	800a40e <cos+0x1e>
 800a400:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a488 <cos+0x98>
 800a404:	b005      	add	sp, #20
 800a406:	f85d eb04 	ldr.w	lr, [sp], #4
 800a40a:	f000 b8a1 	b.w	800a550 <__kernel_cos>
 800a40e:	4821      	ldr	r0, [pc, #132]	@ (800a494 <cos+0xa4>)
 800a410:	4281      	cmp	r1, r0
 800a412:	d908      	bls.n	800a426 <cos+0x36>
 800a414:	4610      	mov	r0, r2
 800a416:	4619      	mov	r1, r3
 800a418:	f7f5 ff02 	bl	8000220 <__aeabi_dsub>
 800a41c:	ec41 0b10 	vmov	d0, r0, r1
 800a420:	b005      	add	sp, #20
 800a422:	f85d fb04 	ldr.w	pc, [sp], #4
 800a426:	4668      	mov	r0, sp
 800a428:	f000 fa16 	bl	800a858 <__ieee754_rem_pio2>
 800a42c:	f000 0003 	and.w	r0, r0, #3
 800a430:	2801      	cmp	r0, #1
 800a432:	d00b      	beq.n	800a44c <cos+0x5c>
 800a434:	2802      	cmp	r0, #2
 800a436:	d015      	beq.n	800a464 <cos+0x74>
 800a438:	b9d8      	cbnz	r0, 800a472 <cos+0x82>
 800a43a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a43e:	ed9d 0b00 	vldr	d0, [sp]
 800a442:	f000 f885 	bl	800a550 <__kernel_cos>
 800a446:	ec51 0b10 	vmov	r0, r1, d0
 800a44a:	e7e7      	b.n	800a41c <cos+0x2c>
 800a44c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a450:	ed9d 0b00 	vldr	d0, [sp]
 800a454:	f000 f944 	bl	800a6e0 <__kernel_sin>
 800a458:	ec53 2b10 	vmov	r2, r3, d0
 800a45c:	4610      	mov	r0, r2
 800a45e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a462:	e7db      	b.n	800a41c <cos+0x2c>
 800a464:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a468:	ed9d 0b00 	vldr	d0, [sp]
 800a46c:	f000 f870 	bl	800a550 <__kernel_cos>
 800a470:	e7f2      	b.n	800a458 <cos+0x68>
 800a472:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a476:	ed9d 0b00 	vldr	d0, [sp]
 800a47a:	2001      	movs	r0, #1
 800a47c:	f000 f930 	bl	800a6e0 <__kernel_sin>
 800a480:	e7e1      	b.n	800a446 <cos+0x56>
 800a482:	bf00      	nop
 800a484:	f3af 8000 	nop.w
	...
 800a490:	3fe921fb 	.word	0x3fe921fb
 800a494:	7fefffff 	.word	0x7fefffff

0800a498 <fabs>:
 800a498:	ec51 0b10 	vmov	r0, r1, d0
 800a49c:	4602      	mov	r2, r0
 800a49e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a4a2:	ec43 2b10 	vmov	d0, r2, r3
 800a4a6:	4770      	bx	lr

0800a4a8 <sin>:
 800a4a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4aa:	ec53 2b10 	vmov	r2, r3, d0
 800a4ae:	4826      	ldr	r0, [pc, #152]	@ (800a548 <sin+0xa0>)
 800a4b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a4b4:	4281      	cmp	r1, r0
 800a4b6:	d807      	bhi.n	800a4c8 <sin+0x20>
 800a4b8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a540 <sin+0x98>
 800a4bc:	2000      	movs	r0, #0
 800a4be:	b005      	add	sp, #20
 800a4c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4c4:	f000 b90c 	b.w	800a6e0 <__kernel_sin>
 800a4c8:	4820      	ldr	r0, [pc, #128]	@ (800a54c <sin+0xa4>)
 800a4ca:	4281      	cmp	r1, r0
 800a4cc:	d908      	bls.n	800a4e0 <sin+0x38>
 800a4ce:	4610      	mov	r0, r2
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	f7f5 fea5 	bl	8000220 <__aeabi_dsub>
 800a4d6:	ec41 0b10 	vmov	d0, r0, r1
 800a4da:	b005      	add	sp, #20
 800a4dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4e0:	4668      	mov	r0, sp
 800a4e2:	f000 f9b9 	bl	800a858 <__ieee754_rem_pio2>
 800a4e6:	f000 0003 	and.w	r0, r0, #3
 800a4ea:	2801      	cmp	r0, #1
 800a4ec:	d00c      	beq.n	800a508 <sin+0x60>
 800a4ee:	2802      	cmp	r0, #2
 800a4f0:	d011      	beq.n	800a516 <sin+0x6e>
 800a4f2:	b9e8      	cbnz	r0, 800a530 <sin+0x88>
 800a4f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a4f8:	ed9d 0b00 	vldr	d0, [sp]
 800a4fc:	2001      	movs	r0, #1
 800a4fe:	f000 f8ef 	bl	800a6e0 <__kernel_sin>
 800a502:	ec51 0b10 	vmov	r0, r1, d0
 800a506:	e7e6      	b.n	800a4d6 <sin+0x2e>
 800a508:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a50c:	ed9d 0b00 	vldr	d0, [sp]
 800a510:	f000 f81e 	bl	800a550 <__kernel_cos>
 800a514:	e7f5      	b.n	800a502 <sin+0x5a>
 800a516:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a51a:	ed9d 0b00 	vldr	d0, [sp]
 800a51e:	2001      	movs	r0, #1
 800a520:	f000 f8de 	bl	800a6e0 <__kernel_sin>
 800a524:	ec53 2b10 	vmov	r2, r3, d0
 800a528:	4610      	mov	r0, r2
 800a52a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a52e:	e7d2      	b.n	800a4d6 <sin+0x2e>
 800a530:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a534:	ed9d 0b00 	vldr	d0, [sp]
 800a538:	f000 f80a 	bl	800a550 <__kernel_cos>
 800a53c:	e7f2      	b.n	800a524 <sin+0x7c>
 800a53e:	bf00      	nop
	...
 800a548:	3fe921fb 	.word	0x3fe921fb
 800a54c:	7fefffff 	.word	0x7fefffff

0800a550 <__kernel_cos>:
 800a550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	ec57 6b10 	vmov	r6, r7, d0
 800a558:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a55c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a560:	ed8d 1b00 	vstr	d1, [sp]
 800a564:	d206      	bcs.n	800a574 <__kernel_cos+0x24>
 800a566:	4630      	mov	r0, r6
 800a568:	4639      	mov	r1, r7
 800a56a:	f7f6 faab 	bl	8000ac4 <__aeabi_d2iz>
 800a56e:	2800      	cmp	r0, #0
 800a570:	f000 8088 	beq.w	800a684 <__kernel_cos+0x134>
 800a574:	4632      	mov	r2, r6
 800a576:	463b      	mov	r3, r7
 800a578:	4630      	mov	r0, r6
 800a57a:	4639      	mov	r1, r7
 800a57c:	f7f6 f808 	bl	8000590 <__aeabi_dmul>
 800a580:	4b51      	ldr	r3, [pc, #324]	@ (800a6c8 <__kernel_cos+0x178>)
 800a582:	2200      	movs	r2, #0
 800a584:	4604      	mov	r4, r0
 800a586:	460d      	mov	r5, r1
 800a588:	f7f6 f802 	bl	8000590 <__aeabi_dmul>
 800a58c:	a340      	add	r3, pc, #256	@ (adr r3, 800a690 <__kernel_cos+0x140>)
 800a58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a592:	4682      	mov	sl, r0
 800a594:	468b      	mov	fp, r1
 800a596:	4620      	mov	r0, r4
 800a598:	4629      	mov	r1, r5
 800a59a:	f7f5 fff9 	bl	8000590 <__aeabi_dmul>
 800a59e:	a33e      	add	r3, pc, #248	@ (adr r3, 800a698 <__kernel_cos+0x148>)
 800a5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a4:	f7f5 fe3e 	bl	8000224 <__adddf3>
 800a5a8:	4622      	mov	r2, r4
 800a5aa:	462b      	mov	r3, r5
 800a5ac:	f7f5 fff0 	bl	8000590 <__aeabi_dmul>
 800a5b0:	a33b      	add	r3, pc, #236	@ (adr r3, 800a6a0 <__kernel_cos+0x150>)
 800a5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b6:	f7f5 fe33 	bl	8000220 <__aeabi_dsub>
 800a5ba:	4622      	mov	r2, r4
 800a5bc:	462b      	mov	r3, r5
 800a5be:	f7f5 ffe7 	bl	8000590 <__aeabi_dmul>
 800a5c2:	a339      	add	r3, pc, #228	@ (adr r3, 800a6a8 <__kernel_cos+0x158>)
 800a5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c8:	f7f5 fe2c 	bl	8000224 <__adddf3>
 800a5cc:	4622      	mov	r2, r4
 800a5ce:	462b      	mov	r3, r5
 800a5d0:	f7f5 ffde 	bl	8000590 <__aeabi_dmul>
 800a5d4:	a336      	add	r3, pc, #216	@ (adr r3, 800a6b0 <__kernel_cos+0x160>)
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	f7f5 fe21 	bl	8000220 <__aeabi_dsub>
 800a5de:	4622      	mov	r2, r4
 800a5e0:	462b      	mov	r3, r5
 800a5e2:	f7f5 ffd5 	bl	8000590 <__aeabi_dmul>
 800a5e6:	a334      	add	r3, pc, #208	@ (adr r3, 800a6b8 <__kernel_cos+0x168>)
 800a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ec:	f7f5 fe1a 	bl	8000224 <__adddf3>
 800a5f0:	4622      	mov	r2, r4
 800a5f2:	462b      	mov	r3, r5
 800a5f4:	f7f5 ffcc 	bl	8000590 <__aeabi_dmul>
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	462b      	mov	r3, r5
 800a5fc:	f7f5 ffc8 	bl	8000590 <__aeabi_dmul>
 800a600:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a604:	4604      	mov	r4, r0
 800a606:	460d      	mov	r5, r1
 800a608:	4630      	mov	r0, r6
 800a60a:	4639      	mov	r1, r7
 800a60c:	f7f5 ffc0 	bl	8000590 <__aeabi_dmul>
 800a610:	460b      	mov	r3, r1
 800a612:	4602      	mov	r2, r0
 800a614:	4629      	mov	r1, r5
 800a616:	4620      	mov	r0, r4
 800a618:	f7f5 fe02 	bl	8000220 <__aeabi_dsub>
 800a61c:	4b2b      	ldr	r3, [pc, #172]	@ (800a6cc <__kernel_cos+0x17c>)
 800a61e:	4598      	cmp	r8, r3
 800a620:	4606      	mov	r6, r0
 800a622:	460f      	mov	r7, r1
 800a624:	d810      	bhi.n	800a648 <__kernel_cos+0xf8>
 800a626:	4602      	mov	r2, r0
 800a628:	460b      	mov	r3, r1
 800a62a:	4650      	mov	r0, sl
 800a62c:	4659      	mov	r1, fp
 800a62e:	f7f5 fdf7 	bl	8000220 <__aeabi_dsub>
 800a632:	460b      	mov	r3, r1
 800a634:	4926      	ldr	r1, [pc, #152]	@ (800a6d0 <__kernel_cos+0x180>)
 800a636:	4602      	mov	r2, r0
 800a638:	2000      	movs	r0, #0
 800a63a:	f7f5 fdf1 	bl	8000220 <__aeabi_dsub>
 800a63e:	ec41 0b10 	vmov	d0, r0, r1
 800a642:	b003      	add	sp, #12
 800a644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a648:	4b22      	ldr	r3, [pc, #136]	@ (800a6d4 <__kernel_cos+0x184>)
 800a64a:	4921      	ldr	r1, [pc, #132]	@ (800a6d0 <__kernel_cos+0x180>)
 800a64c:	4598      	cmp	r8, r3
 800a64e:	bf8c      	ite	hi
 800a650:	4d21      	ldrhi	r5, [pc, #132]	@ (800a6d8 <__kernel_cos+0x188>)
 800a652:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a656:	2400      	movs	r4, #0
 800a658:	4622      	mov	r2, r4
 800a65a:	462b      	mov	r3, r5
 800a65c:	2000      	movs	r0, #0
 800a65e:	f7f5 fddf 	bl	8000220 <__aeabi_dsub>
 800a662:	4622      	mov	r2, r4
 800a664:	4680      	mov	r8, r0
 800a666:	4689      	mov	r9, r1
 800a668:	462b      	mov	r3, r5
 800a66a:	4650      	mov	r0, sl
 800a66c:	4659      	mov	r1, fp
 800a66e:	f7f5 fdd7 	bl	8000220 <__aeabi_dsub>
 800a672:	4632      	mov	r2, r6
 800a674:	463b      	mov	r3, r7
 800a676:	f7f5 fdd3 	bl	8000220 <__aeabi_dsub>
 800a67a:	4602      	mov	r2, r0
 800a67c:	460b      	mov	r3, r1
 800a67e:	4640      	mov	r0, r8
 800a680:	4649      	mov	r1, r9
 800a682:	e7da      	b.n	800a63a <__kernel_cos+0xea>
 800a684:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a6c0 <__kernel_cos+0x170>
 800a688:	e7db      	b.n	800a642 <__kernel_cos+0xf2>
 800a68a:	bf00      	nop
 800a68c:	f3af 8000 	nop.w
 800a690:	be8838d4 	.word	0xbe8838d4
 800a694:	bda8fae9 	.word	0xbda8fae9
 800a698:	bdb4b1c4 	.word	0xbdb4b1c4
 800a69c:	3e21ee9e 	.word	0x3e21ee9e
 800a6a0:	809c52ad 	.word	0x809c52ad
 800a6a4:	3e927e4f 	.word	0x3e927e4f
 800a6a8:	19cb1590 	.word	0x19cb1590
 800a6ac:	3efa01a0 	.word	0x3efa01a0
 800a6b0:	16c15177 	.word	0x16c15177
 800a6b4:	3f56c16c 	.word	0x3f56c16c
 800a6b8:	5555554c 	.word	0x5555554c
 800a6bc:	3fa55555 	.word	0x3fa55555
 800a6c0:	00000000 	.word	0x00000000
 800a6c4:	3ff00000 	.word	0x3ff00000
 800a6c8:	3fe00000 	.word	0x3fe00000
 800a6cc:	3fd33332 	.word	0x3fd33332
 800a6d0:	3ff00000 	.word	0x3ff00000
 800a6d4:	3fe90000 	.word	0x3fe90000
 800a6d8:	3fd20000 	.word	0x3fd20000
 800a6dc:	00000000 	.word	0x00000000

0800a6e0 <__kernel_sin>:
 800a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e4:	ec55 4b10 	vmov	r4, r5, d0
 800a6e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a6ec:	b085      	sub	sp, #20
 800a6ee:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a6f2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a6f6:	4680      	mov	r8, r0
 800a6f8:	d205      	bcs.n	800a706 <__kernel_sin+0x26>
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	f7f6 f9e1 	bl	8000ac4 <__aeabi_d2iz>
 800a702:	2800      	cmp	r0, #0
 800a704:	d052      	beq.n	800a7ac <__kernel_sin+0xcc>
 800a706:	4622      	mov	r2, r4
 800a708:	462b      	mov	r3, r5
 800a70a:	4620      	mov	r0, r4
 800a70c:	4629      	mov	r1, r5
 800a70e:	f7f5 ff3f 	bl	8000590 <__aeabi_dmul>
 800a712:	4682      	mov	sl, r0
 800a714:	468b      	mov	fp, r1
 800a716:	4602      	mov	r2, r0
 800a718:	460b      	mov	r3, r1
 800a71a:	4620      	mov	r0, r4
 800a71c:	4629      	mov	r1, r5
 800a71e:	f7f5 ff37 	bl	8000590 <__aeabi_dmul>
 800a722:	a342      	add	r3, pc, #264	@ (adr r3, 800a82c <__kernel_sin+0x14c>)
 800a724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a728:	e9cd 0100 	strd	r0, r1, [sp]
 800a72c:	4650      	mov	r0, sl
 800a72e:	4659      	mov	r1, fp
 800a730:	f7f5 ff2e 	bl	8000590 <__aeabi_dmul>
 800a734:	a33f      	add	r3, pc, #252	@ (adr r3, 800a834 <__kernel_sin+0x154>)
 800a736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73a:	f7f5 fd71 	bl	8000220 <__aeabi_dsub>
 800a73e:	4652      	mov	r2, sl
 800a740:	465b      	mov	r3, fp
 800a742:	f7f5 ff25 	bl	8000590 <__aeabi_dmul>
 800a746:	a33d      	add	r3, pc, #244	@ (adr r3, 800a83c <__kernel_sin+0x15c>)
 800a748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74c:	f7f5 fd6a 	bl	8000224 <__adddf3>
 800a750:	4652      	mov	r2, sl
 800a752:	465b      	mov	r3, fp
 800a754:	f7f5 ff1c 	bl	8000590 <__aeabi_dmul>
 800a758:	a33a      	add	r3, pc, #232	@ (adr r3, 800a844 <__kernel_sin+0x164>)
 800a75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75e:	f7f5 fd5f 	bl	8000220 <__aeabi_dsub>
 800a762:	4652      	mov	r2, sl
 800a764:	465b      	mov	r3, fp
 800a766:	f7f5 ff13 	bl	8000590 <__aeabi_dmul>
 800a76a:	a338      	add	r3, pc, #224	@ (adr r3, 800a84c <__kernel_sin+0x16c>)
 800a76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a770:	f7f5 fd58 	bl	8000224 <__adddf3>
 800a774:	4606      	mov	r6, r0
 800a776:	460f      	mov	r7, r1
 800a778:	f1b8 0f00 	cmp.w	r8, #0
 800a77c:	d11b      	bne.n	800a7b6 <__kernel_sin+0xd6>
 800a77e:	4602      	mov	r2, r0
 800a780:	460b      	mov	r3, r1
 800a782:	4650      	mov	r0, sl
 800a784:	4659      	mov	r1, fp
 800a786:	f7f5 ff03 	bl	8000590 <__aeabi_dmul>
 800a78a:	a325      	add	r3, pc, #148	@ (adr r3, 800a820 <__kernel_sin+0x140>)
 800a78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a790:	f7f5 fd46 	bl	8000220 <__aeabi_dsub>
 800a794:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a798:	f7f5 fefa 	bl	8000590 <__aeabi_dmul>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	f7f5 fd3e 	bl	8000224 <__adddf3>
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	460d      	mov	r5, r1
 800a7ac:	ec45 4b10 	vmov	d0, r4, r5
 800a7b0:	b005      	add	sp, #20
 800a7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7ba:	4b1b      	ldr	r3, [pc, #108]	@ (800a828 <__kernel_sin+0x148>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f7f5 fee7 	bl	8000590 <__aeabi_dmul>
 800a7c2:	4632      	mov	r2, r6
 800a7c4:	4680      	mov	r8, r0
 800a7c6:	4689      	mov	r9, r1
 800a7c8:	463b      	mov	r3, r7
 800a7ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7ce:	f7f5 fedf 	bl	8000590 <__aeabi_dmul>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	4649      	mov	r1, r9
 800a7da:	f7f5 fd21 	bl	8000220 <__aeabi_dsub>
 800a7de:	4652      	mov	r2, sl
 800a7e0:	465b      	mov	r3, fp
 800a7e2:	f7f5 fed5 	bl	8000590 <__aeabi_dmul>
 800a7e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7ea:	f7f5 fd19 	bl	8000220 <__aeabi_dsub>
 800a7ee:	a30c      	add	r3, pc, #48	@ (adr r3, 800a820 <__kernel_sin+0x140>)
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	4606      	mov	r6, r0
 800a7f6:	460f      	mov	r7, r1
 800a7f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7fc:	f7f5 fec8 	bl	8000590 <__aeabi_dmul>
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	4630      	mov	r0, r6
 800a806:	4639      	mov	r1, r7
 800a808:	f7f5 fd0c 	bl	8000224 <__adddf3>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	4620      	mov	r0, r4
 800a812:	4629      	mov	r1, r5
 800a814:	f7f5 fd04 	bl	8000220 <__aeabi_dsub>
 800a818:	e7c6      	b.n	800a7a8 <__kernel_sin+0xc8>
 800a81a:	bf00      	nop
 800a81c:	f3af 8000 	nop.w
 800a820:	55555549 	.word	0x55555549
 800a824:	3fc55555 	.word	0x3fc55555
 800a828:	3fe00000 	.word	0x3fe00000
 800a82c:	5acfd57c 	.word	0x5acfd57c
 800a830:	3de5d93a 	.word	0x3de5d93a
 800a834:	8a2b9ceb 	.word	0x8a2b9ceb
 800a838:	3e5ae5e6 	.word	0x3e5ae5e6
 800a83c:	57b1fe7d 	.word	0x57b1fe7d
 800a840:	3ec71de3 	.word	0x3ec71de3
 800a844:	19c161d5 	.word	0x19c161d5
 800a848:	3f2a01a0 	.word	0x3f2a01a0
 800a84c:	1110f8a6 	.word	0x1110f8a6
 800a850:	3f811111 	.word	0x3f811111
 800a854:	00000000 	.word	0x00000000

0800a858 <__ieee754_rem_pio2>:
 800a858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a85c:	ec57 6b10 	vmov	r6, r7, d0
 800a860:	4bc5      	ldr	r3, [pc, #788]	@ (800ab78 <__ieee754_rem_pio2+0x320>)
 800a862:	b08d      	sub	sp, #52	@ 0x34
 800a864:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a868:	4598      	cmp	r8, r3
 800a86a:	4604      	mov	r4, r0
 800a86c:	9704      	str	r7, [sp, #16]
 800a86e:	d807      	bhi.n	800a880 <__ieee754_rem_pio2+0x28>
 800a870:	2200      	movs	r2, #0
 800a872:	2300      	movs	r3, #0
 800a874:	ed80 0b00 	vstr	d0, [r0]
 800a878:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a87c:	2500      	movs	r5, #0
 800a87e:	e028      	b.n	800a8d2 <__ieee754_rem_pio2+0x7a>
 800a880:	4bbe      	ldr	r3, [pc, #760]	@ (800ab7c <__ieee754_rem_pio2+0x324>)
 800a882:	4598      	cmp	r8, r3
 800a884:	d878      	bhi.n	800a978 <__ieee754_rem_pio2+0x120>
 800a886:	9b04      	ldr	r3, [sp, #16]
 800a888:	4dbd      	ldr	r5, [pc, #756]	@ (800ab80 <__ieee754_rem_pio2+0x328>)
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	4630      	mov	r0, r6
 800a88e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ab40 <__ieee754_rem_pio2+0x2e8>)
 800a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a894:	4639      	mov	r1, r7
 800a896:	dd38      	ble.n	800a90a <__ieee754_rem_pio2+0xb2>
 800a898:	f7f5 fcc2 	bl	8000220 <__aeabi_dsub>
 800a89c:	45a8      	cmp	r8, r5
 800a89e:	4606      	mov	r6, r0
 800a8a0:	460f      	mov	r7, r1
 800a8a2:	d01a      	beq.n	800a8da <__ieee754_rem_pio2+0x82>
 800a8a4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ab48 <__ieee754_rem_pio2+0x2f0>)
 800a8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8aa:	f7f5 fcb9 	bl	8000220 <__aeabi_dsub>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	4680      	mov	r8, r0
 800a8b4:	4689      	mov	r9, r1
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	4639      	mov	r1, r7
 800a8ba:	f7f5 fcb1 	bl	8000220 <__aeabi_dsub>
 800a8be:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ab48 <__ieee754_rem_pio2+0x2f0>)
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	f7f5 fcac 	bl	8000220 <__aeabi_dsub>
 800a8c8:	e9c4 8900 	strd	r8, r9, [r4]
 800a8cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a8d0:	2501      	movs	r5, #1
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	b00d      	add	sp, #52	@ 0x34
 800a8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8da:	a39d      	add	r3, pc, #628	@ (adr r3, 800ab50 <__ieee754_rem_pio2+0x2f8>)
 800a8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e0:	f7f5 fc9e 	bl	8000220 <__aeabi_dsub>
 800a8e4:	a39c      	add	r3, pc, #624	@ (adr r3, 800ab58 <__ieee754_rem_pio2+0x300>)
 800a8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ea:	4606      	mov	r6, r0
 800a8ec:	460f      	mov	r7, r1
 800a8ee:	f7f5 fc97 	bl	8000220 <__aeabi_dsub>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4680      	mov	r8, r0
 800a8f8:	4689      	mov	r9, r1
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	4639      	mov	r1, r7
 800a8fe:	f7f5 fc8f 	bl	8000220 <__aeabi_dsub>
 800a902:	a395      	add	r3, pc, #596	@ (adr r3, 800ab58 <__ieee754_rem_pio2+0x300>)
 800a904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a908:	e7dc      	b.n	800a8c4 <__ieee754_rem_pio2+0x6c>
 800a90a:	f7f5 fc8b 	bl	8000224 <__adddf3>
 800a90e:	45a8      	cmp	r8, r5
 800a910:	4606      	mov	r6, r0
 800a912:	460f      	mov	r7, r1
 800a914:	d018      	beq.n	800a948 <__ieee754_rem_pio2+0xf0>
 800a916:	a38c      	add	r3, pc, #560	@ (adr r3, 800ab48 <__ieee754_rem_pio2+0x2f0>)
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	f7f5 fc82 	bl	8000224 <__adddf3>
 800a920:	4602      	mov	r2, r0
 800a922:	460b      	mov	r3, r1
 800a924:	4680      	mov	r8, r0
 800a926:	4689      	mov	r9, r1
 800a928:	4630      	mov	r0, r6
 800a92a:	4639      	mov	r1, r7
 800a92c:	f7f5 fc78 	bl	8000220 <__aeabi_dsub>
 800a930:	a385      	add	r3, pc, #532	@ (adr r3, 800ab48 <__ieee754_rem_pio2+0x2f0>)
 800a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a936:	f7f5 fc75 	bl	8000224 <__adddf3>
 800a93a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a93e:	e9c4 8900 	strd	r8, r9, [r4]
 800a942:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a946:	e7c4      	b.n	800a8d2 <__ieee754_rem_pio2+0x7a>
 800a948:	a381      	add	r3, pc, #516	@ (adr r3, 800ab50 <__ieee754_rem_pio2+0x2f8>)
 800a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94e:	f7f5 fc69 	bl	8000224 <__adddf3>
 800a952:	a381      	add	r3, pc, #516	@ (adr r3, 800ab58 <__ieee754_rem_pio2+0x300>)
 800a954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a958:	4606      	mov	r6, r0
 800a95a:	460f      	mov	r7, r1
 800a95c:	f7f5 fc62 	bl	8000224 <__adddf3>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	4680      	mov	r8, r0
 800a966:	4689      	mov	r9, r1
 800a968:	4630      	mov	r0, r6
 800a96a:	4639      	mov	r1, r7
 800a96c:	f7f5 fc58 	bl	8000220 <__aeabi_dsub>
 800a970:	a379      	add	r3, pc, #484	@ (adr r3, 800ab58 <__ieee754_rem_pio2+0x300>)
 800a972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a976:	e7de      	b.n	800a936 <__ieee754_rem_pio2+0xde>
 800a978:	4b82      	ldr	r3, [pc, #520]	@ (800ab84 <__ieee754_rem_pio2+0x32c>)
 800a97a:	4598      	cmp	r8, r3
 800a97c:	f200 80d1 	bhi.w	800ab22 <__ieee754_rem_pio2+0x2ca>
 800a980:	f7ff fd8a 	bl	800a498 <fabs>
 800a984:	ec57 6b10 	vmov	r6, r7, d0
 800a988:	a375      	add	r3, pc, #468	@ (adr r3, 800ab60 <__ieee754_rem_pio2+0x308>)
 800a98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98e:	4630      	mov	r0, r6
 800a990:	4639      	mov	r1, r7
 800a992:	f7f5 fdfd 	bl	8000590 <__aeabi_dmul>
 800a996:	4b7c      	ldr	r3, [pc, #496]	@ (800ab88 <__ieee754_rem_pio2+0x330>)
 800a998:	2200      	movs	r2, #0
 800a99a:	f7f5 fc43 	bl	8000224 <__adddf3>
 800a99e:	f7f6 f891 	bl	8000ac4 <__aeabi_d2iz>
 800a9a2:	4605      	mov	r5, r0
 800a9a4:	f7f5 fd8a 	bl	80004bc <__aeabi_i2d>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a9b0:	a363      	add	r3, pc, #396	@ (adr r3, 800ab40 <__ieee754_rem_pio2+0x2e8>)
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	f7f5 fdeb 	bl	8000590 <__aeabi_dmul>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	4630      	mov	r0, r6
 800a9c0:	4639      	mov	r1, r7
 800a9c2:	f7f5 fc2d 	bl	8000220 <__aeabi_dsub>
 800a9c6:	a360      	add	r3, pc, #384	@ (adr r3, 800ab48 <__ieee754_rem_pio2+0x2f0>)
 800a9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9cc:	4682      	mov	sl, r0
 800a9ce:	468b      	mov	fp, r1
 800a9d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9d4:	f7f5 fddc 	bl	8000590 <__aeabi_dmul>
 800a9d8:	2d1f      	cmp	r5, #31
 800a9da:	4606      	mov	r6, r0
 800a9dc:	460f      	mov	r7, r1
 800a9de:	dc0c      	bgt.n	800a9fa <__ieee754_rem_pio2+0x1a2>
 800a9e0:	4b6a      	ldr	r3, [pc, #424]	@ (800ab8c <__ieee754_rem_pio2+0x334>)
 800a9e2:	1e6a      	subs	r2, r5, #1
 800a9e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e8:	4543      	cmp	r3, r8
 800a9ea:	d006      	beq.n	800a9fa <__ieee754_rem_pio2+0x1a2>
 800a9ec:	4632      	mov	r2, r6
 800a9ee:	463b      	mov	r3, r7
 800a9f0:	4650      	mov	r0, sl
 800a9f2:	4659      	mov	r1, fp
 800a9f4:	f7f5 fc14 	bl	8000220 <__aeabi_dsub>
 800a9f8:	e00e      	b.n	800aa18 <__ieee754_rem_pio2+0x1c0>
 800a9fa:	463b      	mov	r3, r7
 800a9fc:	4632      	mov	r2, r6
 800a9fe:	4650      	mov	r0, sl
 800aa00:	4659      	mov	r1, fp
 800aa02:	f7f5 fc0d 	bl	8000220 <__aeabi_dsub>
 800aa06:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aa0a:	9305      	str	r3, [sp, #20]
 800aa0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa10:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800aa14:	2b10      	cmp	r3, #16
 800aa16:	dc02      	bgt.n	800aa1e <__ieee754_rem_pio2+0x1c6>
 800aa18:	e9c4 0100 	strd	r0, r1, [r4]
 800aa1c:	e039      	b.n	800aa92 <__ieee754_rem_pio2+0x23a>
 800aa1e:	a34c      	add	r3, pc, #304	@ (adr r3, 800ab50 <__ieee754_rem_pio2+0x2f8>)
 800aa20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa28:	f7f5 fdb2 	bl	8000590 <__aeabi_dmul>
 800aa2c:	4606      	mov	r6, r0
 800aa2e:	460f      	mov	r7, r1
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	4650      	mov	r0, sl
 800aa36:	4659      	mov	r1, fp
 800aa38:	f7f5 fbf2 	bl	8000220 <__aeabi_dsub>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	460b      	mov	r3, r1
 800aa40:	4680      	mov	r8, r0
 800aa42:	4689      	mov	r9, r1
 800aa44:	4650      	mov	r0, sl
 800aa46:	4659      	mov	r1, fp
 800aa48:	f7f5 fbea 	bl	8000220 <__aeabi_dsub>
 800aa4c:	4632      	mov	r2, r6
 800aa4e:	463b      	mov	r3, r7
 800aa50:	f7f5 fbe6 	bl	8000220 <__aeabi_dsub>
 800aa54:	a340      	add	r3, pc, #256	@ (adr r3, 800ab58 <__ieee754_rem_pio2+0x300>)
 800aa56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5a:	4606      	mov	r6, r0
 800aa5c:	460f      	mov	r7, r1
 800aa5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa62:	f7f5 fd95 	bl	8000590 <__aeabi_dmul>
 800aa66:	4632      	mov	r2, r6
 800aa68:	463b      	mov	r3, r7
 800aa6a:	f7f5 fbd9 	bl	8000220 <__aeabi_dsub>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	4606      	mov	r6, r0
 800aa74:	460f      	mov	r7, r1
 800aa76:	4640      	mov	r0, r8
 800aa78:	4649      	mov	r1, r9
 800aa7a:	f7f5 fbd1 	bl	8000220 <__aeabi_dsub>
 800aa7e:	9a05      	ldr	r2, [sp, #20]
 800aa80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	2b31      	cmp	r3, #49	@ 0x31
 800aa88:	dc20      	bgt.n	800aacc <__ieee754_rem_pio2+0x274>
 800aa8a:	e9c4 0100 	strd	r0, r1, [r4]
 800aa8e:	46c2      	mov	sl, r8
 800aa90:	46cb      	mov	fp, r9
 800aa92:	e9d4 8900 	ldrd	r8, r9, [r4]
 800aa96:	4650      	mov	r0, sl
 800aa98:	4642      	mov	r2, r8
 800aa9a:	464b      	mov	r3, r9
 800aa9c:	4659      	mov	r1, fp
 800aa9e:	f7f5 fbbf 	bl	8000220 <__aeabi_dsub>
 800aaa2:	463b      	mov	r3, r7
 800aaa4:	4632      	mov	r2, r6
 800aaa6:	f7f5 fbbb 	bl	8000220 <__aeabi_dsub>
 800aaaa:	9b04      	ldr	r3, [sp, #16]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aab2:	f6bf af0e 	bge.w	800a8d2 <__ieee754_rem_pio2+0x7a>
 800aab6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800aaba:	6063      	str	r3, [r4, #4]
 800aabc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aac0:	f8c4 8000 	str.w	r8, [r4]
 800aac4:	60a0      	str	r0, [r4, #8]
 800aac6:	60e3      	str	r3, [r4, #12]
 800aac8:	426d      	negs	r5, r5
 800aaca:	e702      	b.n	800a8d2 <__ieee754_rem_pio2+0x7a>
 800aacc:	a326      	add	r3, pc, #152	@ (adr r3, 800ab68 <__ieee754_rem_pio2+0x310>)
 800aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aad6:	f7f5 fd5b 	bl	8000590 <__aeabi_dmul>
 800aada:	4606      	mov	r6, r0
 800aadc:	460f      	mov	r7, r1
 800aade:	4602      	mov	r2, r0
 800aae0:	460b      	mov	r3, r1
 800aae2:	4640      	mov	r0, r8
 800aae4:	4649      	mov	r1, r9
 800aae6:	f7f5 fb9b 	bl	8000220 <__aeabi_dsub>
 800aaea:	4602      	mov	r2, r0
 800aaec:	460b      	mov	r3, r1
 800aaee:	4682      	mov	sl, r0
 800aaf0:	468b      	mov	fp, r1
 800aaf2:	4640      	mov	r0, r8
 800aaf4:	4649      	mov	r1, r9
 800aaf6:	f7f5 fb93 	bl	8000220 <__aeabi_dsub>
 800aafa:	4632      	mov	r2, r6
 800aafc:	463b      	mov	r3, r7
 800aafe:	f7f5 fb8f 	bl	8000220 <__aeabi_dsub>
 800ab02:	a31b      	add	r3, pc, #108	@ (adr r3, 800ab70 <__ieee754_rem_pio2+0x318>)
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	4606      	mov	r6, r0
 800ab0a:	460f      	mov	r7, r1
 800ab0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab10:	f7f5 fd3e 	bl	8000590 <__aeabi_dmul>
 800ab14:	4632      	mov	r2, r6
 800ab16:	463b      	mov	r3, r7
 800ab18:	f7f5 fb82 	bl	8000220 <__aeabi_dsub>
 800ab1c:	4606      	mov	r6, r0
 800ab1e:	460f      	mov	r7, r1
 800ab20:	e764      	b.n	800a9ec <__ieee754_rem_pio2+0x194>
 800ab22:	4b1b      	ldr	r3, [pc, #108]	@ (800ab90 <__ieee754_rem_pio2+0x338>)
 800ab24:	4598      	cmp	r8, r3
 800ab26:	d935      	bls.n	800ab94 <__ieee754_rem_pio2+0x33c>
 800ab28:	4632      	mov	r2, r6
 800ab2a:	463b      	mov	r3, r7
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	4639      	mov	r1, r7
 800ab30:	f7f5 fb76 	bl	8000220 <__aeabi_dsub>
 800ab34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ab38:	e9c4 0100 	strd	r0, r1, [r4]
 800ab3c:	e69e      	b.n	800a87c <__ieee754_rem_pio2+0x24>
 800ab3e:	bf00      	nop
 800ab40:	54400000 	.word	0x54400000
 800ab44:	3ff921fb 	.word	0x3ff921fb
 800ab48:	1a626331 	.word	0x1a626331
 800ab4c:	3dd0b461 	.word	0x3dd0b461
 800ab50:	1a600000 	.word	0x1a600000
 800ab54:	3dd0b461 	.word	0x3dd0b461
 800ab58:	2e037073 	.word	0x2e037073
 800ab5c:	3ba3198a 	.word	0x3ba3198a
 800ab60:	6dc9c883 	.word	0x6dc9c883
 800ab64:	3fe45f30 	.word	0x3fe45f30
 800ab68:	2e000000 	.word	0x2e000000
 800ab6c:	3ba3198a 	.word	0x3ba3198a
 800ab70:	252049c1 	.word	0x252049c1
 800ab74:	397b839a 	.word	0x397b839a
 800ab78:	3fe921fb 	.word	0x3fe921fb
 800ab7c:	4002d97b 	.word	0x4002d97b
 800ab80:	3ff921fb 	.word	0x3ff921fb
 800ab84:	413921fb 	.word	0x413921fb
 800ab88:	3fe00000 	.word	0x3fe00000
 800ab8c:	0800c2d8 	.word	0x0800c2d8
 800ab90:	7fefffff 	.word	0x7fefffff
 800ab94:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ab98:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ab9c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800aba0:	4630      	mov	r0, r6
 800aba2:	460f      	mov	r7, r1
 800aba4:	f7f5 ff8e 	bl	8000ac4 <__aeabi_d2iz>
 800aba8:	f7f5 fc88 	bl	80004bc <__aeabi_i2d>
 800abac:	4602      	mov	r2, r0
 800abae:	460b      	mov	r3, r1
 800abb0:	4630      	mov	r0, r6
 800abb2:	4639      	mov	r1, r7
 800abb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800abb8:	f7f5 fb32 	bl	8000220 <__aeabi_dsub>
 800abbc:	4b22      	ldr	r3, [pc, #136]	@ (800ac48 <__ieee754_rem_pio2+0x3f0>)
 800abbe:	2200      	movs	r2, #0
 800abc0:	f7f5 fce6 	bl	8000590 <__aeabi_dmul>
 800abc4:	460f      	mov	r7, r1
 800abc6:	4606      	mov	r6, r0
 800abc8:	f7f5 ff7c 	bl	8000ac4 <__aeabi_d2iz>
 800abcc:	f7f5 fc76 	bl	80004bc <__aeabi_i2d>
 800abd0:	4602      	mov	r2, r0
 800abd2:	460b      	mov	r3, r1
 800abd4:	4630      	mov	r0, r6
 800abd6:	4639      	mov	r1, r7
 800abd8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800abdc:	f7f5 fb20 	bl	8000220 <__aeabi_dsub>
 800abe0:	4b19      	ldr	r3, [pc, #100]	@ (800ac48 <__ieee754_rem_pio2+0x3f0>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	f7f5 fcd4 	bl	8000590 <__aeabi_dmul>
 800abe8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800abec:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800abf0:	f04f 0803 	mov.w	r8, #3
 800abf4:	2600      	movs	r6, #0
 800abf6:	2700      	movs	r7, #0
 800abf8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800abfc:	4632      	mov	r2, r6
 800abfe:	463b      	mov	r3, r7
 800ac00:	46c2      	mov	sl, r8
 800ac02:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ac06:	f7f5 ff2b 	bl	8000a60 <__aeabi_dcmpeq>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	d1f4      	bne.n	800abf8 <__ieee754_rem_pio2+0x3a0>
 800ac0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ac4c <__ieee754_rem_pio2+0x3f4>)
 800ac10:	9301      	str	r3, [sp, #4]
 800ac12:	2302      	movs	r3, #2
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	462a      	mov	r2, r5
 800ac18:	4653      	mov	r3, sl
 800ac1a:	4621      	mov	r1, r4
 800ac1c:	a806      	add	r0, sp, #24
 800ac1e:	f000 f817 	bl	800ac50 <__kernel_rem_pio2>
 800ac22:	9b04      	ldr	r3, [sp, #16]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	4605      	mov	r5, r0
 800ac28:	f6bf ae53 	bge.w	800a8d2 <__ieee754_rem_pio2+0x7a>
 800ac2c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ac30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac34:	e9c4 2300 	strd	r2, r3, [r4]
 800ac38:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ac3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac40:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ac44:	e740      	b.n	800aac8 <__ieee754_rem_pio2+0x270>
 800ac46:	bf00      	nop
 800ac48:	41700000 	.word	0x41700000
 800ac4c:	0800c358 	.word	0x0800c358

0800ac50 <__kernel_rem_pio2>:
 800ac50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac54:	ed2d 8b02 	vpush	{d8}
 800ac58:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ac5c:	f112 0f14 	cmn.w	r2, #20
 800ac60:	9306      	str	r3, [sp, #24]
 800ac62:	9104      	str	r1, [sp, #16]
 800ac64:	4bbe      	ldr	r3, [pc, #760]	@ (800af60 <__kernel_rem_pio2+0x310>)
 800ac66:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800ac68:	9008      	str	r0, [sp, #32]
 800ac6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac6e:	9300      	str	r3, [sp, #0]
 800ac70:	9b06      	ldr	r3, [sp, #24]
 800ac72:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ac76:	bfa8      	it	ge
 800ac78:	1ed4      	subge	r4, r2, #3
 800ac7a:	9305      	str	r3, [sp, #20]
 800ac7c:	bfb2      	itee	lt
 800ac7e:	2400      	movlt	r4, #0
 800ac80:	2318      	movge	r3, #24
 800ac82:	fb94 f4f3 	sdivge	r4, r4, r3
 800ac86:	f06f 0317 	mvn.w	r3, #23
 800ac8a:	fb04 3303 	mla	r3, r4, r3, r3
 800ac8e:	eb03 0b02 	add.w	fp, r3, r2
 800ac92:	9b00      	ldr	r3, [sp, #0]
 800ac94:	9a05      	ldr	r2, [sp, #20]
 800ac96:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800af50 <__kernel_rem_pio2+0x300>
 800ac9a:	eb03 0802 	add.w	r8, r3, r2
 800ac9e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800aca0:	1aa7      	subs	r7, r4, r2
 800aca2:	ae20      	add	r6, sp, #128	@ 0x80
 800aca4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800aca8:	2500      	movs	r5, #0
 800acaa:	4545      	cmp	r5, r8
 800acac:	dd13      	ble.n	800acd6 <__kernel_rem_pio2+0x86>
 800acae:	9b06      	ldr	r3, [sp, #24]
 800acb0:	aa20      	add	r2, sp, #128	@ 0x80
 800acb2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800acb6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800acba:	f04f 0800 	mov.w	r8, #0
 800acbe:	9b00      	ldr	r3, [sp, #0]
 800acc0:	4598      	cmp	r8, r3
 800acc2:	dc31      	bgt.n	800ad28 <__kernel_rem_pio2+0xd8>
 800acc4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800af50 <__kernel_rem_pio2+0x300>
 800acc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800accc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800acd0:	462f      	mov	r7, r5
 800acd2:	2600      	movs	r6, #0
 800acd4:	e01b      	b.n	800ad0e <__kernel_rem_pio2+0xbe>
 800acd6:	42ef      	cmn	r7, r5
 800acd8:	d407      	bmi.n	800acea <__kernel_rem_pio2+0x9a>
 800acda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800acde:	f7f5 fbed 	bl	80004bc <__aeabi_i2d>
 800ace2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ace6:	3501      	adds	r5, #1
 800ace8:	e7df      	b.n	800acaa <__kernel_rem_pio2+0x5a>
 800acea:	ec51 0b18 	vmov	r0, r1, d8
 800acee:	e7f8      	b.n	800ace2 <__kernel_rem_pio2+0x92>
 800acf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acf4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800acf8:	f7f5 fc4a 	bl	8000590 <__aeabi_dmul>
 800acfc:	4602      	mov	r2, r0
 800acfe:	460b      	mov	r3, r1
 800ad00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad04:	f7f5 fa8e 	bl	8000224 <__adddf3>
 800ad08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad0c:	3601      	adds	r6, #1
 800ad0e:	9b05      	ldr	r3, [sp, #20]
 800ad10:	429e      	cmp	r6, r3
 800ad12:	f1a7 0708 	sub.w	r7, r7, #8
 800ad16:	ddeb      	ble.n	800acf0 <__kernel_rem_pio2+0xa0>
 800ad18:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad1c:	f108 0801 	add.w	r8, r8, #1
 800ad20:	ecaa 7b02 	vstmia	sl!, {d7}
 800ad24:	3508      	adds	r5, #8
 800ad26:	e7ca      	b.n	800acbe <__kernel_rem_pio2+0x6e>
 800ad28:	9b00      	ldr	r3, [sp, #0]
 800ad2a:	f8dd 8000 	ldr.w	r8, [sp]
 800ad2e:	aa0c      	add	r2, sp, #48	@ 0x30
 800ad30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad34:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ad38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ad3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad3e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800ad42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad44:	ab98      	add	r3, sp, #608	@ 0x260
 800ad46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ad4a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800ad4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad52:	ac0c      	add	r4, sp, #48	@ 0x30
 800ad54:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ad56:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800ad5a:	46a1      	mov	r9, r4
 800ad5c:	46c2      	mov	sl, r8
 800ad5e:	f1ba 0f00 	cmp.w	sl, #0
 800ad62:	f1a5 0508 	sub.w	r5, r5, #8
 800ad66:	dc77      	bgt.n	800ae58 <__kernel_rem_pio2+0x208>
 800ad68:	4658      	mov	r0, fp
 800ad6a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800ad6e:	f000 fac7 	bl	800b300 <scalbn>
 800ad72:	ec57 6b10 	vmov	r6, r7, d0
 800ad76:	2200      	movs	r2, #0
 800ad78:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800ad7c:	4630      	mov	r0, r6
 800ad7e:	4639      	mov	r1, r7
 800ad80:	f7f5 fc06 	bl	8000590 <__aeabi_dmul>
 800ad84:	ec41 0b10 	vmov	d0, r0, r1
 800ad88:	f000 fb3a 	bl	800b400 <floor>
 800ad8c:	4b75      	ldr	r3, [pc, #468]	@ (800af64 <__kernel_rem_pio2+0x314>)
 800ad8e:	ec51 0b10 	vmov	r0, r1, d0
 800ad92:	2200      	movs	r2, #0
 800ad94:	f7f5 fbfc 	bl	8000590 <__aeabi_dmul>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	4630      	mov	r0, r6
 800ad9e:	4639      	mov	r1, r7
 800ada0:	f7f5 fa3e 	bl	8000220 <__aeabi_dsub>
 800ada4:	460f      	mov	r7, r1
 800ada6:	4606      	mov	r6, r0
 800ada8:	f7f5 fe8c 	bl	8000ac4 <__aeabi_d2iz>
 800adac:	9002      	str	r0, [sp, #8]
 800adae:	f7f5 fb85 	bl	80004bc <__aeabi_i2d>
 800adb2:	4602      	mov	r2, r0
 800adb4:	460b      	mov	r3, r1
 800adb6:	4630      	mov	r0, r6
 800adb8:	4639      	mov	r1, r7
 800adba:	f7f5 fa31 	bl	8000220 <__aeabi_dsub>
 800adbe:	f1bb 0f00 	cmp.w	fp, #0
 800adc2:	4606      	mov	r6, r0
 800adc4:	460f      	mov	r7, r1
 800adc6:	dd6c      	ble.n	800aea2 <__kernel_rem_pio2+0x252>
 800adc8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800adcc:	ab0c      	add	r3, sp, #48	@ 0x30
 800adce:	9d02      	ldr	r5, [sp, #8]
 800add0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800add4:	f1cb 0018 	rsb	r0, fp, #24
 800add8:	fa43 f200 	asr.w	r2, r3, r0
 800addc:	4415      	add	r5, r2
 800adde:	4082      	lsls	r2, r0
 800ade0:	1a9b      	subs	r3, r3, r2
 800ade2:	aa0c      	add	r2, sp, #48	@ 0x30
 800ade4:	9502      	str	r5, [sp, #8]
 800ade6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800adea:	f1cb 0217 	rsb	r2, fp, #23
 800adee:	fa43 f902 	asr.w	r9, r3, r2
 800adf2:	f1b9 0f00 	cmp.w	r9, #0
 800adf6:	dd64      	ble.n	800aec2 <__kernel_rem_pio2+0x272>
 800adf8:	9b02      	ldr	r3, [sp, #8]
 800adfa:	2200      	movs	r2, #0
 800adfc:	3301      	adds	r3, #1
 800adfe:	9302      	str	r3, [sp, #8]
 800ae00:	4615      	mov	r5, r2
 800ae02:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800ae06:	4590      	cmp	r8, r2
 800ae08:	f300 80b8 	bgt.w	800af7c <__kernel_rem_pio2+0x32c>
 800ae0c:	f1bb 0f00 	cmp.w	fp, #0
 800ae10:	dd07      	ble.n	800ae22 <__kernel_rem_pio2+0x1d2>
 800ae12:	f1bb 0f01 	cmp.w	fp, #1
 800ae16:	f000 80bf 	beq.w	800af98 <__kernel_rem_pio2+0x348>
 800ae1a:	f1bb 0f02 	cmp.w	fp, #2
 800ae1e:	f000 80c6 	beq.w	800afae <__kernel_rem_pio2+0x35e>
 800ae22:	f1b9 0f02 	cmp.w	r9, #2
 800ae26:	d14c      	bne.n	800aec2 <__kernel_rem_pio2+0x272>
 800ae28:	4632      	mov	r2, r6
 800ae2a:	463b      	mov	r3, r7
 800ae2c:	494e      	ldr	r1, [pc, #312]	@ (800af68 <__kernel_rem_pio2+0x318>)
 800ae2e:	2000      	movs	r0, #0
 800ae30:	f7f5 f9f6 	bl	8000220 <__aeabi_dsub>
 800ae34:	4606      	mov	r6, r0
 800ae36:	460f      	mov	r7, r1
 800ae38:	2d00      	cmp	r5, #0
 800ae3a:	d042      	beq.n	800aec2 <__kernel_rem_pio2+0x272>
 800ae3c:	4658      	mov	r0, fp
 800ae3e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800af58 <__kernel_rem_pio2+0x308>
 800ae42:	f000 fa5d 	bl	800b300 <scalbn>
 800ae46:	4630      	mov	r0, r6
 800ae48:	4639      	mov	r1, r7
 800ae4a:	ec53 2b10 	vmov	r2, r3, d0
 800ae4e:	f7f5 f9e7 	bl	8000220 <__aeabi_dsub>
 800ae52:	4606      	mov	r6, r0
 800ae54:	460f      	mov	r7, r1
 800ae56:	e034      	b.n	800aec2 <__kernel_rem_pio2+0x272>
 800ae58:	4b44      	ldr	r3, [pc, #272]	@ (800af6c <__kernel_rem_pio2+0x31c>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae60:	f7f5 fb96 	bl	8000590 <__aeabi_dmul>
 800ae64:	f7f5 fe2e 	bl	8000ac4 <__aeabi_d2iz>
 800ae68:	f7f5 fb28 	bl	80004bc <__aeabi_i2d>
 800ae6c:	4b40      	ldr	r3, [pc, #256]	@ (800af70 <__kernel_rem_pio2+0x320>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	4606      	mov	r6, r0
 800ae72:	460f      	mov	r7, r1
 800ae74:	f7f5 fb8c 	bl	8000590 <__aeabi_dmul>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae80:	f7f5 f9ce 	bl	8000220 <__aeabi_dsub>
 800ae84:	f7f5 fe1e 	bl	8000ac4 <__aeabi_d2iz>
 800ae88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae8c:	f849 0b04 	str.w	r0, [r9], #4
 800ae90:	4639      	mov	r1, r7
 800ae92:	4630      	mov	r0, r6
 800ae94:	f7f5 f9c6 	bl	8000224 <__adddf3>
 800ae98:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ae9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aea0:	e75d      	b.n	800ad5e <__kernel_rem_pio2+0x10e>
 800aea2:	d107      	bne.n	800aeb4 <__kernel_rem_pio2+0x264>
 800aea4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800aea8:	aa0c      	add	r2, sp, #48	@ 0x30
 800aeaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeae:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800aeb2:	e79e      	b.n	800adf2 <__kernel_rem_pio2+0x1a2>
 800aeb4:	4b2f      	ldr	r3, [pc, #188]	@ (800af74 <__kernel_rem_pio2+0x324>)
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f7f5 fdf0 	bl	8000a9c <__aeabi_dcmpge>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d143      	bne.n	800af48 <__kernel_rem_pio2+0x2f8>
 800aec0:	4681      	mov	r9, r0
 800aec2:	2200      	movs	r2, #0
 800aec4:	2300      	movs	r3, #0
 800aec6:	4630      	mov	r0, r6
 800aec8:	4639      	mov	r1, r7
 800aeca:	f7f5 fdc9 	bl	8000a60 <__aeabi_dcmpeq>
 800aece:	2800      	cmp	r0, #0
 800aed0:	f000 80bf 	beq.w	800b052 <__kernel_rem_pio2+0x402>
 800aed4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800aed8:	2200      	movs	r2, #0
 800aeda:	9900      	ldr	r1, [sp, #0]
 800aedc:	428b      	cmp	r3, r1
 800aede:	da6e      	bge.n	800afbe <__kernel_rem_pio2+0x36e>
 800aee0:	2a00      	cmp	r2, #0
 800aee2:	f000 8089 	beq.w	800aff8 <__kernel_rem_pio2+0x3a8>
 800aee6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800aeea:	ab0c      	add	r3, sp, #48	@ 0x30
 800aeec:	f1ab 0b18 	sub.w	fp, fp, #24
 800aef0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d0f6      	beq.n	800aee6 <__kernel_rem_pio2+0x296>
 800aef8:	4658      	mov	r0, fp
 800aefa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800af58 <__kernel_rem_pio2+0x308>
 800aefe:	f000 f9ff 	bl	800b300 <scalbn>
 800af02:	f108 0301 	add.w	r3, r8, #1
 800af06:	00da      	lsls	r2, r3, #3
 800af08:	9205      	str	r2, [sp, #20]
 800af0a:	ec55 4b10 	vmov	r4, r5, d0
 800af0e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800af10:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800af6c <__kernel_rem_pio2+0x31c>
 800af14:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800af18:	4646      	mov	r6, r8
 800af1a:	f04f 0a00 	mov.w	sl, #0
 800af1e:	2e00      	cmp	r6, #0
 800af20:	f280 80cf 	bge.w	800b0c2 <__kernel_rem_pio2+0x472>
 800af24:	4644      	mov	r4, r8
 800af26:	2c00      	cmp	r4, #0
 800af28:	f2c0 80fd 	blt.w	800b126 <__kernel_rem_pio2+0x4d6>
 800af2c:	4b12      	ldr	r3, [pc, #72]	@ (800af78 <__kernel_rem_pio2+0x328>)
 800af2e:	461f      	mov	r7, r3
 800af30:	ab70      	add	r3, sp, #448	@ 0x1c0
 800af32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af36:	9306      	str	r3, [sp, #24]
 800af38:	f04f 0a00 	mov.w	sl, #0
 800af3c:	f04f 0b00 	mov.w	fp, #0
 800af40:	2600      	movs	r6, #0
 800af42:	eba8 0504 	sub.w	r5, r8, r4
 800af46:	e0e2      	b.n	800b10e <__kernel_rem_pio2+0x4be>
 800af48:	f04f 0902 	mov.w	r9, #2
 800af4c:	e754      	b.n	800adf8 <__kernel_rem_pio2+0x1a8>
 800af4e:	bf00      	nop
	...
 800af5c:	3ff00000 	.word	0x3ff00000
 800af60:	0800c4a0 	.word	0x0800c4a0
 800af64:	40200000 	.word	0x40200000
 800af68:	3ff00000 	.word	0x3ff00000
 800af6c:	3e700000 	.word	0x3e700000
 800af70:	41700000 	.word	0x41700000
 800af74:	3fe00000 	.word	0x3fe00000
 800af78:	0800c460 	.word	0x0800c460
 800af7c:	f854 3b04 	ldr.w	r3, [r4], #4
 800af80:	b945      	cbnz	r5, 800af94 <__kernel_rem_pio2+0x344>
 800af82:	b123      	cbz	r3, 800af8e <__kernel_rem_pio2+0x33e>
 800af84:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800af88:	f844 3c04 	str.w	r3, [r4, #-4]
 800af8c:	2301      	movs	r3, #1
 800af8e:	3201      	adds	r2, #1
 800af90:	461d      	mov	r5, r3
 800af92:	e738      	b.n	800ae06 <__kernel_rem_pio2+0x1b6>
 800af94:	1acb      	subs	r3, r1, r3
 800af96:	e7f7      	b.n	800af88 <__kernel_rem_pio2+0x338>
 800af98:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800af9c:	ab0c      	add	r3, sp, #48	@ 0x30
 800af9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800afa6:	a90c      	add	r1, sp, #48	@ 0x30
 800afa8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800afac:	e739      	b.n	800ae22 <__kernel_rem_pio2+0x1d2>
 800afae:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800afb2:	ab0c      	add	r3, sp, #48	@ 0x30
 800afb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800afbc:	e7f3      	b.n	800afa6 <__kernel_rem_pio2+0x356>
 800afbe:	a90c      	add	r1, sp, #48	@ 0x30
 800afc0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800afc4:	3b01      	subs	r3, #1
 800afc6:	430a      	orrs	r2, r1
 800afc8:	e787      	b.n	800aeda <__kernel_rem_pio2+0x28a>
 800afca:	3401      	adds	r4, #1
 800afcc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800afd0:	2a00      	cmp	r2, #0
 800afd2:	d0fa      	beq.n	800afca <__kernel_rem_pio2+0x37a>
 800afd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afd6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800afda:	eb0d 0503 	add.w	r5, sp, r3
 800afde:	9b06      	ldr	r3, [sp, #24]
 800afe0:	aa20      	add	r2, sp, #128	@ 0x80
 800afe2:	4443      	add	r3, r8
 800afe4:	f108 0701 	add.w	r7, r8, #1
 800afe8:	3d98      	subs	r5, #152	@ 0x98
 800afea:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800afee:	4444      	add	r4, r8
 800aff0:	42bc      	cmp	r4, r7
 800aff2:	da04      	bge.n	800affe <__kernel_rem_pio2+0x3ae>
 800aff4:	46a0      	mov	r8, r4
 800aff6:	e6a2      	b.n	800ad3e <__kernel_rem_pio2+0xee>
 800aff8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800affa:	2401      	movs	r4, #1
 800affc:	e7e6      	b.n	800afcc <__kernel_rem_pio2+0x37c>
 800affe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b000:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b004:	f7f5 fa5a 	bl	80004bc <__aeabi_i2d>
 800b008:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800b2d0 <__kernel_rem_pio2+0x680>
 800b00c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b010:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b014:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b018:	46b2      	mov	sl, r6
 800b01a:	f04f 0800 	mov.w	r8, #0
 800b01e:	9b05      	ldr	r3, [sp, #20]
 800b020:	4598      	cmp	r8, r3
 800b022:	dd05      	ble.n	800b030 <__kernel_rem_pio2+0x3e0>
 800b024:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b028:	3701      	adds	r7, #1
 800b02a:	eca5 7b02 	vstmia	r5!, {d7}
 800b02e:	e7df      	b.n	800aff0 <__kernel_rem_pio2+0x3a0>
 800b030:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b034:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b038:	f7f5 faaa 	bl	8000590 <__aeabi_dmul>
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b044:	f7f5 f8ee 	bl	8000224 <__adddf3>
 800b048:	f108 0801 	add.w	r8, r8, #1
 800b04c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b050:	e7e5      	b.n	800b01e <__kernel_rem_pio2+0x3ce>
 800b052:	f1cb 0000 	rsb	r0, fp, #0
 800b056:	ec47 6b10 	vmov	d0, r6, r7
 800b05a:	f000 f951 	bl	800b300 <scalbn>
 800b05e:	ec55 4b10 	vmov	r4, r5, d0
 800b062:	4b9d      	ldr	r3, [pc, #628]	@ (800b2d8 <__kernel_rem_pio2+0x688>)
 800b064:	2200      	movs	r2, #0
 800b066:	4620      	mov	r0, r4
 800b068:	4629      	mov	r1, r5
 800b06a:	f7f5 fd17 	bl	8000a9c <__aeabi_dcmpge>
 800b06e:	b300      	cbz	r0, 800b0b2 <__kernel_rem_pio2+0x462>
 800b070:	4b9a      	ldr	r3, [pc, #616]	@ (800b2dc <__kernel_rem_pio2+0x68c>)
 800b072:	2200      	movs	r2, #0
 800b074:	4620      	mov	r0, r4
 800b076:	4629      	mov	r1, r5
 800b078:	f7f5 fa8a 	bl	8000590 <__aeabi_dmul>
 800b07c:	f7f5 fd22 	bl	8000ac4 <__aeabi_d2iz>
 800b080:	4606      	mov	r6, r0
 800b082:	f7f5 fa1b 	bl	80004bc <__aeabi_i2d>
 800b086:	4b94      	ldr	r3, [pc, #592]	@ (800b2d8 <__kernel_rem_pio2+0x688>)
 800b088:	2200      	movs	r2, #0
 800b08a:	f7f5 fa81 	bl	8000590 <__aeabi_dmul>
 800b08e:	460b      	mov	r3, r1
 800b090:	4602      	mov	r2, r0
 800b092:	4629      	mov	r1, r5
 800b094:	4620      	mov	r0, r4
 800b096:	f7f5 f8c3 	bl	8000220 <__aeabi_dsub>
 800b09a:	f7f5 fd13 	bl	8000ac4 <__aeabi_d2iz>
 800b09e:	ab0c      	add	r3, sp, #48	@ 0x30
 800b0a0:	f10b 0b18 	add.w	fp, fp, #24
 800b0a4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b0a8:	f108 0801 	add.w	r8, r8, #1
 800b0ac:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800b0b0:	e722      	b.n	800aef8 <__kernel_rem_pio2+0x2a8>
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	f7f5 fd05 	bl	8000ac4 <__aeabi_d2iz>
 800b0ba:	ab0c      	add	r3, sp, #48	@ 0x30
 800b0bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b0c0:	e71a      	b.n	800aef8 <__kernel_rem_pio2+0x2a8>
 800b0c2:	ab0c      	add	r3, sp, #48	@ 0x30
 800b0c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b0c8:	f7f5 f9f8 	bl	80004bc <__aeabi_i2d>
 800b0cc:	4622      	mov	r2, r4
 800b0ce:	462b      	mov	r3, r5
 800b0d0:	f7f5 fa5e 	bl	8000590 <__aeabi_dmul>
 800b0d4:	4652      	mov	r2, sl
 800b0d6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b0da:	465b      	mov	r3, fp
 800b0dc:	4620      	mov	r0, r4
 800b0de:	4629      	mov	r1, r5
 800b0e0:	f7f5 fa56 	bl	8000590 <__aeabi_dmul>
 800b0e4:	3e01      	subs	r6, #1
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	460d      	mov	r5, r1
 800b0ea:	e718      	b.n	800af1e <__kernel_rem_pio2+0x2ce>
 800b0ec:	9906      	ldr	r1, [sp, #24]
 800b0ee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b0f2:	9106      	str	r1, [sp, #24]
 800b0f4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b0f8:	f7f5 fa4a 	bl	8000590 <__aeabi_dmul>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	460b      	mov	r3, r1
 800b100:	4650      	mov	r0, sl
 800b102:	4659      	mov	r1, fp
 800b104:	f7f5 f88e 	bl	8000224 <__adddf3>
 800b108:	3601      	adds	r6, #1
 800b10a:	4682      	mov	sl, r0
 800b10c:	468b      	mov	fp, r1
 800b10e:	9b00      	ldr	r3, [sp, #0]
 800b110:	429e      	cmp	r6, r3
 800b112:	dc01      	bgt.n	800b118 <__kernel_rem_pio2+0x4c8>
 800b114:	42b5      	cmp	r5, r6
 800b116:	dae9      	bge.n	800b0ec <__kernel_rem_pio2+0x49c>
 800b118:	ab48      	add	r3, sp, #288	@ 0x120
 800b11a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b11e:	e9c5 ab00 	strd	sl, fp, [r5]
 800b122:	3c01      	subs	r4, #1
 800b124:	e6ff      	b.n	800af26 <__kernel_rem_pio2+0x2d6>
 800b126:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b128:	2b02      	cmp	r3, #2
 800b12a:	dc0b      	bgt.n	800b144 <__kernel_rem_pio2+0x4f4>
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	dc39      	bgt.n	800b1a4 <__kernel_rem_pio2+0x554>
 800b130:	d05d      	beq.n	800b1ee <__kernel_rem_pio2+0x59e>
 800b132:	9b02      	ldr	r3, [sp, #8]
 800b134:	f003 0007 	and.w	r0, r3, #7
 800b138:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b13c:	ecbd 8b02 	vpop	{d8}
 800b140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b144:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b146:	2b03      	cmp	r3, #3
 800b148:	d1f3      	bne.n	800b132 <__kernel_rem_pio2+0x4e2>
 800b14a:	9b05      	ldr	r3, [sp, #20]
 800b14c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b150:	eb0d 0403 	add.w	r4, sp, r3
 800b154:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b158:	4625      	mov	r5, r4
 800b15a:	46c2      	mov	sl, r8
 800b15c:	f1ba 0f00 	cmp.w	sl, #0
 800b160:	f1a5 0508 	sub.w	r5, r5, #8
 800b164:	dc6b      	bgt.n	800b23e <__kernel_rem_pio2+0x5ee>
 800b166:	4645      	mov	r5, r8
 800b168:	2d01      	cmp	r5, #1
 800b16a:	f1a4 0408 	sub.w	r4, r4, #8
 800b16e:	f300 8087 	bgt.w	800b280 <__kernel_rem_pio2+0x630>
 800b172:	9c05      	ldr	r4, [sp, #20]
 800b174:	ab48      	add	r3, sp, #288	@ 0x120
 800b176:	441c      	add	r4, r3
 800b178:	2000      	movs	r0, #0
 800b17a:	2100      	movs	r1, #0
 800b17c:	f1b8 0f01 	cmp.w	r8, #1
 800b180:	f300 809c 	bgt.w	800b2bc <__kernel_rem_pio2+0x66c>
 800b184:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800b188:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800b18c:	f1b9 0f00 	cmp.w	r9, #0
 800b190:	f040 80a6 	bne.w	800b2e0 <__kernel_rem_pio2+0x690>
 800b194:	9b04      	ldr	r3, [sp, #16]
 800b196:	e9c3 7800 	strd	r7, r8, [r3]
 800b19a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b19e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b1a2:	e7c6      	b.n	800b132 <__kernel_rem_pio2+0x4e2>
 800b1a4:	9d05      	ldr	r5, [sp, #20]
 800b1a6:	ab48      	add	r3, sp, #288	@ 0x120
 800b1a8:	441d      	add	r5, r3
 800b1aa:	4644      	mov	r4, r8
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	2c00      	cmp	r4, #0
 800b1b2:	da35      	bge.n	800b220 <__kernel_rem_pio2+0x5d0>
 800b1b4:	f1b9 0f00 	cmp.w	r9, #0
 800b1b8:	d038      	beq.n	800b22c <__kernel_rem_pio2+0x5dc>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b1c0:	9c04      	ldr	r4, [sp, #16]
 800b1c2:	e9c4 2300 	strd	r2, r3, [r4]
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b1ce:	f7f5 f827 	bl	8000220 <__aeabi_dsub>
 800b1d2:	ad4a      	add	r5, sp, #296	@ 0x128
 800b1d4:	2401      	movs	r4, #1
 800b1d6:	45a0      	cmp	r8, r4
 800b1d8:	da2b      	bge.n	800b232 <__kernel_rem_pio2+0x5e2>
 800b1da:	f1b9 0f00 	cmp.w	r9, #0
 800b1de:	d002      	beq.n	800b1e6 <__kernel_rem_pio2+0x596>
 800b1e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	9b04      	ldr	r3, [sp, #16]
 800b1e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b1ec:	e7a1      	b.n	800b132 <__kernel_rem_pio2+0x4e2>
 800b1ee:	9c05      	ldr	r4, [sp, #20]
 800b1f0:	ab48      	add	r3, sp, #288	@ 0x120
 800b1f2:	441c      	add	r4, r3
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	2100      	movs	r1, #0
 800b1f8:	f1b8 0f00 	cmp.w	r8, #0
 800b1fc:	da09      	bge.n	800b212 <__kernel_rem_pio2+0x5c2>
 800b1fe:	f1b9 0f00 	cmp.w	r9, #0
 800b202:	d002      	beq.n	800b20a <__kernel_rem_pio2+0x5ba>
 800b204:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b208:	4619      	mov	r1, r3
 800b20a:	9b04      	ldr	r3, [sp, #16]
 800b20c:	e9c3 0100 	strd	r0, r1, [r3]
 800b210:	e78f      	b.n	800b132 <__kernel_rem_pio2+0x4e2>
 800b212:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b216:	f7f5 f805 	bl	8000224 <__adddf3>
 800b21a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b21e:	e7eb      	b.n	800b1f8 <__kernel_rem_pio2+0x5a8>
 800b220:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b224:	f7f4 fffe 	bl	8000224 <__adddf3>
 800b228:	3c01      	subs	r4, #1
 800b22a:	e7c1      	b.n	800b1b0 <__kernel_rem_pio2+0x560>
 800b22c:	4602      	mov	r2, r0
 800b22e:	460b      	mov	r3, r1
 800b230:	e7c6      	b.n	800b1c0 <__kernel_rem_pio2+0x570>
 800b232:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b236:	f7f4 fff5 	bl	8000224 <__adddf3>
 800b23a:	3401      	adds	r4, #1
 800b23c:	e7cb      	b.n	800b1d6 <__kernel_rem_pio2+0x586>
 800b23e:	ed95 7b00 	vldr	d7, [r5]
 800b242:	ed8d 7b00 	vstr	d7, [sp]
 800b246:	ed95 7b02 	vldr	d7, [r5, #8]
 800b24a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b24e:	ec53 2b17 	vmov	r2, r3, d7
 800b252:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b256:	f7f4 ffe5 	bl	8000224 <__adddf3>
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
 800b25e:	4606      	mov	r6, r0
 800b260:	460f      	mov	r7, r1
 800b262:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b266:	f7f4 ffdb 	bl	8000220 <__aeabi_dsub>
 800b26a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b26e:	f7f4 ffd9 	bl	8000224 <__adddf3>
 800b272:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b276:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b27a:	e9c5 6700 	strd	r6, r7, [r5]
 800b27e:	e76d      	b.n	800b15c <__kernel_rem_pio2+0x50c>
 800b280:	ed94 7b00 	vldr	d7, [r4]
 800b284:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800b288:	ec51 0b17 	vmov	r0, r1, d7
 800b28c:	4652      	mov	r2, sl
 800b28e:	465b      	mov	r3, fp
 800b290:	ed8d 7b00 	vstr	d7, [sp]
 800b294:	f7f4 ffc6 	bl	8000224 <__adddf3>
 800b298:	4602      	mov	r2, r0
 800b29a:	460b      	mov	r3, r1
 800b29c:	4606      	mov	r6, r0
 800b29e:	460f      	mov	r7, r1
 800b2a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2a4:	f7f4 ffbc 	bl	8000220 <__aeabi_dsub>
 800b2a8:	4652      	mov	r2, sl
 800b2aa:	465b      	mov	r3, fp
 800b2ac:	f7f4 ffba 	bl	8000224 <__adddf3>
 800b2b0:	3d01      	subs	r5, #1
 800b2b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b2b6:	e9c4 6700 	strd	r6, r7, [r4]
 800b2ba:	e755      	b.n	800b168 <__kernel_rem_pio2+0x518>
 800b2bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b2c0:	f7f4 ffb0 	bl	8000224 <__adddf3>
 800b2c4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b2c8:	e758      	b.n	800b17c <__kernel_rem_pio2+0x52c>
 800b2ca:	bf00      	nop
 800b2cc:	f3af 8000 	nop.w
	...
 800b2d8:	41700000 	.word	0x41700000
 800b2dc:	3e700000 	.word	0x3e700000
 800b2e0:	9b04      	ldr	r3, [sp, #16]
 800b2e2:	9a04      	ldr	r2, [sp, #16]
 800b2e4:	601f      	str	r7, [r3, #0]
 800b2e6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b2ea:	605c      	str	r4, [r3, #4]
 800b2ec:	609d      	str	r5, [r3, #8]
 800b2ee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b2f2:	60d3      	str	r3, [r2, #12]
 800b2f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b2f8:	6110      	str	r0, [r2, #16]
 800b2fa:	6153      	str	r3, [r2, #20]
 800b2fc:	e719      	b.n	800b132 <__kernel_rem_pio2+0x4e2>
 800b2fe:	bf00      	nop

0800b300 <scalbn>:
 800b300:	b570      	push	{r4, r5, r6, lr}
 800b302:	ec55 4b10 	vmov	r4, r5, d0
 800b306:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b30a:	4606      	mov	r6, r0
 800b30c:	462b      	mov	r3, r5
 800b30e:	b991      	cbnz	r1, 800b336 <scalbn+0x36>
 800b310:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b314:	4323      	orrs	r3, r4
 800b316:	d03d      	beq.n	800b394 <scalbn+0x94>
 800b318:	4b35      	ldr	r3, [pc, #212]	@ (800b3f0 <scalbn+0xf0>)
 800b31a:	4620      	mov	r0, r4
 800b31c:	4629      	mov	r1, r5
 800b31e:	2200      	movs	r2, #0
 800b320:	f7f5 f936 	bl	8000590 <__aeabi_dmul>
 800b324:	4b33      	ldr	r3, [pc, #204]	@ (800b3f4 <scalbn+0xf4>)
 800b326:	429e      	cmp	r6, r3
 800b328:	4604      	mov	r4, r0
 800b32a:	460d      	mov	r5, r1
 800b32c:	da0f      	bge.n	800b34e <scalbn+0x4e>
 800b32e:	a328      	add	r3, pc, #160	@ (adr r3, 800b3d0 <scalbn+0xd0>)
 800b330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b334:	e01e      	b.n	800b374 <scalbn+0x74>
 800b336:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b33a:	4291      	cmp	r1, r2
 800b33c:	d10b      	bne.n	800b356 <scalbn+0x56>
 800b33e:	4622      	mov	r2, r4
 800b340:	4620      	mov	r0, r4
 800b342:	4629      	mov	r1, r5
 800b344:	f7f4 ff6e 	bl	8000224 <__adddf3>
 800b348:	4604      	mov	r4, r0
 800b34a:	460d      	mov	r5, r1
 800b34c:	e022      	b.n	800b394 <scalbn+0x94>
 800b34e:	460b      	mov	r3, r1
 800b350:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b354:	3936      	subs	r1, #54	@ 0x36
 800b356:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b35a:	4296      	cmp	r6, r2
 800b35c:	dd0d      	ble.n	800b37a <scalbn+0x7a>
 800b35e:	2d00      	cmp	r5, #0
 800b360:	a11d      	add	r1, pc, #116	@ (adr r1, 800b3d8 <scalbn+0xd8>)
 800b362:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b366:	da02      	bge.n	800b36e <scalbn+0x6e>
 800b368:	a11d      	add	r1, pc, #116	@ (adr r1, 800b3e0 <scalbn+0xe0>)
 800b36a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b36e:	a31a      	add	r3, pc, #104	@ (adr r3, 800b3d8 <scalbn+0xd8>)
 800b370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b374:	f7f5 f90c 	bl	8000590 <__aeabi_dmul>
 800b378:	e7e6      	b.n	800b348 <scalbn+0x48>
 800b37a:	1872      	adds	r2, r6, r1
 800b37c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b380:	428a      	cmp	r2, r1
 800b382:	dcec      	bgt.n	800b35e <scalbn+0x5e>
 800b384:	2a00      	cmp	r2, #0
 800b386:	dd08      	ble.n	800b39a <scalbn+0x9a>
 800b388:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b38c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b390:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b394:	ec45 4b10 	vmov	d0, r4, r5
 800b398:	bd70      	pop	{r4, r5, r6, pc}
 800b39a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b39e:	da08      	bge.n	800b3b2 <scalbn+0xb2>
 800b3a0:	2d00      	cmp	r5, #0
 800b3a2:	a10b      	add	r1, pc, #44	@ (adr r1, 800b3d0 <scalbn+0xd0>)
 800b3a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3a8:	dac1      	bge.n	800b32e <scalbn+0x2e>
 800b3aa:	a10f      	add	r1, pc, #60	@ (adr r1, 800b3e8 <scalbn+0xe8>)
 800b3ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3b0:	e7bd      	b.n	800b32e <scalbn+0x2e>
 800b3b2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b3b6:	3236      	adds	r2, #54	@ 0x36
 800b3b8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b3bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b3f8 <scalbn+0xf8>)
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	e7d4      	b.n	800b374 <scalbn+0x74>
 800b3ca:	bf00      	nop
 800b3cc:	f3af 8000 	nop.w
 800b3d0:	c2f8f359 	.word	0xc2f8f359
 800b3d4:	01a56e1f 	.word	0x01a56e1f
 800b3d8:	8800759c 	.word	0x8800759c
 800b3dc:	7e37e43c 	.word	0x7e37e43c
 800b3e0:	8800759c 	.word	0x8800759c
 800b3e4:	fe37e43c 	.word	0xfe37e43c
 800b3e8:	c2f8f359 	.word	0xc2f8f359
 800b3ec:	81a56e1f 	.word	0x81a56e1f
 800b3f0:	43500000 	.word	0x43500000
 800b3f4:	ffff3cb0 	.word	0xffff3cb0
 800b3f8:	3c900000 	.word	0x3c900000
 800b3fc:	00000000 	.word	0x00000000

0800b400 <floor>:
 800b400:	ec51 0b10 	vmov	r0, r1, d0
 800b404:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b40c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b410:	2e13      	cmp	r6, #19
 800b412:	460c      	mov	r4, r1
 800b414:	4605      	mov	r5, r0
 800b416:	4680      	mov	r8, r0
 800b418:	dc34      	bgt.n	800b484 <floor+0x84>
 800b41a:	2e00      	cmp	r6, #0
 800b41c:	da17      	bge.n	800b44e <floor+0x4e>
 800b41e:	a332      	add	r3, pc, #200	@ (adr r3, 800b4e8 <floor+0xe8>)
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	f7f4 fefe 	bl	8000224 <__adddf3>
 800b428:	2200      	movs	r2, #0
 800b42a:	2300      	movs	r3, #0
 800b42c:	f7f5 fb40 	bl	8000ab0 <__aeabi_dcmpgt>
 800b430:	b150      	cbz	r0, 800b448 <floor+0x48>
 800b432:	2c00      	cmp	r4, #0
 800b434:	da55      	bge.n	800b4e2 <floor+0xe2>
 800b436:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b43a:	432c      	orrs	r4, r5
 800b43c:	2500      	movs	r5, #0
 800b43e:	42ac      	cmp	r4, r5
 800b440:	4c2b      	ldr	r4, [pc, #172]	@ (800b4f0 <floor+0xf0>)
 800b442:	bf08      	it	eq
 800b444:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b448:	4621      	mov	r1, r4
 800b44a:	4628      	mov	r0, r5
 800b44c:	e023      	b.n	800b496 <floor+0x96>
 800b44e:	4f29      	ldr	r7, [pc, #164]	@ (800b4f4 <floor+0xf4>)
 800b450:	4137      	asrs	r7, r6
 800b452:	ea01 0307 	and.w	r3, r1, r7
 800b456:	4303      	orrs	r3, r0
 800b458:	d01d      	beq.n	800b496 <floor+0x96>
 800b45a:	a323      	add	r3, pc, #140	@ (adr r3, 800b4e8 <floor+0xe8>)
 800b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b460:	f7f4 fee0 	bl	8000224 <__adddf3>
 800b464:	2200      	movs	r2, #0
 800b466:	2300      	movs	r3, #0
 800b468:	f7f5 fb22 	bl	8000ab0 <__aeabi_dcmpgt>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	d0eb      	beq.n	800b448 <floor+0x48>
 800b470:	2c00      	cmp	r4, #0
 800b472:	bfbe      	ittt	lt
 800b474:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b478:	4133      	asrlt	r3, r6
 800b47a:	18e4      	addlt	r4, r4, r3
 800b47c:	ea24 0407 	bic.w	r4, r4, r7
 800b480:	2500      	movs	r5, #0
 800b482:	e7e1      	b.n	800b448 <floor+0x48>
 800b484:	2e33      	cmp	r6, #51	@ 0x33
 800b486:	dd0a      	ble.n	800b49e <floor+0x9e>
 800b488:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b48c:	d103      	bne.n	800b496 <floor+0x96>
 800b48e:	4602      	mov	r2, r0
 800b490:	460b      	mov	r3, r1
 800b492:	f7f4 fec7 	bl	8000224 <__adddf3>
 800b496:	ec41 0b10 	vmov	d0, r0, r1
 800b49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b49e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b4a2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b4a6:	40df      	lsrs	r7, r3
 800b4a8:	4207      	tst	r7, r0
 800b4aa:	d0f4      	beq.n	800b496 <floor+0x96>
 800b4ac:	a30e      	add	r3, pc, #56	@ (adr r3, 800b4e8 <floor+0xe8>)
 800b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b2:	f7f4 feb7 	bl	8000224 <__adddf3>
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	f7f5 faf9 	bl	8000ab0 <__aeabi_dcmpgt>
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d0c2      	beq.n	800b448 <floor+0x48>
 800b4c2:	2c00      	cmp	r4, #0
 800b4c4:	da0a      	bge.n	800b4dc <floor+0xdc>
 800b4c6:	2e14      	cmp	r6, #20
 800b4c8:	d101      	bne.n	800b4ce <floor+0xce>
 800b4ca:	3401      	adds	r4, #1
 800b4cc:	e006      	b.n	800b4dc <floor+0xdc>
 800b4ce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	40b3      	lsls	r3, r6
 800b4d6:	441d      	add	r5, r3
 800b4d8:	4545      	cmp	r5, r8
 800b4da:	d3f6      	bcc.n	800b4ca <floor+0xca>
 800b4dc:	ea25 0507 	bic.w	r5, r5, r7
 800b4e0:	e7b2      	b.n	800b448 <floor+0x48>
 800b4e2:	2500      	movs	r5, #0
 800b4e4:	462c      	mov	r4, r5
 800b4e6:	e7af      	b.n	800b448 <floor+0x48>
 800b4e8:	8800759c 	.word	0x8800759c
 800b4ec:	7e37e43c 	.word	0x7e37e43c
 800b4f0:	bff00000 	.word	0xbff00000
 800b4f4:	000fffff 	.word	0x000fffff

0800b4f8 <realloc>:
 800b4f8:	4b02      	ldr	r3, [pc, #8]	@ (800b504 <realloc+0xc>)
 800b4fa:	460a      	mov	r2, r1
 800b4fc:	4601      	mov	r1, r0
 800b4fe:	6818      	ldr	r0, [r3, #0]
 800b500:	f000 b802 	b.w	800b508 <_realloc_r>
 800b504:	2000001c 	.word	0x2000001c

0800b508 <_realloc_r>:
 800b508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b50c:	4680      	mov	r8, r0
 800b50e:	4615      	mov	r5, r2
 800b510:	460c      	mov	r4, r1
 800b512:	b921      	cbnz	r1, 800b51e <_realloc_r+0x16>
 800b514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b518:	4611      	mov	r1, r2
 800b51a:	f000 bb11 	b.w	800bb40 <_malloc_r>
 800b51e:	b92a      	cbnz	r2, 800b52c <_realloc_r+0x24>
 800b520:	f000 faa2 	bl	800ba68 <_free_r>
 800b524:	2400      	movs	r4, #0
 800b526:	4620      	mov	r0, r4
 800b528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b52c:	f000 fb94 	bl	800bc58 <_malloc_usable_size_r>
 800b530:	4285      	cmp	r5, r0
 800b532:	4606      	mov	r6, r0
 800b534:	d802      	bhi.n	800b53c <_realloc_r+0x34>
 800b536:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b53a:	d8f4      	bhi.n	800b526 <_realloc_r+0x1e>
 800b53c:	4629      	mov	r1, r5
 800b53e:	4640      	mov	r0, r8
 800b540:	f000 fafe 	bl	800bb40 <_malloc_r>
 800b544:	4607      	mov	r7, r0
 800b546:	2800      	cmp	r0, #0
 800b548:	d0ec      	beq.n	800b524 <_realloc_r+0x1c>
 800b54a:	42b5      	cmp	r5, r6
 800b54c:	462a      	mov	r2, r5
 800b54e:	4621      	mov	r1, r4
 800b550:	bf28      	it	cs
 800b552:	4632      	movcs	r2, r6
 800b554:	f000 fa79 	bl	800ba4a <memcpy>
 800b558:	4621      	mov	r1, r4
 800b55a:	4640      	mov	r0, r8
 800b55c:	f000 fa84 	bl	800ba68 <_free_r>
 800b560:	463c      	mov	r4, r7
 800b562:	e7e0      	b.n	800b526 <_realloc_r+0x1e>

0800b564 <std>:
 800b564:	2300      	movs	r3, #0
 800b566:	b510      	push	{r4, lr}
 800b568:	4604      	mov	r4, r0
 800b56a:	e9c0 3300 	strd	r3, r3, [r0]
 800b56e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b572:	6083      	str	r3, [r0, #8]
 800b574:	8181      	strh	r1, [r0, #12]
 800b576:	6643      	str	r3, [r0, #100]	@ 0x64
 800b578:	81c2      	strh	r2, [r0, #14]
 800b57a:	6183      	str	r3, [r0, #24]
 800b57c:	4619      	mov	r1, r3
 800b57e:	2208      	movs	r2, #8
 800b580:	305c      	adds	r0, #92	@ 0x5c
 800b582:	f000 f9e7 	bl	800b954 <memset>
 800b586:	4b0d      	ldr	r3, [pc, #52]	@ (800b5bc <std+0x58>)
 800b588:	6263      	str	r3, [r4, #36]	@ 0x24
 800b58a:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c0 <std+0x5c>)
 800b58c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b58e:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c4 <std+0x60>)
 800b590:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b592:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c8 <std+0x64>)
 800b594:	6323      	str	r3, [r4, #48]	@ 0x30
 800b596:	4b0d      	ldr	r3, [pc, #52]	@ (800b5cc <std+0x68>)
 800b598:	6224      	str	r4, [r4, #32]
 800b59a:	429c      	cmp	r4, r3
 800b59c:	d006      	beq.n	800b5ac <std+0x48>
 800b59e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b5a2:	4294      	cmp	r4, r2
 800b5a4:	d002      	beq.n	800b5ac <std+0x48>
 800b5a6:	33d0      	adds	r3, #208	@ 0xd0
 800b5a8:	429c      	cmp	r4, r3
 800b5aa:	d105      	bne.n	800b5b8 <std+0x54>
 800b5ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b5b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5b4:	f000 ba46 	b.w	800ba44 <__retarget_lock_init_recursive>
 800b5b8:	bd10      	pop	{r4, pc}
 800b5ba:	bf00      	nop
 800b5bc:	0800b7a5 	.word	0x0800b7a5
 800b5c0:	0800b7c7 	.word	0x0800b7c7
 800b5c4:	0800b7ff 	.word	0x0800b7ff
 800b5c8:	0800b823 	.word	0x0800b823
 800b5cc:	20001ba0 	.word	0x20001ba0

0800b5d0 <stdio_exit_handler>:
 800b5d0:	4a02      	ldr	r2, [pc, #8]	@ (800b5dc <stdio_exit_handler+0xc>)
 800b5d2:	4903      	ldr	r1, [pc, #12]	@ (800b5e0 <stdio_exit_handler+0x10>)
 800b5d4:	4803      	ldr	r0, [pc, #12]	@ (800b5e4 <stdio_exit_handler+0x14>)
 800b5d6:	f000 b869 	b.w	800b6ac <_fwalk_sglue>
 800b5da:	bf00      	nop
 800b5dc:	20000010 	.word	0x20000010
 800b5e0:	0800bd71 	.word	0x0800bd71
 800b5e4:	20000020 	.word	0x20000020

0800b5e8 <cleanup_stdio>:
 800b5e8:	6841      	ldr	r1, [r0, #4]
 800b5ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b61c <cleanup_stdio+0x34>)
 800b5ec:	4299      	cmp	r1, r3
 800b5ee:	b510      	push	{r4, lr}
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	d001      	beq.n	800b5f8 <cleanup_stdio+0x10>
 800b5f4:	f000 fbbc 	bl	800bd70 <_fflush_r>
 800b5f8:	68a1      	ldr	r1, [r4, #8]
 800b5fa:	4b09      	ldr	r3, [pc, #36]	@ (800b620 <cleanup_stdio+0x38>)
 800b5fc:	4299      	cmp	r1, r3
 800b5fe:	d002      	beq.n	800b606 <cleanup_stdio+0x1e>
 800b600:	4620      	mov	r0, r4
 800b602:	f000 fbb5 	bl	800bd70 <_fflush_r>
 800b606:	68e1      	ldr	r1, [r4, #12]
 800b608:	4b06      	ldr	r3, [pc, #24]	@ (800b624 <cleanup_stdio+0x3c>)
 800b60a:	4299      	cmp	r1, r3
 800b60c:	d004      	beq.n	800b618 <cleanup_stdio+0x30>
 800b60e:	4620      	mov	r0, r4
 800b610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b614:	f000 bbac 	b.w	800bd70 <_fflush_r>
 800b618:	bd10      	pop	{r4, pc}
 800b61a:	bf00      	nop
 800b61c:	20001ba0 	.word	0x20001ba0
 800b620:	20001c08 	.word	0x20001c08
 800b624:	20001c70 	.word	0x20001c70

0800b628 <global_stdio_init.part.0>:
 800b628:	b510      	push	{r4, lr}
 800b62a:	4b0b      	ldr	r3, [pc, #44]	@ (800b658 <global_stdio_init.part.0+0x30>)
 800b62c:	4c0b      	ldr	r4, [pc, #44]	@ (800b65c <global_stdio_init.part.0+0x34>)
 800b62e:	4a0c      	ldr	r2, [pc, #48]	@ (800b660 <global_stdio_init.part.0+0x38>)
 800b630:	601a      	str	r2, [r3, #0]
 800b632:	4620      	mov	r0, r4
 800b634:	2200      	movs	r2, #0
 800b636:	2104      	movs	r1, #4
 800b638:	f7ff ff94 	bl	800b564 <std>
 800b63c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b640:	2201      	movs	r2, #1
 800b642:	2109      	movs	r1, #9
 800b644:	f7ff ff8e 	bl	800b564 <std>
 800b648:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b64c:	2202      	movs	r2, #2
 800b64e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b652:	2112      	movs	r1, #18
 800b654:	f7ff bf86 	b.w	800b564 <std>
 800b658:	20001cd8 	.word	0x20001cd8
 800b65c:	20001ba0 	.word	0x20001ba0
 800b660:	0800b5d1 	.word	0x0800b5d1

0800b664 <__sfp_lock_acquire>:
 800b664:	4801      	ldr	r0, [pc, #4]	@ (800b66c <__sfp_lock_acquire+0x8>)
 800b666:	f000 b9ee 	b.w	800ba46 <__retarget_lock_acquire_recursive>
 800b66a:	bf00      	nop
 800b66c:	20001ce1 	.word	0x20001ce1

0800b670 <__sfp_lock_release>:
 800b670:	4801      	ldr	r0, [pc, #4]	@ (800b678 <__sfp_lock_release+0x8>)
 800b672:	f000 b9e9 	b.w	800ba48 <__retarget_lock_release_recursive>
 800b676:	bf00      	nop
 800b678:	20001ce1 	.word	0x20001ce1

0800b67c <__sinit>:
 800b67c:	b510      	push	{r4, lr}
 800b67e:	4604      	mov	r4, r0
 800b680:	f7ff fff0 	bl	800b664 <__sfp_lock_acquire>
 800b684:	6a23      	ldr	r3, [r4, #32]
 800b686:	b11b      	cbz	r3, 800b690 <__sinit+0x14>
 800b688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b68c:	f7ff bff0 	b.w	800b670 <__sfp_lock_release>
 800b690:	4b04      	ldr	r3, [pc, #16]	@ (800b6a4 <__sinit+0x28>)
 800b692:	6223      	str	r3, [r4, #32]
 800b694:	4b04      	ldr	r3, [pc, #16]	@ (800b6a8 <__sinit+0x2c>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1f5      	bne.n	800b688 <__sinit+0xc>
 800b69c:	f7ff ffc4 	bl	800b628 <global_stdio_init.part.0>
 800b6a0:	e7f2      	b.n	800b688 <__sinit+0xc>
 800b6a2:	bf00      	nop
 800b6a4:	0800b5e9 	.word	0x0800b5e9
 800b6a8:	20001cd8 	.word	0x20001cd8

0800b6ac <_fwalk_sglue>:
 800b6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6b0:	4607      	mov	r7, r0
 800b6b2:	4688      	mov	r8, r1
 800b6b4:	4614      	mov	r4, r2
 800b6b6:	2600      	movs	r6, #0
 800b6b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6bc:	f1b9 0901 	subs.w	r9, r9, #1
 800b6c0:	d505      	bpl.n	800b6ce <_fwalk_sglue+0x22>
 800b6c2:	6824      	ldr	r4, [r4, #0]
 800b6c4:	2c00      	cmp	r4, #0
 800b6c6:	d1f7      	bne.n	800b6b8 <_fwalk_sglue+0xc>
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6ce:	89ab      	ldrh	r3, [r5, #12]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d907      	bls.n	800b6e4 <_fwalk_sglue+0x38>
 800b6d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	d003      	beq.n	800b6e4 <_fwalk_sglue+0x38>
 800b6dc:	4629      	mov	r1, r5
 800b6de:	4638      	mov	r0, r7
 800b6e0:	47c0      	blx	r8
 800b6e2:	4306      	orrs	r6, r0
 800b6e4:	3568      	adds	r5, #104	@ 0x68
 800b6e6:	e7e9      	b.n	800b6bc <_fwalk_sglue+0x10>

0800b6e8 <_puts_r>:
 800b6e8:	6a03      	ldr	r3, [r0, #32]
 800b6ea:	b570      	push	{r4, r5, r6, lr}
 800b6ec:	6884      	ldr	r4, [r0, #8]
 800b6ee:	4605      	mov	r5, r0
 800b6f0:	460e      	mov	r6, r1
 800b6f2:	b90b      	cbnz	r3, 800b6f8 <_puts_r+0x10>
 800b6f4:	f7ff ffc2 	bl	800b67c <__sinit>
 800b6f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6fa:	07db      	lsls	r3, r3, #31
 800b6fc:	d405      	bmi.n	800b70a <_puts_r+0x22>
 800b6fe:	89a3      	ldrh	r3, [r4, #12]
 800b700:	0598      	lsls	r0, r3, #22
 800b702:	d402      	bmi.n	800b70a <_puts_r+0x22>
 800b704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b706:	f000 f99e 	bl	800ba46 <__retarget_lock_acquire_recursive>
 800b70a:	89a3      	ldrh	r3, [r4, #12]
 800b70c:	0719      	lsls	r1, r3, #28
 800b70e:	d502      	bpl.n	800b716 <_puts_r+0x2e>
 800b710:	6923      	ldr	r3, [r4, #16]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d135      	bne.n	800b782 <_puts_r+0x9a>
 800b716:	4621      	mov	r1, r4
 800b718:	4628      	mov	r0, r5
 800b71a:	f000 f8c5 	bl	800b8a8 <__swsetup_r>
 800b71e:	b380      	cbz	r0, 800b782 <_puts_r+0x9a>
 800b720:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b724:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b726:	07da      	lsls	r2, r3, #31
 800b728:	d405      	bmi.n	800b736 <_puts_r+0x4e>
 800b72a:	89a3      	ldrh	r3, [r4, #12]
 800b72c:	059b      	lsls	r3, r3, #22
 800b72e:	d402      	bmi.n	800b736 <_puts_r+0x4e>
 800b730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b732:	f000 f989 	bl	800ba48 <__retarget_lock_release_recursive>
 800b736:	4628      	mov	r0, r5
 800b738:	bd70      	pop	{r4, r5, r6, pc}
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	da04      	bge.n	800b748 <_puts_r+0x60>
 800b73e:	69a2      	ldr	r2, [r4, #24]
 800b740:	429a      	cmp	r2, r3
 800b742:	dc17      	bgt.n	800b774 <_puts_r+0x8c>
 800b744:	290a      	cmp	r1, #10
 800b746:	d015      	beq.n	800b774 <_puts_r+0x8c>
 800b748:	6823      	ldr	r3, [r4, #0]
 800b74a:	1c5a      	adds	r2, r3, #1
 800b74c:	6022      	str	r2, [r4, #0]
 800b74e:	7019      	strb	r1, [r3, #0]
 800b750:	68a3      	ldr	r3, [r4, #8]
 800b752:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b756:	3b01      	subs	r3, #1
 800b758:	60a3      	str	r3, [r4, #8]
 800b75a:	2900      	cmp	r1, #0
 800b75c:	d1ed      	bne.n	800b73a <_puts_r+0x52>
 800b75e:	2b00      	cmp	r3, #0
 800b760:	da11      	bge.n	800b786 <_puts_r+0x9e>
 800b762:	4622      	mov	r2, r4
 800b764:	210a      	movs	r1, #10
 800b766:	4628      	mov	r0, r5
 800b768:	f000 f85f 	bl	800b82a <__swbuf_r>
 800b76c:	3001      	adds	r0, #1
 800b76e:	d0d7      	beq.n	800b720 <_puts_r+0x38>
 800b770:	250a      	movs	r5, #10
 800b772:	e7d7      	b.n	800b724 <_puts_r+0x3c>
 800b774:	4622      	mov	r2, r4
 800b776:	4628      	mov	r0, r5
 800b778:	f000 f857 	bl	800b82a <__swbuf_r>
 800b77c:	3001      	adds	r0, #1
 800b77e:	d1e7      	bne.n	800b750 <_puts_r+0x68>
 800b780:	e7ce      	b.n	800b720 <_puts_r+0x38>
 800b782:	3e01      	subs	r6, #1
 800b784:	e7e4      	b.n	800b750 <_puts_r+0x68>
 800b786:	6823      	ldr	r3, [r4, #0]
 800b788:	1c5a      	adds	r2, r3, #1
 800b78a:	6022      	str	r2, [r4, #0]
 800b78c:	220a      	movs	r2, #10
 800b78e:	701a      	strb	r2, [r3, #0]
 800b790:	e7ee      	b.n	800b770 <_puts_r+0x88>
	...

0800b794 <puts>:
 800b794:	4b02      	ldr	r3, [pc, #8]	@ (800b7a0 <puts+0xc>)
 800b796:	4601      	mov	r1, r0
 800b798:	6818      	ldr	r0, [r3, #0]
 800b79a:	f7ff bfa5 	b.w	800b6e8 <_puts_r>
 800b79e:	bf00      	nop
 800b7a0:	2000001c 	.word	0x2000001c

0800b7a4 <__sread>:
 800b7a4:	b510      	push	{r4, lr}
 800b7a6:	460c      	mov	r4, r1
 800b7a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ac:	f000 f8fc 	bl	800b9a8 <_read_r>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	bfab      	itete	ge
 800b7b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b7b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b7b8:	181b      	addge	r3, r3, r0
 800b7ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b7be:	bfac      	ite	ge
 800b7c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b7c2:	81a3      	strhlt	r3, [r4, #12]
 800b7c4:	bd10      	pop	{r4, pc}

0800b7c6 <__swrite>:
 800b7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ca:	461f      	mov	r7, r3
 800b7cc:	898b      	ldrh	r3, [r1, #12]
 800b7ce:	05db      	lsls	r3, r3, #23
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	4616      	mov	r6, r2
 800b7d6:	d505      	bpl.n	800b7e4 <__swrite+0x1e>
 800b7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7dc:	2302      	movs	r3, #2
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f000 f8d0 	bl	800b984 <_lseek_r>
 800b7e4:	89a3      	ldrh	r3, [r4, #12]
 800b7e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7ee:	81a3      	strh	r3, [r4, #12]
 800b7f0:	4632      	mov	r2, r6
 800b7f2:	463b      	mov	r3, r7
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7fa:	f000 b8e7 	b.w	800b9cc <_write_r>

0800b7fe <__sseek>:
 800b7fe:	b510      	push	{r4, lr}
 800b800:	460c      	mov	r4, r1
 800b802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b806:	f000 f8bd 	bl	800b984 <_lseek_r>
 800b80a:	1c43      	adds	r3, r0, #1
 800b80c:	89a3      	ldrh	r3, [r4, #12]
 800b80e:	bf15      	itete	ne
 800b810:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b812:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b816:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b81a:	81a3      	strheq	r3, [r4, #12]
 800b81c:	bf18      	it	ne
 800b81e:	81a3      	strhne	r3, [r4, #12]
 800b820:	bd10      	pop	{r4, pc}

0800b822 <__sclose>:
 800b822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b826:	f000 b89d 	b.w	800b964 <_close_r>

0800b82a <__swbuf_r>:
 800b82a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82c:	460e      	mov	r6, r1
 800b82e:	4614      	mov	r4, r2
 800b830:	4605      	mov	r5, r0
 800b832:	b118      	cbz	r0, 800b83c <__swbuf_r+0x12>
 800b834:	6a03      	ldr	r3, [r0, #32]
 800b836:	b90b      	cbnz	r3, 800b83c <__swbuf_r+0x12>
 800b838:	f7ff ff20 	bl	800b67c <__sinit>
 800b83c:	69a3      	ldr	r3, [r4, #24]
 800b83e:	60a3      	str	r3, [r4, #8]
 800b840:	89a3      	ldrh	r3, [r4, #12]
 800b842:	071a      	lsls	r2, r3, #28
 800b844:	d501      	bpl.n	800b84a <__swbuf_r+0x20>
 800b846:	6923      	ldr	r3, [r4, #16]
 800b848:	b943      	cbnz	r3, 800b85c <__swbuf_r+0x32>
 800b84a:	4621      	mov	r1, r4
 800b84c:	4628      	mov	r0, r5
 800b84e:	f000 f82b 	bl	800b8a8 <__swsetup_r>
 800b852:	b118      	cbz	r0, 800b85c <__swbuf_r+0x32>
 800b854:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b858:	4638      	mov	r0, r7
 800b85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b85c:	6823      	ldr	r3, [r4, #0]
 800b85e:	6922      	ldr	r2, [r4, #16]
 800b860:	1a98      	subs	r0, r3, r2
 800b862:	6963      	ldr	r3, [r4, #20]
 800b864:	b2f6      	uxtb	r6, r6
 800b866:	4283      	cmp	r3, r0
 800b868:	4637      	mov	r7, r6
 800b86a:	dc05      	bgt.n	800b878 <__swbuf_r+0x4e>
 800b86c:	4621      	mov	r1, r4
 800b86e:	4628      	mov	r0, r5
 800b870:	f000 fa7e 	bl	800bd70 <_fflush_r>
 800b874:	2800      	cmp	r0, #0
 800b876:	d1ed      	bne.n	800b854 <__swbuf_r+0x2a>
 800b878:	68a3      	ldr	r3, [r4, #8]
 800b87a:	3b01      	subs	r3, #1
 800b87c:	60a3      	str	r3, [r4, #8]
 800b87e:	6823      	ldr	r3, [r4, #0]
 800b880:	1c5a      	adds	r2, r3, #1
 800b882:	6022      	str	r2, [r4, #0]
 800b884:	701e      	strb	r6, [r3, #0]
 800b886:	6962      	ldr	r2, [r4, #20]
 800b888:	1c43      	adds	r3, r0, #1
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d004      	beq.n	800b898 <__swbuf_r+0x6e>
 800b88e:	89a3      	ldrh	r3, [r4, #12]
 800b890:	07db      	lsls	r3, r3, #31
 800b892:	d5e1      	bpl.n	800b858 <__swbuf_r+0x2e>
 800b894:	2e0a      	cmp	r6, #10
 800b896:	d1df      	bne.n	800b858 <__swbuf_r+0x2e>
 800b898:	4621      	mov	r1, r4
 800b89a:	4628      	mov	r0, r5
 800b89c:	f000 fa68 	bl	800bd70 <_fflush_r>
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	d0d9      	beq.n	800b858 <__swbuf_r+0x2e>
 800b8a4:	e7d6      	b.n	800b854 <__swbuf_r+0x2a>
	...

0800b8a8 <__swsetup_r>:
 800b8a8:	b538      	push	{r3, r4, r5, lr}
 800b8aa:	4b29      	ldr	r3, [pc, #164]	@ (800b950 <__swsetup_r+0xa8>)
 800b8ac:	4605      	mov	r5, r0
 800b8ae:	6818      	ldr	r0, [r3, #0]
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	b118      	cbz	r0, 800b8bc <__swsetup_r+0x14>
 800b8b4:	6a03      	ldr	r3, [r0, #32]
 800b8b6:	b90b      	cbnz	r3, 800b8bc <__swsetup_r+0x14>
 800b8b8:	f7ff fee0 	bl	800b67c <__sinit>
 800b8bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8c0:	0719      	lsls	r1, r3, #28
 800b8c2:	d422      	bmi.n	800b90a <__swsetup_r+0x62>
 800b8c4:	06da      	lsls	r2, r3, #27
 800b8c6:	d407      	bmi.n	800b8d8 <__swsetup_r+0x30>
 800b8c8:	2209      	movs	r2, #9
 800b8ca:	602a      	str	r2, [r5, #0]
 800b8cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8d0:	81a3      	strh	r3, [r4, #12]
 800b8d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8d6:	e033      	b.n	800b940 <__swsetup_r+0x98>
 800b8d8:	0758      	lsls	r0, r3, #29
 800b8da:	d512      	bpl.n	800b902 <__swsetup_r+0x5a>
 800b8dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8de:	b141      	cbz	r1, 800b8f2 <__swsetup_r+0x4a>
 800b8e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8e4:	4299      	cmp	r1, r3
 800b8e6:	d002      	beq.n	800b8ee <__swsetup_r+0x46>
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	f000 f8bd 	bl	800ba68 <_free_r>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8f2:	89a3      	ldrh	r3, [r4, #12]
 800b8f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b8f8:	81a3      	strh	r3, [r4, #12]
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	6063      	str	r3, [r4, #4]
 800b8fe:	6923      	ldr	r3, [r4, #16]
 800b900:	6023      	str	r3, [r4, #0]
 800b902:	89a3      	ldrh	r3, [r4, #12]
 800b904:	f043 0308 	orr.w	r3, r3, #8
 800b908:	81a3      	strh	r3, [r4, #12]
 800b90a:	6923      	ldr	r3, [r4, #16]
 800b90c:	b94b      	cbnz	r3, 800b922 <__swsetup_r+0x7a>
 800b90e:	89a3      	ldrh	r3, [r4, #12]
 800b910:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b918:	d003      	beq.n	800b922 <__swsetup_r+0x7a>
 800b91a:	4621      	mov	r1, r4
 800b91c:	4628      	mov	r0, r5
 800b91e:	f000 fa75 	bl	800be0c <__smakebuf_r>
 800b922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b926:	f013 0201 	ands.w	r2, r3, #1
 800b92a:	d00a      	beq.n	800b942 <__swsetup_r+0x9a>
 800b92c:	2200      	movs	r2, #0
 800b92e:	60a2      	str	r2, [r4, #8]
 800b930:	6962      	ldr	r2, [r4, #20]
 800b932:	4252      	negs	r2, r2
 800b934:	61a2      	str	r2, [r4, #24]
 800b936:	6922      	ldr	r2, [r4, #16]
 800b938:	b942      	cbnz	r2, 800b94c <__swsetup_r+0xa4>
 800b93a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b93e:	d1c5      	bne.n	800b8cc <__swsetup_r+0x24>
 800b940:	bd38      	pop	{r3, r4, r5, pc}
 800b942:	0799      	lsls	r1, r3, #30
 800b944:	bf58      	it	pl
 800b946:	6962      	ldrpl	r2, [r4, #20]
 800b948:	60a2      	str	r2, [r4, #8]
 800b94a:	e7f4      	b.n	800b936 <__swsetup_r+0x8e>
 800b94c:	2000      	movs	r0, #0
 800b94e:	e7f7      	b.n	800b940 <__swsetup_r+0x98>
 800b950:	2000001c 	.word	0x2000001c

0800b954 <memset>:
 800b954:	4402      	add	r2, r0
 800b956:	4603      	mov	r3, r0
 800b958:	4293      	cmp	r3, r2
 800b95a:	d100      	bne.n	800b95e <memset+0xa>
 800b95c:	4770      	bx	lr
 800b95e:	f803 1b01 	strb.w	r1, [r3], #1
 800b962:	e7f9      	b.n	800b958 <memset+0x4>

0800b964 <_close_r>:
 800b964:	b538      	push	{r3, r4, r5, lr}
 800b966:	4d06      	ldr	r5, [pc, #24]	@ (800b980 <_close_r+0x1c>)
 800b968:	2300      	movs	r3, #0
 800b96a:	4604      	mov	r4, r0
 800b96c:	4608      	mov	r0, r1
 800b96e:	602b      	str	r3, [r5, #0]
 800b970:	f7f9 fd7d 	bl	800546e <_close>
 800b974:	1c43      	adds	r3, r0, #1
 800b976:	d102      	bne.n	800b97e <_close_r+0x1a>
 800b978:	682b      	ldr	r3, [r5, #0]
 800b97a:	b103      	cbz	r3, 800b97e <_close_r+0x1a>
 800b97c:	6023      	str	r3, [r4, #0]
 800b97e:	bd38      	pop	{r3, r4, r5, pc}
 800b980:	20001cdc 	.word	0x20001cdc

0800b984 <_lseek_r>:
 800b984:	b538      	push	{r3, r4, r5, lr}
 800b986:	4d07      	ldr	r5, [pc, #28]	@ (800b9a4 <_lseek_r+0x20>)
 800b988:	4604      	mov	r4, r0
 800b98a:	4608      	mov	r0, r1
 800b98c:	4611      	mov	r1, r2
 800b98e:	2200      	movs	r2, #0
 800b990:	602a      	str	r2, [r5, #0]
 800b992:	461a      	mov	r2, r3
 800b994:	f7f9 fd92 	bl	80054bc <_lseek>
 800b998:	1c43      	adds	r3, r0, #1
 800b99a:	d102      	bne.n	800b9a2 <_lseek_r+0x1e>
 800b99c:	682b      	ldr	r3, [r5, #0]
 800b99e:	b103      	cbz	r3, 800b9a2 <_lseek_r+0x1e>
 800b9a0:	6023      	str	r3, [r4, #0]
 800b9a2:	bd38      	pop	{r3, r4, r5, pc}
 800b9a4:	20001cdc 	.word	0x20001cdc

0800b9a8 <_read_r>:
 800b9a8:	b538      	push	{r3, r4, r5, lr}
 800b9aa:	4d07      	ldr	r5, [pc, #28]	@ (800b9c8 <_read_r+0x20>)
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	4608      	mov	r0, r1
 800b9b0:	4611      	mov	r1, r2
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	602a      	str	r2, [r5, #0]
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	f7f9 fd20 	bl	80053fc <_read>
 800b9bc:	1c43      	adds	r3, r0, #1
 800b9be:	d102      	bne.n	800b9c6 <_read_r+0x1e>
 800b9c0:	682b      	ldr	r3, [r5, #0]
 800b9c2:	b103      	cbz	r3, 800b9c6 <_read_r+0x1e>
 800b9c4:	6023      	str	r3, [r4, #0]
 800b9c6:	bd38      	pop	{r3, r4, r5, pc}
 800b9c8:	20001cdc 	.word	0x20001cdc

0800b9cc <_write_r>:
 800b9cc:	b538      	push	{r3, r4, r5, lr}
 800b9ce:	4d07      	ldr	r5, [pc, #28]	@ (800b9ec <_write_r+0x20>)
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	4608      	mov	r0, r1
 800b9d4:	4611      	mov	r1, r2
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	602a      	str	r2, [r5, #0]
 800b9da:	461a      	mov	r2, r3
 800b9dc:	f7f9 fd2b 	bl	8005436 <_write>
 800b9e0:	1c43      	adds	r3, r0, #1
 800b9e2:	d102      	bne.n	800b9ea <_write_r+0x1e>
 800b9e4:	682b      	ldr	r3, [r5, #0]
 800b9e6:	b103      	cbz	r3, 800b9ea <_write_r+0x1e>
 800b9e8:	6023      	str	r3, [r4, #0]
 800b9ea:	bd38      	pop	{r3, r4, r5, pc}
 800b9ec:	20001cdc 	.word	0x20001cdc

0800b9f0 <__errno>:
 800b9f0:	4b01      	ldr	r3, [pc, #4]	@ (800b9f8 <__errno+0x8>)
 800b9f2:	6818      	ldr	r0, [r3, #0]
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	2000001c 	.word	0x2000001c

0800b9fc <__libc_init_array>:
 800b9fc:	b570      	push	{r4, r5, r6, lr}
 800b9fe:	4d0d      	ldr	r5, [pc, #52]	@ (800ba34 <__libc_init_array+0x38>)
 800ba00:	4c0d      	ldr	r4, [pc, #52]	@ (800ba38 <__libc_init_array+0x3c>)
 800ba02:	1b64      	subs	r4, r4, r5
 800ba04:	10a4      	asrs	r4, r4, #2
 800ba06:	2600      	movs	r6, #0
 800ba08:	42a6      	cmp	r6, r4
 800ba0a:	d109      	bne.n	800ba20 <__libc_init_array+0x24>
 800ba0c:	4d0b      	ldr	r5, [pc, #44]	@ (800ba3c <__libc_init_array+0x40>)
 800ba0e:	4c0c      	ldr	r4, [pc, #48]	@ (800ba40 <__libc_init_array+0x44>)
 800ba10:	f000 fa6a 	bl	800bee8 <_init>
 800ba14:	1b64      	subs	r4, r4, r5
 800ba16:	10a4      	asrs	r4, r4, #2
 800ba18:	2600      	movs	r6, #0
 800ba1a:	42a6      	cmp	r6, r4
 800ba1c:	d105      	bne.n	800ba2a <__libc_init_array+0x2e>
 800ba1e:	bd70      	pop	{r4, r5, r6, pc}
 800ba20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba24:	4798      	blx	r3
 800ba26:	3601      	adds	r6, #1
 800ba28:	e7ee      	b.n	800ba08 <__libc_init_array+0xc>
 800ba2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba2e:	4798      	blx	r3
 800ba30:	3601      	adds	r6, #1
 800ba32:	e7f2      	b.n	800ba1a <__libc_init_array+0x1e>
 800ba34:	0800c4b8 	.word	0x0800c4b8
 800ba38:	0800c4b8 	.word	0x0800c4b8
 800ba3c:	0800c4b8 	.word	0x0800c4b8
 800ba40:	0800c4c0 	.word	0x0800c4c0

0800ba44 <__retarget_lock_init_recursive>:
 800ba44:	4770      	bx	lr

0800ba46 <__retarget_lock_acquire_recursive>:
 800ba46:	4770      	bx	lr

0800ba48 <__retarget_lock_release_recursive>:
 800ba48:	4770      	bx	lr

0800ba4a <memcpy>:
 800ba4a:	440a      	add	r2, r1
 800ba4c:	4291      	cmp	r1, r2
 800ba4e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ba52:	d100      	bne.n	800ba56 <memcpy+0xc>
 800ba54:	4770      	bx	lr
 800ba56:	b510      	push	{r4, lr}
 800ba58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba60:	4291      	cmp	r1, r2
 800ba62:	d1f9      	bne.n	800ba58 <memcpy+0xe>
 800ba64:	bd10      	pop	{r4, pc}
	...

0800ba68 <_free_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4605      	mov	r5, r0
 800ba6c:	2900      	cmp	r1, #0
 800ba6e:	d041      	beq.n	800baf4 <_free_r+0x8c>
 800ba70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba74:	1f0c      	subs	r4, r1, #4
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	bfb8      	it	lt
 800ba7a:	18e4      	addlt	r4, r4, r3
 800ba7c:	f000 f8e0 	bl	800bc40 <__malloc_lock>
 800ba80:	4a1d      	ldr	r2, [pc, #116]	@ (800baf8 <_free_r+0x90>)
 800ba82:	6813      	ldr	r3, [r2, #0]
 800ba84:	b933      	cbnz	r3, 800ba94 <_free_r+0x2c>
 800ba86:	6063      	str	r3, [r4, #4]
 800ba88:	6014      	str	r4, [r2, #0]
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba90:	f000 b8dc 	b.w	800bc4c <__malloc_unlock>
 800ba94:	42a3      	cmp	r3, r4
 800ba96:	d908      	bls.n	800baaa <_free_r+0x42>
 800ba98:	6820      	ldr	r0, [r4, #0]
 800ba9a:	1821      	adds	r1, r4, r0
 800ba9c:	428b      	cmp	r3, r1
 800ba9e:	bf01      	itttt	eq
 800baa0:	6819      	ldreq	r1, [r3, #0]
 800baa2:	685b      	ldreq	r3, [r3, #4]
 800baa4:	1809      	addeq	r1, r1, r0
 800baa6:	6021      	streq	r1, [r4, #0]
 800baa8:	e7ed      	b.n	800ba86 <_free_r+0x1e>
 800baaa:	461a      	mov	r2, r3
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	b10b      	cbz	r3, 800bab4 <_free_r+0x4c>
 800bab0:	42a3      	cmp	r3, r4
 800bab2:	d9fa      	bls.n	800baaa <_free_r+0x42>
 800bab4:	6811      	ldr	r1, [r2, #0]
 800bab6:	1850      	adds	r0, r2, r1
 800bab8:	42a0      	cmp	r0, r4
 800baba:	d10b      	bne.n	800bad4 <_free_r+0x6c>
 800babc:	6820      	ldr	r0, [r4, #0]
 800babe:	4401      	add	r1, r0
 800bac0:	1850      	adds	r0, r2, r1
 800bac2:	4283      	cmp	r3, r0
 800bac4:	6011      	str	r1, [r2, #0]
 800bac6:	d1e0      	bne.n	800ba8a <_free_r+0x22>
 800bac8:	6818      	ldr	r0, [r3, #0]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	6053      	str	r3, [r2, #4]
 800bace:	4408      	add	r0, r1
 800bad0:	6010      	str	r0, [r2, #0]
 800bad2:	e7da      	b.n	800ba8a <_free_r+0x22>
 800bad4:	d902      	bls.n	800badc <_free_r+0x74>
 800bad6:	230c      	movs	r3, #12
 800bad8:	602b      	str	r3, [r5, #0]
 800bada:	e7d6      	b.n	800ba8a <_free_r+0x22>
 800badc:	6820      	ldr	r0, [r4, #0]
 800bade:	1821      	adds	r1, r4, r0
 800bae0:	428b      	cmp	r3, r1
 800bae2:	bf04      	itt	eq
 800bae4:	6819      	ldreq	r1, [r3, #0]
 800bae6:	685b      	ldreq	r3, [r3, #4]
 800bae8:	6063      	str	r3, [r4, #4]
 800baea:	bf04      	itt	eq
 800baec:	1809      	addeq	r1, r1, r0
 800baee:	6021      	streq	r1, [r4, #0]
 800baf0:	6054      	str	r4, [r2, #4]
 800baf2:	e7ca      	b.n	800ba8a <_free_r+0x22>
 800baf4:	bd38      	pop	{r3, r4, r5, pc}
 800baf6:	bf00      	nop
 800baf8:	20001ce8 	.word	0x20001ce8

0800bafc <sbrk_aligned>:
 800bafc:	b570      	push	{r4, r5, r6, lr}
 800bafe:	4e0f      	ldr	r6, [pc, #60]	@ (800bb3c <sbrk_aligned+0x40>)
 800bb00:	460c      	mov	r4, r1
 800bb02:	6831      	ldr	r1, [r6, #0]
 800bb04:	4605      	mov	r5, r0
 800bb06:	b911      	cbnz	r1, 800bb0e <sbrk_aligned+0x12>
 800bb08:	f000 f9de 	bl	800bec8 <_sbrk_r>
 800bb0c:	6030      	str	r0, [r6, #0]
 800bb0e:	4621      	mov	r1, r4
 800bb10:	4628      	mov	r0, r5
 800bb12:	f000 f9d9 	bl	800bec8 <_sbrk_r>
 800bb16:	1c43      	adds	r3, r0, #1
 800bb18:	d103      	bne.n	800bb22 <sbrk_aligned+0x26>
 800bb1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bb1e:	4620      	mov	r0, r4
 800bb20:	bd70      	pop	{r4, r5, r6, pc}
 800bb22:	1cc4      	adds	r4, r0, #3
 800bb24:	f024 0403 	bic.w	r4, r4, #3
 800bb28:	42a0      	cmp	r0, r4
 800bb2a:	d0f8      	beq.n	800bb1e <sbrk_aligned+0x22>
 800bb2c:	1a21      	subs	r1, r4, r0
 800bb2e:	4628      	mov	r0, r5
 800bb30:	f000 f9ca 	bl	800bec8 <_sbrk_r>
 800bb34:	3001      	adds	r0, #1
 800bb36:	d1f2      	bne.n	800bb1e <sbrk_aligned+0x22>
 800bb38:	e7ef      	b.n	800bb1a <sbrk_aligned+0x1e>
 800bb3a:	bf00      	nop
 800bb3c:	20001ce4 	.word	0x20001ce4

0800bb40 <_malloc_r>:
 800bb40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb44:	1ccd      	adds	r5, r1, #3
 800bb46:	f025 0503 	bic.w	r5, r5, #3
 800bb4a:	3508      	adds	r5, #8
 800bb4c:	2d0c      	cmp	r5, #12
 800bb4e:	bf38      	it	cc
 800bb50:	250c      	movcc	r5, #12
 800bb52:	2d00      	cmp	r5, #0
 800bb54:	4606      	mov	r6, r0
 800bb56:	db01      	blt.n	800bb5c <_malloc_r+0x1c>
 800bb58:	42a9      	cmp	r1, r5
 800bb5a:	d904      	bls.n	800bb66 <_malloc_r+0x26>
 800bb5c:	230c      	movs	r3, #12
 800bb5e:	6033      	str	r3, [r6, #0]
 800bb60:	2000      	movs	r0, #0
 800bb62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc3c <_malloc_r+0xfc>
 800bb6a:	f000 f869 	bl	800bc40 <__malloc_lock>
 800bb6e:	f8d8 3000 	ldr.w	r3, [r8]
 800bb72:	461c      	mov	r4, r3
 800bb74:	bb44      	cbnz	r4, 800bbc8 <_malloc_r+0x88>
 800bb76:	4629      	mov	r1, r5
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f7ff ffbf 	bl	800bafc <sbrk_aligned>
 800bb7e:	1c43      	adds	r3, r0, #1
 800bb80:	4604      	mov	r4, r0
 800bb82:	d158      	bne.n	800bc36 <_malloc_r+0xf6>
 800bb84:	f8d8 4000 	ldr.w	r4, [r8]
 800bb88:	4627      	mov	r7, r4
 800bb8a:	2f00      	cmp	r7, #0
 800bb8c:	d143      	bne.n	800bc16 <_malloc_r+0xd6>
 800bb8e:	2c00      	cmp	r4, #0
 800bb90:	d04b      	beq.n	800bc2a <_malloc_r+0xea>
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	4639      	mov	r1, r7
 800bb96:	4630      	mov	r0, r6
 800bb98:	eb04 0903 	add.w	r9, r4, r3
 800bb9c:	f000 f994 	bl	800bec8 <_sbrk_r>
 800bba0:	4581      	cmp	r9, r0
 800bba2:	d142      	bne.n	800bc2a <_malloc_r+0xea>
 800bba4:	6821      	ldr	r1, [r4, #0]
 800bba6:	1a6d      	subs	r5, r5, r1
 800bba8:	4629      	mov	r1, r5
 800bbaa:	4630      	mov	r0, r6
 800bbac:	f7ff ffa6 	bl	800bafc <sbrk_aligned>
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	d03a      	beq.n	800bc2a <_malloc_r+0xea>
 800bbb4:	6823      	ldr	r3, [r4, #0]
 800bbb6:	442b      	add	r3, r5
 800bbb8:	6023      	str	r3, [r4, #0]
 800bbba:	f8d8 3000 	ldr.w	r3, [r8]
 800bbbe:	685a      	ldr	r2, [r3, #4]
 800bbc0:	bb62      	cbnz	r2, 800bc1c <_malloc_r+0xdc>
 800bbc2:	f8c8 7000 	str.w	r7, [r8]
 800bbc6:	e00f      	b.n	800bbe8 <_malloc_r+0xa8>
 800bbc8:	6822      	ldr	r2, [r4, #0]
 800bbca:	1b52      	subs	r2, r2, r5
 800bbcc:	d420      	bmi.n	800bc10 <_malloc_r+0xd0>
 800bbce:	2a0b      	cmp	r2, #11
 800bbd0:	d917      	bls.n	800bc02 <_malloc_r+0xc2>
 800bbd2:	1961      	adds	r1, r4, r5
 800bbd4:	42a3      	cmp	r3, r4
 800bbd6:	6025      	str	r5, [r4, #0]
 800bbd8:	bf18      	it	ne
 800bbda:	6059      	strne	r1, [r3, #4]
 800bbdc:	6863      	ldr	r3, [r4, #4]
 800bbde:	bf08      	it	eq
 800bbe0:	f8c8 1000 	streq.w	r1, [r8]
 800bbe4:	5162      	str	r2, [r4, r5]
 800bbe6:	604b      	str	r3, [r1, #4]
 800bbe8:	4630      	mov	r0, r6
 800bbea:	f000 f82f 	bl	800bc4c <__malloc_unlock>
 800bbee:	f104 000b 	add.w	r0, r4, #11
 800bbf2:	1d23      	adds	r3, r4, #4
 800bbf4:	f020 0007 	bic.w	r0, r0, #7
 800bbf8:	1ac2      	subs	r2, r0, r3
 800bbfa:	bf1c      	itt	ne
 800bbfc:	1a1b      	subne	r3, r3, r0
 800bbfe:	50a3      	strne	r3, [r4, r2]
 800bc00:	e7af      	b.n	800bb62 <_malloc_r+0x22>
 800bc02:	6862      	ldr	r2, [r4, #4]
 800bc04:	42a3      	cmp	r3, r4
 800bc06:	bf0c      	ite	eq
 800bc08:	f8c8 2000 	streq.w	r2, [r8]
 800bc0c:	605a      	strne	r2, [r3, #4]
 800bc0e:	e7eb      	b.n	800bbe8 <_malloc_r+0xa8>
 800bc10:	4623      	mov	r3, r4
 800bc12:	6864      	ldr	r4, [r4, #4]
 800bc14:	e7ae      	b.n	800bb74 <_malloc_r+0x34>
 800bc16:	463c      	mov	r4, r7
 800bc18:	687f      	ldr	r7, [r7, #4]
 800bc1a:	e7b6      	b.n	800bb8a <_malloc_r+0x4a>
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	42a3      	cmp	r3, r4
 800bc22:	d1fb      	bne.n	800bc1c <_malloc_r+0xdc>
 800bc24:	2300      	movs	r3, #0
 800bc26:	6053      	str	r3, [r2, #4]
 800bc28:	e7de      	b.n	800bbe8 <_malloc_r+0xa8>
 800bc2a:	230c      	movs	r3, #12
 800bc2c:	6033      	str	r3, [r6, #0]
 800bc2e:	4630      	mov	r0, r6
 800bc30:	f000 f80c 	bl	800bc4c <__malloc_unlock>
 800bc34:	e794      	b.n	800bb60 <_malloc_r+0x20>
 800bc36:	6005      	str	r5, [r0, #0]
 800bc38:	e7d6      	b.n	800bbe8 <_malloc_r+0xa8>
 800bc3a:	bf00      	nop
 800bc3c:	20001ce8 	.word	0x20001ce8

0800bc40 <__malloc_lock>:
 800bc40:	4801      	ldr	r0, [pc, #4]	@ (800bc48 <__malloc_lock+0x8>)
 800bc42:	f7ff bf00 	b.w	800ba46 <__retarget_lock_acquire_recursive>
 800bc46:	bf00      	nop
 800bc48:	20001ce0 	.word	0x20001ce0

0800bc4c <__malloc_unlock>:
 800bc4c:	4801      	ldr	r0, [pc, #4]	@ (800bc54 <__malloc_unlock+0x8>)
 800bc4e:	f7ff befb 	b.w	800ba48 <__retarget_lock_release_recursive>
 800bc52:	bf00      	nop
 800bc54:	20001ce0 	.word	0x20001ce0

0800bc58 <_malloc_usable_size_r>:
 800bc58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc5c:	1f18      	subs	r0, r3, #4
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	bfbc      	itt	lt
 800bc62:	580b      	ldrlt	r3, [r1, r0]
 800bc64:	18c0      	addlt	r0, r0, r3
 800bc66:	4770      	bx	lr

0800bc68 <__sflush_r>:
 800bc68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc70:	0716      	lsls	r6, r2, #28
 800bc72:	4605      	mov	r5, r0
 800bc74:	460c      	mov	r4, r1
 800bc76:	d454      	bmi.n	800bd22 <__sflush_r+0xba>
 800bc78:	684b      	ldr	r3, [r1, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	dc02      	bgt.n	800bc84 <__sflush_r+0x1c>
 800bc7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	dd48      	ble.n	800bd16 <__sflush_r+0xae>
 800bc84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc86:	2e00      	cmp	r6, #0
 800bc88:	d045      	beq.n	800bd16 <__sflush_r+0xae>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc90:	682f      	ldr	r7, [r5, #0]
 800bc92:	6a21      	ldr	r1, [r4, #32]
 800bc94:	602b      	str	r3, [r5, #0]
 800bc96:	d030      	beq.n	800bcfa <__sflush_r+0x92>
 800bc98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc9a:	89a3      	ldrh	r3, [r4, #12]
 800bc9c:	0759      	lsls	r1, r3, #29
 800bc9e:	d505      	bpl.n	800bcac <__sflush_r+0x44>
 800bca0:	6863      	ldr	r3, [r4, #4]
 800bca2:	1ad2      	subs	r2, r2, r3
 800bca4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bca6:	b10b      	cbz	r3, 800bcac <__sflush_r+0x44>
 800bca8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcaa:	1ad2      	subs	r2, r2, r3
 800bcac:	2300      	movs	r3, #0
 800bcae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcb0:	6a21      	ldr	r1, [r4, #32]
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	47b0      	blx	r6
 800bcb6:	1c43      	adds	r3, r0, #1
 800bcb8:	89a3      	ldrh	r3, [r4, #12]
 800bcba:	d106      	bne.n	800bcca <__sflush_r+0x62>
 800bcbc:	6829      	ldr	r1, [r5, #0]
 800bcbe:	291d      	cmp	r1, #29
 800bcc0:	d82b      	bhi.n	800bd1a <__sflush_r+0xb2>
 800bcc2:	4a2a      	ldr	r2, [pc, #168]	@ (800bd6c <__sflush_r+0x104>)
 800bcc4:	410a      	asrs	r2, r1
 800bcc6:	07d6      	lsls	r6, r2, #31
 800bcc8:	d427      	bmi.n	800bd1a <__sflush_r+0xb2>
 800bcca:	2200      	movs	r2, #0
 800bccc:	6062      	str	r2, [r4, #4]
 800bcce:	04d9      	lsls	r1, r3, #19
 800bcd0:	6922      	ldr	r2, [r4, #16]
 800bcd2:	6022      	str	r2, [r4, #0]
 800bcd4:	d504      	bpl.n	800bce0 <__sflush_r+0x78>
 800bcd6:	1c42      	adds	r2, r0, #1
 800bcd8:	d101      	bne.n	800bcde <__sflush_r+0x76>
 800bcda:	682b      	ldr	r3, [r5, #0]
 800bcdc:	b903      	cbnz	r3, 800bce0 <__sflush_r+0x78>
 800bcde:	6560      	str	r0, [r4, #84]	@ 0x54
 800bce0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bce2:	602f      	str	r7, [r5, #0]
 800bce4:	b1b9      	cbz	r1, 800bd16 <__sflush_r+0xae>
 800bce6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcea:	4299      	cmp	r1, r3
 800bcec:	d002      	beq.n	800bcf4 <__sflush_r+0x8c>
 800bcee:	4628      	mov	r0, r5
 800bcf0:	f7ff feba 	bl	800ba68 <_free_r>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcf8:	e00d      	b.n	800bd16 <__sflush_r+0xae>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	47b0      	blx	r6
 800bd00:	4602      	mov	r2, r0
 800bd02:	1c50      	adds	r0, r2, #1
 800bd04:	d1c9      	bne.n	800bc9a <__sflush_r+0x32>
 800bd06:	682b      	ldr	r3, [r5, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d0c6      	beq.n	800bc9a <__sflush_r+0x32>
 800bd0c:	2b1d      	cmp	r3, #29
 800bd0e:	d001      	beq.n	800bd14 <__sflush_r+0xac>
 800bd10:	2b16      	cmp	r3, #22
 800bd12:	d11e      	bne.n	800bd52 <__sflush_r+0xea>
 800bd14:	602f      	str	r7, [r5, #0]
 800bd16:	2000      	movs	r0, #0
 800bd18:	e022      	b.n	800bd60 <__sflush_r+0xf8>
 800bd1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd1e:	b21b      	sxth	r3, r3
 800bd20:	e01b      	b.n	800bd5a <__sflush_r+0xf2>
 800bd22:	690f      	ldr	r7, [r1, #16]
 800bd24:	2f00      	cmp	r7, #0
 800bd26:	d0f6      	beq.n	800bd16 <__sflush_r+0xae>
 800bd28:	0793      	lsls	r3, r2, #30
 800bd2a:	680e      	ldr	r6, [r1, #0]
 800bd2c:	bf08      	it	eq
 800bd2e:	694b      	ldreq	r3, [r1, #20]
 800bd30:	600f      	str	r7, [r1, #0]
 800bd32:	bf18      	it	ne
 800bd34:	2300      	movne	r3, #0
 800bd36:	eba6 0807 	sub.w	r8, r6, r7
 800bd3a:	608b      	str	r3, [r1, #8]
 800bd3c:	f1b8 0f00 	cmp.w	r8, #0
 800bd40:	dde9      	ble.n	800bd16 <__sflush_r+0xae>
 800bd42:	6a21      	ldr	r1, [r4, #32]
 800bd44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd46:	4643      	mov	r3, r8
 800bd48:	463a      	mov	r2, r7
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	47b0      	blx	r6
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	dc08      	bgt.n	800bd64 <__sflush_r+0xfc>
 800bd52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd5a:	81a3      	strh	r3, [r4, #12]
 800bd5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd64:	4407      	add	r7, r0
 800bd66:	eba8 0800 	sub.w	r8, r8, r0
 800bd6a:	e7e7      	b.n	800bd3c <__sflush_r+0xd4>
 800bd6c:	dfbffffe 	.word	0xdfbffffe

0800bd70 <_fflush_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	690b      	ldr	r3, [r1, #16]
 800bd74:	4605      	mov	r5, r0
 800bd76:	460c      	mov	r4, r1
 800bd78:	b913      	cbnz	r3, 800bd80 <_fflush_r+0x10>
 800bd7a:	2500      	movs	r5, #0
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	b118      	cbz	r0, 800bd8a <_fflush_r+0x1a>
 800bd82:	6a03      	ldr	r3, [r0, #32]
 800bd84:	b90b      	cbnz	r3, 800bd8a <_fflush_r+0x1a>
 800bd86:	f7ff fc79 	bl	800b67c <__sinit>
 800bd8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d0f3      	beq.n	800bd7a <_fflush_r+0xa>
 800bd92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd94:	07d0      	lsls	r0, r2, #31
 800bd96:	d404      	bmi.n	800bda2 <_fflush_r+0x32>
 800bd98:	0599      	lsls	r1, r3, #22
 800bd9a:	d402      	bmi.n	800bda2 <_fflush_r+0x32>
 800bd9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd9e:	f7ff fe52 	bl	800ba46 <__retarget_lock_acquire_recursive>
 800bda2:	4628      	mov	r0, r5
 800bda4:	4621      	mov	r1, r4
 800bda6:	f7ff ff5f 	bl	800bc68 <__sflush_r>
 800bdaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdac:	07da      	lsls	r2, r3, #31
 800bdae:	4605      	mov	r5, r0
 800bdb0:	d4e4      	bmi.n	800bd7c <_fflush_r+0xc>
 800bdb2:	89a3      	ldrh	r3, [r4, #12]
 800bdb4:	059b      	lsls	r3, r3, #22
 800bdb6:	d4e1      	bmi.n	800bd7c <_fflush_r+0xc>
 800bdb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdba:	f7ff fe45 	bl	800ba48 <__retarget_lock_release_recursive>
 800bdbe:	e7dd      	b.n	800bd7c <_fflush_r+0xc>

0800bdc0 <__swhatbuf_r>:
 800bdc0:	b570      	push	{r4, r5, r6, lr}
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc8:	2900      	cmp	r1, #0
 800bdca:	b096      	sub	sp, #88	@ 0x58
 800bdcc:	4615      	mov	r5, r2
 800bdce:	461e      	mov	r6, r3
 800bdd0:	da0d      	bge.n	800bdee <__swhatbuf_r+0x2e>
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bdd8:	f04f 0100 	mov.w	r1, #0
 800bddc:	bf14      	ite	ne
 800bdde:	2340      	movne	r3, #64	@ 0x40
 800bde0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bde4:	2000      	movs	r0, #0
 800bde6:	6031      	str	r1, [r6, #0]
 800bde8:	602b      	str	r3, [r5, #0]
 800bdea:	b016      	add	sp, #88	@ 0x58
 800bdec:	bd70      	pop	{r4, r5, r6, pc}
 800bdee:	466a      	mov	r2, sp
 800bdf0:	f000 f848 	bl	800be84 <_fstat_r>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	dbec      	blt.n	800bdd2 <__swhatbuf_r+0x12>
 800bdf8:	9901      	ldr	r1, [sp, #4]
 800bdfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bdfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be02:	4259      	negs	r1, r3
 800be04:	4159      	adcs	r1, r3
 800be06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be0a:	e7eb      	b.n	800bde4 <__swhatbuf_r+0x24>

0800be0c <__smakebuf_r>:
 800be0c:	898b      	ldrh	r3, [r1, #12]
 800be0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be10:	079d      	lsls	r5, r3, #30
 800be12:	4606      	mov	r6, r0
 800be14:	460c      	mov	r4, r1
 800be16:	d507      	bpl.n	800be28 <__smakebuf_r+0x1c>
 800be18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be1c:	6023      	str	r3, [r4, #0]
 800be1e:	6123      	str	r3, [r4, #16]
 800be20:	2301      	movs	r3, #1
 800be22:	6163      	str	r3, [r4, #20]
 800be24:	b003      	add	sp, #12
 800be26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be28:	ab01      	add	r3, sp, #4
 800be2a:	466a      	mov	r2, sp
 800be2c:	f7ff ffc8 	bl	800bdc0 <__swhatbuf_r>
 800be30:	9f00      	ldr	r7, [sp, #0]
 800be32:	4605      	mov	r5, r0
 800be34:	4639      	mov	r1, r7
 800be36:	4630      	mov	r0, r6
 800be38:	f7ff fe82 	bl	800bb40 <_malloc_r>
 800be3c:	b948      	cbnz	r0, 800be52 <__smakebuf_r+0x46>
 800be3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be42:	059a      	lsls	r2, r3, #22
 800be44:	d4ee      	bmi.n	800be24 <__smakebuf_r+0x18>
 800be46:	f023 0303 	bic.w	r3, r3, #3
 800be4a:	f043 0302 	orr.w	r3, r3, #2
 800be4e:	81a3      	strh	r3, [r4, #12]
 800be50:	e7e2      	b.n	800be18 <__smakebuf_r+0xc>
 800be52:	89a3      	ldrh	r3, [r4, #12]
 800be54:	6020      	str	r0, [r4, #0]
 800be56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be5a:	81a3      	strh	r3, [r4, #12]
 800be5c:	9b01      	ldr	r3, [sp, #4]
 800be5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be62:	b15b      	cbz	r3, 800be7c <__smakebuf_r+0x70>
 800be64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be68:	4630      	mov	r0, r6
 800be6a:	f000 f81d 	bl	800bea8 <_isatty_r>
 800be6e:	b128      	cbz	r0, 800be7c <__smakebuf_r+0x70>
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	f023 0303 	bic.w	r3, r3, #3
 800be76:	f043 0301 	orr.w	r3, r3, #1
 800be7a:	81a3      	strh	r3, [r4, #12]
 800be7c:	89a3      	ldrh	r3, [r4, #12]
 800be7e:	431d      	orrs	r5, r3
 800be80:	81a5      	strh	r5, [r4, #12]
 800be82:	e7cf      	b.n	800be24 <__smakebuf_r+0x18>

0800be84 <_fstat_r>:
 800be84:	b538      	push	{r3, r4, r5, lr}
 800be86:	4d07      	ldr	r5, [pc, #28]	@ (800bea4 <_fstat_r+0x20>)
 800be88:	2300      	movs	r3, #0
 800be8a:	4604      	mov	r4, r0
 800be8c:	4608      	mov	r0, r1
 800be8e:	4611      	mov	r1, r2
 800be90:	602b      	str	r3, [r5, #0]
 800be92:	f7f9 faf8 	bl	8005486 <_fstat>
 800be96:	1c43      	adds	r3, r0, #1
 800be98:	d102      	bne.n	800bea0 <_fstat_r+0x1c>
 800be9a:	682b      	ldr	r3, [r5, #0]
 800be9c:	b103      	cbz	r3, 800bea0 <_fstat_r+0x1c>
 800be9e:	6023      	str	r3, [r4, #0]
 800bea0:	bd38      	pop	{r3, r4, r5, pc}
 800bea2:	bf00      	nop
 800bea4:	20001cdc 	.word	0x20001cdc

0800bea8 <_isatty_r>:
 800bea8:	b538      	push	{r3, r4, r5, lr}
 800beaa:	4d06      	ldr	r5, [pc, #24]	@ (800bec4 <_isatty_r+0x1c>)
 800beac:	2300      	movs	r3, #0
 800beae:	4604      	mov	r4, r0
 800beb0:	4608      	mov	r0, r1
 800beb2:	602b      	str	r3, [r5, #0]
 800beb4:	f7f9 faf7 	bl	80054a6 <_isatty>
 800beb8:	1c43      	adds	r3, r0, #1
 800beba:	d102      	bne.n	800bec2 <_isatty_r+0x1a>
 800bebc:	682b      	ldr	r3, [r5, #0]
 800bebe:	b103      	cbz	r3, 800bec2 <_isatty_r+0x1a>
 800bec0:	6023      	str	r3, [r4, #0]
 800bec2:	bd38      	pop	{r3, r4, r5, pc}
 800bec4:	20001cdc 	.word	0x20001cdc

0800bec8 <_sbrk_r>:
 800bec8:	b538      	push	{r3, r4, r5, lr}
 800beca:	4d06      	ldr	r5, [pc, #24]	@ (800bee4 <_sbrk_r+0x1c>)
 800becc:	2300      	movs	r3, #0
 800bece:	4604      	mov	r4, r0
 800bed0:	4608      	mov	r0, r1
 800bed2:	602b      	str	r3, [r5, #0]
 800bed4:	f7f9 fb00 	bl	80054d8 <_sbrk>
 800bed8:	1c43      	adds	r3, r0, #1
 800beda:	d102      	bne.n	800bee2 <_sbrk_r+0x1a>
 800bedc:	682b      	ldr	r3, [r5, #0]
 800bede:	b103      	cbz	r3, 800bee2 <_sbrk_r+0x1a>
 800bee0:	6023      	str	r3, [r4, #0]
 800bee2:	bd38      	pop	{r3, r4, r5, pc}
 800bee4:	20001cdc 	.word	0x20001cdc

0800bee8 <_init>:
 800bee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beea:	bf00      	nop
 800beec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beee:	bc08      	pop	{r3}
 800bef0:	469e      	mov	lr, r3
 800bef2:	4770      	bx	lr

0800bef4 <_fini>:
 800bef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef6:	bf00      	nop
 800bef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800befa:	bc08      	pop	{r3}
 800befc:	469e      	mov	lr, r3
 800befe:	4770      	bx	lr
